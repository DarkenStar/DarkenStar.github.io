<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cmake Learning on WITHER</title>
    <link>http://localhost:1313/categories/cmake-learning/</link>
    <description>Recent content in Cmake Learning on WITHER</description>
    <generator>Hugo -- 0.147.7</generator>
    <language>en</language>
    <copyright>2024-2025 WITHER</copyright>
    <lastBuildDate>Sat, 07 Jun 2025 16:41:56 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/cmake-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Simple Cmake Example</title>
      <link>http://localhost:1313/blogs/simple_cmake/</link>
      <pubDate>Fri, 06 Jun 2025 18:32:00 +0800</pubDate>
      <guid>http://localhost:1313/blogs/simple_cmake/</guid>
      <description>A Simple Cmake Example</description>
      <content:encoded><![CDATA[<p>CMake 入门教程：从项目结构到链接库</p>
<ol>
<li>核心理念：源码外构建 (Out-of-Source Builds)</li>
</ol>
<p>在开始之前，最重要的一点是理解 CMake 的核心哲学：源码外构建。这意味着所有由构建过程产生的文件（例如 Makefiles、Visual Studio 项目文件、目标文件 .o、可执行文件 .exe、库文件 .a 或 .so）都应该与你的源代码完全分离开。这样做最大的好处是能保持你的源码目录永远干净整洁。我们将创建一个 build 目录来存放所有这些生成的文件。</p>
<ol start="2">
<li>推荐的项目目录结构 📂</li>
</ol>
<p>一个良好组织的 C++ 项目结构不仅清晰，也让 CMake 的配置工作事半功倍。这是一个推荐的、可扩展的目录结构：my_project/</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── build/                  # 构建目录 (初始为空，所有生成文件都在此)
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── include/                # 存放项目全局头文件
</span></span><span class="line"><span class="cl">│   └── my_app/
</span></span><span class="line"><span class="cl">│       └── my_lib.h
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── src/                    # 存放所有源文件 (.cpp)
</span></span><span class="line"><span class="cl">│   │
</span></span><span class="line"><span class="cl">│   ├── main.cpp            # 主程序入口
</span></span><span class="line"><span class="cl">│   │
</span></span><span class="line"><span class="cl">│   └── my_lib/             # 一个独立的库模块
</span></span><span class="line"><span class="cl">│       ├── CMakeLists.txt  # 这个库自己的 CMake 配置文件
</span></span><span class="line"><span class="cl">│       └── my_lib.cpp
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">└── CMakeLists.txt          # 整个项目的顶层 CMake 配置文件
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>build/: 这个目录用于执行所有构建命令，源码不会被污染。include/: 存放可以被项目内其他部分（或被其他项目）引用的头文件。按模块组织可以避免头文件名冲突。src/: 存放所有 .cpp 源文件。</li>
<li>src/my_lib/: 将项目按功能模块化是一种好习惯。每个模块（比如一个库）可以有自己的 CMakeLists.txt 文件，负责管理自身的编译。</li>
<li>CMakeLists.txt (顶层): 这是整个项目的入口，负责设置全局配置、找到并构建所有子模块，最后生成主程序。</li>
</ul>
<ol start="3">
<li>编写各层级的 CMakeLists.txt 📝我们将采用“自下而上”的方式来编写配置文件，先从底层的库开始，再到顶层的项目。
第 1 步: 库的 CMakeLists.txt (src/my_lib/CMakeLists.txt</li>
</ol>
<p>)这个文件只负责一件事：将 my_lib.cpp 和相关的头文件编译成一个库。# 文件位置: src/my_lib/CMakeLists.txt</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cmake" data-lang="cmake"><span class="line"><span class="cl"><span class="c"># 使用 add_library 命令创建一个库。
</span></span></span><span class="line"><span class="cl"><span class="c"># 语法: add_library(&lt;库名称&gt; [STATIC | SHARED] &lt;源文件...&gt;)
</span></span></span><span class="line"><span class="cl"><span class="c">#
</span></span></span><span class="line"><span class="cl"><span class="c"># &lt;库名称&gt;: 我们称之为 my_lib，这是其他部分链接此库时使用的名字。
</span></span></span><span class="line"><span class="cl"><span class="c"># STATIC:   生成静态链接库 (.a, .lib)。
</span></span></span><span class="line"><span class="cl"><span class="c"># SHARED:   生成动态/共享链接库 (.so, .dll)。
</span></span></span><span class="line"><span class="cl"><span class="c">#           如果不指定，默认是 STATIC。
</span></span></span><span class="line"><span class="cl"><span class="c"># &lt;源文件&gt;:  用于编译这个库的源文件列表。
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">add_library</span><span class="p">(</span><span class="s">my_lib</span> <span class="s">STATIC</span> <span class="s">my_lib.cpp</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 为这个库目标指定它需要包含的头文件目录。
</span></span></span><span class="line"><span class="cl"><span class="c"># 语法: target_include_directories(&lt;目标&gt; &lt;PUBLIC|PRIVATE|INTERFACE&gt; &lt;路径...&gt;)
</span></span></span><span class="line"><span class="cl"><span class="c">#
</span></span></span><span class="line"><span class="cl"><span class="c"># &lt;目标&gt;:    就是我们上面用 add_library 创建的 my_lib。
</span></span></span><span class="line"><span class="cl"><span class="c"># PUBLIC:   表示此头文件路径不仅 my_lib 自己需要，任何链接了 my_lib 的目标也需要。
</span></span></span><span class="line"><span class="cl"><span class="c">#           这是最关键的设置，它实现了依赖的自动传递。
</span></span></span><span class="line"><span class="cl"><span class="c"># PRIVATE:  表示此头文件路径只有 my_lib 内部编译时需要，不会传递给链接它的目标。
</span></span></span><span class="line"><span class="cl"><span class="c"># INTERFACE:表示此头文件路径只有链接它的目标需要，my_lib 自己编译时不需要。
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">target_include_directories</span><span class="p">(</span><span class="s">my_lib</span>
</span></span><span class="line"><span class="cl">  <span class="s">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="c"># ${PROJECT_SOURCE_DIR} 是一个非常有用的内置变量，指向顶层 CMakeLists.txt 所在的目录。
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="c"># 我们将项目的全局 include 目录暴露出去。
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="o">${</span><span class="nv">PROJECT_SOURCE_DIR</span><span class="o">}</span><span class="s">/include</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>add_library()</code> 定义了一个编译目标——一个库。</li>
<li><code>target_include_directories()</code> 为这个目标指定了头文件搜索路径。使用 <code>PUBLIC </code>关键字至关重要使得任何链接到 <code>my_lib</code> 的程序都能自动找到 my_lib.h，无需在链接方再次手动添加头文件路径。</li>
</ul>
<p>第 2 步: 顶层的 CMakeLists.txt 这个文件是整个项目的总指挥，负责设置全局配置、调用子模块，并生成最终的可执行文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cmake" data-lang="cmake"><span class="line"><span class="cl"><span class="c"># 文件位置: my_project/CMakeLists.txt
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 1. 指定 CMake 的最低版本要求。这是每个顶层文件都应该有的第一行。
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">3.10</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 2. 定义项目信息。
</span></span></span><span class="line"><span class="cl"><span class="c"># 语法: project(&lt;项目名称&gt; VERSION &lt;版本号&gt; LANGUAGES &lt;语言&gt;)
</span></span></span><span class="line"><span class="cl"><span class="c"># 这会创建一些有用的变量，比如 PROJECT_NAME, PROJECT_SOURCE_DIR。
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">project</span><span class="p">(</span><span class="s">MyApp</span> <span class="s">VERSION</span> <span class="s">1.0</span> <span class="s">LANGUAGES</span> <span class="s">CXX</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 3. 设置 C++ 标准 (这是现代 CMake 推荐的方式)。
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_STANDARD</span> <span class="s">17</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="s">ON</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_EXTENSIONS</span> <span class="s">OFF</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 4. 打印一条消息，方便调试时查看变量值 (可选)。
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">message</span><span class="p">(</span><span class="s">STATUS</span> <span class="s2">&#34;Project source directory is: ${PROJECT_SOURCE_DIR}&#34;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 5. 添加子目录。
</span></span></span><span class="line"><span class="cl"><span class="c"># 这个命令会告诉 CMake 去处理 src/my_lib 目录下的 CMakeLists.txt 文件。
</span></span></span><span class="line"><span class="cl"><span class="c"># 当执行到这里时，上面定义的 my_lib 库目标就会被创建出来。
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">src/my_lib</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 6. 添加可执行文件。
</span></span></span><span class="line"><span class="cl"><span class="c"># 语法: add_executable(&lt;可执行文件名&gt; &lt;源文件...&gt;)
</span></span></span><span class="line"><span class="cl"><span class="c"># 我们将主程序命名为 app，它由 src/main.cpp 编译而来。
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">add_executable</span><span class="p">(</span><span class="s">app</span> <span class="s">src/main.cpp</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 7. 链接库！这是将所有部分组合在一起的关键步骤。
</span></span></span><span class="line"><span class="cl"><span class="c"># 语法: target_link_libraries(&lt;目标&gt; &lt;PUBLIC|PRIVATE|INTERFACE&gt; &lt;要链接的库...&gt;)
</span></span></span><span class="line"><span class="cl"><span class="c">#
</span></span></span><span class="line"><span class="cl"><span class="c"># &lt;目标&gt;: 我们要链接的目标，即 app。
</span></span></span><span class="line"><span class="cl"><span class="c"># PRIVATE: 表示 app 的编译需要 my_lib，但这个依赖关系不会继续传递。
</span></span></span><span class="line"><span class="cl"><span class="c">#          对于可执行文件，通常使用 PRIVATE。
</span></span></span><span class="line"><span class="cl"><span class="c"># &lt;要链接的库&gt;: 我们在子目录中定义的库目标 my_lib。
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">target_link_libraries</span><span class="p">(</span><span class="s">app</span> <span class="s">PRIVATE</span> <span class="s">my_lib</span><span class="p">)</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>add_subdirectory() 使得顶层文件保持简洁，只负责“指挥”，具体实现则交给各个子模块。</li>
<li>target_link_libraries() 负责将不同的编译目标（库和可执行文件）链接在一起，形成依赖关系。</li>
</ul>
<ol start="4">
<li>如何构建项目 🚀
现在已经写好了所有的 CMakeLists.txt 文件，可以开始构建了。整个过程都在终端中完成。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 1. 确保你位于项目的根目录 (my_project)</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> path/to/my_project
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 创建并进入我们规划好的 build 目录</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mkdir build
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. 运行 CMake 来生成构建系统。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#39;..&#39; 指向上一级目录，也就是 my_project/ 根目录，CMake 会在那里寻找顶层的 CMakeLists.txt。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -DCMAKE_BUILD_TYPE=Debug 指定了构建类型为 Debug，会包含调试信息。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cmake -DCMAKE_BUILD_TYPE<span class="o">=</span>Debug ..
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># CMake 会扫描你的系统，找到 C++ 编译器，然后根据 CMakeLists.txt 的内容</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 生成特定平台的构建文件（在 Linux/macOS 上是 Makefile，在 Windows 上是 Visual Studio sln 文件）。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 4. 编译项目</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 这个命令会调用底层的构建工具（如 make 或 msbuild）来执行真正的编译和链接工作。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#39;--build .&#39; 是一个平台无关的命令，告诉 CMake 在当前目录执行构建。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cmake --build .
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 或者在 Linux/macOS 上，你可以直接运行:</span>
</span></span><span class="line"><span class="cl"><span class="c1"># make</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 编译完成后，你会在 build 目录（或其子目录）下找到你的可执行文件 `app` 和库文件 `libmy_lib.a`。</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
  </channel>
</rss>
