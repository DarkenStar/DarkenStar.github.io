<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jeremykun MLIR Learning on WITHER</title>
    <link>http://localhost:57770/tags/jeremykun-mlir-learning/</link>
    <description>Recent content in Jeremykun MLIR Learning on WITHER</description>
    <generator>Hugo -- 0.147.7</generator>
    <language>en</language>
    <copyright>2024-2025 WITHER</copyright>
    <lastBuildDate>Sat, 07 Jun 2025 23:40:58 +0800</lastBuildDate>
    <atom:link href="http://localhost:57770/tags/jeremykun-mlir-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MLIR-Ch9 Dialect Conversion</title>
      <link>http://localhost:57770/blogs/courselearning/mlir/mlir-ch9-dialect-conversion/</link>
      <pubDate>Tue, 12 Nov 2024 15:22:23 +0800</pubDate>
      <guid>http://localhost:57770/blogs/courselearning/mlir/mlir-ch9-dialect-conversion/</guid>
      <description>Personal MLIR learning notes 9.</description>
      <content:encoded><![CDATA[<p>MLIR 的主要原则之一是逐步下降，即存在许多级别的 IR 粒度，并且逐步下降 IR 的不同部分，仅在不再对优化有用时丢弃信息。在本文中，将完成其中的第一步：使用所谓的方言转换基础设施将多方言 lowering 为标准MLIR方言的组合。</p>
<h1 id="the-type-obstacle">The Type Obstacle</h1>
<p>如果不是针对类型，方言转换 (lowering) 本质上与普通 pass 相同：编写一些重写模式并将其应用于 IR. 对于每个需要 lowering 的 OP ，通常会有一个重写模式。</p>
<p>类型使这个问题变得更加复杂，我将通过poly的示例来演示这个问题。</p>
<p>poly.add 对两个多项式进行相加并返回结果多项式。我们想 lowering poly。例如，添加到 arith.addi 算术运算的矢量化循环中。但 arith 并不知道 poly.poly 类型的存在。</p>
<p>如果必须使扩展 arith 以了解poly，需要对 arith 进行上游更改。添加 op 的 operands 以允许实现某种接口的类型，例如 integer-like 或 containers of integer-like.</p>
<p>所以，除了 lowering op，还需要 lowering poly.<code> poly&lt;N&gt;</code> 变成张量 <code>&lt;Nxi32&gt;</code>. 这就是类型障碍发挥作用的地方。一旦更改了特定值的类型，例如，在 lowering 生成该值作为输出的 OP 时，那么该值的所有下游用户仍然期望使用旧类型，并且在 lowering 它们之前在技术上是无效的。在每次传递之间，MLIR运行验证器以确保IR有效，因此如果没有一些特殊处理，这意味着需要在一次传递中转换所有类型和 OP ，否则这些验证器将失败。但是用标准重写规则管理所有这些将是困难的：对于每个重写规则，您都必须不断检查参数和结果是否已经转换。</p>
<p>例如在 lowering 一个生成该值作为输出的 OP 时，所有依赖该值的下游用户仍然期望旧的类型，因此在技术上这些下游用户在未被 lowering 之前是无效的。MLIR 在每次转换 (pass) 之间运行验证器以确保中间表示 (IR) 是有效的，因此如果没有特殊处理，这意味着所有类型和 OP 必须在一个转换中全部转换，否则验证器会失败。但是，使用标准的重写规则来管理这一切会很困难：对于每个 OP 重写规则，你需要不断地检查参数和结果是否已经转换。</p>
<p>MLIR 通过一个围绕标准转换的包装器来处理这种情况，这个包装器被称为<a href="https://mlir.llvm.org/docs/DialectConversion/">方言转换框架(dialect conversion framework)</a>. 使用这个框架需要用户继承不同的类来实现普通的重写，设置一些额外的元数据，并以特定的方式 <code>将类型转换与 OP 转换分开</code>，我们稍后会看到具体方式。但从高层次来看，这个框架通过以某种排序顺序 lowering  OP 、同时转换类型，并让 OP 转换器能够访问每个 OP 的原始类型以及在 OP 被框架访问时的进行中的转换类型。每个基于 OP 的重写模式都期望在访问后使该 OP 的类型合法，但不需要担心下游 OP.</p>
<h2 id="modes-of-conversion">Modes of Conversion</h2>
<p>当对一组 OP 进行转换时，有几种不同的转换模式可供选择：</p>
<ul>
<li>Partial Conversion
<ul>
<li>使尽可能多的对目标的操作合法化，但将允许未显式标记为“非法”的预先存在的操作保持未转换。这允许在存在未知操作的情况下部分降低输入。</li>
<li>可以通过 <code>applyPartialConversion</code> 进行部分转换。</li>
</ul>
</li>
<li>Full Conversion
<ul>
<li>使所有输入操作合法化，并且只有当所有操作都正确地合法化到给定的转换目标时才成功。这确保了在转换过程之后只存在已知的操作。</li>
<li>可以通过 applyFullConversion 进行完整转换。</li>
</ul>
</li>
<li>Analysis Conversion
<ul>
<li>如果要应用转换，<code>Analysis Conversion</code> 将分析哪些操作对给定的转换目标是合法的。这是通过执行 &lsquo;Partial&rsquo; Conversion 并记录哪些操作如果成功将被成功转换来完成的。注意，没有 rewrites 或转换实际应用于输入操作。</li>
<li>可以通过 a <code>pplyAnalysisConversion</code> 应用分析转换。</li>
</ul>
</li>
</ul>
<h2 id="conversion-target">Conversion Target</h2>
<p>转换目标是在转换过程中被认为是合法的内容的正式定义。转换框架生成的最终操作必须在converontarget上标记为合法，这样重写才能成功。根据转换模式的不同，现有操作不一定总是合法的。操作和方言可以标记为下列任何规定的合法性行为：</p>
<ul>
<li>Legal: 表明给定操作的每个实例都是合法的，即属性、操作数、类型等的任何组合都是有效的。</li>
<li>Dynamic: 此操作表示给定操作的某些实例是合法的。这允许定义微调约束，例如，<code>arith.addi</code> 仅在操作32位整数时合- Illegal: 此操作表示给定操作的实例不合法。为使转换成功，必须始终转换标记为“非法”的操作。此操作还允许有选择地将特定操作标记为非法，否则将是合法的方言。</li>
</ul>
<p>未明确标记为合法或非法的操作和方言与上述（“未知”操作）分开，并被区别对待，例如，出于上述部分转换的目的。</p>
<p>最后，方言转换框架会跟踪任何未解决的类型冲突。如果在转换结束时仍存在类型冲突，会发生以下两种情况之一。转换框架允许用户可选地实现一个称为类型物化器 (type materializer) 的功能，它会插入新的中间 OP 来解决类型冲突。因此，第一种可能是方言转换框架使用你的类型物化器钩子来修补 IR，转换成功结束。如果这些钩子失败，或者你没有定义任何钩子，那么转换会失败。</p>
<p>这种基础设施的复杂性部分还与上游 MLIR 中一个更困难的 lowering 流水线有关：缓冲区化流水线 (bufferization pipeline). 这个流水线本质上将使用 value semantics 的操作的 IR 转换为使用 pointer semantics 的中间表示。例如，张量类型 (tensor type) 及其相关操作具有 value semantics，这意味着每个操作在语义上都会生成一个全新的张量作为输出，并且所有操作都是 pure 的 (有一些例外情况) 。另一方面， memref 具有 pointer semantics，意味着它更接近于对物理硬件的建模，需要显式的内存分配，并支持对内存位置进行变动的操作。</p>
<p>由于缓冲区化过程复杂，它被拆分为 sub-passes，分别处理与上游 MLIR 各相关方言特定的缓冲区化问题 (参见文档，例如 arith-bufferize、func-bufferize 等) 。每个缓冲区化转换都会产生一些内部无法解决的类型冲突，这些冲突需要自定义的类型物化 (type materializations) 来解决。为了在所有相关方言中处理这些问题，MLIR 团队构建了一个专门的方言，称为缓冲区化方言 (bufferization dialect) ，用来存放中间操作。你会注意到像 to_memref 和 to_tensor 这样的操作，它们扮演了这一角色。然后还有一个最终缓冲区化转换 (finalizing-bufferize pass) ，其作用是清理任何残留的缓冲区化或物化操作。</p>
<h1 id="lowering-poly-with-type-materializations">Lowering Poly with Type Materializations</h1>
<p>跟之前写 Pass tablegen 的时候大同小异，主要是需要定义 dependent dialects. Lowering 必须以这种方式依赖于包含将创建的操作或类型的任何方言，以确保 MLIR 在尝试运行 pass 之前加载这些方言。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// include/Conversion/PolyToStandard/PolyToStandard.td
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifndef LIB_CONVERSION_POLYTOSTANDARD_POLYTOSTANDARD_TD_
</span></span></span><span class="line"><span class="cl"><span class="cp">#define LIB_CONVERSION_POLYTOSTANDARD_POLYTOSTANDARD_TD_
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">include</span> <span class="s">&#34;mlir/Pass/PassBase.td&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">def</span> <span class="nl">PolyToStandard</span> <span class="p">:</span> <span class="n">Pass</span><span class="o">&lt;</span><span class="s">&#34;poly-to-standard&#34;</span><span class="o">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">let</span> <span class="n">summary</span> <span class="o">=</span> <span class="s">&#34;Lower `poly` to standard MLIR dialects.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">let</span> <span class="n">description</span> <span class="o">=</span> <span class="p">[{</span>
</span></span><span class="line"><span class="cl">    <span class="n">This</span> <span class="n">pass</span> <span class="n">lowers</span> <span class="n">the</span> <span class="err">`</span><span class="n">poly</span><span class="err">`</span> <span class="n">dialect</span> <span class="n">to</span> <span class="n">standard</span> <span class="n">MLIR</span><span class="p">,</span> <span class="n">a</span> <span class="n">mixture</span> <span class="n">of</span> <span class="n">affine</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">tensor</span><span class="p">,</span> <span class="n">and</span> <span class="n">arith</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">  <span class="p">}];</span>
</span></span><span class="line"><span class="cl">  <span class="n">let</span> <span class="n">dependentDialects</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;mlir::arith::ArithDialect&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;mlir::tutorial::poly::PolyDialect&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;mlir::tensor::TensorDialect&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#endif  </span><span class="c1">// LIB_CONVERSION_POLYTOSTANDARD_POLYTOSTANDARD_TD_
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>下一步需要定义 ConversionTarget，告诉 MLIR 哪些 OP 需要进行 lowering，可以定义整个需要下降的 dialect 为 illegal，确保在转换完成后没有该 dialect. 这里使用 <code>applyPartialConversion</code> 而不是 <code>applyFullConversion</code> 的原因是报错消息更直观。Partial Conversion 可以看到步骤以及最后无法修补的冲突类型。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// lib/Conversion/PolyToStandard/PolyToStandard.cpp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">PolyToStandard</span> <span class="o">:</span> <span class="n">impl</span><span class="o">::</span><span class="n">PolyToStandardBase</span><span class="o">&lt;</span><span class="n">PolyToStandard</span><span class="o">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">using</span> <span class="n">PolyToStandardBase</span><span class="o">::</span><span class="n">PolyToStandardBase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">runOnOperation</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">MLIRContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">getContext</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="o">*</span><span class="n">module</span> <span class="o">=</span> <span class="n">getOperation</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// TODO: implement pass
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">ConversionTarget</span> <span class="n">target</span><span class="p">(</span><span class="o">*</span><span class="n">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">target</span><span class="p">.</span><span class="n">addIllegalDialect</span><span class="o">&lt;</span><span class="n">PolyDialect</span><span class="o">&gt;</span><span class="p">();</span>  <span class="c1">//  declare an entire dialect as “illegal”
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">RewritePatternSet</span> <span class="n">patterns</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">failed</span><span class="p">(</span><span class="n">applyPartialConversion</span><span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">patterns</span><span class="p">))))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">signalPassFailure</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来需要定义一个 <a href="https://github.com/llvm/llvm-project/blob/11b9ec5f240ebb32013c33b0c2c80cb7f05ba213/mlir/include/mlir/Transforms/DialectConversion.h#L38">TypeConverter</a> 的子类将 poly dialect 下的 type 转换成其他类型. 其中类型转换和 materialization 是分别通过 <code>addConversion</code> 和 <code>addMaterialization</code> 完成的。这里我们将属于 poly.poly 类型的 degreBound 转换成 Tensor.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PolyToStandardTypeConverter</span> <span class="o">:</span> <span class="k">public</span> <span class="n">TypeConverter</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">PolyToStandardTypeConverter</span><span class="p">(</span><span class="n">MLIRContext</span><span class="o">*</span> <span class="n">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">addConversion</span><span class="p">([](</span><span class="n">Type</span> <span class="n">type</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">type</span><span class="p">;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">        <span class="n">addConversion</span><span class="p">([</span><span class="n">ctx</span><span class="p">](</span><span class="n">PolynomialType</span> <span class="n">type</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">degreeBound</span> <span class="o">=</span> <span class="n">type</span><span class="p">.</span><span class="n">getDegreeBound</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">IntegerType</span> <span class="n">elementType</span> <span class="o">=</span> <span class="n">IntegerType</span><span class="o">::</span><span class="n">get</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">ctx</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">IntegerType</span><span class="o">::</span><span class="n">SignednessSemantics</span><span class="o">::</span><span class="n">Signless</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">RankedTensorType</span><span class="o">::</span><span class="n">get</span><span class="p">({</span><span class="n">degreeBound</span><span class="p">},</span> <span class="n">elementType</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来就是要转换 Poly 中的各种 op，需要继承 <a href="https://github.com/llvm/llvm-project/blob/11b9ec5f240ebb32013c33b0c2c80cb7f05ba213/mlir/include/mlir/Transforms/DialectConversion.h#L511">OpConversionPattern</a>，重写里面的 <code>matchAndRewrtite</code> 方法. 以 poly.add 为例，根据父类里的定义，这里 <code>OpAdaptor</code> 即为 <code>AddOp:OpAdaptor</code>，它使用 tablegen 定义的名称作为 op 的参数和方法名称的结果，而不是之前的的getOperand. <code>AddOp</code> 参数包含原始的、未类型转换的操作数和结果。ConversionPatternRewriter类 似于PatternRewriter，但有与方言转换相关的其他方法，例如 convertRegionTypes，用于为嵌套区域的操作应用类型转换。对IR</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">ConvertAdd</span> <span class="o">:</span> <span class="k">public</span> <span class="n">OpConversionPattern</span><span class="o">&lt;</span><span class="n">AddOp</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ConvertAdd</span><span class="p">(</span><span class="n">MLIRContext</span><span class="o">*</span> <span class="n">context</span><span class="p">)</span> <span class="o">:</span> <span class="n">OpConversionPattern</span><span class="o">&lt;</span><span class="n">AddOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">using</span> <span class="n">OpConversionPattern</span><span class="o">::</span><span class="n">OpConversionPattern</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">LogicalResult</span> <span class="nf">matchAndRewrite</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">AddOp</span> <span class="n">op</span><span class="p">,</span> <span class="n">OpAdaptor</span> <span class="n">adaptor</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">ConversionPatternRewriter</span><span class="o">&amp;</span> <span class="n">rewriter</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">addOp</span> <span class="o">=</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">create</span><span class="o">&lt;</span><span class="n">arith</span><span class="o">::</span><span class="n">AddIOp</span><span class="o">&gt;</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">op</span><span class="o">-&gt;</span><span class="n">getLoc</span><span class="p">(),</span> <span class="n">adaptor</span><span class="p">.</span><span class="n">getLhs</span><span class="p">(),</span> <span class="n">adaptor</span><span class="p">.</span><span class="n">getRhs</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">rewriter</span><span class="p">.</span><span class="n">replaceOp</span><span class="p">(</span><span class="n">op</span><span class="p">.</span><span class="n">getOperation</span><span class="p">(),</span> <span class="n">addOp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">success</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面我们需要将 ConvertAdd 添加进 <code>PolyToStandard::runOnOperation</code> 中定义的 RewriterPatternSet 中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">runOnOperation</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">...</span>
</span></span><span class="line"><span class="cl">  <span class="n">RewritePatternSet</span> <span class="n">patterns</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">PolyToStandardTypeConverter</span> <span class="n">typeConverter</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">patterns</span><span class="p">.</span><span class="n">add</span><span class="o">&lt;</span><span class="n">ConvertAdd</span><span class="o">&gt;</span><span class="p">(</span><span class="n">typeConverter</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>MLIR-Ch8 Canonicalizers and Declarative Rewrite Patterns</title>
      <link>http://localhost:57770/blogs/courselearning/mlir/mlir-ch8-canonicalizers-and-declarative-rewrite-patterns/</link>
      <pubDate>Mon, 11 Nov 2024 13:48:23 +0800</pubDate>
      <guid>http://localhost:57770/blogs/courselearning/mlir/mlir-ch8-canonicalizers-and-declarative-rewrite-patterns/</guid>
      <description>Personal MLIR learning notes 8.</description>
      <content:encoded><![CDATA[<h1 id="why-is-canonicalization-needed">Why is Canonicalization Needed?</h1>
<p>规范化器可以用标准的方式编写：在 tablegen 中声明 op 具有规范化器，然后实现生成的 C++函数声明。<a href="https://mlir.llvm.org/docs/Canonicalization/#canonicalizing-with-rewritepatterns">官网例子如下</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">def</span> <span class="nl">MyOp</span> <span class="p">:</span> <span class="p">...</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// I want to define a fully general set of patterns for this op.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">let</span> <span class="n">hasCanonicalizer</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">def</span> <span class="nl">OtherOp</span> <span class="p">:</span> <span class="p">...</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// A single &#34;matchAndRewrite&#34; style RewritePattern implemented as a method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// is good enough for me.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">let</span> <span class="n">hasCanonicalizeMethod</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Canonicalization 模式可以通过如下方式定义</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">MyOp</span><span class="o">::</span><span class="n">getCanonicalizationPatterns</span><span class="p">(</span><span class="n">RewritePatternSet</span> <span class="o">&amp;</span><span class="n">patterns</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                       <span class="n">MLIRContext</span> <span class="o">*</span><span class="n">context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">patterns</span><span class="p">.</span><span class="n">add</span><span class="o">&lt;</span><span class="p">...</span><span class="o">&gt;</span><span class="p">(...);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">LogicalResult</span> <span class="n">OtherOp</span><span class="o">::</span><span class="n">canonicalize</span><span class="p">(</span><span class="n">OtherOp</span> <span class="n">op</span><span class="p">,</span> <span class="n">PatternRewriter</span> <span class="o">&amp;</span><span class="n">rewriter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// patterns and rewrites go here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="nf">failure</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="canonicalizers-in-c">Canonicalizers in C++</h1>
<p>在 Op 定义中添加 <code>let hasCanonicalizeMethod = 1;</code> 后会为该 Op 生成如下的函数声明。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">getCanonicalizationPatterns</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">RewritePatternSet</span><span class="o">&amp;</span> <span class="n">results</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">MLIRContext</span><span class="o">*</span> <span class="n">context</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个函数需要对 results 加入自定义的 <code>OpRewritePattern</code>. 例如可以重写 x^2 - y^2 这个 SubOp 为 (x+y)(x-y)，当 x^2 和 y^2 在后续没有被使用时。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">DifferenceOfSquares</span> <span class="o">:</span> <span class="k">public</span> <span class="n">OpRewritePattern</span><span class="o">&lt;</span><span class="n">SubOp</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">DifferenceOfSquares</span><span class="p">(</span><span class="n">mlir</span><span class="o">::</span><span class="n">MLIRContext</span><span class="o">*</span> <span class="n">context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">:</span> <span class="n">OpRewritePattern</span><span class="o">&lt;</span><span class="n">SubOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">LogicalResult</span> <span class="nf">matchAndRewrite</span><span class="p">(</span><span class="n">SubOp</span> <span class="n">op</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                  <span class="n">PatternRewriter</span><span class="o">&amp;</span> <span class="n">rewriter</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Value</span> <span class="n">lhs</span> <span class="o">=</span> <span class="n">op</span><span class="o">-&gt;</span><span class="n">getOperand</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>  <span class="c1">// x^2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Value</span> <span class="n">rhs</span> <span class="o">=</span> <span class="n">op</span><span class="o">-&gt;</span><span class="n">getOperand</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>  <span class="c1">// y^2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// If either arg has another use, then this rewrite is probably less
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// efficient, because it cannot delete the mul ops.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">lhs</span><span class="p">.</span><span class="n">hasOneUse</span><span class="p">()</span> <span class="o">||</span> <span class="o">!</span><span class="n">rhs</span><span class="p">.</span><span class="n">hasOneUse</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">failure</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">rhsMul</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">getDefiningOp</span><span class="o">&lt;</span><span class="n">SubOp</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">lhsMul</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">getDefiningOp</span><span class="o">&lt;</span><span class="n">SubOp</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">rhsMul</span> <span class="o">||</span> <span class="o">!</span><span class="n">lhsMul</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">failure</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// check if lhsMul &amp;&amp; rhsMul is squre operation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">bool</span> <span class="n">rhsMulOpsAgree</span> <span class="o">=</span> <span class="n">rhsMul</span><span class="p">.</span><span class="n">getLhs</span><span class="p">()</span> <span class="o">==</span> <span class="n">rhsMul</span><span class="p">.</span><span class="n">getRhs</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">bool</span> <span class="n">lhsMulOpsAgree</span> <span class="o">=</span> <span class="n">lhsMul</span><span class="p">.</span><span class="n">getLhs</span><span class="p">()</span> <span class="o">==</span> <span class="n">lhsMul</span><span class="p">.</span><span class="n">getRhs</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">rhsMulOpsAgree</span> <span class="o">||</span> <span class="o">!</span><span class="n">lhsMulOpsAgree</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">failure</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">x</span> <span class="o">=</span> <span class="n">lhsMul</span><span class="p">.</span><span class="n">getLhs</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">y</span> <span class="o">=</span> <span class="n">rhsMul</span><span class="p">.</span><span class="n">getLhs</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">newAdd</span> <span class="o">=</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">create</span><span class="o">&lt;</span><span class="n">AddOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">op</span><span class="o">-&gt;</span><span class="n">getLoc</span><span class="p">(),</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">newSub</span> <span class="o">=</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">create</span><span class="o">&lt;</span><span class="n">AddOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">op</span><span class="o">-&gt;</span><span class="n">getLoc</span><span class="p">(),</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">newMul</span> <span class="o">=</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">create</span><span class="o">&lt;</span><span class="n">AddOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">op</span><span class="o">-&gt;</span><span class="n">getLoc</span><span class="p">(),</span> <span class="n">newAdd</span><span class="p">,</span> <span class="n">newSub</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rewriter</span><span class="p">.</span><span class="n">replaceOp</span><span class="p">(</span><span class="n">op</span><span class="p">,</span> <span class="n">newMul</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// We don&#39;t need to remove the original ops because MLIR already has
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// canonicalization patterns that remove unused ops.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">success</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">SubOp</span><span class="o">::</span><span class="n">getCanonicalizationPatterns</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">RewritePatternSet</span><span class="o">&amp;</span> <span class="n">results</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">MLIRContext</span><span class="o">*</span> <span class="n">context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">results</span><span class="p">.</span><span class="n">add</span><span class="o">&lt;</span><span class="n">DifferenceOfSquares</span><span class="o">&gt;</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="canonicalizers-in-tablegen">Canonicalizers in Tablegen</h1>
<p>下面利用 tablegen 实现一个多项式共轭的 canonicalizer，f(conj(z)) = conj(f(z)).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// PolyPatterns.td
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">def</span> <span class="nl">LiftConjThroughEval</span> <span class="p">:</span> <span class="n">Pat</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Poly_EvalOp</span> <span class="err">$</span><span class="n">f</span><span class="p">,</span> <span class="p">(</span><span class="n">ConjOp</span> <span class="err">$</span><span class="n">z</span><span class="p">,</span> <span class="err">$</span><span class="n">fastmath</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">                                <span class="p">(</span><span class="n">ConjOp</span> <span class="p">(</span><span class="n">Poly_EvalOp</span> <span class="err">$</span><span class="n">f</span><span class="p">,</span> <span class="err">$</span><span class="n">z</span><span class="p">),</span> <span class="err">$</span><span class="n">fastmath</span><span class="p">)</span><span class="o">&gt;</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里的义了重写模式的 <a href="https://github.com/llvm/llvm-project/blob/d8873df4dc74cdcbbfd3334657daf9fedfaab951/mlir/include/mlir/IR/PatternBase.td#L120">Pat</a> 类和定义要匹配和重写的 IR tree 的括号. Pattern 和 Pat 的定义如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Pattern</span><span class="o">&lt;</span><span class="n">dag</span> <span class="n">source</span><span class="p">,</span> <span class="n">list</span><span class="o">&lt;</span><span class="n">dag</span><span class="o">&gt;</span> <span class="n">results</span><span class="p">,</span> <span class="n">list</span><span class="o">&lt;</span><span class="n">dag</span><span class="o">&gt;</span> <span class="n">preds</span> <span class="o">=</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">              <span class="n">list</span><span class="o">&lt;</span><span class="n">dag</span><span class="o">&gt;</span> <span class="n">supplemental_results</span> <span class="o">=</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">              <span class="n">dag</span> <span class="n">benefitAdded</span> <span class="o">=</span> <span class="p">(</span><span class="n">addBenefit</span> <span class="mi">0</span><span class="p">)</span><span class="o">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">dag</span> <span class="n">sourcePattern</span> <span class="o">=</span> <span class="n">source</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">list</span><span class="o">&lt;</span><span class="n">dag</span><span class="o">&gt;</span> <span class="n">resultPatterns</span> <span class="o">=</span> <span class="n">results</span><span class="p">;</span> <span class="c1">// 注意这里是 list&lt;dag&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">list</span><span class="o">&lt;</span><span class="n">dag</span><span class="o">&gt;</span> <span class="n">constraints</span> <span class="o">=</span> <span class="n">preds</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">list</span><span class="o">&lt;</span><span class="n">dag</span><span class="o">&gt;</span> <span class="n">supplementalPatterns</span> <span class="o">=</span> <span class="n">supplemental_results</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">dag</span> <span class="n">benefitDelta</span> <span class="o">=</span> <span class="n">benefitAdded</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Pat</span><span class="o">&lt;</span><span class="n">dag</span> <span class="n">pattern</span><span class="p">,</span> <span class="n">dag</span> <span class="n">result</span><span class="p">,</span> <span class="n">list</span><span class="o">&lt;</span><span class="n">dag</span><span class="o">&gt;</span> <span class="n">preds</span> <span class="o">=</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">          <span class="n">list</span><span class="o">&lt;</span><span class="n">dag</span><span class="o">&gt;</span> <span class="n">supplemental_results</span> <span class="o">=</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">          <span class="n">dag</span> <span class="n">benefitAdded</span> <span class="o">=</span> <span class="p">(</span><span class="n">addBenefit</span> <span class="mi">0</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pattern</span><span class="o">&lt;</span><span class="n">pattern</span><span class="p">,</span> <span class="p">[</span><span class="n">result</span><span class="p">],</span> <span class="n">preds</span><span class="p">,</span> <span class="n">supplemental_results</span><span class="p">,</span> <span class="n">benefitAdded</span><span class="o">&gt;</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Pattern 类接受一个名为 results 的模板参数，它是一个 <code>list&lt;dag&gt;</code> 类型，可以定义一个或多个结果模式。这使得 Pattern 非常灵活，可以用于处理以下情况：</p>
<ul>
<li>源操作产生多个结果，并且每个结果都需要被不同的新操作替换。</li>
<li>重写过程需要生成一些辅助操作，这些辅助操作本身不直接替换源操作的结果，但有助于构建最终的替换结果。</li>
</ul>
<p>Pat 类继承自 Pattern 类。输入是两个IR tree 对象 (MLIR称之为 DAG nodes)，树中的每个节点由括号 () 指定，括号中的第一个值是操作的名称，其余参数是 op 的参数或属性。当节点可以嵌套，这对应于应用于参数的匹配。它将这个单一的 result DAG 包装成一个只包含一个元素的列表 <code>[result]</code> ，然后传递给父类 Pattern 的 results 参数。因此 Pat 实际上是 Pattern 的一个特例，专门用于定义那些只产生单一结果模式的重写规则。</p>
<p>生成的代码如下所示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cm">/* Generated from:
</span></span></span><span class="line"><span class="cl"><span class="cm">     /code/sac_mlir_learning/Ch8-DialectConversion/include/mlir-tutorial/Dialect/Poly/PolyPatterns.td:8
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 定义一个名为 LiftConjThroughEval 的重写模式结构体，继承自 mlir::RewritePattern
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="nc">LiftConjThroughEval</span> <span class="o">:</span> <span class="k">public</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">RewritePattern</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 构造函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">LiftConjThroughEval</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">MLIRContext</span><span class="o">*</span> <span class="n">context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">:</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">RewritePattern</span><span class="p">(</span><span class="s">&#34;poly.eval&#34;</span><span class="p">,</span> <span class="c1">// 此模式匹配的根操作名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                 <span class="mi">2</span><span class="p">,</span>           <span class="c1">// 此模式的收益 (benefit)，用于解决多个模式匹配时的优先级
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                 <span class="n">context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                 <span class="p">{</span><span class="s">&#34;complex.conj&#34;</span><span class="p">,</span> <span class="s">&#34;poly.eval&#34;</span><span class="p">}</span> <span class="cm">/* 依赖或生成的其他操作名列表 */</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 核心的匹配与重写逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">LogicalResult</span> <span class="n">matchAndRewrite</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Operation</span><span class="o">*</span> <span class="n">op0</span><span class="p">,</span> <span class="c1">// 当前尝试匹配的操作 (op0 预期为 poly.eval)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">PatternRewriter</span><span class="o">&amp;</span> <span class="n">rewriter</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 用于捕获匹配过程中操作数和属性的变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Operation</span><span class="o">::</span><span class="n">operand_range</span> <span class="n">z</span><span class="p">;</span> <span class="c1">// 将捕获 complex.conj 的操作数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">arith</span><span class="o">::</span><span class="n">FastMathFlagsAttr</span> <span class="n">fastmath</span><span class="p">;</span> <span class="c1">// 将捕获 complex.conj 的 fastmath 属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Operation</span><span class="o">::</span><span class="n">operand_range</span> <span class="n">f</span><span class="p">;</span> <span class="c1">// 将捕获 poly.eval 的第一个操作数 (多项式)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 用于存储匹配到的操作，方便后续统一获取位置信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">SmallVector</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Operation</span><span class="o">*</span><span class="p">,</span> <span class="mi">4</span><span class="o">&gt;</span> <span class="n">tblgen_ops</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// --- 开始匹配 ---
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">tblgen_ops</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">op0</span><span class="p">);</span> <span class="c1">// 将根操作 op0 (poly.eval) 加入列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 尝试将 op0 动态转换为 poly.eval 类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">auto</span> <span class="n">castedOp0</span> <span class="o">=</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">dyn_cast</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">EvalOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">op0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">castedOp0</span><span class="p">;</span> <span class="c1">// 避免未使用警告 (如果后续不直接使用 castedOp0 的某些特性)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 获取 poly.eval 的第一个操作数 (多项式 f)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">f</span> <span class="o">=</span> <span class="n">castedOp0</span><span class="p">.</span><span class="n">getODSOperands</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">{</span> <span class="c1">// 内嵌作用域，用于匹配 poly.eval 的第二个操作数 (求值点 point)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 获取定义 poly.eval 第二个操作数 (point) 的那个操作 (op1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">auto</span><span class="o">*</span> <span class="n">op1</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">castedOp0</span><span class="p">.</span><span class="n">getODSOperands</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">begin</span><span class="p">()).</span><span class="n">getDefiningOp</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">op1</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// 如果 point 不是由某个操作定义的 (例如，它是块参数)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">notifyMatchFailure</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">castedOp0</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Diagnostic</span><span class="o">&amp;</span> <span class="n">diag</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="n">diag</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;There&#39;s no operation that defines operand 1 &#34;</span>
</span></span><span class="line"><span class="cl">                                <span class="s">&#34;of castedOp0 (the point operand)&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="p">});</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 尝试将 op1 动态转换为 complex.conj 类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">auto</span> <span class="n">castedOp1</span> <span class="o">=</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">dyn_cast</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">complex</span><span class="o">::</span><span class="n">ConjOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">op1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">castedOp1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">castedOp1</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// 如果 op1 不是 complex.conj 操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">notifyMatchFailure</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">op1</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Diagnostic</span><span class="o">&amp;</span> <span class="n">diag</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="n">diag</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Operand 1 of poly.eval is not defined by mlir::complex::ConjOp&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="p">});</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取 complex.conj 的操作数 (z)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">z</span> <span class="o">=</span> <span class="n">castedOp1</span><span class="p">.</span><span class="n">getODSOperands</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="c1">// 内嵌作用域，用于提取 complex.conj 的 fastmath 属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="na">[[maybe_unused]] auto tblgen_attr = // [[maybe_unused]]</span> <span class="err">避免未使用警告</span>
</span></span><span class="line"><span class="cl">                    <span class="n">castedOp1</span><span class="p">.</span><span class="n">getProperties</span><span class="p">().</span><span class="n">getFastmath</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">tblgen_attr</span><span class="p">)</span> <span class="c1">// 如果没有显式设置 fastmath，则默认为 none
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">tblgen_attr</span> <span class="o">=</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">arith</span><span class="o">::</span><span class="n">FastMathFlagsAttr</span><span class="o">::</span><span class="n">get</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                        <span class="n">rewriter</span><span class="p">.</span><span class="n">getContext</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">                        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">arith</span><span class="o">::</span><span class="n">FastMathFlags</span><span class="o">::</span><span class="n">none</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">fastmath</span> <span class="o">=</span> <span class="n">tblgen_attr</span><span class="p">;</span> <span class="c1">// 保存 fastmath 属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">tblgen_ops</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">op1</span><span class="p">);</span> <span class="c1">// 将匹配到的 complex.conj 操作 (op1) 加入列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// --- 匹配结束 ---
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// --- 开始重写 ---
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 为新生成的操作创建一个融合的位置信息，源自所有匹配到的操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">auto</span> <span class="n">odsLoc</span> <span class="o">=</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">getFusedLoc</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="n">tblgen_ops</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">getLoc</span><span class="p">(),</span> <span class="n">tblgen_ops</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">getLoc</span><span class="p">()});</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">odsLoc</span><span class="p">;</span> <span class="c1">// 避免未使用警告
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 用于存储替换原操作 op0 的新值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">SmallVector</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Value</span><span class="p">,</span> <span class="mi">4</span><span class="o">&gt;</span> <span class="n">tblgen_repl_values</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 声明新的 poly.eval 操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">EvalOp</span> <span class="n">tblgen_EvalOp_0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span> <span class="c1">// 创建新的 poly.eval 操作: eval(f, z)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Value</span> <span class="n">tblgen_value_0</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">f</span><span class="p">.</span><span class="n">begin</span><span class="p">());</span> <span class="c1">// poly.eval 的第一个操作数 (多项式 f)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Value</span> <span class="n">tblgen_value_1</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">z</span><span class="p">.</span><span class="n">begin</span><span class="p">());</span> <span class="c1">// poly.eval 的第二个操作数 (原 conj 的操作数 z)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">tblgen_EvalOp_0</span> <span class="o">=</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">create</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">EvalOp</span><span class="o">&gt;</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">odsLoc</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="cm">/*input=*/</span><span class="n">tblgen_value_0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="cm">/*point=*/</span><span class="n">tblgen_value_1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 声明新的 complex.conj 操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">complex</span><span class="o">::</span><span class="n">ConjOp</span> <span class="n">tblgen_ConjOp_1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span> <span class="c1">// 创建新的 complex.conj 操作: conj(result of new eval)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">SmallVector</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Value</span><span class="p">,</span> <span class="mi">4</span><span class="o">&gt;</span> <span class="n">tblgen_values</span><span class="p">;</span> <span class="c1">// 新 conj 的操作数列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">tblgen_values</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">complex</span><span class="o">::</span><span class="n">ConjOp</span><span class="o">::</span><span class="n">Properties</span> <span class="n">tblgen_props</span><span class="p">;</span> <span class="c1">// 新 conj 的属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">tblgen_props</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 新 conj 的操作数是新创建的 poly.eval 的结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">tblgen_values</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="o">*</span><span class="n">tblgen_EvalOp_0</span><span class="p">.</span><span class="n">getODSResults</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="n">begin</span><span class="p">()));</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 设置新 conj 的 fastmath 属性，与原 conj 保持一致
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">tblgen_props</span><span class="p">.</span><span class="n">fastmath</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">                <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">dyn_cast_if_present</span><span class="o">&lt;</span><span class="k">decltype</span><span class="p">(</span><span class="n">tblgen_props</span><span class="p">.</span><span class="n">fastmath</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">fastmath</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">tblgen_ConjOp_1</span> <span class="o">=</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">create</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">complex</span><span class="o">::</span><span class="n">ConjOp</span><span class="o">&gt;</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">odsLoc</span><span class="p">,</span> <span class="n">tblgen_values</span><span class="p">,</span> <span class="n">tblgen_props</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 将新创建的 complex.conj 操作的结果作为替换值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">v</span> <span class="p">:</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">SmallVector</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Value</span><span class="p">,</span> <span class="mi">4</span><span class="o">&gt;</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                 <span class="n">tblgen_ConjOp_1</span><span class="p">.</span><span class="n">getODSResults</span><span class="p">(</span><span class="mi">0</span><span class="p">)})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">tblgen_repl_values</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 用新的值替换原始操作 op0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">rewriter</span><span class="p">.</span><span class="n">replaceOp</span><span class="p">(</span><span class="n">op0</span><span class="p">,</span> <span class="n">tblgen_repl_values</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">success</span><span class="p">();</span> <span class="c1">// 表示匹配和重写成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">LLVM_ATTRIBUTE_UNUSED</span>
</span></span><span class="line"><span class="cl"><span class="nf">populateWithGenerated</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">RewritePatternSet</span><span class="o">&amp;</span> <span class="n">patterns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">patterns</span><span class="p">.</span><span class="n">add</span><span class="o">&lt;</span><span class="n">LiftConjThroughEval</span><span class="o">&gt;</span><span class="p">(</span><span class="n">patterns</span><span class="p">.</span><span class="n">getContext</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后跟上一个方法一样，需要添加这个 canonicalizer.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">EvalOp</span><span class="o">::</span><span class="n">getCanonicalizationPatterns</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">RewritePatternSet</span><span class="o">&amp;</span> <span class="n">results</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                         <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">MLIRContext</span><span class="o">*</span> <span class="n">context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">populateWithGenerated</span><span class="p">(</span><span class="n">results</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>同样我们可以通过 tablegen 的方式编写 DifferenceOfSquares，但由于将一个 SubOp 替换成了 3 个 Op，需要继承 <code>Pattern</code> 而不是 <code>Pat</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// PolyPatterns.td
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">def</span> <span class="nl">HasOneUse</span><span class="p">:</span> <span class="n">Constraint</span><span class="o">&lt;</span><span class="n">CPred</span><span class="o">&lt;</span><span class="s">&#34;$_self.hasOneUse()&#34;</span><span class="o">&gt;</span><span class="p">,</span> <span class="s">&#34;has one use&#34;</span><span class="o">&gt;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Rewrites (x^2 - y^2) as (x+y)(x-y) if x^2 and y^2 have no other uses.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">def</span> <span class="nl">DifferenceOfSquares</span> <span class="p">:</span> <span class="n">Pattern</span><span class="o">&lt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="n">Poly_SubOp</span> <span class="p">(</span><span class="nl">Poly_MulOp</span><span class="p">:</span><span class="err">$</span><span class="n">lhs</span> <span class="err">$</span><span class="n">x</span><span class="p">,</span> <span class="err">$</span><span class="n">x</span><span class="p">),</span> <span class="p">(</span><span class="nl">Poly_MulOp</span><span class="p">:</span><span class="err">$</span><span class="n">rhs</span> <span class="err">$</span><span class="n">y</span><span class="p">,</span> <span class="err">$</span><span class="n">y</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nl">Poly_AddOp</span><span class="p">:</span><span class="err">$</span><span class="n">sum</span> <span class="err">$</span><span class="n">x</span><span class="p">,</span> <span class="err">$</span><span class="n">y</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nl">Poly_SubOp</span><span class="p">:</span><span class="err">$</span><span class="n">diff</span> <span class="err">$</span><span class="n">x</span><span class="p">,</span> <span class="err">$</span><span class="n">y</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nl">Poly_MulOp</span><span class="p">:</span><span class="err">$</span><span class="n">res</span> <span class="err">$</span><span class="n">sum</span><span class="p">,</span> <span class="err">$</span><span class="n">diff</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[(</span><span class="nl">HasOneUse</span><span class="p">:</span><span class="err">$</span><span class="n">lhs</span><span class="p">),</span> <span class="p">(</span><span class="nl">HasOneUse</span><span class="p">:</span><span class="err">$</span><span class="n">rhs</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>MLIR-Ch7 Verifiers</title>
      <link>http://localhost:57770/blogs/courselearning/mlir/mlir-ch7-verifiers/</link>
      <pubDate>Sun, 10 Nov 2024 23:51:23 +0800</pubDate>
      <guid>http://localhost:57770/blogs/courselearning/mlir/mlir-ch7-verifiers/</guid>
      <description>Personal MLIR learning notes 7.</description>
      <content:encoded><![CDATA[<h1 id="purposes-of-a-verifier">Purposes of a Verifier</h1>
<p>Verifiers 确保具体的 MLIR 程序中的类型和操作格式正确。验证器会在每次优化 pass 之前和之后运行，帮助确保单个 pass, folders, rewrite patterns 等都能生成正确的 IR. 这使得每个操作的约束条件（invariants）能够得到强制执行，同时简化了传递的实现，因为它们可以依赖这些约束条件，从而避免检查边界情况。多数情况下验证代码是用 Traits 来实现的。</p>
<h1 id="trait-based-verifiers">Trait-based Verifiers</h1>
<p>上一章我们加入了 <code>SameOperandsAndResultElementType</code> 从而让 <code>poly.add</code> 的输入可以既是 poly 或者张量类型的 poly. 从技术上讲，这向 IR 添加了一个验证器，但是为了更清楚地演示这一点，这一章将限制该行为，我们将 Trait 改成 <code>SameOperandsAndResultType</code> 以断言输入和输出类型必须全部一致。</p>
<p>这样会自动生成一些新功能。首先，验证引擎会使用 <code>verifyTrait</code> 来检查类型是否一致。在这里，<code>verifyInvariants</code> 是 <code>Operation</code> 基类中的一个方法，当某些 Traits 注入验证逻辑时，生成的代码会覆盖这个方法，用于检查操作类型上的类型约束。(如果是自定义验证器，则会使用名为 <code>verify</code> 的方法，以与 <code>verifyInvariants</code> 区分开来) 由于 <code>SameOperandsAndResultType</code> 是一个通用检查，因此它不会影响生成的代码。</p>
<p>下面展示了 AddOp 的 inferReturnTypes 方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">LogicalResult</span> <span class="n">AddOp</span><span class="o">::</span><span class="nf">inferReturnTypes</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">MLIRContext</span><span class="o">*</span> <span class="n">context</span><span class="p">,</span> <span class="o">::</span><span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Location</span><span class="o">&gt;</span> <span class="n">location</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">ValueRange</span> <span class="n">operands</span><span class="p">,</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">DictionaryAttr</span> <span class="n">attributes</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OpaqueProperties</span> <span class="n">properties</span><span class="p">,</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">RegionRange</span> <span class="n">regions</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">SmallVectorImpl</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span><span class="o">&gt;&amp;</span> <span class="n">inferredReturnTypes</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">inferredReturnTypes</span><span class="p">.</span><span class="nf">resize</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>  <span class="c1">// Represent AddOp&#39;s output as a single type.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Builder</span> <span class="nf">odsBuilder</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">operands</span><span class="p">.</span><span class="nf">size</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// Check that there is at least one operand.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="nf">failure</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="n">odsInferredType0</span> <span class="o">=</span> <span class="n">operands</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">getType</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">inferredReturnTypes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">odsInferredType0</span><span class="p">;</span>  <span class="c1">// Set the output type to the first operand&#39;s type.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="nf">success</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>有了类型推导钩子，我们可以简化操作的汇编格式，类型只需要指定一次，而不是三次 (<code>(type, type) -&gt; type</code>). 同时也需要更新所有测试的 mlir 以启用这个新的 assemblyFormat.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tablegen" data-lang="tablegen"><span class="line"><span class="cl"><span class="k">let</span> <span class="nv">assemblyFormat</span> <span class="p">=</span> <span class="s">&#34;$lhs `,` $rhs attr-dict `:` qualified(type($output))&#34;</span><span class="p">;</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以从 AddOp 的 build 方法中看到现在不需要指定返回值，而是通过 <code>inferReturnTypes</code> 来推导。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">AddOp</span><span class="o">::</span><span class="nf">build</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OpBuilder</span><span class="o">&amp;</span> <span class="n">odsBuilder</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OperationState</span><span class="o">&amp;</span> <span class="n">odsState</span><span class="p">,</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Value</span> <span class="n">lhs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Value</span> <span class="n">rhs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">odsState</span><span class="p">.</span><span class="nf">addOperands</span><span class="p">(</span><span class="n">lhs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">odsState</span><span class="p">.</span><span class="nf">addOperands</span><span class="p">(</span><span class="n">rhs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">SmallVector</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span><span class="p">,</span> <span class="mi">2</span><span class="o">&gt;</span> <span class="n">inferredReturnTypes</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="nf">succeeded</span><span class="p">(</span><span class="n">AddOp</span><span class="o">::</span><span class="nf">inferReturnTypes</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">odsBuilder</span><span class="p">.</span><span class="nf">getContext</span><span class="p">(),</span> <span class="n">odsState</span><span class="p">.</span><span class="n">location</span><span class="p">,</span> <span class="n">odsState</span><span class="p">.</span><span class="n">operands</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">odsState</span><span class="p">.</span><span class="n">attributes</span><span class="p">.</span><span class="nf">getDictionary</span><span class="p">(</span><span class="n">odsState</span><span class="p">.</span><span class="nf">getContext</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">            <span class="n">odsState</span><span class="p">.</span><span class="nf">getRawProperties</span><span class="p">(),</span> <span class="n">odsState</span><span class="p">.</span><span class="n">regions</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">inferredReturnTypes</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">        <span class="n">odsState</span><span class="p">.</span><span class="nf">addTypes</span><span class="p">(</span><span class="n">inferredReturnTypes</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="nf">reportFatalInferReturnTypesError</span><span class="p">(</span><span class="n">odsState</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>EvalOp</code> 无法使用 <code>SameOperandsAndResultType</code>，因为它的操作数需要不同的类型。然而，我们可以使用 <code>AllTypesMatch</code>，它会生成类似的代码，但将验证限制在某些特定类型的子集上。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-td" data-lang="td"><span class="line"><span class="cl"><span class="k">def</span> <span class="nv">Poly_EvalOp</span> <span class="p">:</span> <span class="nv">Op</span><span class="p">&lt;</span><span class="nv">Poly_Dialect</span><span class="p">,</span> <span class="s">&#34;eval&#34;</span><span class="p">,</span> <span class="p">[</span><span class="nv">AllTypesMatch</span><span class="p">&lt;[</span><span class="s">&#34;point&#34;</span><span class="p">,</span> <span class="s">&#34;output&#34;</span><span class="p">]&gt;]&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">let</span> <span class="nv">summary</span> <span class="p">=</span> <span class="s">&#34;Evaluates a Polynomial at a given input value.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">let</span> <span class="nv">arguments</span> <span class="p">=</span> <span class="p">(</span><span class="nv">ins</span> <span class="nv">Polynomial</span><span class="p">:</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">AnyInteger</span><span class="p">:</span><span class="nv">$point</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">let</span> <span class="nv">results</span> <span class="p">=</span> <span class="p">(</span><span class="nv">outs</span> <span class="nv">AnyInteger</span><span class="p">:</span><span class="nv">$output</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到相似的 <code>inferReturnTypes</code> 方法，由于 EvalOp 是返回多项式在某个整数点上的值，因此推断的返回值类型需要与第二个操作数类型一致。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">LogicalResult</span> <span class="n">EvalOp</span><span class="o">::</span><span class="nf">inferReturnTypes</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">MLIRContext</span><span class="o">*</span> <span class="n">context</span><span class="p">,</span> <span class="o">::</span><span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Location</span><span class="o">&gt;</span> <span class="n">location</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">ValueRange</span> <span class="n">operands</span><span class="p">,</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">DictionaryAttr</span> <span class="n">attributes</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OpaqueProperties</span> <span class="n">properties</span><span class="p">,</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">RegionRange</span> <span class="n">regions</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">SmallVectorImpl</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span><span class="o">&gt;&amp;</span> <span class="n">inferredReturnTypes</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">inferredReturnTypes</span><span class="p">.</span><span class="nf">resize</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Builder</span> <span class="nf">odsBuilder</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">operands</span><span class="p">.</span><span class="nf">size</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="nf">failure</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="n">odsInferredType0</span> <span class="o">=</span> <span class="n">operands</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">getType</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">inferredReturnTypes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">odsInferredType0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="nf">success</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="a-custom-verifier">A Custom Verifier</h1>
<p>如果需要添加自定义的 verifier 我们需要在 def 的时候添加 <code>let hasVerifier = 1</code>. 我们会发现生成的类里面定义了 verify 方法。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">class</span> <span class="n">EvalOp</span> <span class="p">...</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">...</span>
</span></span><span class="line"><span class="cl">  <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">LogicalResult</span> <span class="nf">verify</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因此我们需要在 PolyOps.cpp 中实现它。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// lib/Dialect/Poly/PolyOps.cpp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">LogicalResult</span> <span class="n">EvalOp</span><span class="o">::</span><span class="nf">verify</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nf">getPoint</span><span class="p">().</span><span class="nf">getType</span><span class="p">().</span><span class="nf">isSignlessInteger</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">               <span class="o">?</span> <span class="nf">success</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">               <span class="o">:</span> <span class="nf">emitError</span><span class="p">(</span><span class="s">&#34;argument point must be a 32-bit integer&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="a-trait-based-custom-verifier">A Trait-based Custom Verifier</h1>
<p>在 MLIR 中，每个 Trait 都有一个可选的 <code>verifyTrait</code> 钩子，这个钩子会在通过 <code>hasVerifier</code> 创建的自定义验证器之前执行。我们可以利用这个钩子定义通用的验证器，使其适用于多个操作。比如，我们可以通过扩展上一节的内容，创建一个通用的验证器，用于断言所有整数类型的操作数必须是 32 位。</p>
<p>因此我们先需要 def 一个新的 Trait，然后将它加入到 <code>EvalOp</code> 中.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tablegen" data-lang="tablegen"><span class="line"><span class="cl">  <span class="k">let</span> <span class="nv">cppNamespace</span> <span class="p">=</span> <span class="s">&#34;::mlir::tutorial::poly&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以看到生成的代码里有一个新类需要我们实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">class</span> <span class="nl">EvalOp</span> <span class="p">:</span> <span class="n">public</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Op</span><span class="o">&lt;</span>
</span></span><span class="line"><span class="cl">    <span class="n">EvalOp</span><span class="p">,</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OpTrait</span><span class="o">::</span><span class="n">ZeroRegions</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//...,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">Has32BitArguments</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们需要新建一个 PolyTraits.h 文件并且让 PolyOps.h 包含它</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// 
</span></span></span><span class="line"><span class="cl"><span class="c1">// /include/mlir-learning/Dialect/Poly/PolyOps.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifndef LIB_DIALECT_POLY_POLYTRAITS_H_
</span></span></span><span class="line"><span class="cl"><span class="cp">#define LIB_DIALECT_POLY_POLYTRAITS_H_
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/include/mlir/IR/OpDefinition.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">namespace</span> <span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">template</span> <span class="o">&lt;</span><span class="kr">typename</span> <span class="n">ConcreteType</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span> <span class="nl">Has32BitArguments</span> <span class="p">:</span> <span class="n">public</span> <span class="n">OpTrait</span><span class="o">::</span><span class="n">TraitBase</span><span class="o">&lt;</span><span class="n">ConcreteType</span><span class="p">,</span> <span class="n">Has32BitArguments</span><span class="o">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nl">public</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">static</span> <span class="n">LogicalResult</span> <span class="nf">verifyTrait</span><span class="p">(</span><span class="n">Operation</span> <span class="o">*</span><span class="n">op</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">type</span> <span class="p">:</span> <span class="n">op</span><span class="o">-&gt;</span><span class="nf">getOperandTypes</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// OK to skip non-integer operand types
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">type</span><span class="p">.</span><span class="nf">isIntOrIndex</span><span class="p">())</span> <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">type</span><span class="p">.</span><span class="nf">isInteger</span><span class="p">(</span><span class="mi">32</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">op</span><span class="o">-&gt;</span><span class="nf">emitOpError</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">               <span class="o">&lt;&lt;</span> <span class="s">&#34;requires each numeric operand to be a 32-bit integer&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nf">success</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#endif  </span><span class="c1">// LIB_DIALECT_POLY_POLYTRAITS_H_
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这样做的优点是具有更强的通用性，但缺点是需要进行繁琐的类型转换来支持特定的操作及其命名参数。例如，这里我们无法直接调用 <code>getPoint</code>，除非对操作进行动态转换为 <code>EvalOp</code>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>MLIR-Ch6 Folders and Constant Propagation</title>
      <link>http://localhost:57770/blogs/courselearning/mlir/mlir-ch6-folders-and-constant-propagation/</link>
      <pubDate>Sat, 09 Nov 2024 20:51:23 +0800</pubDate>
      <guid>http://localhost:57770/blogs/courselearning/mlir/mlir-ch6-folders-and-constant-propagation/</guid>
      <description>Personal MLIR learning notes 6.</description>
      <content:encoded><![CDATA[<h1 id="constant-propagation-vs-canonicalization">Constant Propagation vs Canonicalization</h1>
<p><code>-sccp</code> Sparse Conditional Constant Propagation 是稀疏条件常数传播，它试图推断 op 何时具有常量输出，然后用常量值替换 op 。重复这个过程，它在程序中尽可能地“传播”这些常量。</p>
<p>例如对于如下的函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl"><span class="kt">func</span><span class="p">.</span><span class="kt">func</span> <span class="nf">@test_arith_sccp</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="k">i32</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%0</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> <span class="m">7</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%1</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> <span class="m">8</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%2</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%0</span><span class="p">,</span> <span class="nv">%0</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%3</span> <span class="p">=</span> arith<span class="p">.</span>muli <span class="nv">%0</span><span class="p">,</span> <span class="nv">%0</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%4</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%2</span><span class="p">,</span> <span class="nv">%3</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="kt">return</span> <span class="nv">%2</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>-sccp</code> 优化后的结果如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl"><span class="kt">func</span><span class="p">.</span><span class="kt">func</span> <span class="nf">@test_arith_sccp</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="k">i32</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%c63_i32</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> <span class="m">63</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%c49_i32</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> <span class="m">49</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%c14_i32</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> <span class="m">14</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%c8_i32</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> <span class="m">8</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%c7_i32</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> <span class="m">7</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="kt">return</span> <span class="nv">%c14_i32</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>需要注意的是：sccp 不会删除死代码；这里没有展示的是 sccp 的主要作用，它可以通过控制流 (if 或者 loop) 传播常量。</p>
<p>一个相关的概念是 canonicalization，<code>--canonicalize</code> pass 隐藏了 MLIR 中的许多繁重工作。它与 sccp 有一点重叠，因为它也计算常量并在 IR 中具体化它们。例如，在上面的 IR 上使用 <code>——canonicalize</code> pass 的结果如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl"><span class="kt">func</span><span class="p">.</span><span class="kt">func</span> <span class="nf">@test_arith_sccp</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="k">i32</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%c14_i32</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> <span class="m">14</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="kt">return</span> <span class="nv">%c14_i32</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>中间的常量都被修剪掉了，剩下的只是返回值，没有任何 op. <strong>规范化不能通过控制流传播常量</strong>。</p>
<p>这两者都是通过折叠 (folding) 来支持的，折叠是采取一系列 op 并将它们合并在一起为更简单的 op 的过程。它还要求我们的方言具有某种常量 op ，该 op 与折叠的结果一起插入。</p>
<p>以这种方式支持折叠所需的大致步骤是：</p>
<ol>
<li>添加一个常量 op.</li>
<li>添加实例化钩子。</li>
<li>为每个 op 添加 folders.</li>
</ol>
<h1 id="making-a-constant-operation">Making a Constant Operation</h1>
<p>我们目前只支持通过 <code>from_tensor</code>  op 从 <code>arith.constant</code> 创建常量。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl"><span class="nv">%0</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> dense<span class="p">&lt;[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">]&gt;</span> <span class="p">:</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">3x</span><span class="k">i32</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nv">%p0</span> <span class="p">=</span> poly<span class="p">.</span>from_tensor <span class="nv">%0</span> <span class="p">:</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">3x</span><span class="k">i32</span><span class="p">&gt;</span> <span class="p">-&gt;</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个常量 op 可以将上述两个操作简化成一个 op. <code>from_tensor</code> op 还可以用于根据数据 (而不仅仅是常数) 构建一个多项函数，因此即使在我们实现了 <code>poly.constant</code> 之后，它也应该保留。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl"><span class="nv">%0</span> <span class="p">=</span> poly<span class="p">.</span><span class="kt">constant</span> dense<span class="p">&lt;[</span><span class="m">2</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="m">24</span><span class="p">,</span> <span class="m">18</span><span class="p">]&gt;</span> <span class="p">:</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://mlir.llvm.org/docs/Canonicalization/#canonicalizing-with-the-fold-method">fold</a> 可以用于向 sccp 等 pass 传递信号，表明 op 的结果是常量，或者它可以用于说 op 的结果等效于由不同 op 创建的预先存在的值。对于常量的情况，还需要一个 <code>materializeConstant</code> 钩子来告诉 MLIR 如何获取常量结果并将其转化为适当的 IR  op. 常量 op 的定义如下</p>
<pre tabindex="0"><code>def Poly_ConstantOp: Op&lt;Poly_Dialect, &#34;constant&#34;, [Pure, ConstantLike]&gt; {
  let summary = &#34;Define a constant polynomial via an attribute.&#34;;
  let arguments = (ins AnyIntElementsAttr:$coefficients);
  let results = (outs Polynomial:$output);
  let assemblyFormat = &#34;$coefficients attr-dict `:` type($output)&#34;;
}
</code></pre><p><code>ConstantLike</code> trait 标记的 op 被视为常量值生成 op ，可以在编译时进行常量折叠等优化。<code>arguments</code> 定义 op 的输入是一个具有 <code>AnyIntElementsAttr</code> 的值，使得 op 可以处理任意包含整数的集合，而不仅仅是特定位宽的整数。</p>
<h1 id="adding-folders">Adding Folders</h1>
<p>我们为定义的 op 都加上 <code>let hasFolder = 1;</code> 它在 .hpp.inc 中添加了如下形式的声明。<code>FoldAdaptor</code> 定义为 <code>GenericAdaptor</code> 类型的别名，而 <code>GenericAdaptor</code> 包含了一个 <code>Attribute</code> 数组的引用，这个数组提供了对 op 属性的访问接口。</p>
<p>Attribute 类的核心作用是：</p>
<ul>
<li>表示常量值：Attribute 用于表示操作的静态、不可变的常量值，例如整数、浮点数、字符串、类型信息等。这些值在编译期已知且不可更改。</li>
<li>支持编译器优化：通过提供常量值的表示，Attribute 支持 MLIR 的优化流程，如折叠 (folding) 、规范化 (canonicalization), 常量传播 (constant propagation) 等。</li>
<li>跨方言的通用接口：Attribute 是一个抽象接口，允许不同方言 (dialects) 定义自己的常量表示，同时通过统一的 API 进行操作。</li>
<li>轻量级和高效：Attribute 是一个值类型 (passed by value) ，内部仅存储指向底层存储的指针，依赖 MLIRContext 的唯一化机制 (uniquing) 确保内存效率和一致性。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">using</span> <span class="n">FoldAdaptor</span> <span class="o">=</span> <span class="n">GenericAdaptor</span><span class="o">&lt;::</span><span class="n">llvm</span><span class="o">::</span><span class="n">ArrayRef</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Attribute</span><span class="o">&gt;&gt;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OpFoldResult</span> <span class="nf">fold</span><span class="p">(</span><span class="n">FoldAdaptor</span> <span class="n">adaptor</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们需要在 <code>PolyOps.cpp</code> 中实现这个函数。如果 <code>fold</code> 方法决定 op 应被替换为一个常量，则必须返回一个表示该常量的 <code>Attribute</code>，该属性可以作为 <code>poly.constant</code> 操作的输入。<code>FoldAdaptor</code> 是一个适配器，它具有与操作的 C++ 类实例相同的方法名称，但对于那些已经被折叠的参数，会用表示其折叠结果常量的 <code>Attribute</code> 实例替换。这在折叠加法和乘法操作时尤为重要，因为折叠的实现需要立即计算结果，并且需要访问实际的数值来完成计算。</p>
<p>对于 <code>poly.constant</code> 我们只需要返回输入的 attribute.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">OpFoldResult</span> <span class="n">ConstantOp</span><span class="o">::</span><span class="nf">fold</span><span class="p">(</span><span class="n">ConstantOp</span><span class="o">::</span><span class="n">FoldAdaptor</span> <span class="n">adaptor</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">adaptor</span><span class="p">.</span><span class="nf">getCoefficients</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于 from_tensor 我们需要有一个额外的强制转换作为断言，因为张量可能是用我们不希望作为输入的奇怪类型构造的。如果 <code>dyn_cast</code> 结果是 <code>nullptr</code>， MLIR 将其强制转换为失败的 <code>OpFoldResult</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">OpFoldResult</span> <span class="n">FromTensorOp</span><span class="o">::</span><span class="nf">fold</span><span class="p">(</span><span class="n">FromTensorOp</span><span class="o">::</span><span class="n">FoldAdaptor</span> <span class="n">adaptor</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Returns null if the cast failed, which corresponds to a failed fold.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="n">dyn_cast</span><span class="o">&lt;</span><span class="n">DenseIntElementsAttr</span><span class="o">&gt;</span><span class="p">(</span><span class="n">adaptor</span><span class="p">.</span><span class="nf">getInput</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>BinOp 稍微复杂一些，因为这些 fold 方法中的每一个 op 都接受两个 <code>DenseIntElementsAttr</code> 作为输入，并期望我们为结果返回另一个 <code>DenseIntElementsAttr</code>.</p>
<p>对于 elementwise op 的 add/sub，我们可以使用现有的方法 <code>constFoldBinaryOp</code>，它通过一些模板元编程技巧，允许我们只指定元素 op 本身。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">OpFoldResult</span> <span class="n">AddOp</span><span class="o">::</span><span class="nf">fold</span><span class="p">(</span><span class="n">AddOp</span><span class="o">::</span><span class="n">FoldAdaptor</span> <span class="n">adaptor</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">constFoldBinaryOp</span><span class="o">&lt;</span><span class="n">IntegerAttr</span><span class="p">,</span> <span class="n">APInt</span><span class="o">&gt;</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">adaptor</span><span class="p">.</span><span class="nf">getOperands</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">APInt</span> <span class="n">a</span><span class="p">,</span> <span class="n">APInt</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于 mul，我们手动的通过循环计算每个系数。<code>getResult()</code> 方法来自于 <code>OneTypedResult</code> 类模板及其内部类 <code>Impl</code> 是一个 MLIR Trait，它主要用于那些返回单一特定类型结果的 op 。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">OpFoldResult</span> <span class="n">MulOp</span><span class="o">::</span><span class="nf">fold</span><span class="p">(</span><span class="n">MulOp</span><span class="o">::</span><span class="n">FoldAdaptor</span> <span class="n">adaptor</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">lhs</span> <span class="o">=</span> <span class="n">llvm</span><span class="o">::</span><span class="n">dyn_cast</span><span class="o">&lt;</span><span class="n">DenseIntElementsAttr</span><span class="o">&gt;</span><span class="p">(</span><span class="n">adaptor</span><span class="p">.</span><span class="nf">getOperands</span><span class="p">()[</span><span class="mi">0</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">rhs</span> <span class="o">=</span> <span class="n">llvm</span><span class="o">::</span><span class="n">dyn_cast</span><span class="o">&lt;</span><span class="n">DenseIntElementsAttr</span><span class="o">&gt;</span><span class="p">(</span><span class="n">adaptor</span><span class="p">.</span><span class="nf">getOperands</span><span class="p">()[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">lhs</span> <span class="o">||</span> <span class="o">!</span><span class="n">rhs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">nullptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">degree</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">        <span class="n">mlir</span><span class="o">::</span><span class="n">cast</span><span class="o">&lt;</span><span class="n">PolynomialType</span><span class="o">&gt;</span><span class="p">(</span><span class="nf">getResult</span><span class="p">().</span><span class="nf">getType</span><span class="p">()).</span><span class="nf">getDegreeBound</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">maxIndex</span> <span class="o">=</span> <span class="n">lhs</span><span class="p">.</span><span class="nf">size</span><span class="p">()</span> <span class="o">+</span> <span class="n">rhs</span><span class="p">.</span><span class="nf">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">SmallVector</span><span class="o">&lt;</span><span class="n">llvm</span><span class="o">::</span><span class="n">APInt</span><span class="p">,</span> <span class="mi">8</span><span class="o">&gt;</span> <span class="n">results</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">results</span><span class="p">.</span><span class="nf">reserve</span><span class="p">(</span><span class="n">maxIndex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int64_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxIndex</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">results</span><span class="p">.</span><span class="nf">push_back</span><span class="p">(</span><span class="nf">APInt</span><span class="p">((</span><span class="o">*</span><span class="n">lhs</span><span class="p">.</span><span class="nf">begin</span><span class="p">()).</span><span class="nf">getBitWidth</span><span class="p">(),</span> <span class="mi">0</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int64_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">lhsIt</span> <span class="o">=</span> <span class="n">lhs</span><span class="p">.</span><span class="n">value_begin</span><span class="o">&lt;</span><span class="n">APInt</span><span class="o">&gt;</span><span class="p">();</span> <span class="n">lhsIt</span> <span class="o">!=</span> <span class="n">lhs</span><span class="p">.</span><span class="n">value_end</span><span class="o">&lt;</span><span class="n">APInt</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">         <span class="n">lhsIt</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int64_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">rhsIt</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">value_begin</span><span class="o">&lt;</span><span class="n">APInt</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">             <span class="n">rhsIt</span> <span class="o">!=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">value_end</span><span class="o">&lt;</span><span class="n">APInt</span><span class="o">&gt;</span><span class="p">();</span> <span class="n">rhsIt</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">results</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">)</span> <span class="o">%</span> <span class="n">degree</span><span class="p">]</span> <span class="o">+=</span> <span class="p">(</span><span class="o">*</span><span class="n">lhsIt</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="o">*</span><span class="n">rhsIt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">DenseIntElementsAttr</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">RankedTensorType</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="n">static_cast</span><span class="o">&lt;</span><span class="kt">int64_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">results</span><span class="p">.</span><span class="nf">size</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">                              <span class="n">mlir</span><span class="o">::</span><span class="n">IntegerType</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="nf">getContext</span><span class="p">(),</span> <span class="mi">32</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">        <span class="n">results</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="adding-a-constant-materializer">Adding a Constant Materializer</h1>
<p>最后我们添加常量实例化函数，这是一个 dialect 级别的特性，我们在 <code>PolyDialect.td</code> 中添加 <code>let hasConstantMaterializer = 1;</code> 则会在 .hpp.inc 中添加如下形式的声明。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Operation</span> <span class="o">*</span><span class="nf">materializeConstant</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OpBuilder</span> <span class="o">&amp;</span><span class="n">builder</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                         <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Attribute</span> <span class="n">value</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                         <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="n">type</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                         <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Location</span> <span class="n">loc</span><span class="p">)</span> <span class="n">override</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>该函数作用是将给定 Attribute (上面每个折叠步骤的结果) 的单个常量 op 实例化为所需的结果 Type.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">Operation</span> <span class="o">*</span><span class="n">PolyDialect</span><span class="o">::</span><span class="nf">materializeConstant</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">OpBuilder</span> <span class="o">&amp;</span><span class="n">builder</span><span class="p">,</span> <span class="n">Attribute</span> <span class="n">value</span><span class="p">,</span> <span class="n">Type</span> <span class="n">type</span><span class="p">,</span> <span class="n">Location</span> <span class="n">loc</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">coeffs</span> <span class="o">=</span> <span class="n">dyn_cast</span><span class="o">&lt;</span><span class="n">DenseIntElementsAttr</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">coeffs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">nullptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">builder</span><span class="p">.</span><span class="n">create</span><span class="o">&lt;</span><span class="n">ConstantOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">loc</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">coeffs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>MLIR-Ch5 Using Traits</title>
      <link>http://localhost:57770/blogs/courselearning/mlir/mlir-ch5-using-traits/</link>
      <pubDate>Fri, 08 Nov 2024 23:06:23 +0800</pubDate>
      <guid>http://localhost:57770/blogs/courselearning/mlir/mlir-ch5-using-traits/</guid>
      <description>Personal MLIR learning notes 5.</description>
      <content:encoded><![CDATA[<h1 id="traits-and-loop-invariant-code-motion">Traits and Loop Invariant Code Motion</h1>
<p>为了提高代码重用性，MLIR 提供了 <a href="https://mlir.llvm.org/docs/Traits/">Traits</a> 和 <a href="https://mlir.llvm.org/docs/Interfaces/">Interfaces</a> Traits，用于增强 op  (Operation) 或类型的功能，提供结构化的约束和功能接口，方便在编译优化和生成过程中进行更强大和灵活的 op 。</p>
<blockquote>
<p><a href="https://mlir.llvm.org/docs/Traits/">Traits</a> 是一种机制，用于抽象出多个不同属性、 op 或类型之间共同的实现细节和特性。可用于指定对象的特殊属性和约束，例如 op 是否具有副作用，或其输出类型是否与输入类型相同。Traits 将特定的行为或限制抽象出来，使这些行为可以复用在不同的对象上，而不需要在每个对象中重复实现相同的逻辑。</p></blockquote>
<blockquote>
<p><a href="https://mlir.llvm.org/docs/Interfaces/">Interfaces</a> 是一种通用的机制，用于与 IR 进行交互。它们的目标是使转换或分析可以基于这些接口进行，而无需了解具体的 op 或 dialect 的内部实现。通过这种方法，编译器可以在实现转换和分析时不依赖于特定 dialect 或 op ，从而更轻松地扩展编译器的功能。</p></blockquote>
<p>Loop Invariant Code Motion 是 MLIR 提供的 <a href="">General Transform Passes</a> 之一。它会检查循环体中的 op ，如果发现某些 op 在循环内部执行没有必要（即它们的结果在每次循环中保持不变），就会将这些 op 移出循环体。这可以减少循环中的重复计算，提高效率。</p>
<p>要让某个自定义 op 可以被这种 pass 识别并移出循环体，需要添加两个关键的 Traits 来表明该 op 在循环外执行是安全的：</p>
<ul>
<li><a href="https://github.com/llvm/llvm-project/blob/71be020dda2c97c2733e45f4b1003d1c135b3b43/mlir/include/mlir/Interfaces/SideEffectInterfaces.td#L81">NoMemoryEffect</a>: 是 MemoryEffect 的一个 empty 实现，表示该 op 不会产生任何与内存写入相关的副作用。</li>
<li><a href="https://github.com/llvm/llvm-project/blob/71be020dda2c97c2733e45f4b1003d1c135b3b43/mlir/include/mlir/Interfaces/SideEffectInterfaces.td#L123">AlwaysSpeculatable</a>: 是一个包含两个 Traits 的 列表，告诉编译器该 op 可以在不影响程序逻辑的前提下，将其提前计算或移动到其他位置。</li>
</ul>
<p>在 MLIR 中，Loop Invariant Code Motion (LICM) 会将具有 <code>NoMemoryEffect</code> 和 <code>AlwaysSpeculatable</code> 这两个 Traits 的 op 移动到循环体外部，但前提是该 op 的 operands 在整个循环体中保持不变。这样可以避免循环内部的重复计算，从而优化代码执行效率。MLIR 提供了一个方便的组合 Trait <a href="https://github.com/llvm/llvm-project/blob/71be020dda2c97c2733e45f4b1003d1c135b3b43/mlir/include/mlir/Interfaces/SideEffectInterfaces.td#L133">Pure</a>，它包含了 <code>NoMemoryEffect</code> 和 <code>AlwaysSpeculatable</code> 这两个 Traits. 因此，直接添加 <code>Pure</code> Trait 到 op 的定义中就能让编译器自动识别它为可移动到循环外部的 op 。</p>
<p><code>TypeOrContainer</code> 是一个用于处理 op 输入和输出类型的机制，它可以匹配单个类型 (如 <code>f32</code> 或 <code>i32</code>) 以及容器类型(如 <code>vector&lt;f32&gt;</code> 或 <code>tensor&lt;i32&gt;</code>)，使得一个 op 可以被设计为同时支持标量类型和集合类型。</p>
<pre tabindex="0"><code>include &#34;mlir/Interfaces/SideEffectInterfaces.td&#34;

def PolyOrContainer: TypeOrContainer&lt;Polynomial, &#34;poly-or-container&#34;&gt;;

class Poly_BinOp&lt;string mnemonic&gt;: Op&lt;Poly_Dialect, mnemonic, [Pure]&gt; {
    let arguments = (ins PolyOrContainer:$lhs, PolyOrContainer:$rhs);
    let results = (outs PolyOrContainer:$output);
    let assemblyFormat = &#34;$lhs `,` $rhs attr-dict `:` `(` type($lhs) `,` type($rhs) `)` `-&gt;` type($output)&#34;;
}
</code></pre><p>加入 <code>Pure</code> trait 后生成的 .hpp.inc 中关于 op 的定义继承了新的内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">AddOp</span>
</span></span><span class="line"><span class="cl">    <span class="o">:</span> <span class="k">public</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Op</span><span class="o">&lt;</span> <span class="n">AddOp</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OpTrait</span><span class="o">::</span><span class="n">ZeroRegions</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OpTrait</span><span class="o">::</span><span class="n">OneResult</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OpTrait</span><span class="o">::</span><span class="n">OneTypedResult</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">PolynomialType</span><span class="o">&gt;::</span><span class="n">Impl</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OpTrait</span><span class="o">::</span><span class="n">ZeroSuccessors</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OpTrait</span><span class="o">::</span><span class="n">NOperands</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;::</span><span class="n">Impl</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OpTrait</span><span class="o">::</span><span class="n">OpInvariants</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">ConditionallySpeculatable</span><span class="o">::</span><span class="n">Trait</span><span class="p">,</span>            <span class="c1">// &lt;-- new
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OpTrait</span><span class="o">::</span><span class="n">AlwaysSpeculatableImplTrait</span><span class="p">,</span>   <span class="c1">// &lt;-- new
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">MemoryEffectOpInterface</span><span class="o">::</span><span class="n">Trait</span><span class="o">&gt;</span>          <span class="c1">// &lt;--- new
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>NoMemoryEffect</code> interface 则在生成的 .cpp.inc 中添加了一个简单的函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">AddOp</span><span class="o">::</span><span class="n">getEffects</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">SmallVectorImpl</span><span class="o">&lt;</span>
</span></span><span class="line"><span class="cl">        <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">SideEffects</span><span class="o">::</span><span class="n">EffectInstance</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">MemoryEffects</span><span class="o">::</span><span class="n">Effect</span><span class="o">&gt;&gt;&amp;</span>
</span></span><span class="line"><span class="cl">        <span class="n">effects</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以写一个 .mlir 来测试 <code>%2</code> 的计算是否能优化到循环外：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl"><span class="c">// RUN: build/Ch4-UsingTraits/tools/ch4-tutorial-opt %s --loop-invariant-code-motion &gt; %t
</span></span></span><span class="line"><span class="cl"><span class="c">// RUN: FileCheck %s &lt; %t
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl">module <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c">// CHECK-LABEL: func.func @test_loop_invariant_code_motion
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="kt">func</span><span class="p">.</span><span class="kt">func</span> <span class="nf">@test_loop_invariant_code_motion</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">%0</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> dense<span class="p">&lt;[</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]&gt;</span> <span class="p">:</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">3x</span><span class="k">i32</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">%p0</span> <span class="p">=</span> poly<span class="p">.</span>from_tensor <span class="nv">%0</span> <span class="p">:</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">3x</span><span class="k">i32</span><span class="p">&gt;</span> <span class="p">-&gt;</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">%1</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> dense<span class="p">&lt;[</span><span class="m">9</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">16</span><span class="p">]&gt;</span> <span class="p">:</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">3x</span><span class="k">i32</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">%p1</span> <span class="p">=</span> poly<span class="p">.</span>from_tensor <span class="nv">%0</span> <span class="p">:</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">3x</span><span class="k">i32</span><span class="p">&gt;</span> <span class="p">-&gt;</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">// CHECK: poly.mul
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl">        <span class="c">// CHECK: affine.for
</span></span></span><span class="line"><span class="cl"><span class="c"></span>        <span class="nv">%ret_val</span> <span class="p">=</span> affine<span class="p">.</span>for <span class="nv">%i</span> <span class="p">=</span> <span class="m">0</span> to <span class="m">100</span> iter_args<span class="p">(</span><span class="nv">%sum_iter</span> <span class="p">=</span> <span class="nv">%p0</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c">// The polt.mul should be hoisted out of the loop.
</span></span></span><span class="line"><span class="cl"><span class="c"></span>            <span class="c">// CHECK-NOT: poly.mul
</span></span></span><span class="line"><span class="cl"><span class="c"></span>            <span class="nv">%2</span> <span class="p">=</span> poly<span class="p">.</span>mul <span class="nv">%p0</span><span class="p">,</span> <span class="nv">%p1</span> <span class="p">:</span> <span class="p">(!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;,</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nv">%sum_next</span> <span class="p">=</span> poly<span class="p">.</span>add <span class="nv">%sum_iter</span><span class="p">,</span> <span class="nv">%2</span> <span class="p">:</span>  <span class="p">(!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;,</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            affine<span class="p">.</span>yield <span class="nv">%sum_next</span> <span class="p">:</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">return</span> <span class="nv">%ret_val</span><span class="p">:</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="passes-already-handled-by-pure">Passes Already Handled by Pure</h1>
<p>给某个 op 加上 <code>Pure</code> Trait 后，下列 Pass 就会自动识别并优化该 op ：</p>
<ul>
<li><code>--control-flow-sink</code>: 将只在条件语句的某一个分支中使用的 op 移动到对应的分支中，以减少无效代码的执行。需要 op 无内存副作用 (memory-effect free)，通常可以通过 <code>Pure</code> Trait 来满足。</li>
<li><code>--cse</code> (Constant Subexpression Elimination): 常量子表达式消除。当某些重复的计算结果已经存在时，消除不必要的重复计算，提高效率。需要 op 没有内存副作用（memory-effect free），因此 <code>Pure</code> Trait 也可以满足这一要求。</li>
<li><code>--inline</code>: 将函数调用“内联”到调用位置，以减少函数调用的开销。在某些情况下，这可以减少调用栈的深度或优化代码执行的性能。</li>
<li><code>--mem2reg</code>: 将内存中的存储/加载 op 转换为对实际值的直接使用，从而减少内存访问，提高运行效率。</li>
<li><code>--remove-dead-values</code>: 移除未使用的函数参数或返回值，以减少不必要的数据传递或内存占用。</li>
<li><code>--sroa</code> (Scalar Replacement of Aggregates): 将聚合类型（例如数组或结构体）拆分为标量值，通常会对内存布局进行重排，以便更好地利用内存。</li>
<li><code>--symbol-dce</code> (Symbol Dead Code Elimination): 消除不再使用的私有函数 (死代码)，减少不必要的代码量。</li>
</ul>
<h1 id="elementwise-mappings">Elementwise Mappings</h1>
<p>有四种 traits 可以把标量运算扩展到张量运算或者反过来</p>
<ul>
<li>
<p><code>Elemntwise</code>: 标记逐元素的 op ，仅适用于向量或张量，不允许广播。</p>
<ul>
<li>如果任何结果是向量或张量，至少有一个 operand 必须是向量或张量。</li>
<li>如果任何 operand 是向量或张量，至少有一个结果并且所有结果必须是向量或张量。</li>
<li>所有 operand 和结果的向量或张量类型必须具有相同的形状。形状可以是动态的，但对于不匹配的形状，行为是未定义的。</li>
<li>该 op 必须在 operand 和结果上逐元素进行，即在单元素向量或张量上应用时，每个元素的结果应相同。</li>
</ul>
</li>
<li>
<p><code>Scalarizable</code>: 标记和验证某些操作是否可以被系统性地标量化，即将其基于向量或张量的操作转化为基于标量的操作。只要操作是 Elementwise 的，Scalarizable 就可以使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl"><span class="nv">%tensor_select</span> <span class="p">=</span> <span class="s">&#34;arith.select&#34;</span><span class="p">(</span><span class="nv">%pred_tensor</span><span class="p">,</span> <span class="nv">%true_val</span><span class="p">,</span> <span class="nv">%false_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">:</span> <span class="p">(</span><span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">i1</span><span class="p">&gt;,</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">f32</span><span class="p">&gt;,</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">f32</span><span class="p">&gt;)</span>
</span></span><span class="line"><span class="cl">                <span class="p">-&gt;</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">f32</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">// Can be scalarized to
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">%scalar_select</span> <span class="p">=</span> <span class="s">&#34;arith.select&#34;</span><span class="p">(</span><span class="nv">%pred</span><span class="p">,</span> <span class="nv">%true_val_scalar</span><span class="p">,</span> <span class="nv">%false_val_scalar</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">:</span> <span class="p">(</span><span class="k">i1</span><span class="p">,</span> <span class="k">f32</span><span class="p">,</span> <span class="k">f32</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="k">f32</span>
</span></span></code></pre></div></li>
<li>
<p><code>Vectorizable</code>: 提供了与 <code>Scalarizable</code> 相反的 op 。所有的标量 operand 和结果将被替换为相应的向量类型。即，该 op 表示同时作用于多个元素。允许通过广播将标量提升为向量，再进行向量化操作。</p>
</li>
<li>
<p><code>Tensorizable</code>: 提供了与 <code>Scalarizable</code> 相反的 op ，允许在张量和标量之间进行推理。允许通过广播将标量提升为张量，以便在张量 op 中保持一致的 op 结构。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl"><span class="nv">%scalar</span> <span class="p">=</span> <span class="s">&#34;arith.addf&#34;</span><span class="p">(</span><span class="nv">%a</span><span class="p">,</span> <span class="nv">%b</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="k">f32</span><span class="p">,</span> <span class="k">f32</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="k">f32</span>
</span></span><span class="line"><span class="cl"><span class="c">// Can be tensorized to
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">%tensor</span> <span class="p">=</span> <span class="s">&#34;arith.addf&#34;</span><span class="p">(</span><span class="nv">%a</span><span class="p">,</span> <span class="nv">%b</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">f32</span><span class="p">&gt;,</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">f32</span><span class="p">&gt;)</span>
</span></span><span class="line"><span class="cl">            <span class="p">-&gt;</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">f32</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">// Also supports broadcasting
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">%scalar_pred</span> <span class="p">=</span> <span class="s">&#34;arith.select&#34;</span><span class="p">(</span><span class="nv">%pred</span><span class="p">,</span> <span class="nv">%true_val</span><span class="p">,</span> <span class="nv">%false_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">:</span> <span class="p">(</span><span class="k">i1</span><span class="p">,</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">f32</span><span class="p">&gt;,</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">f32</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">f32</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">// Can be tensorized to
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">%tensor_pred</span> <span class="p">=</span> <span class="s">&#34;arith.select&#34;</span><span class="p">(</span><span class="nv">%pred</span><span class="p">,</span> <span class="nv">%true_val</span><span class="p">,</span> <span class="nv">%false_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">:</span> <span class="p">(</span><span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">i1</span><span class="p">&gt;,</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">f32</span><span class="p">&gt;,</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">f32</span><span class="p">&gt;)</span>
</span></span><span class="line"><span class="cl">            <span class="p">-&gt;</span> <span class="kt">tensor</span><span class="p">&lt;</span><span class="m">?x</span><span class="k">f32</span><span class="p">&gt;</span>
</span></span></code></pre></div></li>
</ul>
<p><code>ElementwiseMappable</code> Trait 包含了以上所有的 Traits. 我们可以修改 <code>Poly_BinOp</code> 定义如下：</p>
<pre tabindex="0"><code>// PolyOps.td
def PolyOrContainer : TypeOrContainer&lt;Polynomial, &#34;poly-or-container&#34;&gt;;

class Poly_BinOp&lt;string mnemonic&gt; : Op&lt;Poly_Dialect, mnemonic, [Pure, ElementwiseMappable]&gt; {
  let arguments = (ins PolyOrContainer:$lhs, PolyOrContainer:$rhs);
  let results = (outs PolyOrContainer:$output);
  ...
}
</code></pre><p>添加这个 Trait 后，生成的 .cpp.inc 文件定义了许多检查 op 数类型的函数，下面是其中一个：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">static</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">LogicalResult</span> <span class="n">__mlir_ods_local_type_constraint_PolyOps1</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Operation</span><span class="o">*</span> <span class="n">op</span><span class="p">,</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="n">type</span><span class="p">,</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">StringRef</span> <span class="n">valueKind</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="kt">unsigned</span> <span class="n">valueIndex</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(((</span><span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">isa</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">PolynomialType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">type</span><span class="p">)))</span> <span class="o">||</span>
</span></span><span class="line"><span class="cl">            <span class="p">(((</span><span class="n">type</span><span class="p">.</span><span class="n">hasTrait</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">ValueSemantics</span><span class="o">&gt;</span><span class="p">()))</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">            <span class="p">([](</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="n">elementType</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="p">(</span><span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">isa</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">PolynomialType</span><span class="o">&gt;</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">elementType</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">            <span class="p">}(</span><span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">cast</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">ShapedType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">type</span><span class="p">).</span><span class="n">getElementType</span><span class="p">())))))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">op</span><span class="o">-&gt;</span><span class="n">emitOpError</span><span class="p">(</span><span class="n">valueKind</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">&lt;&lt;</span> <span class="s">&#34; #&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">valueIndex</span>
</span></span><span class="line"><span class="cl">                <span class="o">&lt;&lt;</span> <span class="s">&#34; must be poly-or-container, but got &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">type</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">success</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>该函数首先检查 <code>type</code> 是否为 <code>PolynomialType</code>；如果不是，则进一步检查它是否具有 <code>ValueSemantics</code> Trait，并且是一个 <code>ShapedType</code>（即容器类型，如 <code>vector</code> 或 <code>tensor</code>），其中包含的元素类型是 <code>PolynomialType</code>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>MLIR-Ch4 Defining a New Dialect</title>
      <link>http://localhost:57770/blogs/courselearning/mlir/mlir-ch4-defining-a-new-dialect/</link>
      <pubDate>Thu, 07 Nov 2024 18:16:23 +0800</pubDate>
      <guid>http://localhost:57770/blogs/courselearning/mlir/mlir-ch4-defining-a-new-dialect/</guid>
      <description>Personal MLIR learning notes 4.</description>
      <content:encoded><![CDATA[<h1 id="sketching-out-a-dseign">Sketching Out a Dseign</h1>
<p>TableGen 也可以用来定义 dialect. 本文将定义一个单未知数多项式运算的 dialect，系数用 uint32_t 类型表示。，并提供通过从标准 MLIR 类型指定多项式系数来定义多项式的操作，提取关于多项式的数据以将结果存储在标准MLIR类型中，以及对多项式进行算术运算。</p>
<h1 id="an-empty-dialect">An Empty Dialect</h1>
<p>我们首先用 TableGen 定义一个空的 dialect. 它和上一章定义 Pass 没什么不同，只不过 include 的是 DialectBase.td 文件。同时也定义了命名空间为 <code>::mlir::tutorial::poly</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tablegen" data-lang="tablegen"><span class="line"><span class="cl"><span class="nv">include</span> <span class="s">&#34;mlir/IR/DialectBase.td&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nv">Poly_Dialect</span> <span class="p">:</span> <span class="nv">Dialect</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">let</span> <span class="nv">name</span> <span class="p">=</span> <span class="s">&#34;poly&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">let</span> <span class="nv">summary</span> <span class="p">=</span> <span class="s">&#34;A dialect for polynomial math&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">let</span> <span class="nv">description</span> <span class="p">=</span> <span class="s">[{
</span></span></span><span class="line"><span class="cl"><span class="s">    The poly dialect defines types and operations for single-variable
</span></span></span><span class="line"><span class="cl"><span class="s">    polynomials over integers.
</span></span></span><span class="line"><span class="cl"><span class="s">  }]</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">let</span> <span class="nv">cppNamespace</span> <span class="p">=</span> <span class="s">&#34;::mlir::tutorial::poly&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们需要在 include 目录下的 CMakeLists.txt 文件中添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cmake" data-lang="cmake"><span class="line"><span class="cl"><span class="nb">set</span><span class="p">(</span><span class="s">TARGET_NAME</span> <span class="s2">&#34;${PROJECT_TARGET_PREFIX}-Dialect-PolyDialect-IncGen&#34;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span><span class="p">(</span><span class="s">LLVM_TARGET_DEFINITIONS</span> <span class="s">mlir-learning/Dialect/Poly/PolyDialect.td</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">mlir_tablegen</span><span class="p">(</span><span class="s">mlir-learning/Dialect/Poly/PolyDialect.hpp.inc</span> <span class="s">--gen-dialect-decls</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">mlir_tablegen</span><span class="p">(</span><span class="s">mlir-learning/Dialect/Poly/PolyDialect.cpp.inc</span> <span class="s">--gen-dialect-defs</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">add_public_tablegen_target</span><span class="p">(</span><span class="o">${</span><span class="nv">TARGET_NAME</span><span class="o">}</span><span class="p">)</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后在 tutorial-opt.cpp 中注册所有 mlir 自带的所有 dialect 后进行构建，我们可以查看生成的 .hpp.inc 和.cpp.inc 文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">mlir</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">tutorial</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PolyDialect</span> <span class="o">:</span> <span class="k">public</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Dialect</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">explicit</span> <span class="nf">PolyDialect</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">MLIRContext</span> <span class="o">*</span><span class="n">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">initialize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">friend</span> <span class="k">class</span> <span class="err">::</span><span class="nc">mlir</span><span class="o">::</span><span class="n">MLIRContext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="o">~</span><span class="n">PolyDialect</span><span class="p">()</span> <span class="k">override</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">static</span> <span class="k">constexpr</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">StringLiteral</span> <span class="n">getDialectNamespace</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">StringLiteral</span><span class="p">(</span><span class="s">&#34;poly&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// namespace tutorial
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="c1">// namespace mlir
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MLIR_DECLARE_EXPLICIT_TYPE_ID</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">PolyDialect</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译器会报错，因为 inc 不会包含 Dialect 等类所在的头文件。这需要我们自己在 PolyDialect.h 文件中进行 include，这样 当重新构建的时候该文件注入变不会报错</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// include/mlir-learning/Dialect/Poly/PolyDialect.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#ifndef LIB_DIALECT_POLY_POLYDIALECT_H
</span></span></span><span class="line"><span class="cl"><span class="cp">#define LIB_DIALECT_POLY_POLYDIALECT_H
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/IR/DialectImplementation.h&#34;</span><span class="cp">  </span><span class="c1">// include mannually
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir-learning/Dialect/Poly/PolyDialect.hpp.inc&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>生成的 .cpp.inc 如下，他只包含了该类基本的构造函数和析构函数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">MLIR_DEFINE_EXPLICIT_TYPE_ID</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">PolyDialect</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">mlir</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">tutorial</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">poly</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">PolyDialect</span><span class="o">::</span><span class="n">PolyDialect</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">MLIRContext</span> <span class="o">*</span><span class="n">context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">:</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Dialect</span><span class="p">(</span><span class="n">getDialectNamespace</span><span class="p">(),</span> <span class="n">context</span><span class="p">,</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">TypeID</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="n">PolyDialect</span><span class="o">&gt;</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">     <span class="p">{</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="n">initialize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">PolyDialect</span><span class="o">::~</span><span class="n">PolyDialect</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// namespace poly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="c1">// namespace tutorial
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="c1">// namespace mlir
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们可以在 tutorial-opt.cpp 中注册该 dialect.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cm">/* other includes */</span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir-learning/Dialect/Poly/PolyDialect.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Register all built-in MLIR dialects
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">mlir</span><span class="o">::</span><span class="n">DialectRegistry</span> <span class="n">registry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Register our Dialect
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">registry</span><span class="p">.</span><span class="n">insert</span><span class="o">&lt;</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">PolyDialect</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">mlir</span><span class="o">::</span><span class="n">registerAllDialects</span><span class="p">(</span><span class="n">registry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">mlir</span><span class="o">::</span><span class="n">asMainReturnCode</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">mlir</span><span class="o">::</span><span class="n">MlirOptMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="s">&#34;Tutorial Pass Driver&#34;</span><span class="p">,</span> <span class="n">registry</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="adding-a-trival-type">Adding a Trival Type</h1>
<p>下面我们需要定义自己的 poly.poly 类型.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tablegen" data-lang="tablegen"><span class="line"><span class="cl"><span class="c">// poly_types.td
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="cp">#ifndef LIB_DIALECT_POLY_POLYTYPES_TD_</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LIB_DIALECT_POLY_POLYTYPES_TD_</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">include</span> <span class="s">&#34;mlir-learning/Dialect/Poly/PolyDialect.td&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">include</span> <span class="s">&#34;mlir/IR/AttrTypeBase.td&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">// a base class for all types in the dialect
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">class</span> <span class="nv">Poly_Type</span><span class="p">&lt;</span><span class="k">string</span> <span class="nv">name</span><span class="p">,</span> <span class="k">string</span> <span class="nv">typeMnemonic</span><span class="p">&gt;</span> <span class="p">:</span> <span class="nv">TypeDef</span><span class="p">&lt;</span><span class="nv">Poly_Dialect</span><span class="p">,</span> <span class="nv">name</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">let</span> <span class="nv">mnemonic</span> <span class="p">=</span> <span class="nv">typeMnemonic</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nv">Polynomial</span><span class="p">:</span> <span class="nv">Poly_Type</span><span class="p">&lt;</span><span class="s">&#34;Polynomial&#34;</span><span class="p">,</span> <span class="s">&#34;poly&#34;</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">let</span> <span class="nv">summary</span> <span class="p">=</span> <span class="s">&#34;A polynomial with u32 coefficients&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">let</span> <span class="nv">description</span> <span class="p">=</span> <span class="s">[{
</span></span></span><span class="line"><span class="cl"><span class="s">    A type for polynomials with integer coefficients in a single-variable polynomial ring.
</span></span></span><span class="line"><span class="cl"><span class="s">  }]</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 MLIR 的 TableGen 文件中，class 和 def 的用法和含义有所不同</p>
<ul>
<li><code>class</code> 用于定义一个模板或基类，可以被其他类型或定义继承和重用。它本身不会创建实际的对象或具体类型，它只是一种结构，可以包含参数和默认属性。其他定义可以通过继承该类来获得其功能。</li>
<li><code>def</code> 用于创建一个具体的实例，比如一个类型、操作或属性。它会将所定义的内容应用到 TableGen 中，使其成为可用的具体类型或功能。</li>
</ul>
<p>这里我们定义了一个名为 <code>Poly_Type</code> 的类，参数为 <code>name</code>（类型的名称）和 <code>typeMnemonic</code>（类型的简写或助记符）。这个类继承自 <code>TypeDef&lt;Poly_Dialect, name&gt;</code>. 然后 <code>def</code> 特定的多项式类型 <code>Polynomial</code>，继承自 <code>Poly_Type</code>.</p>
<p>在 MLIR 的 TableGen 中，<a href="https://github.com/llvm/llvm-project/blob/630ba7d705fa1d55096dbbf88c6886d64033a780/mlir/include/mlir/IR/AttrTypeBase.td#L281">TypeDef</a> 本身也是一个类，它接受模板参数，用于指定该类型所属的 dialect 和名称字段。其作用包括将生成的C++类与该 dialect 的命名空间相关联。</p>
<p>生成的 .hpp.inc 文件如下。生成的类 <code>PolynomialType</code> 就是在我们的 TableGen 文件中定义的 <code>Polynomial</code> 类型后面加上了 Type.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#ifdef GET_TYPEDEF_CLASSES
</span></span></span><span class="line"><span class="cl"><span class="cp">#undef GET_TYPEDEF_CLASSES
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">mlir</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">AsmParser</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">AsmPrinter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// namespace mlir
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">namespace</span> <span class="n">mlir</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">tutorial</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">poly</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PolynomialType</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PolynomialType</span> <span class="o">:</span> <span class="k">public</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">TypeBase</span><span class="o">&lt;</span><span class="n">PolynomialType</span><span class="p">,</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span><span class="p">,</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">TypeStorage</span><span class="o">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">using</span> <span class="n">Base</span><span class="o">::</span><span class="n">Base</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">static</span> <span class="k">constexpr</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">StringLiteral</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;poly.poly&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">static</span> <span class="k">constexpr</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">StringLiteral</span> <span class="n">dialectName</span> <span class="o">=</span> <span class="s">&#34;poly&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">static</span> <span class="k">constexpr</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">StringLiteral</span> <span class="n">getMnemonic</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span><span class="s">&#34;poly&#34;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// namespace poly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="c1">// namespace tutorial
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="c1">// namespace mlir
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MLIR_DECLARE_EXPLICIT_TYPE_ID</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">PolynomialType</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#endif  </span><span class="c1">// GET_TYPEDEF_CLASSES
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>生成的 .cpp.inc 文件如下。TableGen 试图为 dialect 中的 <code>PolynomialType</code> 自动生成一个 类型解析器 (type parser) 和类型打印器 (type printer). 不过此时这些功能还不可用，构建项目时会看到一些编译警告。</p>
<p>代码中使用了 头文件保护 (header guards) 来将 <code>cpp</code> 文件分隔为两个受保护的部分。这样可以分别管理类型声明和函数实现。</p>
<p><code>GET_TYPEDEF_LIST</code> 只包含类名的逗号分隔列表。原因在于 <code>PolyDialect.cpp</code> 文件需要负责将类型注册到 dialect 中，而该注册过程通过在方言初始化函数中将这些 C++ 类名作为模板参数来实现。换句话说，<code>GET_TYPEDEF_LIST</code> 提供了一种简化机制，使得 <code>PolyDialect.cpp</code> 可以自动获取所有类名称列表，便于统一注册，而不需要手动添加每一个类型。</p>
<ul>
<li><strong><code>generatedTypeParser</code></strong> 函数是为 <code>PolynomialType</code> 定义的解析器。当解析器遇到 <code>PolynomialType</code> 的助记符（<code>poly</code>）时，会将 <code>PolynomialType</code> 类型实例化。<code>KeywordSwitch</code> 使用 <code>getMnemonic()</code> 来匹配 <code>PolynomialType</code> 的助记符（<code>poly</code>）。如果匹配成功，则调用 <code>PolynomialType::get()</code> 来获取类型实例。<code>Default</code> 子句在助记符不匹配时执行，记录未知的助记符，并返回 <code>std::nullopt</code> 表示解析失败。</li>
<li><strong><code>generatedTypePrinter</code></strong> 函数为 <code>PolynomialType</code> 提供了打印功能。当类型为 <code>PolynomialType</code> 时，打印其助记符（<code>poly</code>），否则返回失败。<code>TypeSwitch</code> 用于检查 <code>def</code> 类型是否是 <code>PolynomialType</code>。如果是，打印助记符；否则返回失败，表示该类型不属于此方言。</li>
<li><code>PolyDialect::parseType</code> 和 <code>PolyDialect::printType</code> 作为方言接口调用这两个函数，从而实现类型的解析和打印功能。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#ifdef GET_TYPEDEF_LIST
</span></span></span><span class="line"><span class="cl"><span class="cp">#undef GET_TYPEDEF_LIST
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">PolynomialType</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#endif  </span><span class="c1">// GET_TYPEDEF_LIST
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef GET_TYPEDEF_CLASSES
</span></span></span><span class="line"><span class="cl"><span class="cp">#undef GET_TYPEDEF_CLASSES
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OptionalParseResult</span> <span class="n">generatedTypeParser</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">AsmParser</span> <span class="o">&amp;</span><span class="n">parser</span><span class="p">,</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">StringRef</span> <span class="o">*</span><span class="n">mnemonic</span><span class="p">,</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">AsmParser</span><span class="o">::</span><span class="n">KeywordSwitch</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OptionalParseResult</span><span class="o">&gt;</span><span class="p">(</span><span class="n">parser</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">Case</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">PolynomialType</span><span class="o">::</span><span class="n">getMnemonic</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">llvm</span><span class="o">::</span><span class="n">StringRef</span><span class="p">,</span> <span class="n">llvm</span><span class="o">::</span><span class="n">SMLoc</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">value</span> <span class="o">=</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">PolynomialType</span><span class="o">::</span><span class="n">get</span><span class="p">(</span><span class="n">parser</span><span class="p">.</span><span class="n">getContext</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">success</span><span class="p">(</span><span class="o">!!</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">Default</span><span class="p">([</span><span class="o">&amp;</span><span class="p">](</span><span class="n">llvm</span><span class="o">::</span><span class="n">StringRef</span> <span class="n">keyword</span><span class="p">,</span> <span class="n">llvm</span><span class="o">::</span><span class="n">SMLoc</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="o">*</span><span class="n">mnemonic</span> <span class="o">=</span> <span class="n">keyword</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">LogicalResult</span> <span class="n">generatedTypePrinter</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="n">def</span><span class="p">,</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">AsmPrinter</span> <span class="o">&amp;</span><span class="n">printer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">TypeSwitch</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span><span class="p">,</span> <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">LogicalResult</span><span class="o">&gt;</span><span class="p">(</span><span class="n">def</span><span class="p">)</span>    <span class="p">.</span><span class="n">Case</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">PolynomialType</span><span class="o">&gt;</span><span class="p">([</span><span class="o">&amp;</span><span class="p">](</span><span class="k">auto</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">printer</span> <span class="o">&lt;&lt;</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">PolynomialType</span><span class="o">::</span><span class="n">getMnemonic</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">success</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">Default</span><span class="p">([](</span><span class="k">auto</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">failure</span><span class="p">();</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">mlir</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">tutorial</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">poly</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// namespace poly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="c1">// namespace tutorial
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="c1">// namespace mlir
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MLIR_DEFINE_EXPLICIT_TYPE_ID</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">poly</span><span class="o">::</span><span class="n">PolynomialType</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">mlir</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">tutorial</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">poly</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">/// Parse a type registered to this dialect.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="n">PolyDialect</span><span class="o">::</span><span class="n">parseType</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">DialectAsmParser</span> <span class="o">&amp;</span><span class="n">parser</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">SMLoc</span> <span class="n">typeLoc</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">getCurrentLocation</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">::</span><span class="n">llvm</span><span class="o">::</span><span class="n">StringRef</span> <span class="n">mnemonic</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="n">genType</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">parseResult</span> <span class="o">=</span> <span class="n">generatedTypeParser</span><span class="p">(</span><span class="n">parser</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mnemonic</span><span class="p">,</span> <span class="n">genType</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">parseResult</span><span class="p">.</span><span class="n">has_value</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">genType</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="n">parser</span><span class="p">.</span><span class="n">emitError</span><span class="p">(</span><span class="n">typeLoc</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;unknown  type `&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="o">&lt;&lt;</span> <span class="n">mnemonic</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;` in dialect `&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">getNamespace</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;`&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">/// Print a type registered to this dialect.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="n">PolyDialect</span><span class="o">::</span><span class="n">printType</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="n">type</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">DialectAsmPrinter</span> <span class="o">&amp;</span><span class="n">printer</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">succeeded</span><span class="p">(</span><span class="n">generatedTypePrinter</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">printer</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// namespace poly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="c1">// namespace tutorial
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="c1">// namespace mlir
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif  </span><span class="c1">// GET_TYPEDEF_CLASSES
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在设置 C++ 接口以使用 TableGen 文件时，通常会按照以下步骤来组织代码文件和包含关系。</p>
<ul>
<li><code>PolyTypes.h</code> 是唯一被允许包含 <code>PolyTypes.h.inc</code> 的文件。</li>
<li><code>PolyTypes.cpp.inc</code> 文件包含了 TableGen 为 <code>PolyDialect</code> 中的类型生成的实现。我们需要在 <code>PolyDialect.cpp</code> 中将其包含进去，以确保所有实现都能在该方言的主文件中使用。</li>
<li><code>PolyTypes.cpp</code> 文件应该包含 <code>PolyTypes.h</code>，以便访问类型声明，并在该文件中实现所有需要的额外功能。</li>
</ul>
<pre tabindex="0"><code class="language-plaintexxt" data-lang="plaintexxt">./Ch3-DefiningANewDialect/
├── CMakeLists.txt
├── include
│   ├── CMakeLists.txt
│   └── mlir-tutorial
│       └── Dialect
│           └── Poly
│               ├── PolyDialect.hpp
│               ├── PolyDialect.td
│               ├── PolyOps.hpp
│               ├── PolyOps.td
│               ├── PolyTypes.hpp
│               └── PolyTypes.td
├── lib
│   ├── CMakeLists.txt
│   └── Dialect
│       └── Poly
│           └── PolyDialect.cpp
</code></pre><p>为了让类型解析器和打印器能够正确编译和运行，需要最后在方言的 TableGen 文件中添加 <code>let useDefaultTypePrinterParser = 1</code>;，这个指令告诉 TableGen 使用默认的类型解析和打印器。当这个选项启用后，TableGen 会生成相应的解析和打印代码，并将这些实现作为 <code>PolyDialect</code> 类的成员函数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">/// Parse a type registered to this dialect.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="n">parseType</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">DialectAsmParser</span> <span class="o">&amp;</span><span class="n">parser</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">/// Print a type registered to this dialect.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">void</span> <span class="nf">printType</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="n">type</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                 <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">DialectAsmPrinter</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们可以写一个 .mlir 来测试属性是是否获取正确。在 MLIR 中自定义的 dialect 前都需要加上 <code>!</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl">    <span class="c">// CHECK-LABEL: test_type_syntax
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="kt">func</span><span class="p">.</span><span class="kt">func</span> <span class="nf">@test_type_syntax</span><span class="p">(</span><span class="nv">%arg0</span><span class="p">:</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c">// CHECK: poly.poly
</span></span></span><span class="line"><span class="cl"><span class="c"></span>        <span class="kt">return</span> <span class="nv">%arg0</span><span class="p">:</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="add-a-poly-type-parameter">Add a Poly Type Parameter</h1>
<p>我们需要为多项式类型添加一个属性，表示它的次数上限。</p>
<pre tabindex="0"><code>// include/mlir-tutorial/Dialect/Poly/PolyTypes.td
let parameters = (ins &#34;int&#34;:$degreeBound);
let assemblyFormat = &#34;`&lt;` $degreeBound `&gt;`&#34;;
</code></pre><p>第一行定义了类型的一个参数 <code>degreeBound</code>，类型为 <code>int</code>. 表示在实例化该类型时，用户可以指定一个整数值作为类型的参数。<code>parameters</code> 中的 (<code>ins &quot;int&quot;:$degreeBound</code>) 指定了输入参数的类型和名称，其中 int 是数据类型，<code>$degreeBound</code> 是参数的占位符。<code>assemblyFormat</code> 用于定义该类型在 MLIR 文本格式中的打印和解析格式。<code>&quot;&lt;&quot; $degreeBound &quot;&gt;&quot;</code> 表示该类型的参数会用尖括号包裹。第二行是必需的，因为现在一个 Poly 类型有了这个关联的数据，我们需要能够将它打印出来并从文本 IR 表示中解析它。</p>
<p>加上这两行代码后进行 build 会发现多了一些新的内容。</p>
<ul>
<li><code>PolynomialType</code> 有一个新的 <code>int getDegreeBound()</code> 方法，以及一个静态 <code>get</code> 工厂方法。</li>
<li><code>parse</code> 和 <code>print</code> 升级为新格式。</li>
<li>有一个名为 <code>typestorage</code> 的新类，它包含 int 形参，并隐藏在内部细节名称空间中。</li>
</ul>
<p>MLIR会自动生成简单类型的 storage 类，因为它们不需要复杂的内存管理。如果参数更复杂，就需要开发者手动编写 storage 类来定义构造、析构和其他语义。复杂的 storage 类需要实现更多细节，以确保类型能够在 MLIR 的 dialect 系统中顺利运行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// include/mlir-learning/Dialect/Poly/PolyTypes.hpp.inc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">static</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="n">parse</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">AsmParser</span> <span class="o">&amp;</span><span class="n">odsParser</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">AsmPrinter</span> <span class="o">&amp;</span><span class="n">odsPrinter</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="nf">getDegreeBound</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// include/mlir-learning/Dialect/Poly/PolyTypes.cpp.inc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">PolynomialTypeStorage</span> <span class="o">:</span> <span class="k">public</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">TypeStorage</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* lots of code */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">PolynomialType</span> <span class="n">PolynomialType</span><span class="o">::</span><span class="n">get</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">MLIRContext</span> <span class="o">*</span><span class="n">context</span><span class="p">,</span> <span class="kt">int</span> <span class="n">degreeBound</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">Base</span><span class="o">::</span><span class="n">get</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">degreeBound</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Type</span> <span class="n">PolynomialType</span><span class="o">::</span><span class="n">parse</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">AsmParser</span> <span class="o">&amp;</span><span class="n">odsParser</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* code to parse the type */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">PolynomialType</span><span class="o">::</span><span class="n">print</span><span class="p">(</span><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">AsmPrinter</span> <span class="o">&amp;</span><span class="n">odsPrinter</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Builder</span> <span class="n">odsBuilder</span><span class="p">(</span><span class="n">getContext</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="n">odsPrinter</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;&lt;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">odsPrinter</span><span class="p">.</span><span class="n">printStrippedAttrOrType</span><span class="p">(</span><span class="n">getDegreeBound</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="n">odsPrinter</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;&gt;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">PolynomialType</span><span class="o">::</span><span class="n">getDegreeBound</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nf">getImpl</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">degreeBound</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="adding-some-simple-operations">Adding Some Simple Operations</h1>
<p>下面我们定义一个简单的多项式加法操作</p>
<pre tabindex="0"><code>// include/mlir-tutorial/Dialect/Poly/PolyOps.td
include &#34;PolyDialect.td&#34;
include &#34;PolyTypes.td&#34;

def Poly_AddOp : Op&lt;Poly_Dialect, &#34;add&#34;&gt; {
  let summary = &#34;Addition operation between polynomials.&#34;;
  let arguments = (ins Polynomial:$lhs, Polynomial:$rhs);
  let results = (outs Polynomial:$output);
  let assemblyFormat = &#34;$lhs `,` $rhs attr-dict `:` `(` type($lhs) `,` type($rhs) `)` `-&gt;` type($output)&#34;;
}
</code></pre><p>和刚才定义 types 非常相近，但基类是 Op，arguments 对应于操作的输入，assemblyFormat 更复杂。生成的 .hpp.inc 和 .cpp.inc 非常复杂。我们可以编写一个 .mlir 来测试。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl">  <span class="c">// CHECK-LABEL: test_add_syntax
</span></span></span><span class="line"><span class="cl"><span class="c"></span>  <span class="kt">func</span><span class="p">.</span><span class="kt">func</span> <span class="nf">@test_add_syntax</span><span class="p">(</span><span class="nv">%arg0</span><span class="p">:</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;,</span> <span class="nv">%arg1</span><span class="p">:</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c">// CHECK: poly.add
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="nv">%0</span> <span class="p">=</span> poly<span class="p">.</span>add <span class="nv">%arg0</span><span class="p">,</span> <span class="nv">%arg1</span> <span class="p">:</span> <span class="p">(!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;,</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">return</span> <span class="nv">%0</span> <span class="p">:</span> <span class="p">!</span>poly<span class="p">.</span>poly<span class="p">&lt;</span><span class="m">10</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>生成的代码定义了以下几个方面：</p>
<ol>
<li>
<p>Adaptor Classes:</p>
<ul>
<li>AddOpGenericAdaptorBase 和 AddOpAdaptor: 提供了便捷的方式来访问操作的操作数 (operands) 和属性 (attributes)。它们在编写转换和重写模式时特别有用。</li>
</ul>
</li>
<li>
<p>Properties Handling:</p>
<ul>
<li>诸如 setPropertiesFromAttr , getPropertiesAsAttr , computePropertiesHash 等函数是 MLIR 操作属性系统的接口。虽然在这个特定的 AddOp 实现中，有些函数可能是空实现或返回默认值，但它们是操作定义结构的一部分。</li>
</ul>
</li>
<li>
<p>Builder Methods:</p>
<ul>
<li>多个重载的 AddOp::build 静态方法。这些方法用于在代码中以编程方式创建 AddOp 的实例。</li>
</ul>
</li>
<li>
<p>Verification:</p>
<ul>
<li>AddOp::verifyInvariantsImpl() 和 AddOp::verifyInvariants() : 这些方法用于检查一个 AddOp 实例是否符合其定义。例如，它们会验证操作数的数量和类型是否正确，结果类型是否符合预期。代码中调用了像 __mlir_ods_local_type_constraint_PolyOps2 这样的辅助函数来进行类型约束检查。</li>
</ul>
</li>
<li>
<p>Assembly Format Parsing and Printing:</p>
<ul>
<li>AddOp::parse(::mlir::OpAsmParser&amp; parser, ::mlir::OperationState&amp; result) : 这个方法定义了如何从 MLIR 的文本汇编格式中解析出 AddOp 。当 MLIR 工具读取 .mlir 文件时，会调用此方法。</li>
<li>AddOp::print(::mlir::OpAsmPrinter&amp; _odsPrinter) : 这个方法定义了如何将 AddOp 实例打印成 MLIR 的文本汇编格式。</li>
</ul>
</li>
<li>
<p>Type ID Definition:</p>
<ul>
<li>MLIR_DEFINE_EXPLICIT_TYPE_ID(::mlir::tutorial::poly::AddOp) : 这个宏用于 MLIR 的运行时类型信息 (RTTI) 系统，为 AddOp 类型生成一个唯一的标识符。</li>
</ul>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>MLIR-Ch3 Using Tablegen for Passes</title>
      <link>http://localhost:57770/blogs/courselearning/mlir/mlir-ch3-using-tablegen-for-passes/</link>
      <pubDate>Wed, 06 Nov 2024 09:37:32 +0800</pubDate>
      <guid>http://localhost:57770/blogs/courselearning/mlir/mlir-ch3-using-tablegen-for-passes/</guid>
      <description>Personal MLIR learning notes 3.</description>
      <content:encoded><![CDATA[<h1 id="what-is-tablegen">What is Tablegen?</h1>
<p>TableGen 是一个用于生成代码和描述结构的 DSL 和工具，最初由 LLVM 开发，后来被 MLIR 继承并扩展。它主要用于以声明式的方式定义和生成 MLIR 的各种组件，例如 Dialects、Operations、Attributes、Types 和 Passes，从而减少手动编写重复性 C++ 代码的工作量。</p>
<p>mlir-tablegen 并没有清楚地告诉你哪些函数没有实现，也没有解释必须编写的函数。确定缺失内容的主要方法是尝试用一些使用它的代码来构建生成的代码，然后筛选数百行 c++ 编译器错误，这反过来又需要了解生成代码中的各种模板操作。生成的代码将使用必须知道的符号，以便在正确的位置导入或提前声明，并且它要求管理生成的代码所在的名称空间。</p>
<h1 id="tablegen-files-and-the-mlir-tblgen-binary">Tablegen Files and the mlir-tblgen Binary</h1>
<p>TableGen 允许你定义变量，并且这些变量可以在多个定义中重复使用。</p>
<p>TableGen允许你在定义中嵌入C++代码片段。这些代码片段会被插入到TableGen生成的C++类中，并且这些C++代码片段可以访问前面定义的变量。这使得TableGen能够生成高度定制化的C++代码。如果需要为你的 pass 编写特殊的构造函数，就可以在 <code>PassBase.td</code>中用 TableGen 的语法写下相应的 C++ 代码。</p>
<p>下面给出了一个以 tablegen 语法重写上一章的 <code>AffineFullUnroll </code>pass 的例子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// mlir-learning/Transform/Affine/Pass.td
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">include</span> <span class="s">&#34;mlir/Pass/PassBase.td&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">def</span> <span class="nl">AffineFullUnroll</span> <span class="p">:</span> <span class="n">Pass</span><span class="o">&lt;</span><span class="s">&#34;affine-full-unroll&#34;</span><span class="o">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">let</span> <span class="n">summary</span> <span class="o">=</span> <span class="s">&#34;Fully unroll all affine loops&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">let</span> <span class="n">description</span> <span class="o">=</span> <span class="p">[{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Fully</span> <span class="n">unroll</span> <span class="n">all</span> <span class="n">affine</span> <span class="n">loops</span><span class="p">.</span> <span class="p">(</span><span class="n">could</span> <span class="n">add</span> <span class="n">more</span> <span class="n">docs</span> <span class="n">here</span> <span class="n">like</span> <span class="n">code</span> <span class="n">examples</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}];</span>
</span></span><span class="line"><span class="cl">  <span class="n">let</span> <span class="n">dependentDialects</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#34;mlir::affine::AffineDialect&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>TableGen 拥有类似的类和继承的概念。<code>: Pass&lt;...&gt;</code> 表示一个类继承自 <a href="https://github.com/llvm/llvm-project/blob/1b74459df8a6d960f7387f0c8379047e42811f58/mlir/include/mlir/Pass/PassBase.td#L95">PassBase.td</a> 文件中定义的 <code>Pass</code> 基类</p>
<p><code>def</code> 用于定义一个具体实例，它会生成对应的 C++ 代码。 也就是说，使用 <code>def</code> 定义的类实例会被 TableGen 处理，最终转换成实际的代码，而仅仅使用 <code>class</code> 定义的类则不会直接生成代码，只作为模板或基类存在。</p>
<p>上面代码说明 TableGen 允许定义字符串变量和列表。 TableGen 还有一个重要功能：它允许定义变量并在多个定义中复用这些变量，还可以定义 C++ 代码片段，并将这些片段插入到生成的类中。 这些 C++ 代码片段可以使用前面定义的变量。例如 <a href="https://github.com/llvm/llvm-project/blob/1b74459df8a6d960f7387f0c8379047e42811f58/mlir/include/mlir/Pass/PassBase.td#L82">PassBase.td</a> 类定义了一个代码构造函数变量。 如果需要为你的 Pass 类编写特殊的构造函数，可以在 PassBase.td 中编写相应的 C++ 代码。 这意味着 TableGen 不仅仅是简单的文本替换，它能够处理更复杂的代码生成逻辑，包括变量的跨定义使用和 C++ 代码的嵌入。</p>
<p>和上一章不同的是，这次我们也需要在 include 目录下写一个 CMakeLists.txt</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cmake" data-lang="cmake"><span class="line"><span class="cl"><span class="nb">set</span><span class="p">(</span><span class="s">TARGET_NAME</span> <span class="s2">&#34;${PROJECT_TARGET_PREFIX}-Transform-Affine-Passes-IncGen&#34;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span><span class="p">(</span><span class="s">LLVM_TARGET_DEFINITIONS</span> <span class="s">mlir-learning/Transform/Affine/Pass.td</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">mlir_tablegen</span><span class="p">(</span><span class="s">mlir-learning/Transform/Affine/Pass.h.inc</span> <span class="s">-gen-pass-decls</span> <span class="s">-name=Affine</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">mlir_tablegen</span><span class="p">(</span><span class="s">mlir-learning/Transform/Affine/Pass.md</span> <span class="s">-gen-pass-doc</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">add_public_tablegen_target</span><span class="p">(</span><span class="o">${</span><span class="nv">TARGET_NAME</span><span class="o">}</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">ALL_TABLEGEN_TARGETS</span>
</span></span><span class="line"><span class="cl">    <span class="o">${</span><span class="nv">PROJECT_TARGET_PREFIX</span><span class="o">}</span><span class="s">-Transform-Affine-Passes-IncGen</span>
</span></span><span class="line"><span class="cl">    <span class="c">#${PROJECT_TARGET_PREFIX}-Transform-Arith-Passes-IncGen
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Add the generated files to a global property, so they can be used in the library
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">set_property</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">GLOBAL</span> <span class="s">PROPERTY</span> <span class="o">${</span><span class="nv">PROJECT_TARGET_PREFIX</span><span class="o">}</span><span class="s">-TABLEGEN-TARGETS</span>
</span></span><span class="line"><span class="cl">    <span class="o">${</span><span class="nv">ALL_TABLEGEN_TARGETS</span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>set(LLVM_TARGET_DEFINITIONS mlir-learning/Transform/Affine/Pass.td)</code>: 这行代码设置了 TableGen 的输入文件。</li>
<li><code>mlir_tablegen(mlir-learning/Transform/Affine/Pass.h.inc -gen-pass-decls -name=Affine)</code>: 这行调用了 <code>mlir_tablegen</code> 命令，它将 Pass.td 文件作为输入，生成一个名为 Pass.h.inc 的头文件，其中包含 Pass 的声明 (<code>-gen-pass-decls</code>)，并且命名空间为 Affine (<code>-name=Affine</code>).</li>
<li><code>mlir_tablegen(mlir-learning/Transform/Affine/Pass.md -gen-pass-doc)</code>: 这行同样调用 mlir_tablegen，生成一个名为 Pass.md 的文件，包含 Pass 的文档信息 (<code>-gen-pass-doc</code>).</li>
<li><code>add_public_tablegen_target(${TARGET_NAME})</code>: 这行代码将 TableGen 生成的目标添加到 CMake 项目中，使其成为一个公共目标，其他部分可以依赖它。</li>
<li><code>set(ALL_TABLEGEN_TARGETS ...)</code>: 这行代码定义了一个列表 <code>ALL_TABLEGEN_TARGETS</code>，包含所有 TableGen 生成的目标。</li>
<li><code>set_property(GLOBAL PROPERTY ...)</code>: 这行代码将所有 TableGen 生成的目标添加到全局属性 <code>${PROJECT_TARGET_PREFIX}-TABLEGEN-TARGETS}</code> 中。 使得构建系统能够跟踪和管理所有由 TableGen 生成的文件，确保它们被正确地包含在库或可执行文件中。</li>
</ul>
<h1 id="inc-files">.inc Files</h1>
<p>我们同样创建和上一章相同的文件 (可以先不写)，需要注意的是由于 TableGen 生成的 .inc 文件位于构建目录下，在 lib 的 CMakeLists.txt 中我们需要在 <code>target_include_directories</code> 命令中加入 <code>${CMAKE_OUTPUT_DIR}/include</code></p>
<p>下面我们来逐段看生成的 .inc 文件</p>
<ol>
<li>头部保护和条件编译</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">//===----------------------------------------------------------------------===//
</span></span></span><span class="line"><span class="cl"><span class="c1">// AffineFullUnroll
</span></span></span><span class="line"><span class="cl"><span class="c1">//===----------------------------------------------------------------------===//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#ifdef GEN_PASS_DECL_AFFINEFULLUNROLL
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Pass</span><span class="o">&gt;</span> <span class="nf">createAffineFullUnroll</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="cp">#undef GEN_PASS_DECL_AFFINEFULLUNROLL
</span></span></span><span class="line"><span class="cl"><span class="cp">#endif </span><span class="c1">// GEN_PASS_DECL_AFFINEFULLUNROLL
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这部分代码使用了预处理宏 <code>GEN_PASS_DECL_AFFINEFULLUNROLL</code>。  如果这个宏被定义，则编译器会生成 <code>createAffineFullUnroll()</code> 函数的声明。</p>
<ol start="2">
<li>Pass 的实现</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#ifdef GEN_PASS_DEF_AFFINEFULLUNROLL
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">namespace</span> <span class="n">impl</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Pass</span><span class="o">&gt;</span> <span class="nf">createAffineFullUnroll</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// namespace impl
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">namespace</span> <span class="n">impl</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">template</span> <span class="o">&lt;</span><span class="kr">typename</span> <span class="n">DerivedT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">class</span> <span class="nl">AffineFullUnrollBase</span> <span class="p">:</span> <span class="n">public</span> <span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="n">OperationPass</span><span class="o">&lt;&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ... (Pass 的方法定义) ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// namespace impl
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Pass</span><span class="o">&gt;</span> <span class="nf">createAffineFullUnroll</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">impl</span><span class="o">::</span><span class="nf">createAffineFullUnroll</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#undef GEN_PASS_DEF_AFFINEFULLUNROLL
</span></span></span><span class="line"><span class="cl"><span class="cp">#endif </span><span class="c1">// GEN_PASS_DEF_AFFINEFULLUNROLL
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这部分是 Pass 的主要实现。它使用了 <code>GEN_PASS_DEF_AFFINEFULLUNROLL</code> 宏来控制编译。如果该宏被定义，则编译器会编译 AffineFullUnrollBase 类以及 <code>createAffineFullUnroll</code> 函数。</p>
<ul>
<li><code>AffineFullUnrollBase</code> 是一个基类模板，使用 CRTP (Curiously Recurring Template Pattern) 技术，允许派生类通过 DerivedT 获取自身的类型信息。 这是一种常见的 C++ 设计模式，用于实现静态多态。它定义了 Pass 的基本信息，例如名称、描述、命令行参数、依赖的 Dialect (这里是 <code>mlir::affine::AffineDialect</code>).</li>
<li><code>createAffineFullUnroll</code> 函数负责创建 <code>AffineFullUnroll</code> Pass 的实例。 它使用了 <code>impl</code> 命名空间，这是一种常见的 C++ 代码组织方式，用于隐藏实现细节。</li>
</ul>
<ol start="3">
<li>Pass 注册</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#ifdef GEN_PASS_REGISTRATION
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//===----------------------------------------------------------------------===//
</span></span></span><span class="line"><span class="cl"><span class="c1">// AffineFullUnroll Registration
</span></span></span><span class="line"><span class="cl"><span class="c1">//===----------------------------------------------------------------------===//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">inline</span> <span class="kt">void</span> <span class="nf">registerAffineFullUnroll</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="nf">registerPass</span><span class="p">([]()</span> <span class="o">-&gt;</span> <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Pass</span><span class="o">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="nf">createAffineFullUnroll</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Old registration code, kept for temporary backwards compatibility.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">inline</span> <span class="kt">void</span> <span class="nf">registerAffineFullUnrollPass</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="o">::</span><span class="n">mlir</span><span class="o">::</span><span class="nf">registerPass</span><span class="p">([]()</span> <span class="o">-&gt;</span> <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;::</span><span class="n">mlir</span><span class="o">::</span><span class="n">Pass</span><span class="o">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="nf">createAffineFullUnroll</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">//===----------------------------------------------------------------------===//
</span></span></span><span class="line"><span class="cl"><span class="c1">// Affine Registration
</span></span></span><span class="line"><span class="cl"><span class="c1">//===----------------------------------------------------------------------===//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">inline</span> <span class="kt">void</span> <span class="nf">registerAffinePasses</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nf">registerAffineFullUnroll</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#undef GEN_PASS_REGISTRATION
</span></span></span><span class="line"><span class="cl"><span class="cp">#endif </span><span class="c1">// GEN_PASS_REGISTRATION
</span></span></span></code></pre></td></tr></table>
</div>
</div><h1 id="complete-hpp--cpp">Complete .hpp &amp; .cpp</h1>
<p>TableGen根据 <code>.td</code>文件生成Pass的代码，生成的代码包含注册函数，这些注册函数最终会被调用，将Pass注册到MLIR系统中。 我们可以通过写一个 <code>Passes.h</code>文件集中管理所有Pass的注册，简化构建过程。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// include/mlir-learning/Transform/Affine/Pass.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&#34;mlir-learning/Transform/Affine/AffineFullUnroll.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">namespace</span> <span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define GEN_PASS_REGISTRION
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir-learning/Transform/Affine/Pass.h.inc&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后再对应的 AffineFullUnroll.hpp 中定义 <code>GEN_PASS_DECL_AFFINEFULLUNROLL</code> 宏，以实现创建 Pass 函数的声明。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#pragma once 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/Pass/Pass.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define GEN_PASS_DECL_AFFINEFULLUNROLL
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir-learning/Transform/Affine/Pass.h.inc&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="p">}</span>  <span class="c1">// namespace mlir::tutorial
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>同样在 cpp 中需要定义 <code>GEN_PASS_DEF_AFFINEFULLUNROLL</code> 宏，然后写你对应的实现 (与上一章相同). 问题是仅仅查看生成的代码并不能直接看出还需要实现哪些函数，需要通过其他方法来确定。</p>
<ul>
<li><strong>编译并查看编译器错误信息:</strong>  最直接的方法是尝试编译代码。编译器会指出哪些函数没有实现，从而告诉你需要实现哪些函数。</li>
<li><strong>与基类进行比较:</strong>  可以将生成的代码与基类（<code>OperationPass</code>和 <code>Pass</code>）进行比较。通过比较，可以发现唯一需要实现的函数是 <code>runOnOperation()</code>。  这需要你熟悉MLIR Pass的继承结构和各个函数的作用。</li>
<li><strong>观察缺失的函数:</strong>  如果之前已经从原始API手动实现过类似的Pass，可以观察生成的代码中哪些函数已经存在（例如 <code>getArgument</code>），哪些函数缺失（例如 <code>runOnOperation</code>）。 通过对比，可以确定还需要实现哪些函数。</li>
</ul>
<p>具体的实现与上一章相同，这里我们要继承 .inc 文件中生成的类</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir-learning/Transform/Affine/AffineFullUnroll.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/Dialect/Affine/IR/AffineOps.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/Dialect/Affine/LoopUtils.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/Pass/Pass.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define GEN_PASS_DEF_AFFINEFULLUNROLL
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir-learning/Transform/Affine/Pass.h.inc&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">mlir</span><span class="o">::</span><span class="n">affine</span><span class="o">::</span><span class="n">AffineForOp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">mlir</span><span class="o">::</span><span class="n">affine</span><span class="o">::</span><span class="n">loopUnrollFull</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">AffineFullUnroll</span> <span class="o">:</span> <span class="k">public</span> <span class="n">impl</span><span class="o">::</span><span class="n">AffineFullUnrollBase</span><span class="o">&lt;</span><span class="n">AffineFullUnroll</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">using</span> <span class="n">AffineFullUnrollBase</span><span class="o">::</span><span class="n">AffineFullUnrollBase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">runOnOperation</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">getOperation</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">walk</span><span class="p">([</span><span class="o">&amp;</span><span class="p">](</span><span class="n">AffineForOp</span> <span class="n">op</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">failed</span><span class="p">(</span><span class="n">loopUnrollFull</span><span class="p">(</span><span class="n">op</span><span class="p">)))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">op</span><span class="p">.</span><span class="n">emitError</span><span class="p">(</span><span class="s">&#34;unrolling failed&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">signalPassFailure</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// namespace mlir::tutorial
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>最后在 <code>tutorial.cpp</code> 中使用 .inc 文件生成的 <code>registerAffinePasses</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/IR/DialectRegistry.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/InitAllDialects.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/Pass/PassManager.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/Pass/PassRegistry.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/Tools/mlir-opt/MlirOptMain.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir-learning/Transform/Affine/Pass.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Register all built-in MLIR dialects
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">mlir</span><span class="o">::</span><span class="n">DialectRegistry</span> <span class="n">registry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">mlir</span><span class="o">::</span><span class="n">registerAllDialects</span><span class="p">(</span><span class="n">registry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">registerAffinePasses</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">mlir</span><span class="o">::</span><span class="n">asMainReturnCode</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">mlir</span><span class="o">::</span><span class="n">MlirOptMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="s">&#34;Tutorial Pass Driver&#34;</span><span class="p">,</span> <span class="n">registry</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>MLIR-Ch2 Writing Our First Pass</title>
      <link>http://localhost:57770/blogs/courselearning/mlir/mlir-ch2-writing-our-first-pass/</link>
      <pubDate>Wed, 30 Oct 2024 11:42:34 +0800</pubDate>
      <guid>http://localhost:57770/blogs/courselearning/mlir/mlir-ch2-writing-our-first-pass/</guid>
      <description>Personal MLIR learning notes 2.</description>
      <content:encoded><![CDATA[<h1 id="tutorial-opt-and-project-organization">Tutorial-opt and Project Organization</h1>
<p>编译器可能将 mlir-opt 作为子例程在前端 (c++ -&gt; 某些MLIR方言) 和后端 (MLIR 的 LLVM 方言 -&gt; LLVM -&gt; 机器码) 之间运行。
(我将它命名为 tutorial-opt).</p>
<p>典型的 MLIR 代码库将代码分成具有大致相同层次结构的目录：</p>
<ul>
<li><code>include/</code> 目录用于存放头文件和tablegen 文件，</li>
<li><code>lib/</code> 目录用于存放实现代码。可能会有 <code>Transform/</code> 子目录用于存储在方言中转换代码的 pass，<code>Conversion/</code> 子目录用于在方言之间转换的 pass ，<code>Analysis/</code> 子目录用于分析 pass，等等。这些目录中的每一个都可能有它们所操作的特定方言的子目录。</li>
<li><code>test/</code> 用于存放需要测试的 mlir 文件。</li>
<li><code>tools/</code> 存放用于注册 pass 的主文件</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl"> ./Ch1-WritingOurFirstPass/
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── include
</span></span><span class="line"><span class="cl">│   └── mlir-tutorial
</span></span><span class="line"><span class="cl">├── lib
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   └── Transform
</span></span><span class="line"><span class="cl">├── tests
</span></span><span class="line"><span class="cl">│   ├── Output
</span></span><span class="line"><span class="cl">│   ├── affine_loop_unroll.mlir
</span></span><span class="line"><span class="cl">│   ├── lit.cfg.py
</span></span><span class="line"><span class="cl">│   └── mul_to_add.mlir
</span></span><span class="line"><span class="cl">└── tools
</span></span><span class="line"><span class="cl">    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">    └── tutorial-opt.cpp
</span></span></code></pre></td></tr></table>
</div>
</div><p>尽管 MLIR 提供了许多定义循环和控制流的机制，最高级的是 affine dialect. 它被设计用来进行多面体循环分析 (polyhedral loop analysis).</p>
<details class="custom-details">
    <summary class="custom-summary">Polyhedral Loop Analysis</summary>
    <div><p>多面体循环分析的核心思想是将程序中的循环和数组访问抽象为数学形式，使得可以应用几何变换来优化代码。这种数学形式通常表示为 <strong>整数线性不等式的集合</strong> ，这些不等式定义了循环迭代空间和数组访问的范围。</p>
<ol>
<li><strong>迭代空间（Iteration Space）</strong> ：程序中的循环嵌套可以被表示为一个多维的迭代空间。例如，对于一个双层嵌套循环：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">M</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里的迭代空间是二维的，由 <code>(i, j)</code> 构成。</p>
<ol start="2">
<li><strong>访问关系（Access Relations）</strong> ：每个数组的访问模式（例如 <code>A[i][j]</code>）也可以被表示为几何关系。这种关系定义了哪些迭代变量访问哪些数组元素。</li>
<li><strong>多面体表示（Polyhedral Representation）</strong> ：在多面体循环分析中，循环的迭代空间和数组访问模式可以用整数线性不等式来表示，从而形成一个多面体。例如，<code>0&lt;=i&lt;N</code> 和 <code>0&lt;=j&lt;M</code> 是两个简单的线性不等式，它们表示循环的边界。</li>
</ol>
</div>
</details><br>
<p>一个简单的对数组求和的函数如下: <code>affine.for</code> 定义一个循环，迭代变量为 <code>%i</code>，范围 <code>[0,4)</code>，即循环 4 次。
<code>iter_args(%sum_iter = %sum_0)</code> 表示循环维护一个迭代变量 <code>%sum_iter</code>，初始值为 <code>%sum_0</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl"><span class="kt">func</span><span class="p">.</span><span class="kt">func</span> <span class="nf">@sum_buffer</span><span class="p">(</span><span class="nv">%buffer</span><span class="p">:</span> <span class="kt">memref</span><span class="p">&lt;</span><span class="m">4x</span><span class="k">i32</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="k">i32</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%sum_0</span> <span class="p">=</span> arigh<span class="p">.</span><span class="kt">constant</span> <span class="m">0</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%sum</span> <span class="p">=</span> affine<span class="p">.</span>for <span class="nv">%i</span> <span class="p">=</span> <span class="m">0</span> to <span class="m">4</span> iter_args<span class="p">(</span><span class="nv">%sum_iter</span> <span class="p">=</span> <span class="nv">%sum_0</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="k">i32</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">%t</span> <span class="p">=</span> affine<span class="p">.</span>load <span class="nv">%buffer</span><span class="p">[</span><span class="nv">%i</span><span class="p">]</span> <span class="p">:</span> <span class="kt">memref</span><span class="p">&lt;</span><span class="m">4x</span><span class="k">i32</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">%sum_next</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%sum_iter</span><span class="p">,</span> <span class="nv">%t</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">        affine<span class="p">.</span>yield <span class="nv">%sum_next</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">return</span> <span class="nv">%sum</span><span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://mlir.llvm.org/docs/LangRef/#high-level-structure">MLIR 高级结构</a> 基于图数据结构，其节点称为 Operations，边称为 Values。每个 Value 都是一个 Operation 或 Block Argument 的结果，并具有由类型系统定义的 Value Type。Operations 包含在 Blocks 中，Blocks 包含在 Regions 中。Operations 在其所在的 Block 中是有序的，Blocks 在其所在的 Region 中也是有序的，尽管这种顺序在特定类型的 Region 中可能具有或不具有语义意义。Operations 还可以包含 Regions，从而能够表示层次化的结构。</p>
<p>Operations 可以表示多种不同的概念，从高级概念如函数定义、函数调用、缓冲区分配、缓冲区的视图或切片、进程创建，到低级概念如目标无关的算术运算、目标特定的指令、配置寄存器和逻辑门。这些不同的概念在 MLIR 中由不同的 Operations 表示，并且 MLIR 中可用的 Operations 集可以任意扩展。</p>
<p>MLIR 还提供了一个可扩展的框架，用于对 Operations 进行转换，使用熟悉的编译器 Passes 概念。在任意 Operations 集上启用任意 Passes 集会带来显著的扩展性挑战，因为每个转换可能需要考虑任何 Operation 的语义。MLIR 通过允许使用 Traits 和 Interfaces 抽象地描述 Operation 的语义来解决这种复杂性，从而使转换能够更通用地操作 Operations。Traits 通常描述对有效 IR 的验证约束，能够捕获和检查复杂的不变性。（参见 Op vs Operation）</p>
<p>MLIR 的表示基于 SSA 的 IR，例如 LLVM core IR，通过适当选择 Operation 类型来定义 Modules、Functions、Branches、Memory Allocation，以及验证约束以确保 SSA Dominance 属性。MLIR 包含一组 Dialects，定义了此类结构。</p>
<h1 id="affine-full-unroll-pass">Affine Full Unroll Pass</h1>
<p>MLIR 提供了一个方法 <a href="https://github.com/llvm/llvm-project/blob/dea01f5e00e45dec4319475a001024c6ee882283/mlir/include/mlir/Dialect/Affine/LoopUtils.h#L46">loopUnrollFull</a> 来进行循环展开，因此我们的 pass 将是对这个函数调用的一个包装，直接调用 C++ API 实现。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="c1">// include/mlir-learning/Transform/Affine/AffineFullUnroll.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">class</span>  <span class="nl">AffineFullUnrollPass</span> 
</span></span><span class="line"><span class="cl">    <span class="p">:</span> <span class="n">public</span> <span class="n">PassWrapper</span><span class="o">&lt;</span><span class="n">AffineFullUnrollPass</span><span class="p">,</span> <span class="n">OperationPass</span><span class="o">&lt;</span><span class="n">mlir</span><span class="o">::</span><span class="n">FuncOp</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">private</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">runOnOperation</span><span class="p">()</span> <span class="n">override</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StringRef</span> <span class="nf">getArgument</span><span class="p">()</span> <span class="k">const</span> <span class="n">final</span> <span class="p">{</span><span class="k">return</span> <span class="s">&#34;affine-full-unroll&#34;</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StringRef</span> <span class="nf">getDescription</span><span class="p">()</span> <span class="k">const</span> <span class="n">final</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Perform full unrolling of all affine.for loops&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// lib/Transform/Affine/AffineFullUnroll.cpp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">using</span> <span class="n">mlir</span><span class="o">::</span><span class="n">affine</span><span class="o">::</span><span class="n">AffineForOp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">using</span> <span class="n">mlir</span><span class="o">::</span><span class="n">affine</span><span class="o">::</span><span class="n">loopUnrollFull</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">AffineFullUnrollPass</span><span class="o">::</span><span class="nf">runOnOperation</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">getOperation</span><span class="p">().</span><span class="nf">walk</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">AffineForOp</span> <span class="n">op</span><span class="p">)</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nf">failed</span><span class="p">(</span><span class="nf">loopUnrollFull</span><span class="p">(</span><span class="n">op</span><span class="p">)))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">op</span><span class="p">.</span><span class="nf">emitError</span><span class="p">(</span><span class="s">&#34;unrolling failed&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="nf">signalPassFailure</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>该类的定义使用了奇异递归模板模式 (Curiously Recurring Template Pattern, CRTP). <a href="https://github.com/llvm/llvm-project/blob/9ab34689b08ee66f0868d38456fccc8b80d1b656/mlir/include/mlir/Pass/Pass.h#L441">PassWrapper</a> 是 MLIR 框架中的一个模板类，为定义的 Pass 提供通用功能 (如类型检查、名称获取、克隆)。开发者只需专注于 Pass 的核心逻辑（如 runOnOperation），而无需手动实现类型标识、克隆等辅助功能。</p>
<ul>
<li><code>runOnOperation</code> 中调用了 <code>getOperation</code> 方法，它是 MLIR 中 <code>Pass</code> 类提供的一个方法，返回当前操 <code>Operation</code>.  <code>walk</code> 方法是 MLIR 提供的一个遍历方法，用来遍历操作树中的每个节点。它会递归地遍历操作树中的所有子操作，并对每个操作应用传入的回调函数 (lambda func). 当运行这个 Pass 时，它会在每一个 <code>AffineForOp</code> 类型的操作上执行 <code>runOnOperation</code> 函数。</li>
<li><code>getArgument</code> 方法返回 Pass 的命令行参数。这个返回值 <code>affine-full-unroll</code> 表示这个 Pass 的名称，可以在运行时通过命令行参数指定是否启用该 Pass.</li>
<li><code>getDescription</code> 方法会在调用像 <code>mlir-opt</code> 这样的工具时若有 <code>--help</code> 参数则返回 Pass 的描述信息。</li>
</ul>
<details class="custom-details">
    <summary class="custom-summary">Callback Function</summary>
    <div><p>回调函数 (Callback Function) 是一种通过将函数作为参数传递给另一个函数，来实现某些特定操作的机制。回调函数通常在某个事件发生或某个特定条件满足时被调用。简而言之，回调函数就是<strong>被调用的函数</strong>，它会在特定的时机被执行。</p>
<p>在这个例子中，<code>invokeCallback</code> 函数接收到 <code>printMessage</code> 函数的地址，并在 <code>main</code> 函数中调用它。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 回调函数的定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">printMessage</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Hello, World!&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 接受回调函数作为参数的函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">invokeCallback</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">callback</span><span class="p">)())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 调用回调函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">callback</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将回调函数传递给另一个函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">invokeCallback</span><span class="p">(</span><span class="n">printMessage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在现代 C++ 中，回调函数通常通过 lambda 表达式传递。下面的例子中 <code>invokeCallback</code> 函数接受一个 <code>std::function&lt;void()&gt;</code> 类型的回调函数参数。在 <code>main</code> 函数中，传入了一个 Lambda 表达式作为回调函数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">invokeCallback</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">()</span><span class="o">&gt;</span> <span class="n">callback</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">callback</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 Lambda 表达式作为回调函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">invokeCallback</span><span class="p">([](){</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Hello from Lambda!&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
</details><br>
<h1 id="registering-the-pass">Registering the Pass</h1>
<p>接下来我们需要在 tutorial.cpp 中注册这个 Pass。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir-learning/Transform/Affine/AffineFullUnroll.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/InitAllDialects.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/Pass/PassManager.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/Pass/PassRegistry.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;mlir/Tools/mlir-opt/MlirOptMain.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">mlir</span><span class="o">::</span><span class="n">DialectRegistry</span> <span class="n">registry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">mlir</span><span class="o">::</span><span class="nf">registerAllDialects</span><span class="p">(</span><span class="n">registry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">mlir</span><span class="o">::</span><span class="n">PassRegistration</span><span class="o">&lt;</span><span class="n">mlir</span><span class="o">::</span><span class="n">tutorial</span><span class="o">::</span><span class="n">AffineFullUnrollPass</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">mlir</span><span class="o">::</span><span class="nf">asMainReturnCode</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">mlir</span><span class="o">::</span><span class="nf">MlirOptMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="s">&#34;Tutorial Pass Driver&#34;</span><span class="p">,</span> <span class="n">registry</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>mlir::registerAllDialects(registry);</code> 会调用 MLIR 库的函数，将所有可用的方言注册到 <code>registry</code> 中。方言是 MLIR 中用来定义各种中间表示的抽象，可以理解为不同类型的 IR.</li>
<li><code>mlir::PassRegistration&lt;mlir::tutorial::AffineFullUnrollPass&gt;();</code> 将自定义的 <code>AffineFullUnrollPass</code> 注册到 MLIR 的 Pass 系统中。</li>
<li><code>MlirOptMain</code> 是 MLIR 提供的一个函数，处理命令行参数，并执行相应的 Pass.
<ul>
<li>argc 和 argv：来自命令行的参数。</li>
<li>&ldquo;Tutorial Pass Driver&rdquo;：这是一个程序描述字符串，通常是给用户的信息。</li>
<li>registry：之前创建的 DialectRegistry，它包含了所有已注册的方言。</li>
</ul>
</li>
<li><code>mlir::asMainReturnCode(...)</code> 将 <code>MlirOptMain</code> 的返回值转换为标准的退出代码 (0 表示成功，非零值表示失败).</li>
</ul>
<h1 id="test-the-pass">Test the Pass</h1>
<p>我们写一个 .mlir 来测试我们的 Pass，这是一个对数组进行累加的函数。FileCheck 检查经过 Pass 后函数中不会存在 <code>affine.for</code> 指令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl"><span class="c">// RUN: /leaning/build/chapter2/tools/02-tutorial-opt %s --affine-full-unroll &gt; %t
</span></span></span><span class="line"><span class="cl"><span class="c">// RUN: FileCheck %s &lt; %t
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="kt">func</span><span class="p">.</span><span class="kt">func</span> <span class="nf">@test_single_nested_loop</span><span class="p">(</span><span class="nv">%buffer</span><span class="p">:</span> <span class="kt">memref</span><span class="p">&lt;</span><span class="m">4x</span><span class="k">i32</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="k">i32</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%sum_0</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> <span class="m">0</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="c">// CHECK-NOT: affine.for
</span></span></span><span class="line"><span class="cl"><span class="c"></span>  <span class="nv">%sum</span> <span class="p">=</span> affine<span class="p">.</span>for <span class="nv">%i</span> <span class="p">=</span> <span class="m">0</span> to <span class="m">4</span> iter_args<span class="p">(</span><span class="nv">%sum_iter</span> <span class="p">=</span> <span class="nv">%sum_0</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="k">i32</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%t</span> <span class="p">=</span> affine<span class="p">.</span>load <span class="nv">%buffer</span><span class="p">[</span><span class="nv">%i</span><span class="p">]</span> <span class="p">:</span> <span class="kt">memref</span><span class="p">&lt;</span><span class="m">4x</span><span class="k">i32</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%sum_next</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%sum_iter</span><span class="p">,</span> <span class="nv">%t</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    affine<span class="p">.</span>yield <span class="nv">%sum_next</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kt">return</span> <span class="nv">%sum</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>经过优化后的函数如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl"><span class="nv">#map</span> <span class="p">=</span> affine_map<span class="p">&lt;(</span>d0<span class="p">)</span> <span class="p">-&gt;</span> <span class="p">(</span>d0 <span class="err">+</span> <span class="m">1</span><span class="p">)&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nv">#map1</span> <span class="p">=</span> affine_map<span class="p">&lt;(</span>d0<span class="p">)</span> <span class="p">-&gt;</span> <span class="p">(</span>d0 <span class="err">+</span> <span class="m">2</span><span class="p">)&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nv">#map2</span> <span class="p">=</span> affine_map<span class="p">&lt;(</span>d0<span class="p">)</span> <span class="p">-&gt;</span> <span class="p">(</span>d0 <span class="err">+</span> <span class="m">3</span><span class="p">)&gt;</span>
</span></span><span class="line"><span class="cl">module <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">func</span><span class="p">.</span><span class="kt">func</span> <span class="nf">@test_single_nested_loop</span><span class="p">(</span><span class="nv">%arg0</span><span class="p">:</span> <span class="kt">memref</span><span class="p">&lt;</span><span class="m">4x</span><span class="k">i32</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="k">i32</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%c0</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> <span class="m">0</span> <span class="p">:</span> <span class="k">index</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%c0_i32</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> <span class="m">0</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%0</span> <span class="p">=</span> affine<span class="p">.</span>load <span class="nv">%arg0</span><span class="p">[</span><span class="nv">%c0</span><span class="p">]</span> <span class="p">:</span> <span class="kt">memref</span><span class="p">&lt;</span><span class="m">4x</span><span class="k">i32</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%1</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%c0_i32</span><span class="p">,</span> <span class="nv">%0</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%2</span> <span class="p">=</span> affine<span class="p">.</span>apply <span class="nv">#map</span><span class="p">(</span><span class="nv">%c0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%3</span> <span class="p">=</span> affine<span class="p">.</span>load <span class="nv">%arg0</span><span class="p">[</span><span class="nv">%2</span><span class="p">]</span> <span class="p">:</span> <span class="kt">memref</span><span class="p">&lt;</span><span class="m">4x</span><span class="k">i32</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%4</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%1</span><span class="p">,</span> <span class="nv">%3</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%5</span> <span class="p">=</span> affine<span class="p">.</span>apply <span class="nv">#map1</span><span class="p">(</span><span class="nv">%c0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%6</span> <span class="p">=</span> affine<span class="p">.</span>load <span class="nv">%arg0</span><span class="p">[</span><span class="nv">%5</span><span class="p">]</span> <span class="p">:</span> <span class="kt">memref</span><span class="p">&lt;</span><span class="m">4x</span><span class="k">i32</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%7</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%4</span><span class="p">,</span> <span class="nv">%6</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%8</span> <span class="p">=</span> affine<span class="p">.</span>apply <span class="nv">#map2</span><span class="p">(</span><span class="nv">%c0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%9</span> <span class="p">=</span> affine<span class="p">.</span>load <span class="nv">%arg0</span><span class="p">[</span><span class="nv">%8</span><span class="p">]</span> <span class="p">:</span> <span class="kt">memref</span><span class="p">&lt;</span><span class="m">4x</span><span class="k">i32</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%10</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%7</span><span class="p">,</span> <span class="nv">%9</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="kt">return</span> <span class="nv">%10</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="a-rewrite-pattern-version">A Rewrite Pattern Version</h1>
<p>当想要对一个给定的 IR 子结构重复应用相同的变换子集，直到该子结构被完全去除时，需要写一个重写模式引擎。重写模式是 <code>OpRewritePattern</code> 的子类，它有一个名为 <code>matchAndRewrite</code> 的方法来执行转换。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// chapter2/lib/Transform/Affine/AffineFullUnroll.cpp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="nl">AffineFullUnrollPattern</span> <span class="p">:</span> <span class="n">public</span> <span class="n">mlir</span><span class="o">::</span><span class="n">OpRewritePattern</span><span class="o">&lt;</span><span class="n">AffineForOp</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">AffineFullUnrollPattern</span><span class="p">(</span><span class="n">mlir</span><span class="o">::</span><span class="n">MLIRContext</span><span class="o">*</span> <span class="n">context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">:</span> <span class="n">mlir</span><span class="o">::</span><span class="n">OpRewritePattern</span><span class="o">&lt;</span><span class="n">AffineForOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 一般在 OpRewritePattern 中，IR 的更改要通过 PatternRewriter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// PatternRewriter 处理 OpRewritePattern中发生的突变的原子性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">LogicalResult</span> <span class="nf">matchAndRewrite</span><span class="p">(</span><span class="n">AffineForOp</span> <span class="n">op</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                   <span class="n">PatternRewriter</span><span class="o">&amp;</span> <span class="n">rewriter</span><span class="p">)</span> <span class="k">const</span> <span class="n">override</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nf">loopUnrollFull</span><span class="p">(</span><span class="n">op</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>AffineFullUnrollPattern</code> 继承自 <code>OpRewritePattern&lt;AffineForOp&gt;</code>，<a href="https://github.com/llvm/llvm-project/blob/9654bc3960c460bd9d8b06cfa4cfe0e52c6582bd/mlir/include/mlir/IR/PatternMatch.h#L356">OpRewritePattern</a> 是 MLIR 中用于对特定操作类型 (在这里是 <code>AffineForOp</code>) 进行模式匹配和重写的基类。模板参数 <code>AffineForOp</code> 表示我们要为 <code>AffineForOp</code> 这个操作创建一个模式。</li>
<li>构造函数初始化了基类 <code>OpRewritePattern&lt;AffineForOp&gt;</code>，并传递了两个参数
<ul>
<li><code>context</code>：<code>MLIRContext</code> 是 MLIR 的上下文，保存着所有的操作、方言和类型等信息。在这里，<code>context</code> 用来初始化模式对象。</li>
<li><code>benefit</code> 是一个表示模式匹配优先级的整数值，优先级越高的模式越先应用。</li>
</ul>
</li>
<li><code>matchAndRewrite</code> 是在 MLIR 中进行模式重写的核心方法。它的目的是：检查某个操作是否符合当前模式的要求。如果操作匹配模式，则执行重写操作，通常会用新的 IR 替换原来的 IR。
<ul>
<li><code>AffineForOp op</code> 表示要进行模式匹配的 <code>AffineForOp</code> 操作。</li>
<li><code>PatternRewriter &amp;rewriter</code> 是一个用于生成新的 MLIR 操作的工具，它可以修改 IR.</li>
</ul>
</li>
</ul>
<p>我们同样要像上一节一样在头文件中声明一个 <code>AffineFullUnrollPassAsPatternRewrite</code> 类，然后实现其 <code>runOnOperation</code> 方法。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// chapter2/lib/Transform/Affine/AffineFullUnroll.cpp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="n">AffineFullUnrollPassAsPatternRewrite</span><span class="o">::</span><span class="nf">runOnOperation</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">mlir</span><span class="o">::</span><span class="n">RewritePatternSet</span> <span class="nf">patterns</span><span class="p">(</span><span class="o">&amp;</span><span class="nf">getContext</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">patterns</span><span class="p">.</span><span class="n">add</span><span class="o">&lt;</span><span class="n">AffineFullUnrollPattern</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="nf">getContext</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">applyPatternsGreedily</span><span class="p">(</span><span class="nf">getOperation</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="nf">move</span><span class="p">(</span><span class="n">patterns</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>RewritePatternSet</code> 是 MLIR 中一个容器，用于存储多个 <code>Rewrite Pattern</code>. 每个模式都是针对某种特定操作进行的优化规则。<code>RewritePatternSet</code> 会把所有这些规则聚合在一起，方便在后续的步骤中批量应用。</li>
<li>然后通过 <code>patterns.add&lt;AffineFullUnrollPattern&gt;</code>，将一个 Rewrite Pattern (这里是上面定义的 AffineFullUnrollPattern) 添加到 patterns 集合中。</li>
<li><code>applyPatternsGreedily</code>是 MLIR 提供的一个函数，用于将定义的模式应用到给定的操作 (getOperation()) 上。这个函数使用贪心策略，在一次遍历中尽可能多地应用模式，直到无法再应用为止。</li>
</ul>
<details class="custom-details">
    <summary class="custom-summary">std::move</summary>
    <div><p><code>std::move</code> 是 C++11 引入的一个标准库函数，它的主要作用是将一个对象转换为右值引用，以便启用<strong>移动语义</strong> (Move Semantics). 简单来说，<code>std::move</code> 本身并不实际移动对象，而是为对象提供一个指示，告诉编译器该对象可以被<strong>移动</strong>而不是<strong>复制</strong>。</p>
<p>在 C++ 中，有两种主要的值类别:</p>
<ul>
<li><strong>左值 (Lvalue)</strong> ：表示可以取地址的对象，可以理解为拥有持久生命周期的对象。它通常是变量、数组元素、对象成员等。</li>
<li><strong>右值 (Rvalue)</strong> ：表示临时对象、非持久生命周期的对象，通常是返回值、字面常量等。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;utility&gt;  // std::move</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">class</span> <span class="n">MyClass</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nl">public</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nf">MyClass</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Constructor</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">MyClass</span><span class="p">(</span><span class="k">const</span> <span class="n">MyClass</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Copy Constructor</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">MyClass</span><span class="p">(</span><span class="n">MyClass</span><span class="o">&amp;&amp;</span> <span class="n">other</span><span class="p">)</span> <span class="n">noexcept</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Move Constructor</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">MyClass</span><span class="o">&amp;</span> <span class="n">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">MyClass</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Copy Assignment</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">*</span><span class="n">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">MyClass</span><span class="o">&amp;</span> <span class="n">operator</span><span class="o">=</span><span class="p">(</span><span class="n">MyClass</span><span class="o">&amp;&amp;</span> <span class="n">other</span><span class="p">)</span> <span class="n">noexcept</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Move Assignment</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">*</span><span class="n">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">MyClass</span> <span class="n">obj1</span><span class="p">;</span>  <span class="c1">// Constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">MyClass</span> <span class="n">obj2</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="nf">move</span><span class="p">(</span><span class="n">obj1</span><span class="p">);</span>  <span class="c1">// Move Constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">MyClass</span> <span class="n">obj3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">obj3</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="nf">move</span><span class="p">(</span><span class="n">obj2</span><span class="p">);</span>  <span class="c1">// Move Assignment
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
</details><br>
<h1 id="a-proper-greedy-rewritepattern">A proper greedy RewritePattern</h1>
<p>接下来写一个用重写模式定义的 <code>MulToAddPass</code>，它会将 <code>y=C*x</code> 形式的乘法转换为 <code>y=C/2*x+C/2*x</code> 形式的加法当 C 是偶数。否则转换成 <code>y=1+(C-1)/2*x+(C-1)/2*x</code> 形式的加法。</p>
<h2 id="poweroftwoexpand">PowerOfTwoExpand</h2>
<ul>
<li>获取了 <code>rhs</code> 的定义操作（<code>rhs.getDefiningOp&lt;arith::ConstantIntOp&gt;()</code>），以确保右操作数是一个常数。</li>
<li>如果右操作数的值是 2 的幂，即 <code>(value &amp; (value - 1)) == 0</code>，则进行优化。
<ul>
<li>将 <code>value</code> 除以 2 然后生成新的常数 <code>newConstant</code>。</li>
<li>计算新的乘法 <code>lhs * newConstant</code>，并将其加倍（通过 <code>AddIOp</code> 来实现 <code>lhs * value</code>）。</li>
<li>最终用新的加法替代原来的乘法。</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nl">PowerOfTwoExpand</span> <span class="p">:</span> <span class="n">public</span> <span class="n">OpRewritePattern</span><span class="o">&lt;</span><span class="n">MulIOp</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">PowerOfTwoExpand</span><span class="p">(</span><span class="n">MLIRContext</span><span class="o">*</span> <span class="n">context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">:</span> <span class="n">OpRewritePattern</span><span class="o">&lt;</span><span class="n">MulIOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">LogicalResult</span> <span class="nf">matchAndRewrite</span><span class="p">(</span><span class="n">MulIOp</span> <span class="n">op</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                  <span class="n">PatternRewriter</span><span class="o">&amp;</span> <span class="n">rewriter</span><span class="p">)</span> <span class="k">const</span> <span class="n">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Value represents an instance of an SSA value in the MLIR system
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Value</span> <span class="n">lhs</span> <span class="o">=</span> <span class="n">op</span><span class="o">-&gt;</span><span class="nf">getOperand</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Value</span> <span class="n">rhs</span> <span class="o">=</span> <span class="n">op</span><span class="o">-&gt;</span><span class="nf">getOperand</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">rhsDefiningOp</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">getDefiningOp</span><span class="o">&lt;</span><span class="n">arith</span><span class="o">::</span><span class="n">ConstantIntOp</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">rhsDefiningOp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nf">failure</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">int64_t</span> <span class="n">value</span> <span class="o">=</span> <span class="n">rhsDefiningOp</span><span class="p">.</span><span class="nf">value</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">bool</span> <span class="n">is_power_of_two</span> <span class="o">=</span> <span class="p">(</span><span class="n">value</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">value</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">is_power_of_two</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nf">failure</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">newConstant</span> <span class="o">=</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">create</span><span class="o">&lt;</span><span class="n">ConstantOp</span><span class="o">&gt;</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">rhsDefiningOp</span><span class="o">-&gt;</span><span class="nf">getLoc</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">            <span class="n">rewriter</span><span class="p">.</span><span class="nf">getIntegerAttr</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="nf">getType</span><span class="p">(),</span> <span class="n">value</span> <span class="o">/</span> <span class="mi">2</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">newMul</span> <span class="o">=</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">create</span><span class="o">&lt;</span><span class="n">MulIOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">op</span><span class="o">-&gt;</span><span class="nf">getLoc</span><span class="p">(),</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">newConstant</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">newAdd</span> <span class="o">=</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">create</span><span class="o">&lt;</span><span class="n">AddIOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">op</span><span class="o">-&gt;</span><span class="nf">getLoc</span><span class="p">(),</span> <span class="n">newMul</span><span class="p">,</span> <span class="n">newMul</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rewriter</span><span class="p">.</span><span class="nf">replaceOp</span><span class="p">(</span><span class="n">op</span><span class="p">,</span> <span class="n">newAdd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">rewriter</span><span class="p">.</span><span class="nf">eraseOp</span><span class="p">(</span><span class="n">rhsDefiningOp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nf">success</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="peelfrommul"><strong>PeelFromMul</strong></h2>
<p>这个 Pass 的目标是将一个常数乘法转化为加法形式，适用于常数值 <code>rhs</code> 不为 2 的幂时。</p>
<ul>
<li>将 <code>rhs</code> 减去 1，然后生成一个新的常数 <code>newConstant</code>（即 <code>value - 1</code>）。</li>
<li>用 <code>lhs * newConstant</code> 进行计算，并将结果加上 <code>lhs</code>（即 <code>lhs * value</code> 转化为 <code>(lhs * (value - 1)) + lhs</code>）。</li>
<li>最终用新的加法替代原来的乘法。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nl">PeelFromMul</span> <span class="p">:</span> <span class="n">public</span> <span class="n">OpRewritePattern</span><span class="o">&lt;</span><span class="n">MulIOp</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">PeelFromMul</span><span class="p">(</span><span class="n">MLIRContext</span><span class="o">*</span> <span class="n">context</span><span class="p">)</span> <span class="o">:</span> <span class="n">OpRewritePattern</span><span class="o">&lt;</span><span class="n">MulIOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">LogicalResult</span> <span class="nf">matchAndRewrtite</span><span class="p">(</span><span class="n">MulIOp</span> <span class="n">op</span><span class="p">,</span> <span class="n">PatternRewriter</span><span class="o">&amp;</span> <span class="n">rewriter</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Value</span> <span class="n">lhs</span> <span class="o">=</span> <span class="n">op</span><span class="o">-&gt;</span><span class="nf">getOperand</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Value</span> <span class="n">rhs</span> <span class="o">=</span> <span class="n">op</span><span class="o">-&gt;</span><span class="nf">getOperand</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">rhsDefiningOp</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">getDefiningOp</span><span class="o">&lt;</span><span class="n">arith</span><span class="o">::</span><span class="n">ConstantIntOp</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">rhsDefiningOp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nf">failure</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">int64_t</span> <span class="n">value</span> <span class="o">=</span> <span class="n">rhsDefiningOp</span><span class="p">.</span><span class="nf">value</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Beacause PowerOfTwoExpand has higher benefit,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// value must not be power of 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">auto</span> <span class="n">newConstant</span> <span class="o">=</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">create</span><span class="o">&lt;</span><span class="n">ConstantOp</span><span class="o">&gt;</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">rhsDefiningOp</span><span class="o">-&gt;</span><span class="nf">getLoc</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">            <span class="n">rewriter</span><span class="p">.</span><span class="nf">getIntegerAttr</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="nf">getType</span><span class="p">(),</span> <span class="n">value</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">newMul</span> <span class="o">=</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">create</span><span class="o">&lt;</span><span class="n">MulIOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">op</span><span class="p">.</span><span class="nf">getLoc</span><span class="p">(),</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">newConstant</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">newAdd</span> <span class="o">=</span> <span class="n">rewriter</span><span class="p">.</span><span class="n">create</span><span class="o">&lt;</span><span class="n">AddIOp</span><span class="o">&gt;</span><span class="p">(</span><span class="n">op</span><span class="p">.</span><span class="nf">getLoc</span><span class="p">(),</span> <span class="n">newMul</span><span class="p">,</span> <span class="n">lhs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rewriter</span><span class="p">.</span><span class="nf">replaceOp</span><span class="p">(</span><span class="n">op</span><span class="p">,</span> <span class="n">newAdd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">rewriter</span><span class="p">.</span><span class="nf">eraseOp</span><span class="p">(</span><span class="n">rhsDefiningOp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nf">success</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="add-the-pass">Add the Pass</h2>
<p>之后我们同样在 <code>runOnOperation</code> 方法中注册 <code>PowerOfTwoExpand</code> 和 <code>PeelFromMul</code> 两个模式。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">MulToAddPass</span><span class="o">::</span><span class="nf">runOnOperation</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">mlir</span><span class="o">::</span><span class="n">RewritePatternSet</span> <span class="nf">patterns</span><span class="p">(</span><span class="o">&amp;</span><span class="nf">getContext</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">patterns</span><span class="p">.</span><span class="n">add</span><span class="o">&lt;</span><span class="n">PowerOfTwoExpand</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="nf">getContext</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">patterns</span><span class="p">.</span><span class="n">add</span><span class="o">&lt;</span><span class="n">PeelFromMul</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="nf">getContext</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">applyPatternsAndFoldGreedily</span><span class="p">(</span><span class="nf">getOperation</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="nf">move</span><span class="p">(</span><span class="n">patterns</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="lit-filecheck">Lit, FileCheck</h1>
<p>LLVM 和 MLIR 使用的是同一个测试框架，分为两个测试步骤。</p>
<ol>
<li><a href="https://llvm.org/docs/CommandGuide/lit.html">lit</a> (LLVM Integratesd Tester) 负责发现、组织和运行测试，并报告测试结果。测试文件中通常包含 RUN: 指令，告诉 lit 如何运行测试。</li>
<li><a href="https://llvm.org/docs/CommandGuide/FileCheck.html">FileCheck</a> 通过模式匹配的方式，验证输出是否包含特定的字符串或结构。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># lit.cfg.py</span>
</span></span><span class="line"><span class="cl"><span class="c1"># CMD: llvm-lit -v path/to/test_files</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">path</span> <span class="k">as</span> <span class="n">osp</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">lit.formats</span> <span class="kn">import</span> <span class="n">ShTest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;MLIR-LEARN&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">test_format</span> <span class="o">=</span> <span class="n">ShTest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">suffixes</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;.mlir&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">current_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">tool_path</span> <span class="o">=</span> <span class="s2">&#34;path/to/build/opt_executable&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">environment</span><span class="p">[</span><span class="s2">&#34;PATH&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">osp</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">current_path</span><span class="p">,</span> <span class="n">tool_path</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&#34;:&#34;</span> <span class="o">+</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">&#34;PATH&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="test-the-pass-1">Test the Pass</h2>
<p>我们同样创建一个 .mlir 文件来测试我们的 Pass. 我们希望 Pass 能够将递归地将乘法转化为加法形式，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl"><span class="c">// RUN: /leaning/build/chapter2/tools/02-tutorial-opt %s --mul-to-add &gt; %t
</span></span></span><span class="line"><span class="cl"><span class="c">// RUN: FileCheck %s &lt; %t
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="kt">func</span><span class="p">.</span><span class="kt">func</span> <span class="nf">@just_power_of_two</span><span class="p">(</span><span class="nv">%arg0</span><span class="p">:</span> <span class="k">i32</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="k">i32</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%0</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> <span class="m">8</span><span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%1</span> <span class="p">=</span> arith<span class="p">.</span>muli <span class="nv">%arg0</span><span class="p">,</span> <span class="nv">%0</span><span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="kt">func</span><span class="p">.</span><span class="kt">return</span> <span class="nv">%1</span><span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">// CHECK-LABEL: func.func @just_power_of_two(
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK-SAME:    %[[ARG:.*]]: i32
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK-SAME:  ) -&gt; i32 {
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK:   %[[SUM_0:.*]] = arith.addi %[[ARG]], %[[ARG]]
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK:   %[[SUM_1:.*]] = arith.addi %[[SUM_0]], %[[SUM_0]]
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK:   %[[SUM_2:.*]] = arith.addi %[[SUM_1]], %[[SUM_1]]
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK:   return %[[SUM_2]] : i32
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK: }
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="kt">func</span><span class="p">.</span><span class="kt">func</span> <span class="nf">@power_of_two_plus_one</span><span class="p">(</span><span class="nv">%arg</span><span class="p">:</span> <span class="k">i32</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="k">i32</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%0</span> <span class="p">=</span> arith<span class="p">.</span><span class="kt">constant</span> <span class="m">9</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="nv">%1</span> <span class="p">=</span> arith<span class="p">.</span>muli <span class="nv">%arg</span><span class="p">,</span> <span class="nv">%0</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="kt">func</span><span class="p">.</span><span class="kt">return</span> <span class="nv">%1</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">// CHECK-LABEL: func.func @power_of_two_plus_one(
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK-SAME:    %[[ARG:.*]]: i32
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK-SAME:  ) -&gt; i32 {
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK:   %[[SUM_0:.*]] = arith.addi %[[ARG]], %[[ARG]]
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK:   %[[SUM_1:.*]] = arith.addi %[[SUM_0]], %[[SUM_0]]
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK:   %[[SUM_2:.*]] = arith.addi %[[SUM_1]], %[[SUM_1]]
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK:   %[[SUM_3:.*]] = arith.addi %[[SUM_2]], %[[ARG]]
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK:   return %[[SUM_3]] : i32
</span></span></span><span class="line"><span class="cl"><span class="c">// CHECK: }
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>经过优化后的代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mlir" data-lang="mlir"><span class="line"><span class="cl">module <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">func</span><span class="p">.</span><span class="kt">func</span> <span class="nf">@just_power_of_two</span><span class="p">(</span><span class="nv">%arg0</span><span class="p">:</span> <span class="k">i32</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="k">i32</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%0</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%arg0</span><span class="p">,</span> <span class="nv">%arg0</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%1</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%0</span><span class="p">,</span> <span class="nv">%0</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%2</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%1</span><span class="p">,</span> <span class="nv">%1</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="kt">return</span> <span class="nv">%2</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kt">func</span><span class="p">.</span><span class="kt">func</span> <span class="nf">@power_of_two_plus_one</span><span class="p">(</span><span class="nv">%arg0</span><span class="p">:</span> <span class="k">i32</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="k">i32</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%0</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%arg0</span><span class="p">,</span> <span class="nv">%arg0</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%1</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%0</span><span class="p">,</span> <span class="nv">%0</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%2</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%1</span><span class="p">,</span> <span class="nv">%1</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%3</span> <span class="p">=</span> arith<span class="p">.</span>addi <span class="nv">%2</span><span class="p">,</span> <span class="nv">%arg0</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">    <span class="kt">return</span> <span class="nv">%3</span> <span class="p">:</span> <span class="k">i32</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="summary">Summary</h1>
<p>使用模式重写引擎通常比编写遍历AST的代码更容易。不需要大型 case/switch 语句来处理 IR 中可能出现的所有内容。因此可以单独编写模式，并相信引擎会适当地组合它们。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
