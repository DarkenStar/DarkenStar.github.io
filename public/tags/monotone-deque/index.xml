<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Monotone Deque on WITHER</title>
    <link>http://localhost:1313/tags/monotone-deque/</link>
    <description>Recent content in Monotone Deque on WITHER</description>
    <generator>Hugo -- 0.148.1</generator>
    <language>en</language>
    <copyright>2024-2025 WITHER</copyright>
    <lastBuildDate>Fri, 19 Sep 2025 09:20:48 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/monotone-deque/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>09 Monotone Deque</title>
      <link>http://localhost:1313/blogs/leetcode/09_monotonedeque/</link>
      <pubDate>Thu, 21 Aug 2025 09:09:14 +0800</pubDate>
      <guid>http://localhost:1313/blogs/leetcode/09_monotonedeque/</guid>
      <description>Algorithm questions about monotone deque.</description>
      <content:encoded><![CDATA[<h1 id="239">239.</h1>
<p>通过模拟滑动窗口可以发现如果 <code>nums[i] &lt;= nums[j], i &lt; j</code>，那么只要 nums[j] 还在窗口内，nums[i] 就永远不可能成为这个窗口的最大值。因为 nums[j] 不仅比 nums[i] 大（或相等），而且比它更晚离开窗口。因此，在这种情况下，nums[i] 可以被安全地丢弃。</p>
<p>因此使用一个双端队列来存储数组元素的索引，并始终保持队列中索引对应的元素值是严格单调递减的。这样一来，队列的队首元素所对应的数组值，就永远是当前窗口的最大值。</p>
<p>为了维护这个单调递减的队列，我们需要遵循以下两个规则：</p>
<ol>
<li>移除出界元素：在窗口向右滑动时，首先要检查队首的索引是否已经超出了当前窗口的左边界。如果是，则说明队首元素已经过期，需要从队列中移除（pop_front）。因此<strong>队列中要记录的是元素在数组中的下标。</strong></li>
<li>维持队列单调递减：当一个新的元素准备入队时，为了维持队列的单调性，我们需要从队尾（back） 开始，向前比较。如果队尾的元素小于或等于当前要入队的元素，那么队尾的元素就不可能成为未来任何窗口的最大值（因为当前元素更“新”也更“大”），所以应该将队尾元素出队（pop_back）.重复此过程，直到队列为空或者队尾元素大于当前元素，然后才将当前元素的索引入队（push_back）.</li>
</ol>
<p>同时当窗口形成后 (即遍历到的元素数量达到 k) 才开始记录结果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">maxSlidingWindow</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">deque</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dq</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">dq</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">dq</span><span class="p">.</span><span class="n">back</span><span class="p">()]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">dq</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">dq</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// can use if because we judge with each i
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">dq</span><span class="p">.</span><span class="n">front</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// excess the window
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">dq</span><span class="p">.</span><span class="n">pop_front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">dq</span><span class="p">.</span><span class="n">front</span><span class="p">()]);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
  </channel>
</rss>
