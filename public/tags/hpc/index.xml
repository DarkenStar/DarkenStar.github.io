<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HPC on WITHER</title>
    <link>http://localhost:1313/tags/hpc/</link>
    <description>Recent content in HPC on WITHER</description>
    <generator>Hugo -- 0.148.1</generator>
    <language>en</language>
    <copyright>2024-2025 WITHER</copyright>
    <lastBuildDate>Fri, 19 Sep 2025 09:33:25 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/hpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bithack</title>
      <link>http://localhost:1313/blogs/sjtu-xflops2024/bithack/</link>
      <pubDate>Thu, 18 Sep 2025 11:48:24 +0800</pubDate>
      <guid>http://localhost:1313/blogs/sjtu-xflops2024/bithack/</guid>
      <description>Solution of SJTU-xflops2024 Bithack.</description>
      <content:encoded><![CDATA[<h1 id="problem-description">Problem Description</h1>
<p>详情请见<a href="https://github.com/HPC-SJTU/Xflops2024_1st_exam/tree/main/Bithack">题目链接</a>，这里简要说明下:题目要求是优化 <code>rotate_the_bit_vector_left()</code> 函数，该函数将 <code>bit_vector</code> 的一段从左往右数第 <code>bit_offset</code> 位为起始点, 长度为 <code>bit_length</code> 的子数组的前 <code>bit_amount</code> 位循环左移。</p>
<p><code>bit_vector.h</code> 和 <code>bit_vector.c</code> 中有一些有用的函数声明定义。</p>
<ul>
<li><code>modulo()</code>: 返回 <code>r = n (mod m)</code> 的结果，其中 <code>0 &lt;= r &lt; m</code>.</li>
<li><code>bitmask()</code>: 返回和一个 byte 相与时保留从右往左数的第 <code>bit_index</code> 位的掩码。</li>
<li><code>bit_vector_get_bit_sz()</code>: 获取一个 <code>bit_vector</code> 对象的位数。</li>
<li><code>bit_vector_get()</code>: 获取一个 <code>bit_vector</code> 第 <code>bit_index</code> 位的值。</li>
<li><code>bit_vector_set()</code>: 将一个 <code>bit_vector</code> 第 <code>bit_index</code> 位的值设置为 <code>value</code>.</li>
</ul>
<h1 id="vanilla-method-analysis">Vanilla Method Analysis</h1>
<p>perf 是 Linux 内核内置的性能分析工具 (Performance Counters for Linux)，它可以帮助采样程序的 CPU 使用情况、函数调用栈、热点代码等，从而识别性能瓶颈。</p>
<details class="custom-details">
    <summary class="custom-summary">How to install perf tools in WSL2</summary>
    <div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># windows</span>
</span></span><span class="line"><span class="cl">wsl --update 
</span></span><span class="line"><span class="cl"><span class="c1"># wsl 2</span>
</span></span><span class="line"><span class="cl">sudo apt update
</span></span><span class="line"><span class="cl">sudo apt install flex bison  
</span></span><span class="line"><span class="cl">sudo apt install pkg-config   <span class="c1"># operator &#39;&amp;&amp;&#39; has no right operand</span>
</span></span><span class="line"><span class="cl">sudo apt install libdwarf-dev libelf-dev libnuma-dev libunwind-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>libnewt-dev libdwarf++0 libelf++0 libdw-dev libbfb0-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>systemtap-sdt-dev libssl-dev libperl-dev python-dev-is-python3 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>binutils-dev libiberty-dev libzstd-dev libcap-dev libbabeltrace-dev libtraceevent-dev
</span></span><span class="line"><span class="cl">git clone https://github.com/microsoft/WSL2-Linux-Kernel --depth <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> WSL2-Linux-Kernel/tools/perf
</span></span><span class="line"><span class="cl">make -j8 <span class="c1"># parallel build</span>
</span></span><span class="line"><span class="cl">sudo cp perf /usr/local/bin
</span></span></code></pre></div></div>
</details><br>
<p>我们来看一下原始 <code>rotate_the_bit_vector_left()</code> 的执行流程:</p>
<ol>
<li>它有一个循环，需要旋转 <code>bit_left_amount</code> 次。</li>
<li>在循环内部，它调用 <code>rotate_the_bit_vector_left_one()</code> 函数。</li>
<li>该函数的作用是将子数组左旋一位。它内部又有一个循环，需要遍历 <code>bit_length - 1</code> 次，每次都调用 <code>bit_vector_get</code> 和 <code>bit_vector_set</code> 来移动一个比特位。</li>
</ol>
<p>所以，总的操作次数大约是 <code>bit_left_amount * bit_length</code> 次比特读写。</p>
<p>编译好后使用 <code>perf record ./everybit -s</code> 命令生成 <code>perf.data</code> 文件后使用 <code>perf report</code> 命令显示采样结果。</p>
<pre tabindex="0"><code>Samples: 105  of event &#39;cpu-clock:ppp&#39;, Event count (approx.): 26250000
Overhead  Command   Shared Object         Symbol
  52.38%  everybit  everybit              [.] bit_vector_set
  33.33%  everybit  everybit              [.] bit_vector_get
  10.48%  everybit  everybit              [.] rotate_the_bit_vector
   0.95%  everybit  [kernel.kallsyms]     [k] _raw_spin_unlock_irqrestore
   0.95%  everybit  [kernel.kallsyms]     [k] put_cpu_partial
   0.95%  everybit  [kernel.kallsyms]     [k] queue_work_on
   0.95%  everybit  ld-linux-x86-64.so.2  [.] 0x00000000000131d2
</code></pre><p>根据 perf 的性能分析报告，超过 85% 的时间都消耗在了 <code>bit_vector_set</code> (52.38%) 和 <code>bit_vector_get</code> (33.33%) 这两个函数上，说明当前的算法对单个比特位的读写操作过于频繁。</p>
<h1 id="optimization-1-3-step-rotation">Optimization 1: 3-step Rotation</h1>
<p>我们可以借鉴数组旋转的经典“三步反转法”思想，但在这里更直观的方法是使用一个临时缓冲区。想象一下把字符串 &ldquo;ABCDEFG&rdquo; 左旋 3 位:</p>
<ol>
<li>保存: 先把要被移到末尾的前3个字符 &ldquo;ABC&rdquo; 保存起来。</li>
<li>移动: 把后面的 &ldquo;DEFG&rdquo; 移动到开头，字符串变成 &ldquo;DEFG___&quot;。</li>
<li>放回: 把保存的 &ldquo;ABC&rdquo; 放到末尾的空白处，得到最终结果 &ldquo;DEFGABC&rdquo;。</li>
</ol>
<p>这个过程只涉及三次批量操作，而不是像原算法那样执行 3 次（旋转位数）* 7 次（长度）的单字符移动。具体步骤和对应代码如下</p>
<ol>
<li>分配缓冲区: 根据要旋转的位数 <code>bit_left_amount</code>，申请一块足够大的内存作为临时缓冲区。</li>
<li>保存前缀: 将子数组最前面的 <code>bit_left_amount</code> 个比特位复制到缓冲区中。</li>
<li>移动主体: 将子数组中剩下的 <code>bit_length - bit_left_amount</code> 个比特位整体向前移动 <code>bit_left_amount</code> 位。</li>
<li>写回前缀: 将缓冲区里保存的比特位写回到子数组的末尾。</li>
<li>释放缓冲区: 释放第一步申请的内存。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">rotate_the_bit_vector_left</span><span class="p">(</span><span class="kt">bit_vector_t</span><span class="o">*</span> <span class="k">const</span> <span class="n">bit_vector</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="k">const</span> <span class="kt">size_t</span> <span class="n">bit_offset</span><span class="p">,</span>  <span class="c1">// 开始旋转的起点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                <span class="k">const</span> <span class="kt">size_t</span> <span class="n">bit_length</span><span class="p">,</span>  <span class="c1">// 旋转的长度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                <span class="k">const</span> <span class="kt">size_t</span> <span class="n">bit_left_amount</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 旋转的位数 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="n">bit_length</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">bit_left_amount</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">size_t</span> <span class="n">effective_amount</span> <span class="o">=</span> <span class="n">bit_left_amount</span> <span class="o">%</span> <span class="n">bit_length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">effective_amount</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 1. 分配临时缓冲区来存储被旋转到末尾的 bits
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">const</span> <span class="kt">size_t</span> <span class="n">prefix_bytes</span> <span class="o">=</span> <span class="p">(</span><span class="n">effective_amount</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span><span class="o">*</span> <span class="n">prefix_buffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span> <span class="nf">calloc</span><span class="p">(</span><span class="n">prefix_bytes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">prefix_buffer</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 2. 将子数组前 effective_amount 个 bits 复制到临时缓冲区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">effective_amount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nf">bit_vector_get</span><span class="p">(</span><span class="n">bit_vector</span><span class="p">,</span> <span class="n">bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">))</span> <span class="p">{</span>  <span class="c1">// 子数组第 i 位是否为 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">prefix_buffer</span><span class="p">[</span><span class="n">i</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">|=</span> <span class="nf">bitmask</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 3. 将子数组剩下的部分向前移动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">const</span> <span class="kt">size_t</span> <span class="n">bits_to_move</span> <span class="o">=</span> <span class="n">bit_length</span> <span class="o">-</span> <span class="n">effective_amount</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">bits_to_move</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">bit</span> <span class="o">=</span> <span class="nf">bit_vector_get</span><span class="p">(</span><span class="n">bit_vector</span><span class="p">,</span> <span class="n">bit_offset</span> <span class="o">+</span> <span class="n">effective_amount</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>  <span class="c1">// 要移动的 bit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">bit_vector_set</span><span class="p">(</span><span class="n">bit_vector</span><span class="p">,</span> <span class="n">bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">bit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 4. 将缓冲区保存的 bits 写回子数组末尾
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">const</span> <span class="kt">size_t</span> <span class="n">paste_offset</span> <span class="o">=</span> <span class="n">bit_offset</span> <span class="o">+</span> <span class="n">bits_to_move</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">effective_amount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">bit</span> <span class="o">=</span> <span class="p">(</span><span class="n">prefix_buffer</span><span class="p">[</span><span class="n">i</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">&amp;</span> <span class="nf">bitmask</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// 从缓冲区读入 bit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">bit_vector_set</span><span class="p">(</span><span class="n">bit_vector</span><span class="p">,</span> <span class="n">paste_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">bit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">free</span><span class="p">(</span><span class="n">prefix_buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>该方法给出的评分如下</p>
<pre tabindex="0"><code>check result: PASSED
performance of -s: 28
performance of -m: 33
performance of -l: 38
------score--------
-s : 70.00 /100
-m : 77.27 /100
-l : 80.00 /100
total score: 77.18 /100
</code></pre><h1 id="optimization-2-from-bit-by-bit-to-byte-level">Optimization 2: From bit-by-bit To byte-level</h1>
<p>进一步优化的点是将按位拷贝操作改成一次操作 8 个字节 (需要考虑对齐问题). 拷贝任务分为三个阶段处理，以优化性能并处理非对齐的位偏移:</p>
<ol>
<li>头部处理: 处理目标地址非字节对齐的位。
<ul>
<li>计算目标偏移的非对齐部分。如果目标偏移不是字节的开始点，需要先拷贝少量位，直到目标地址对齐到字节边界。拷贝的位数是剩余到下一个字节边界的位数，但不能超过 <code>num_bits</code>.</li>
</ul>
</li>
<li>中间块处理: 以 64 位为单位高效拷贝对齐的块。根据源是否字节对齐，分两种情况:
<ul>
<li>源和目标都按字节对齐，直接使用 memmove 拷贝所有字节。</li>
<li>源非字节对齐: 使用 memcpy 读取 8 字节到 <code>uint64_t word</code>，避免未对齐访问问题。
读取下一个字节 (<code>next_byte = src_ptr[8]</code>)，用于位移拼接。将当前 64 位右移并拼接下一字节的位 <code>(word &gt;&gt; src_bit_shift) | (next_byte &lt;&lt; (64 - src_bit_shift))</code> 后将结果写入目标地址。</li>
</ul>
</li>
<li>尾部处理: 处理剩余不足 64 位的部分。逐 bit 拷贝 (<code>|=</code>  设置为 1，<code>&amp;= ~</code> 清零).</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">bit_block_move_ultimate</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">dest_data</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">dest_bit_offset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">src_data</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">src_bit_offset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="kt">size_t</span> <span class="n">num_bits</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">num_bits</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 同样，重叠拷贝的处理对于一个健壮的函数是必需的。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 这里的 assert 仅用于指出这个简化。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="n">dest_data</span> <span class="o">==</span> <span class="n">src_data</span> <span class="o">&amp;&amp;</span> <span class="n">dest_bit_offset</span> <span class="o">&gt;</span> <span class="n">src_bit_offset</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nf">assert</span><span class="p">(</span><span class="n">dest_bit_offset</span> <span class="o">&gt;=</span> <span class="n">src_bit_offset</span> <span class="o">+</span> <span class="n">num_bits</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 实际代码中需要实现反向拷贝
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 1. 处理头部的非对齐 bit，使得目标地址按字节对齐
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">size_t</span> <span class="n">dest_align_offset</span> <span class="o">=</span> <span class="n">dest_bit_offset</span> <span class="o">%</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">dest_align_offset</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">size_t</span> <span class="n">bits_in_head</span> <span class="o">=</span> <span class="mi">8</span> <span class="o">-</span> <span class="n">dest_align_offset</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">bits_in_head</span> <span class="o">&gt;</span> <span class="n">num_bits</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">bits_in_head</span> <span class="o">=</span> <span class="n">num_bits</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// 逐 bit 拷贝头部
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">bits_in_head</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">((</span><span class="n">src_data</span><span class="p">[(</span><span class="n">src_bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="p">((</span><span class="n">src_bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="mi">8</span><span class="p">))</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">dest_data</span><span class="p">[(</span><span class="n">dest_bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">|=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="n">dest_bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="mi">8</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">dest_data</span><span class="p">[(</span><span class="n">dest_bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="n">dest_bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="mi">8</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="n">num_bits</span> <span class="o">-=</span> <span class="n">bits_in_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">src_bit_offset</span> <span class="o">+=</span> <span class="n">bits_in_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">dest_bit_offset</span> <span class="o">+=</span> <span class="n">bits_in_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 2. 处理中间的 64 位对齐块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">size_t</span> <span class="n">num_blocks</span> <span class="o">=</span> <span class="n">num_bits</span> <span class="o">/</span> <span class="mi">64</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">num_blocks</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">char</span><span class="o">*</span> <span class="n">dest_ptr</span> <span class="o">=</span> <span class="n">dest_data</span> <span class="o">+</span> <span class="n">dest_bit_offset</span> <span class="o">/</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">src_ptr</span> <span class="o">=</span> <span class="n">src_data</span> <span class="o">+</span> <span class="n">src_bit_offset</span> <span class="o">/</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="kt">size_t</span> <span class="n">src_bit_shift</span> <span class="o">=</span> <span class="n">src_bit_offset</span> <span class="o">%</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">src_bit_shift</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 源和目标都已对齐，可以直接 memmove
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="nf">memmove</span><span class="p">(</span><span class="n">dest_ptr</span><span class="p">,</span> <span class="n">src_ptr</span><span class="p">,</span> <span class="n">num_blocks</span> <span class="o">*</span> <span class="mi">8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_blocks</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">uint64_t</span> <span class="n">word</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 【修正 #3 &amp; #4】安全地读取源数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 使用 memcpy 来避免不对齐读取，同时它也比逐字节拼接高效
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nf">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">word</span><span class="p">,</span> <span class="n">src_ptr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1">// 为了拼接，我们需要下一个字节的数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">uint64_t</span> <span class="n">next_byte</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 计算需要拷贝的总字节数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">size_t</span> <span class="n">total_bits_processed</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">64</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="kt">size_t</span> <span class="n">required_src_bytes</span> <span class="o">=</span> <span class="p">(</span><span class="n">src_bit_offset</span> <span class="o">+</span> <span class="n">total_bits_processed</span> <span class="o">-</span> <span class="n">dest_bit_offset</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">next_byte</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span><span class="n">src_ptr</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="kt">uint64_t</span> <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">word</span> <span class="o">&gt;&gt;</span> <span class="n">src_bit_shift</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">next_byte</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">64</span> <span class="o">-</span> <span class="n">src_bit_shift</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="nf">memcpy</span><span class="p">(</span><span class="n">dest_ptr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">result</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">dest_ptr</span> <span class="o">+=</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">src_ptr</span> <span class="o">+=</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="kt">size_t</span> <span class="n">bits_in_middle</span> <span class="o">=</span> <span class="n">num_blocks</span> <span class="o">*</span> <span class="mi">64</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">num_bits</span> <span class="o">-=</span> <span class="n">bits_in_middle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">src_bit_offset</span> <span class="o">+=</span> <span class="n">bits_in_middle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">dest_bit_offset</span> <span class="o">+=</span> <span class="n">bits_in_middle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 3. 处理尾部剩余的不足 64 位的 bit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="n">num_bits</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_bits</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">((</span><span class="n">src_data</span><span class="p">[(</span><span class="n">src_bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="p">((</span><span class="n">src_bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="mi">8</span><span class="p">))</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">dest_data</span><span class="p">[(</span><span class="n">dest_bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">|=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="n">dest_bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="mi">8</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">dest_data</span><span class="p">[(</span><span class="n">dest_bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span><span class="p">]</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="n">dest_bit_offset</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="mi">8</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>完整的函数如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">rotate_the_bit_vector</span><span class="p">(</span><span class="kt">bit_vector_t</span><span class="o">*</span> <span class="k">const</span> <span class="n">bit_vector</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="k">const</span> <span class="kt">size_t</span> <span class="n">bit_offset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="k">const</span> <span class="kt">size_t</span> <span class="n">bit_length</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="k">const</span> <span class="kt">ssize_t</span> <span class="n">bit_right_amount</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">assert</span><span class="p">(</span><span class="n">bit_offset</span> <span class="o">+</span> <span class="n">bit_length</span> <span class="o">&lt;=</span> <span class="n">bit_vector</span><span class="o">-&gt;</span><span class="n">bit_sz</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">bit_length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">size_t</span> <span class="n">left_shift</span> <span class="o">=</span> <span class="nf">modulo</span><span class="p">(</span><span class="o">-</span><span class="n">bit_right_amount</span><span class="p">,</span> <span class="n">bit_length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">left_shift</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 1. 分配一个足以容纳整个旋转区域的大临时缓冲区。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 这是解决内存崩溃问题的关键，确保了后续 bithack_memcpy 的所有读取都是安全的。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">const</span> <span class="kt">size_t</span> <span class="n">temp_buf_bytes</span> <span class="o">=</span> <span class="p">(</span><span class="n">bit_length</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span><span class="o">*</span> <span class="n">temp_buffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="n">temp_buf_bytes</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">temp_buffer</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 在实际项目中，应有更完善的错误处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 将旋转区域分为两部分：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// part_A (前部): 原本在前面，需要被旋转到末尾的部分。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// part_B (后部): 原本在后面，需要被旋转到前面的部分。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">const</span> <span class="kt">size_t</span> <span class="n">part_A_len</span> <span class="o">=</span> <span class="n">left_shift</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">size_t</span> <span class="n">part_B_len</span> <span class="o">=</span> <span class="n">bit_length</span> <span class="o">-</span> <span class="n">left_shift</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 2. 将 part_B 拷贝到临时缓冲区的开头
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">bit_block_move_ultimate</span><span class="p">(</span><span class="n">temp_buffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">      <span class="n">bit_vector</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">,</span> <span class="n">bit_offset</span> <span class="o">+</span> <span class="n">part_A_len</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">part_B_len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 3. 将 part_A 拷贝到临时缓冲区的末尾，紧随 part_B 之后
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">bit_block_move_ultimate</span><span class="p">(</span><span class="n">temp_buffer</span><span class="p">,</span> <span class="n">part_B_len</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">bit_vector</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">,</span> <span class="n">bit_offset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">part_A_len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 4. 至此，temp_buffer 中已是旋转后的正确序列 [B|A].
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 将整个临时缓冲区一次性拷贝回原位。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">bit_block_move_ultimate</span><span class="p">(</span><span class="n">bit_vector</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">,</span> <span class="n">bit_offset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">temp_buffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">bit_length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 5. 释放临时缓冲区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">free</span><span class="p">(</span><span class="n">temp_buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后也是达到了满分</p>
<pre tabindex="0"><code>check result: PASSED
performance of -s: 36
performance of -m: 40
performance of -l: 45
------score--------
-s : 100.00 /100
-m : 100.00 /100
-l : 100.00 /100
total score: 100.00 /100
</code></pre>]]></content:encoded>
    </item>
  </channel>
</rss>
