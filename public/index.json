[{"content":"Origin of Transformer Transformer 由谷歌研于 2017 年在一篇名为 Attention is All You Need 的论文中提出。与 RNN 的输入仅为一个 token 不同，Transformer 一次性可以输入一整个完整的序列。总体结构如下图所示，包含一个 Encoder 和一个 Decoder.\nTransformers Architecture\nEmbedding Embedding 是一种将离散的、稀疏的输入 (如词语、字符、类别标签\u0026hellip;) 转换为连续的、密集的向量表示的技术，核心是通过一个映射函数将离散的输入符号 (如单词) 映射到一个低维向量空间中。假设我们有一个包含 V 个单词的 Vocabulary，维度为 d，那么 Embedding Matrix 将是一个大小为 V×d 的矩阵，其中每一行是一个单词的向量表示。通过嵌入层，输入的词索引 (通常是整数) 就会被映射到该矩阵的对应行，从而得到词的向量表示。常见的预训练词嵌入方法包括：\nWord2Vec：通过上下文预测词语的方式学习词向量。 GloVe：通过统计词共现信息来学习词向量。 FastText：考虑了子词信息的词嵌入方法，能更好地处理词形变化。 在 PyTorch 和 TensorFlow 等框架中，通常有专门的 Embedding 层，Hugging Face 也有 tokenizer 将句子划分成单词并转换成对应的索引：\nPositional Encoding Positional Encoding 作用是为输入的序列中的每个元素提供位置信息。由于 Transformer 架构并没有使用递归或卷积结构，本身无法捕捉输入序列中元素的相对位置关系，因此需要通过位置编码来显式地引入这些位置信息。\nNote\nTransformer 的主要优势是通过 Self-Attention 并行处理序列中的每个元素，但是这也意味着它没有自带顺序感知能力，它并不会自动知道一个单词是在句子的开头还是结尾，因此需要额外的机制来编码每个元素在序列中的位置。\n位置编码 通过将每个单词的位置信息 (即它在序列中的位置) 编码为一个向量，并将该向量添加到单词的嵌入表示中，从而让模型能够感知每个元素的相对或绝对位置。\n经典的 Transformer 位置编码使用 正弦和余弦函数的组合，为每个位置生成的向量在不同维度上具有不同的周期性，这能够捕捉到不同级别的相对位置关系。假设输入的序列中有 N 个单词，每个单词的嵌入维度为 d，那么 Positional Encodin(PE) 的计算公式如下:\n$$\r\\begin{aligned}\r\u0026PE_{(pos,2i)}=\\sin\\left(\\frac{pos}{10000^{\\frac{2i}d}}\\right)\\\\\r\u0026PE_{(pos,2i+1)}=\\cos\\left(\\frac{pos}{10000^{\\frac{2i}d}}\\right)\r\\end{aligned}\r$$其中：\npos 是单词在序列中的位置索引 (位置从 0 开始). i 是位置编码的维度索引，表示该位置编码向量中的第 i 个元素。 d 是 Embedding 的维度 这些位置编码与单词的词嵌入 (Word Embedding) 相加，最终形成输入模型的向量表示。\n(Masked) Multi-Head Attention Multi-Head Attention (MHA) 的目的是通过并行地计算多个注意力头 (Attention Head)，从多个子空间中学习输入序列的不同表示。经过 Word Embedding 后的输入 X 形状为 Nxd. 计算步骤如下\n通过学习的变换矩阵将 X 映射到查询 (Q)、键 (K) 和值 (V) 空间。 $$\r\\begin{aligned}\u0026Q=XW^{Q}\\\\\u0026K=XW^{K}\\\\\u0026V=XW^{V}\\end{aligned}\r$$ 其中 $W^{Q},W^{K}\\in\\mathbb{R}d_{model}\\times d_{k},W^{Q},W^{V}\\in\\mathbb{R}d_{model}\\times d_{v}$\n根据 QKV 计算 Attention 每个查询向量会与所有键向量进行相似度计算 (一般采用 scaled inner product)，从而获得权重，然后利用这些权重对所有值向量进行加权求和。\n$$\r\\mathrm{Attention}(Q,K,V)=\\mathrm{softmax}\\left(\\frac{QK^T}{\\sqrt{d_k}}\\right)V\r$$\n在多头注意力中，为了增加模型的表达能力，通常将 Q、K 和 V 通过多个不同的线性变换矩阵进行多次计算，得到多个注意力头 (Attention Heads). 每个头的计算是独立的，但它们的结果会在最后进行拼接并经过线性变换。最终的 Multi-Head Attention 公式为：\n$$\r\\text{MultiHead}(Q,K,V)=\\text{Concat}(head_1,head_2,\\ldots,head_h)W^O\r$$\n每个头 $head_i$ 计算公式为\n$$\r\\text{MultiHead}(Q,K,V)=\\text{Concat}(head_1,head_2,\\ldots,head_h)W^O\r$$\n这里的 $W^{Q}_{i},W^{K}_{i},W^{V}_{i}$ 是为每个头学习到的不同权重矩阵，$W^O$ 是输出的线性变换矩阵。\nMulti-Head Attention\nDecoder 中的 Masked MHA 确保模型只能在解码序列的当前位置及其之前的位置上操作，而不能 “看到” 将要生成的未来信息。与标准的 MHA 相同，注意力分数 $\\mathrm{Attention Scores}=\\frac{QK^T}{\\sqrt{d_k}}$ 是通过 Q 和 K 的点积计算得到的。计算完成后我们给其加上一个下三角元素 (包含主对角线) 为 0，上三角元素为 —∞ 的 mask，这样未来的信息经过 Softmax 后的权重为 0，被完全屏蔽。\nGrouped Query Attention（GQA）\u0026amp; Multi-query Attention (MQA) GQA 将多个 Q 分成若干组，每一组共享相同的权重矩阵。这使得每组查询可以共同处理同一个 K 和 V，降低了计算量和内存需求。在 MHA 中，所有的头共享相同的输入 X，但使用不同的投影矩阵来生成 K 和 V. GQA 中 K 和 V 通常是对输入 X 进行一次性线性变换，并在所有同一分组中的 Q 共享。MQA 更为极端，所有的 Q 共享一个 K 和 V.\nOverview of MHA, GQA \u0026amp; MQA\nMulti-Head Cross Attention Multi-Head Cross Attention 是 Transformer Decoder 中的一个核心组件。与 Self-Attention 不同，Cross Attention 负责将解码器的隐藏状态与编码器的输出上下文信息进行交互，允许解码器的每一个解码时间步的状态 查看整个编码器的输出。每个解码的时间步 t，Decoder 的隐藏状态作为 Q，Encoder 的输出作为 K 和 V，计算过程与 标准的 Self-Attention 相同。\nEvolution Tree of Transformer 后续的研究逐渐把 Encoder 和 Decoder 分离开来，形成 Encoder-Only 和 Decoder-Only 的模型。如下图所示\nTransformer Evolution Tree\nFeed Forward Network FFN 是一个两层的前馈全连接网络，中间有一个非线性激活函数。第一层全连接将 $d_model$ 映射到 $4d_model$ ，经过非线性激活函数后，第二层全连接再重新映射回 $d_model$.\nDecoder-Only Transformer Decoder-Only 删除了原先 Transformer Encoder 的部分以及 Encoder 和 Decoder 进行 Cross Attention 的部分。它具有三个必要的特征:\n在给定编码器输入作为上下文的情况下基于迄今为止生成的 token 自动回归预测下一个。 在评估对输入序列的 Q 时看不到未来值。这就是为什么仅解码器的模型通常被称为 Casual Language Model (CLM). 训练模型以在给定当前输入序列的情况下预测下一个 token. 这种训练方法与回归相结合，允许模型自回归生成任意长 (最高达输入序列的最大长度) 的序列。 Decoder-only (left) and Encoder-only (right) Transformer Architectures\nLLaMA Transformer Architecture LLaMA Transformer 结构如下，主要有以下变化\n使用 RoPE (Rotary Position Embedding) 替代传统的位置编码。 RMSNorm 替代 LayerNorm 引入 Gated Linear Unit (GLU) Rotary Position Embedding 传统的 Transformer 模型使用可学习的绝对位置编码 (如 sinusoidal position embedding)，但 RoPE 采用了旋转矩阵的思想，将位置编码与输入的 token 表示直接结合，而不依赖于额外的可学习参数。\n输入向量的旋转角度为 $\\theta(p,i)=p\\cdot10000^{-2i/d}$. p 表示位置索引，i 表示维度索引，d 为向量的总维度。对于输入的 token 向量 x 中的每一对偶数和奇数维度 $(x_{2i},x_{2i+1})$，旋转操作可以用 2D 旋转矩阵表示为\n$$\\begin{bmatrix}x_{2i}^{\\prime}\\\\x_{2i+1}^{\\prime}\\end{bmatrix}=\\begin{bmatrix}\\cos(\\theta)\u0026-\\sin(\\theta)\\\\\\sin(\\theta)\u0026\\cos(\\theta)\\end{bmatrix}\\cdot\\begin{bmatrix}x_{2i}\\\\x_{2i+1}\\end{bmatrix}$$\n对于输入的 token 向量 $\\mathbf{x}\\left[x_{0},x_{1},x_{2},x_{3},\\cdots,x_{d-1}\\right]$, RoPE 将其两两一组配对，每一组都会与位置相关的旋转角度 θ 对应地应用旋转操作。这个过程的本质是对输入 token 的表示做了旋转变换，使得这些特征不仅依赖于输入的特征，还隐含了该 token 在序列中的位置。\nRoPE\nRMSNorm RMSNorm 相对于 LayerNorm 去掉了均值计算，仅基于输入的均方根进行归一化 $\\mathrm{RMSNorm}(\\mathbf{x})=\\frac{\\mathbf{x}}{\\mathrm{RMS}(\\mathbf{x})+\\epsilon}\\cdot\\gamma$\n其中\n$\\mathrm{RMS}(\\mathbf{x})=\\sqrt{\\frac1d\\sum_{i=1}^dx_i^2}$ 为输入的均方根。 $\\gamma{:}$ 为可学习的缩放参数。 $\\epsilon{:}$ 为防止除以 0 的小数。 SiLU SiLU (Sigmoid Linear Unit) 是一种激活函数，也称为 Swish，其定义为输入 x 和 Sigmoid 函数输出的乘积。其定义为 $$\\mathrm{SiLU}(x)=x\\cdot\\sigma(x)$$ 其中 $\\sigma(x)=\\frac1{1+e^{-x}}$\nSiLU\n","permalink":"http://localhost:1313/blogs/transformerfamily/","summary":"Introduction of Transformer Family","title":"Transformer Family"},{"content":"ZeRO Zero 用于优化内存，极大地提高了训练速度，同时增加了可以训练的模型大小。ZeRO 消除了数据和模型并行训练中的内存冗余，同时保持了低通信量和高计算粒度，能够以持续的高效率按设备数量等比例扩展可训练模型的大小。\nIntroduction ZeRO 首先总结了下当前并行方法存在的问题\nBasic DP: 没有减少每个设备的内存，在 32GB 内存的 GPU 上训练超过 1.4B 参数的模型便会 OOM. Model Parallelsim (MP): 切分了每一层的计算和激活到每个设备上，但引入了大量的通信 (前向和反向都需要 2xAll-Reduce)，因此扩展性差，通常只在一个节点内的高带宽连接的 GPU 中进行。在 DGX-2 节点训练 40B 参数的模型每个 V100 GPU 仅能达到硬件峰值的 5% 算力 (5T flops). 模型状态通常占据了训练时的大部分内存，但 DP 在所有数据并行进程中保存一份模型状态，导致冗余内存消耗；而 MP 对这些状态进行切分以获得高内存效率，但通常会导致过于细粒度的计算和昂贵的通信，扩展效率较低。此外，这些方法都静态地维护整个训练过程所需的整个模型状态。\nZeRO-DP 通过在数据并行过程中划分模型状态 (参数、梯度和优化器状态) 消除了数据并行过程中的内存冗余。\n结论：如下图所示 ZeRO-DP 有三个主要的优化阶段，它们对应于优化器状态、梯度和参数的划分。 对于使用 FP16 的模型，内存占用包括参数 (FP16)、梯度 (FP16)、Adam 优化器状态 (动量 (FP32)，方差 (FP32) 以及更新后的参数 (FP32), 因此 K=12).\n优化器状态划分 (Pos) —— 内存减少 4 倍，需要对梯度进行 reduce-scatter，用各自的优化器状态更新梯度后进行 All-gather 使所有设备都有最新的梯度，通信量与数据并行性相同 (对 Loss 进行一次 All-reduce). 添加梯度划分 (Pos+g) \u0026ndash; 内存减少 8 倍，每个设备需要将自己的梯度 scatter 到负责更新那部分参数的设备上，然后使用 Gather 将其他设备更新后的模型参数同步到自己上面，通信量与数据并行性相同。 添加参数划分 (Pos+g+p) \u0026ndash; 内存减少与数据并行度 Nd 呈线性关系。通信量增加了50%，因为在前向/反向传播中需要每个设备需要额外广播自己存储的模型参数 2*(N-1)/N*P，反向传播时需要对发送梯度到对应的设备上 (N-1)/N*P. Memory Savings and Communication Volume for the 3-stage of ZeRO\n激活、临时缓冲区和不可用的内存片段会成为次要内存瓶颈。作者开发了 ZeRO-R 优化了这三个因素分别消耗的剩余内存。\n对于激活 (在前向传播中存储，反向传播中使用)，仅仅使用激活检查点是不够的。ZeRO-R 通过激活划分识别和删除现有 MP 方法中重复存储的激活，并且在适当时候将激活存储在 CPU 中。 ZeRO-R 定义了适当大小的临时缓冲区，以实现内存和计算效率的平衡。 由于不同张量的寿命存在差异，ZeRO-R 根据张量的不同生命周期主动管理内存，防止内存碎片。 在某些情况下，MP 仍可以和 ZeRO 一起使用：i）当与 ZeRO-R 一起使用时，MP 可以减少超大模型的激活内存占用。ii）对于较小模型，当单独使用 DP 的 batchsize 太大而无法实现良好的收敛时，MP 也可以带来好处。\nWhere Did All the Memory Go? 在模型训练期间，大部分内存被模型状态消耗 (优化器状态、梯度和参数). 除了这些模型状态之外，剩余的内存被激活、临时缓冲区和碎片内存所消耗，称之为剩余状态。\nModel States: Optimizer States, Gradients and Parameters Adam 优化器需要存储两个优化器状态：时间平均动量和梯度方差来计算更新后的参数。此外，还需要有足够的内存来存储梯度和权重本身。\n混合精度训练 (Mixed-Precision Training) 中参数和激活以 fp16 格式存储并且在前向和反向传播中也使用 fp16 格式的权重和激活。Adam 优化器存储 fp32 格式的参数副本、动量和方差以保证更新的精度。\n假设模型参数量为 ψ，模型参数需要占用 2ψ 字节的内存，反向传播中产生的 fp16 梯度需要占用 2ψ 字节的内存。Adam 优化器存储 fp32 格式的参数副本、动量和方差每个都需要占用 4ψ 字节的内存。因此训练时总共需要 16ψ 字节的内存，为存储模型参数的 8x.\nResidual Memory Consumption 在训练过程中，激活会占用大量的内存。基于 transformer 的模型的激活内存占用与层数×隐藏维度×序列长度×批大小成正比。对于类似 GPT-2的结构，总激活约为 12×隐藏亮度×批大小×序列长度×变层数 (QKV(h*3h) + O(h*h) + MLP(h*4h+4h*h)=12h*h，没有考虑 mask). 激活重计算可以以 33% 的额外计算开销 (之前是一次前向，一次反向，反向因为需要对输入和参数都进行求导所以计算量是前向的两倍，现在多了一次前向) 换取接近原先激活大小平方级别的内存占用。\n对于大型模型，用于存储中间结果的临时缓冲区会消耗大量内存。对梯度进行 All-Reduce 或梯度归一化计算等操作倾向于在操作之前将所有梯度融合到单个扁平缓冲区中，以提高吞吐量。\n碎片化内存会导致即使有足够的内存但没有足够大的连续块进行分配时的 OOM，作者观察到极端情况下在有 30% 剩余内存时也会产生 OOM.\nZeRO: Insight and Overview ZeRO有两组优化：ZeRO-DP 旨在减少模型状态的内存占用；ZeRO-R 旨在减少剩余内存消耗。\nZeRO-DP 基于三个关键见解：\nDP 比 MP 具有更好的扩展效率，因为 MP 减少了计算的粒度，同时也增加了通信开销。 DP 内存效率低下，因为模型状态被在所有数据并行进程中都存有一份。 DP 和 MP 都保留了整个训练过程中所需的所有模型状态，但并非所有状态在整个训练期间都需要。 ZeRO-DP 划分模型状态，并使用动态通信调度利用模型状态的内在的暂时性，同时最小化通信量。\nZeRO-R 基于两个关键见解：\nMP 对模型状态进行切分，但通常需要重复存储激活。 对于GPT-2或更大的模型，算术强度 (每次迭代计算量与激活检查点数量的比值) 非常大 (≥10K)，并且随着隐藏维数的增加而线性增加，即使在带宽较低的情况下，也可以隐藏激活检查点的数据移动成本。 ZeRO 通过跨 GPU 划分激活检查点来消除 MP 中的内存冗余，并根据需要使用 All-Gather 来重建；使用恒定大小的缓冲区来避免临时缓冲区随着模型大小的增加而爆炸；通过将激活检查点和梯度移动到预分配的连续内存缓冲区来执行动态内存碎片整理。\nDeep Dive into ZeRO-DP 下表显示了逐渐切分 (1) 优化器状态、(2) 梯度和 (3) 参数冗余后的内存占用。称为ZeRO-DP的三个优化阶段：Pos， Pg和Pp，将在下面详细说明。\nDP\r7.5B Model (GB)\r128B Model (GB)\r1T Model (GB)\rPos\rPos+g\rPos+g+p\rPos\rPos+g\rPos+g+p\rPos\rPos+g\rPos+g+p\r1\r120\r120\r120\r2048\r2048\r2048\r16000\r16000\r16000\r4\r52.5\r41.3\r30\r896\r704\r512\r7000\r5500\r4000\r16\r35.6\r21.6\r7.5\r608\r368\r128\r4750\r2875\r1000\r64\r31.4\r16.6\r1.88\r536\r284\r32\r4187\r2218\r250\r256\r30.4\r15.4\r0.47\r518\r263\r8\r4046\r2054\r62.5\r1024\r30.1\r15.1\r0.12\r513\r257\r2\r4011\r2013\r15.6\rPos: Optimizer State Partitioning 设 DP 并行度为 Nd, 每个数据并行进程只需要存储和更新总优化器状态的 1/Nd，然后只更新参数的 1/Nd. 在每个训练步骤结束时，在数据并行进程中执行一次 All-Gather，以获得所有数据并行过程中完全更新的参数。这使得每个设备上保存模型状态需要的内存从 4ψ+Kψ 变成 4ψ+Kψ/Nd，当使用 Adam 优化器 (K=12) 并且 Nd 很大时，内存需求可以降低接近 4x.\nPg: Gradient Partitioning 由于每个数据并行进程只用更新自己被分配的参数，因此他也只需要那部分参数 reduce 后的梯度。只在负责更新相应参数的数据并行过程中进行 reduce. 完成后它们的内存可以被释放。这使得了梯度所需的内存占用从 2Ψ 字节减少到 2Ψ/Nd. 更新后的参数再被 scatter 到其他进程。\n通常为了效率，将需要 reduce 的梯度按照参数的分区划分成多个 buckets，每个 bucket 对应特定的一组参数，对每个 bucket 进行整体 reduce 操作，而不是对单个梯度进行操作。进一步划分梯度后，每个设备上保存模型状态需要的内存进一步减少到 2ψ+(K+2)ψ/Nd\n蓝色箭头串起来的白色长方形代表的是 Transformer Block，蓝色的第一行代表 FP16 参数；橙色的第二行代表 FP16 梯度，反向传播时将用于更新参数；绿色的行代表优化器状态 (FP32 的梯度，动量，方差，以及更新后的参数)，其中在计算完 FP16 梯度以后不再需要保存 FP32 参数。同时也需要 buffer 来保存部分 transformer block 的输出激活。\nPp: Parameter Partitioning 更进一步我们可以将模型参数也进行划分，当设备所没有的参数需要进行向前和向后传播时，通过广播从其他的的数据并行进程接收。通过前面的分析可知这使得通信量变为原来的 1.5x， 但使得所有的模型参数都被划分到每个设备上，只需要 (4+K)/Nd 字节的内存。\nExecution Steps of ZeRO3 Overview of Memory Consumption\n每个 GPU 只需要保存自己部分的 Pos+g+p. 前向传播时保存对应模型参数的 GPU 需要把参数广播到其他 GPU 中，其他 GPU 用自己部分的数据完成前向传播后就可以删除这部分参数 (最后一部分除外). (N-1)/N*P\nBroadcast of Model Parameters\n前向传播完成后，第一次反向传播可以利用最后一次正向传播已经广播了的模型参数，每个 GPU 计算自己部分的梯度，然后 Reduce 到存储对应模型参数的 GPU 中。之后和前向传播一样，每个 GPU 都需要广播自己的参数，然后其他 GPU 用自己的数据完成梯度计算以后 Reduce 到自己的梯度。(N-1)/N*P + 1/N*G*(N-1)\nGradient Accumulation\n反向传播结束以后，每个 GPU 使用优化器更新自己的 FP32 模型参数后转换成 FP16 格式。\nUpdate Parameters Locally\nDeep Dive into ZeRO-R Pa: Partitioned Activation Checkpointing 一旦计算了模型的一层的前向传播，输入激活将在所有模型并行过程中进行划分，直到在反向传播期间再次需要输入激活。此时，ZeRO 使用一个 All-Gather 操作来重新实现激活的复制副本。称这个优化为 Pa. 将 Pa 与激活检查点结合，只存储分区的激活检查点，这样使得激活占用空间的减少与 MP 并行度成正比。\nCB: Constant Size Buffers 通信的效率不仅仅与数据量相关，还受到固定启动开销和带宽利用率的影响。较大的输入更容易充分利用硬件的带宽和优化机制，因而能显著提高 All-Reduce 操作的效率。因此经常将需要进行通信的数据合并到一个缓冲器。然而，合并缓冲区的内存开销与模型大小成正比，模型过大时容易 OOM. 为了解决这个问题，当模型很大时，简单地使用一个性能高效的固定大小的合并缓冲区。\nMD: Memory Defragmentation 前向传播中只需要保存检查点的激活而丢弃其他激活会产生碎片化内存。同样的反向传播中只需要保存参数的梯度而丢弃激活的梯度也会产生碎片化内存。内存碎片导致两个问题: (1) 即使有足够的可用内存，由于缺乏连续内存导致 OOM. (2) 由于内存分配器花费大量时间搜索连续内存块以满足内存请求而导致效率低下。ZeRO 通过为激活检查点和梯度预分配连续内存块，并在它们产生时将它们复制到预分配的内存中，从而实时地进行内存碎片整理。\nCommunication Analysis of ZeRO-DP 使用 Pos 和 Pg 时，ZeRO-DP 不会产生额外的通信，同时可以减少高达 8 倍的内存。使用 Pos+g+p 时，ZeRO-DP 最多会产生 1.5 倍的通信，同时减少内存占用为原来的 1/Nd.\n在数据并行训练过程中，在计算下一步的更新之前，在反向传播结束时对所有数据并行进程的梯度使用 All-Reduce 进行平均，因此通信量为 2ψ. 使用 Pos+g 时每个设备需要将自己的梯度 scatter 到负责更新那部分参数的设备上，然后使用 Gather 将其他设备更新后的模型参数同步到自己上面，总通信量仍为 2ψ，与数据并行相同。使用 Pos+g+p 时负责该分区的数据并行进程将权重 brocast 给所有数据并行进程 (前向反向各一次)，最后仍需要 Gather 其他进程上更新好的参数，因此总通信量为 3ψ.\nCommunication Analysis of ZeRO-R 在使用激活检查点的 Megatron-LM 中，每个 transformer block 在前向传播中执行 2 次大小为 批大小×序列长度×隐藏维度的 All-Reduce 操作，反向传播中执行 2 次同样大小的 All-Reduce 操作，同时激活重计算也需要 2 次同样大小的 All-Reduce 操作。因此每个块的总通信量为 12×序列长度×隐藏维度。\n当使用 ZeRO-R 划分激活检查点时，在对每个激活检查点上的反向传播进行前向重新计算之前，需要进行额外的一次 All-Gather 操作。因此，Pa的总通信开销相对于原先 MP 通信量增加了 1/12，但是使得激活内存占用减小到原来的 1/MP_degree.\n如果使用了 Pa+cpu，则分区激活检查点将被存储到 CPU，对激活内存需求减少到几乎为零，而代价是与 Pa 相比，需要从 CPU 和内存之间的数据移动增加了 2 倍。\nZeRO-Offload ZeRO-Offload 通过将数据和计算下放到 CPU 来实现大型模型训练。为了保持计算效率，它尽可能减少数据在 GPU 和 CPU 之间的移动，同时最大限度地减少 CPU 的计算时间，并最大限度地节省 GPU 上的内存。\nIntroduction PP, MP 和 ZeRO 等并行技术都需要有足够的 GPU 设备，使得它们的内存之和能够容纳训练所需的模型状态的存储。目前基于注意力的大模型训练的主要内存瓶颈是模型状态，而不是激活。现有的异构训练在两个主要方面受到限制：(i) 几乎所有的训练都利用 CPU 内存，而不是 CPU算力。(ii) 它们主要是为单个 GPU 设计和评估的。\nZeRO-Offload 为了提高计算效率采取的设计原则有三条：(i) 它需要的 CPU 计算量与 GPU 相比减少了几个数量级。(ii) 它最小化了 CPU 和 GPU 之间的通信量，防止了通信成为瓶颈。(iii) 可以证明在实现最小通信量的同时最大限度地节省了 GPU 的内存。\nZeRO-Offload 将梯度，优化器状态和优化器计算卸载到 CPU，而将参数和前向和反向计算保留在 GPU上。这样 CPU 上的计算量为 O(M)，而 GPU 上的计算量则为 O(MB)，其中 M 和 B 分别为模型大小和 batchsize. 因为 CPU 只处理模型参数的更新，而不参与与 batch size 相关的梯度求平均的操作。在大多数情况下，batchsize 较大，因此 CPU 计算不是瓶颈。但是对于较小的 batchsize，CPU 计算可能会成为瓶颈。\nUnique Optimal Offload Strategy 为了确定最佳的卸载策略，ZeRO-Offload 将 DL 训练建模为如下图所示的数据流，并有效地在 CPU 和 GPU 设备之间进行划分。GPU 和 CPU 之间的卸载策略可以使用该图的二分图来表示，这样一个分区中的计算节点将在拥有该分区的设备上执行，分区中的数据节点也存储在拥有该分区的设备上。\nThe Dataflow of Fully Connected Neural Networks\n由于 CPU 的算力远远低于 GPU，所以前向传播和反向传播 (它们的计算复杂度都是 O(MB)) 必须在 GPU上完成，而其余复杂度为 O(M) 的计算 (如归一化计算、权重更新等) 会被卸载到 CPU 上。\nCPU 内存带宽 (100xGB) 至少比 CPU 和 GPU 之间的 PCIe 带宽 (10xGB) 快一个数量级，而 GPU 内存带宽比 CPU 内存带宽 (TB) 快另一个数量级。数据流中的每个节点都是环的一部分。因此，对该图进行任何划分都需要切割至少两条边，每条边的权值至少为 2M，从而总通信量至少 4M (通过仅卸载部分模型状态，可以进一步减少通信量). 因此，为了实现最小的通信量，所有卸载策略必须使得关于 fp32 模型状态操作的生产者和消费者相同。fp16 参数节点必须和 FWD-BWD 节点在一个子图中，因为这两个节点之间的边权值是 4M.\n下表显示了最小化通信量情况下的所有有效分区策略所节省的内存。通过将 fp16 梯度和 Update Super 节点放到 CPU 可以实现 8x 的最大内存节省。\nFWD-BWD p16 g16 Update Memory Reduction gpu gpu gpu gpu 16M 1x (baseline) gpu gpu cpu gpu 14M 1.14x gpu gpu cpu cpu 4M 4x gpu cpu cpu cpu 2M 8x 综上所述 ZeRO-Offload 在 CPU 上存储所有 fp32 模型状态以及 fp16 梯度，并且还在 CPU 上计算更新后的参数。fp16 的参数保存在 GPU 上，前向和反向计算也在GPU上完成。\nZeRO-Offload Schedule 在训练过程中，首先通过前向传播计算损失。由于 fp16 参数已经存放在GPU上，因此这部分计算不需要与 CPU 通信。在损失的反向传播过程中，不同设备计算不同参数的梯度。ZeRO-Offload 可以在计算完每个参数后，将这些梯度单独或分组传输到 CPU 内存中。由于梯度是逐层传输的，因此 GPU 上只需要很小的缓冲区来存放每一层的梯度。在反向传播之后，ZeRO-Offload 直接在 CPU 上更新 fp32 参数和优化器状态），并将更新后的 fp32 参数从 CPU 内存复制到 GPU 内存上的 fp16 参数。\nZeRO-Offload Training Process on a Single GPU\n在卸载之前进行如上一节所述的划分的主要好处是，对于具有超过 1 个 GPU 的系统，每个数据并行进程只负责更新参数的一个子集。所有数据并行进程的 GPU 到 CPU 的通信量总和保持不变，CPU 资源可以并行使用，共同计算单个权重更新。ZeRO-Offload 在不同 GPU 之间划分梯度和优化器状态，每个 GPU 将其拥有的部分卸载到 CPU 内存中，并在整个训练过程中将其一直保存在那里。在反向传播过程中，在 GPU上使用 reduce-scatter 计算普遍复核一遍梯度，每个 GPU 只将属于其那一部分的平均梯度卸载到 CPU 内存中。然后优化器状态将由每个数据并行进程直接在 CPU 上并行更新。更新后，参数被移回 GPU，然后在 GPU 上执行类似于 ZeRO-2 的 All-Gather 操作来获取所有更新后的参数。\nZeRO-Offload Data Placement with Multiple GPUs\nOptimized CPU Execution 作者使用高性能计算技术实现了一个加速版的 CPU Adam 优化器 开发了一个一步延迟参数更新计划，将 CPU 参数更新计算与 GPU 上的前向和反向计算重叠，隐藏了 CPU 执行时间。 Implementing the CPU Optimizer 作者使用三级并行性来提高 CPU 优化器的性能。\nSIMD 矢量指令，充分利用 CPU 架构的硬件并行性。 循环展开，一种提高指令级并行性的有效技术，能更好地利用内存带宽。 OMP 多线程，可以有效地并行利用 CPU 上的多个内核和线程。 算法的输入为 β₁(动量系数), β₂(RMSProp 的平方梯度衰减系数), α(学习率)，以及梯度，动量，方差和 fp32 参数作为输入。我们还使用了一些特定于实现的参数，如 simd_width 和 unroll_width. Adam 优化器分别发送更新的方差、动量和参数的 fp16 和 fp32 格式到 GPU 和 CPU. 首先将数据读入矢量寄存器。然后，主循环中使用 Fused Multiplication Add 矢量操作。其他操作，如乘法、除法和平方根，也在矢量模式下运行。为了获得最佳性能，使用 AVX512 simd 指令集和基于自动调优结果的 unroll_width=8. 除了 CPU-Adam 优化器之外，还以分块的方式实现了 CPU 到 GPU 的 fp16 参数复制。通过并行化 Adam 计算并将参数复制到 GPU 来重叠 CPU 和 GPU 的执行。当在 CPU 上处理当前数据块的 Adam 计算时，将先前处理过的数据块的参数写回 GPU.\nCPU-ADAM Optimizer\nOne-Step Delayed Parameter Update 下图展示了 Delayed Parameter Update(DPU) 的 ZeRO-Offload 训练的工作流程。\n前 N−1 步不使用 DPU 进行训练，避免在梯度变化迅速的早期阶段破坏训练的稳定性。 在第 N 步中，从 GPU 获取梯度，但跳过 CPU 优化步骤，也不更新 GPU 上的 fp16 参数。 在第 N+1 步中，我们使用第 N 步的梯度计算 CPU 上的参数更新，同时使用第 N-1 步更新的参数并行计算 GPU 上的前向和反向。 Delayed Parameter Update During the Training Process\nZeRO-Infinity ZeRO-Infinity 是一种新的异构系统技术，它利用 GPU, CPU 和 NVMe 内存，在有限的资源上实现前所未有的模型扩展，并且不需要模型代码重构。\n目前大型模型训练技术中最先进的是三维并行 (3D parallelism)，它将模型（张量切片）和流水线并行与数据并行相结合。但是 GPU 内存跟不上模型大小的增长。\nZeRO-Infinity 的优势如下\n通过同时利用 CPU 和 NVMe 内存，在有限的 GPU 资源上支持大模型训练。 引入了一种称为 memory-centric tiling 的 GPU 内存优化技术，以应对 GPU 内存无法一次放下的超大 block 情况。 引入了一种称作 bandwidth-centric partitioning 的数据分区策略，用于利用所有设备上的内存带宽，并将其与重叠通信与计算的技术结合。 MEMORY REQUIREMENTS Memory for Model States: 基于 Transformer 的模型中的参数总数主要取决于隐藏维度 (hd) 和 Transformer 层数 (nl). Transformer block 中的几乎所有参数都来自四个线性层，大小分别为：QKV_Linear(nd,3nd), O_Linear(hd, hd),MLP(hd, 4hd)+(4hd, hd). 因此一个 Transformer block 的参数量约为 12 x nl x (hd)²，因此占用的内存大小为 192 x nl x (hd)² 字节。\nMemory for Residual States: 剩余状态主要由激活内存组成，它取决于模型架构、批处理大小 (bsz) 和序列长度 (seq). 存储激活检查点所需的内存估计为 2×bsz×seq×hd×nl/ci，其中 ci(checkpoint interval) 是两个激活检查点之间的 Transformer block 的数量。\nModel State Working Memory (MSWM) 是在所有模型状态被卸载到 CPU 或 NVMe 之后，在模型中最大的单个算子上执行前向或反向传播所需的最小 GPU 内存。对于基于 Transformer 的模型，最大的算子是将隐藏维度从 hd 转换为 4hd 的线性层，因此 fp32 格式下需要 4xhdx4hd 字节的内存。\nActivation Working Memory (AWM): 是在执行实际的反向传播之前重新计算激活所需的内存，即两个连续激活检查点之间的激活大小 bsz × seq × ci × (16 × hd + 2 × attn_heads × seq) 字节。\nBANDWIDTH REQUIREMENTS 假设没有任何计算和通信重叠的工作负载执行，我们可以使用峰值计算吞吐量 (peaktp)，数据移动带宽 (bw) 及其算术强度 (ait) 来估计训练效率。需要注意 peaktp 不是理论上的硬件峰值，而是在没有任何通信瓶颈的情况下可以达到的峰值。\n算术强度 (AIT) 是总计算量与计算所需数据量之比。它描述了每次数据移动的计算量。\ncompute_time = total_computation / peaktp ait = total_computation / total_data_movement communication_time = total_data_movement / bw = total_computation / (ait × bw) efficiency = compute_time / (compute_time + communication_time) = ait x bw / (ait x bw + peaktp) Quantifying AIT in DL training Transformer block 中一次前向传播中的计算量可以近似为输入乘以参数大小 2 × bsz × seq × params. 反向传播则为其 2 倍。如果使用激活检查点则还需要一次额外的前向传播，因此每次迭代的总计算量为 computation_per_iter = 2 × 4 × bsz × seq × parameters = 2 × 4 × 12 × bsz × seq × nl × (hd)²\nAIT w.r.t. Parameters and Gradients: 前向和反向过程中模型参数必须从存储位置位置加载到 GPU 寄存器各次。在使用激活检查点的情况下，还需要加载一次，以便在反向传播期间重新计算。此外，梯度必须从 GPU 寄存器存储到其最终位置至少一次。因此总共要移动模型参数 4 次，总计 2 x 4 x parameters 字节。因此关于参数和梯度的计算强度为 seq x bsz.\nAIT w.r.t. Optimizer States: 优化器状态必须至少读取和写入一次。所以总的数据移动是 2 × optimizer_states，总计 2 × 16 × parameters 字节。因此关于优化器状态的计算强度为 seq x bsz / 4.\nAIT w.r.t. Activation Checkpoints: 前向传播时必须将激活检查点保存到它们的最终位置，然后在反向传播期间加载激活检查点。因此总数据移动量为 4 × nl/ci × hd × seq × bsz 字节。因此关于激活检查点的计算强度为 24 × hd × ci.\nBandwidth Requirements 通过前面的分析可知模型状态的计算强度仅取决于批大小和序列长度，激活检查点的计算强度仅取决于存储间隔和模型的隐藏维度大小。下图 a 说明当传输参数和梯度的带宽超过 70 GB/s 时，即使是最小的批处理大小，也可以实现超过 50% 的效率。图 b 说明，传输优化器状态需要近 4 倍的带宽才能达到 50% 的效率。并且优化器状态更新需要等待所有前向和反向传播结束，不能与计算重叠。图 c 说明，启用激活检查点后，即使隐藏大小为2K，2 GB/s 的带宽也能够保持 50% 以上的效率。\nImpact of Bandwidth on Efficiency with 70 TFlops of single GPU Peak Throughput\nZERO-INFINITY DESIGN OVERVIEW GPU 集群采用异构内存存储，除了 GPU 内存还拥有 CPU 内存以及比 GPU 内存大 50x, 比 CPU 内存大近 20x 的大规模 NVMe 存储。下图为 ZeRO-Infinity 架构，描述了第一层的反向传递的通信。将划分后的参数从慢速内存移动到 GPU，然后 All-Gather 以形成完整的层。在计算梯度之后，参数被聚合和重新划分，然后卸载到慢速内存中。层用下标表示，DP rank 用上标表示。\nA Snapshot of ZeRO-Infinity Training a Model with 2 Layers on 4 DP Ranks\nEfficiency w.r.t Parameter and Gradients: 现有的异构解决方案 (例如 ZeRO-Offload) 要求先将参数从 CPU 移动到拥有这些参数的 GPU，然后再进行广播。这种方式需要在每个 GPU 上使用足够大的 batchsize，以确保通信能被计算掩盖。但这带来了两个问题：\n对于超大规模模型，激活的内存占用会过大，甚至超过 CPU 的内存容量。 当扩展到数百甚至上千个 GPU 时，为了实现有效的收敛，实际的 batchsize 会变得过大。 Efficiency w.r.t Optimizer States: 与在前向和反向传播期间参数和梯度的产生有先后顺序不同，优化器状态可以同时更新。ZeRO-Infinity 建立在 ZeRO-3 之上，因此在将优化器状态卸载到 CPU 内存时，它还可以利用所有的 GPU 和 CPU 内存带宽以及所有 CPU 算力用于优化器状态更新。然而，使用 NVMe 卸载，需要将数据从 NVMe 传入到 CPU 内存中，再从 CPU 内存返回。由于 CPU 内存有限，必须将数据分块从 NVMe 加载到 CPU 内存，进行计算后再写回 NVMe.\nEfficiency w.r.t Activations: 在一台 DGX-2 节点上，每个 GPU 可以通过 PCIe 接口以大约 3 GB/s 的速度并行读写数据到 CPU 内存。这使得在隐藏层大小为 8K 或更大时，可以将激活检查点卸载到 CPU 内存的同时保持超过 80% 的效率。\nEFFICIENCY OPTIMIZATIONS Bandwidth-Centric Partitioning 在 ZeRO-3 和 ZeRO-Offload 中每层的参数为单个数据并行进程拥有，在需要时将它们广播给其他进程，ZeRO-Infinity 在所有数据并行进程中划分单个参数，并在需要参数时使用 All-Gather. 相较于广播只用到了单个 PCIe 链路将参数从存储位置加载到 GPU，All-Gather 同时使用所有的 PCIe 链路，每条链路传输 1/dp 的参数。\nOverlap Centric Design 访问 NVMe 内存需要三个步骤：(i) 从 NVMe 读取数据到CPU内存 (nc-transfer). (ii) 将数据从 CPU 内存复制到 GPU 内存 (cg-transfer). (iii) 执行 All-Gather 以在所有 GPU 上获得完整参数 (gg-transfer).\nZeRO-Infinity 的通信重叠有两个组件\n一个 dynamic prefetcher，在每次迭代期间，跟踪其在算子序列中的位置，并预取未来算子所需的参数。在执行第 i 个操作符之前，prefetcher 可以分别对第 i+3，第 i+2 和第 i+1 个算子所需的参数调用 nc, cg 和 gg-transfer. 一个通信和卸载重叠机制，用于并行执行梯度所需的数据移动和反向计算。将第 i+1 个算子中参数梯度的 Reduce-Scatter 与第 i 个算子的计算重叠，同时将第 i+2 个算子 Reduce-Scatter 划分的梯度传输给 CPU 或 NVMe. ","permalink":"http://localhost:1313/blogs/zero/","summary":"Paper reading of ZeRO.","title":"ZeRO, ZeRO-Offload, ZeRO-Infinity"},{"content":"Parse Config Arguments 会从命令行参数中获取有关 Model, Runtime, Parallel Processing \u0026amp; Input 有关的信息。前三者被包含在 engine_config 中，而最后者则被包含在 input_config 中。在 create_config() 函数中，会初始化 _WORLD 全局变量，它是一个 GroupCoordinator 实例。很明显它只有一个包含所有的设备进程组。 GroupCoordinator GroupCoordinator 类是一个 PyTorch 的进程组封装器，主要用于管理一组进程之间的通信。它可以根据不同的通信后端（如 NCCL、Gloo、MPI 等）来协调进程之间的操作。包含以下信息\nrank: 当前进程的全局索引（全局唯一）。 ranks: 组内所有进程的全局索引列表。 world_size: 组的大小，即进程的数量 len(ranks) local_rank: 当前进程在本地节点中的索引。 rank_in_group: 当前进程在组内的索引。 cpu_group: 用于 CPU 通信的进程组。 device_group: 用于设备（如 GPU）通信的进程组。 1 2 3 4 5 6 if we have a group of size 4 across two nodes: Process | Node | Rank | Local Rank | Rank in Group 0 | 0 | 0 | 0 | 0 1 | 0 | 1 | 1 | 1 2 | 1 | 2 | 0 | 2 3 | 1 | 3 | 1 | 3 __init__ 方法接收以下参数：\ngroup_ranks: 一个包含多个进程索引列表的列表，每个子列表表示一个进程组。 local_rank: 当前进程的本地索引。 torch_distributed_backend: 指定用于通信的后端类型 (如 \u0026ldquo;gloo\u0026rdquo; 或 \u0026ldquo;nccl\u0026rdquo;). 初始化过程：\n使用 torch.distributed.get_rank() 获取当前进程的全局索引。 遍历传入的 group_ranks 列表，为每个子列表创建一个新的设备组和 CPU 组。 如果当前进程的索引在当前子列表中，则设置该进程的组内信息 (包括 ranks、world_size 和 rank_in_group). 确保 CPU 组和设备组都已成功创建。 根据是否可用 CUDA 设置当前设备为 GPU 或 CPU. 1 2 3 4 5 6 def main(): parser = FlexibleArgumentParser(description=\u0026#34;xFuser Arguments\u0026#34;) args = xFuserArgs.add_cli_args(parser).parse_args() # Add Command Line Interface (CLI) arguments engine_args = xFuserArgs.from_cli_args(args) # Extract CLI args and pass them to xFuserArgs Constructor engine_config, input_config = engine_args.create_config() # Init _WORLD. engine_config: model, run_time \u0026amp; parallel infos, input_config: input shape, prompt \u0026amp; sampler infos local_rank = get_world_group().local_rank 关于可以支持的并行策略如下，包括 Data Parallel, Sequence Parallel, Pipefusion Parallel \u0026amp; Tensor Parallel.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Parallel Processing Options: --use_cfg_parallel Use split batch in classifier_free_guidance. cfg_degree will be 2 if set --data_parallel_degree DATA_PARALLEL_DEGREE Data parallel degree. --ulysses_degree ULYSSES_DEGREE Ulysses sequence parallel degree. Used in attention layer. --ring_degree RING_DEGREE Ring sequence parallel degree. Used in attention layer. --pipefusion_parallel_degree PIPEFUSION_PARALLEL_DEGREE Pipefusion parallel degree. Indicates the number of pipeline stages. --num_pipeline_patch NUM_PIPELINE_PATCH Number of patches the feature map should be segmented in pipefusion parallel. --attn_layer_num_for_pp [ATTN_LAYER_NUM_FOR_PP ...] List representing the number of layers per stage of the pipeline in pipefusion parallel --tensor_parallel_degree TENSOR_PARALLEL_DEGREE Tensor parallel degree. --split_scheme SPLIT_SCHEME Split scheme for tensor parallel. 从 CLI 解析的参数后会在 create_config() 中组成如下的 ParallelConfig.\nDataParallelConfig: 总的并行度为 dp_degree * cfg_degree. dp_degree: 相当于对 batch 维度进行切分， cfg_degree: Class-free Guidance(cfg) 用于控制无条件的图片生成 (若使用相当于 batchsize *= 2). SequenceParallelConfig: 总的并行度为 sp_degree = ulysses_degree * ring_degree ulysses_degree: 用于控制 DeepSeed-Ulesses 的序列并行度。 ring_degree: 用于控制计算 Ring Attention 时对 Q K V 沿着 Sequence 维度的切分块数。 TensorParallelConfig: 总的并行度为 tp_degree. tp_degree: 用于控制 2D Tensor Parallel 的并行度。 split_scheme: 用于控制张量切分方式. PipeFusionParallelConfig: 总的并行度为 pp_degree=num_pipeline_patch. pp_degree: 用于控制 PipeFusion 中模型 Transoformer Blocks 的切分个数。 num_pipeline_patch: 用于控制对 latent feature map 的切分块数. attn_layer_num_for_pp: 是一个 list，表示 pp_degree 里每个 stage 的 Transformer 层数。 Warning\n关于 PipeFusion，原文说切分的 patch 数和 pipeline 大小可以不同，但这里要求 len(attn_layer_num_for_pp)=pp_degree\nInfo\n设备数必须等于 dp_degree * cfg_degree * sp_degree * tp_degree * num_pipeline_patch，并且 pp_degree 必须小于等于设备数。 ulysses_degree 必须要大于且能被 attention 的头数整除。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 parallel_config = ParallelConfig( dp_config=DataParallelConfig( dp_degree=self.data_parallel_degree, use_cfg_parallel=self.use_cfg_parallel, ), sp_config=SequenceParallelConfig( ulysses_degree=self.ulysses_degree, ring_degree=self.ring_degree, ), tp_config=TensorParallelConfig( tp_degree=self.tensor_parallel_degree, split_scheme=self.split_scheme, ), pp_config=PipeFusionParallelConfig( pp_degree=self.pipefusion_parallel_degree, num_pipeline_patch=self.num_pipeline_patch, attn_layer_num_for_pp=self.attn_layer_num_for_pp, ), ) Construct Pipeline 解析完配置参数并构建了 engine_config 后，下一步是构建模型的 pipeline.\n1 2 3 4 5 6 pipe = xFuserPixArtAlphaPipeline.from_pretrained( # First construct a PixArtAlphaPipeline, then pass it and engine_config to xFuserPipelineBaseWrapper pretrained_model_name_or_path=engine_config.model_config.model, engine_config=engine_config, torch_dtype=torch.float16, ).to(f\u0026#34;cuda:{local_rank}\u0026#34;) pipe.prepare_run(input_config) xFuserPixArtAlphaPipeline 继承自 xFuserPipelineBaseWrapper，_init_runtime_state 函数经过一番调用后会使用 initialize_model_parallel 初始化 _RUNTIME 有关模型参数的部分和模型并行的全局变量 _DP, _CFG, _PP, _SP, _TP，它是一个 DiTRuntimeState (继承 RuntimeState) 实例，记录了每个 Group 包含的设备索引，除此之外还包括 PipeFusionParallel 中有关 patch 索引的参数 (在稍后 pipeline 执行的时候计算).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class xFuserPipelineBaseWrapper(xFuserBaseWrapper, metaclass=ABCMeta): def __init__( self, pipeline: DiffusionPipeline, engine_config: EngineConfig, ): self.module: DiffusionPipeline self._init_runtime_state(pipeline=pipeline, engine_config=engine_config) # backbone transformer = getattr(pipeline, \u0026#34;transformer\u0026#34;, None) unet = getattr(pipeline, \u0026#34;unet\u0026#34;, None) # vae vae = getattr(pipeline, \u0026#34;vae\u0026#34;, None) # scheduler scheduler = getattr(pipeline, \u0026#34;scheduler\u0026#34;, None) if transformer is not None: pipeline.transformer = self._convert_transformer_backbone(transformer) elif unet is not None: pipeline.unet = self._convert_unet_backbone(unet) if scheduler is not None: pipeline.scheduler = self._convert_scheduler(scheduler) super().__init__(module=pipeline) def _convert_transformer_backbone( self, transformer: nn.Module, ): #... logger.info(\u0026#34;Transformer backbone found, paralleling transformer...\u0026#34;) wrapper = **xFuserTransformerWrappersRegister.get_wrapper(transformer)** transformer = wrapper(transformer=transformer) return transformer initialize_model_parallel 该函数中会初始化一个 RankGenerator，它接收每个并行方法的设备组大小和并行度大小顺序。其主要的方法是通过 generate_masked_orthogonal_rank_groups 函数确定每个并行组由包含哪些设备，先把并行方法按照并行度从小到大排列成 tp-sp-pp-cfg-dp. 再根据要生成的并行组产生对应的 mask. 即如果要生成 pp 组对应的 rank，那么 mask = [0, 0, 1, 0, 0]\n该函数首先会生成需要生成的并行组的大小组成的 masked_shape 和不需要生成的 unmasked_shape. 首先要用 prefix_product 计算 global_stride，即每个并行度的设备组包含几个设备。再根据 mask 取出对应的 mask_stride 和 unmaskd_stride. group_size = mask_stride[-1] 即为最大并行度的组包含的设备数。num_of_group = num_of_device / mask_stride[-1] 即为要生成几个并行度最大的组。先遍历要生成的每个设备组，并用 decompose 函数确定该设备组在不需要并行维度上的索引；再遍历该组中的每个设备的 lock rank，确定该设备在需要并行维度上的索引，最后用 inner_product 确定该设备的 global rank.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def generate_masked_orthogonal_rank_groups( world_size: int, parallel_size: List[int], mask: List[bool] ) -\u0026gt; List[List[int]]: def prefix_product(a: List[int], init=1) -\u0026gt; List[int]: # Exclusive r = [init] for v in a: init = init * v r.append(init) return r def inner_product(a: List[int], b: List[int]) -\u0026gt; int: return sum([x * y for x, y in zip(a, b)]) def decompose(index, shape, stride=None): # index: 第几个并行组 # shape: 并行组大小的 list \u0026#34;\u0026#34;\u0026#34; This function solve the math problem below: There is an equation: index = sum(idx[i] * stride[i]) And given the value of index, stride. Return the idx. This function will used to get the pp/dp/pp_rank from group_index and rank_in_group. \u0026#34;\u0026#34;\u0026#34; if stride is None: stride = prefix_product(shape) idx = [(index // d) % s for s, d in zip(shape, stride)] # 计算在每个并行维度上的索引 # stride is a prefix_product result. And the value of stride[-1] # is not used. assert ( sum([x * y for x, y in zip(idx, stride[:-1])]) == index ), \u0026#34;idx {} with shape {} mismatch the return idx {}\u0026#34;.format(index, shape, idx) return idx masked_shape = [s for s, m in zip(parallel_size, mask) if m] # 需要采取并行的维度 unmasked_shape = [s for s, m in zip(parallel_size, mask) if not m] # 不需要的 global_stride = prefix_product(parallel_size) # exclusive 前缀积 表示大的并行维度包括几个设备 masked_stride = [d for d, m in zip(global_stride, mask) if m] unmasked_stride = [d for d, m in zip(global_stride, mask) if not m] group_size = prefix_product(masked_shape)[-1] # 最大的一个并行维度包括几个设备 num_of_group = world_size // group_size # 分成几个大组 ranks = [] for group_index in range(num_of_group): # 遍历每个设备组 # get indices from unmaksed for group_index. decomposed_group_idx = decompose(group_index, unmasked_shape) # 得到在不需要采取并行的维度上的索引 rank = [] for rank_in_group in range(group_size): # 遍历该组中的每个设备 local rank # get indices from masked for rank_in_group. decomposed_rank_idx = decompose(rank_in_group, masked_shape) # 得到最大并行组的每个设备在采取并行的维度上的索引 rank.append( // 相加得到全局rank inner_product(decomposed_rank_idx, masked_stride) + inner_product(decomposed_group_idx, unmasked_stride) ) ranks.append(rank) return ranks Hybrid Parallelsim Design xDiT支持四种并行方式：PipeFusion、Sequence、Data 和 CFG Parallel。其中，Data 和 CFG Parallel在图像间并行相对简单，而 PipeFusion和 Sequence 在图像内部的不同 Patch 间并行则较为复杂。能\nPipeFusion 利用 Input Tempor Redundancy特点，使用过时的 KV（Stale KV）进行 Attention 计算，这使得 PipeFusion 无法像大型语言模型那样轻松地实现并行策略的混合。使用标准的序列并行接口，如RingAttention、Ulysses或 USP，无法满足 SP 与PipeFusion混合并行的需求。\n我们对这个问题具体说明，下图展示了pipe_degree=4，sp_degree=2的混合并行方法。设置 num_pipeline_patch=4，图片切分为 M=num_pipeline_patch*sp_degree=8 个 Patch，分别是 P0~P7.\nStandard SP Attention 的输入Q，K，V 和输出 O 都是沿着序列维度切分，且切分方式一致。如果不同 rank 的输入 patch 没有重叠，每个 micro step 计算出 fresh KV 更新的位置在不同 rank 间也没有重叠。如下图所示，standard SP 的 KV Buffer 中黄色部分是 SP0 rank=0 拥有的 fresh KV，绿色部分是 SP1 rank=1 拥有的fresh KV，二者并不相同。在这个 diffusion step 内，device=0 无法拿到 P1,3,5,7 的 fresh KV 进行计算，但是 PipeFusion 则需要在下一个 diffusion step 中，拥有上一个diffusion step 全部的 KV. standard SP 只拥有 1/sp_degree 的 fresh kv buffer，因此无法获得混合并行推理正确的结果。\nxDiT专门定制了序列并行的实现方式，以适应这种混合并行的需求。xDiT使用 xFuserLongContextAttention 把SP的中间结果存在 KV Buffer 内。效果如下图，每个 micro-step SP 执行完毕后，SP Group 内不同 rank 设备的 fresh KV是 replicate 的。这样一个 diffusion step 后，SP Group 所有设备的 KV Buffer 都更新成最新，供下一个 Diffusion Step 使用。\nNote\n假设一共有 16 个 GPU，索引表示为 g0 \u0026hellip; g15，并行方法和并行度设置如下\ndp_degree (2) * cfg_degree (2) * pp_degree (2) * sp_degree (2) = 16.\n那么一共会创建 2 data parallel-groups, 8 CFG groups, 8 pipeline-parallel groups \u0026amp; 8 sequence-parallel groups:\n2 data-parallel groups: [g0, g1, g2, g3, g4, g5, g6, g7], [g8, g9, g10, g11, g12, g13, g14, g15] 8 CFG-parallel groups: [g0, g4], [g1, g5], [g2, g6], [g3, g7], [g8, g12], [g9, g13], [g10, g14], [g11, g15] 8 pipeline-parallel groups: [g0, g2], [g4, g6], [g8, g10], [g12, g14], [g1, g3], [g5, g7], [g9, g11], [g13, g15] 8 sequence-parallel groups: [g0, g1], [g2, g3], [g4, g5], [g6, g7], [g8, g9], [g10, g11], [g12, g13], [g14, g15] Convert Model _split_transformer_blocks 会对 transformer block 进行分配，如果 parallel_config 指定了 attn_layer_num_for_pp，即存有每个 pipeFusion 的设备被分配的 transformer block 数量的列表，按其进行分配；否则平均分。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def _split_transformer_blocks(self, transformer: nn.Module,): # omit # transformer layer split attn_layer_num_for_pp = ( # 获取每个 pipeFusion 的设备被分配的 transformer block 数量 get_runtime_state().parallel_config.pp_config.attn_layer_num_for_pp ) pp_rank = get_pipeline_parallel_rank() pp_world_size = get_pipeline_parallel_world_size() if attn_layer_num_for_pp is not None: if is_pipeline_first_stage(): transformer.transformer_blocks = transformer.transformer_blocks[ : attn_layer_num_for_pp[0]] else: transformer.transformer_blocks = transformer.transformer_blocks[sum(attn_layer_num_for_pp[: pp_rank - 1]) : sum(attn_layer_num_for_pp[:pp_rank])] else: # 没有指定则平均分 num_blocks_per_stage = (len(transformer.transformer_blocks) + pp_world_size - 1) // pp_world_size start_idx = pp_rank * num_blocks_per_stage end_idx = min((pp_rank + 1) * num_blocks_per_stage, len(transformer.transformer_blocks),) transformer.transformer_blocks = transformer.transformer_blocks[start_idx:end_idx] # position embedding if not is_pipeline_first_stage(): transformer.pos_embed = None if not is_pipeline_last_stage(): transformer.norm_out = None transformer.proj_out = None return transformer 同时也会 convert 原先的 transformer backbone 为 xFuserPixArtTransformer2DWrapper，具体表现为只有 pipeline 的第一阶段进行 position embedding，最后一阶段进行 unpatchify 变为原来的图像形状。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 @xFuserTransformerWrappersRegister.register(PixArtTransformer2DModel) class xFuserPixArtTransformer2DWrapper(xFuserTransformerBaseWrapper): def __init__( self, transformer: PixArtTransformer2DModel, ): super().__init__( transformer=transformer, submodule_classes_to_wrap=[nn.Conv2d, PatchEmbed], submodule_name_to_wrap=[\u0026#34;attn1\u0026#34;], ) @xFuserBaseWrapper.forward_check_condition def forward( self, hidden_states: torch.Tensor, encoder_hidden_states: Optional[torch.Tensor] = None, timestep: Optional[torch.LongTensor] = None, added_cond_kwargs: Dict[str, torch.Tensor] = None, cross_attention_kwargs: Dict[str, Any] = None, attention_mask: Optional[torch.Tensor] = None, encoder_attention_mask: Optional[torch.Tensor] = None, return_dict: bool = True, ): \u0026#39;\u0026#39;\u0026#39; ...... \u0026#39;\u0026#39;\u0026#39; height, width = self._get_patch_height_width() # * only pp rank 0 needs pos_embed (patchify) if is_pipeline_first_stage(): hidden_states = self.pos_embed(hidden_states) \u0026#39;\u0026#39;\u0026#39; ...... \u0026#39;\u0026#39;\u0026#39; if is_pipeline_last_stage(): \u0026#39;\u0026#39;\u0026#39; ...... \u0026#39;\u0026#39;\u0026#39; else: output = hidden_states if not return_dict: return (output,) return Transformer2DModelOutput(sample=output) Pipeline Execution 在进行 warm up 后便会进行模型推理和采样器的去噪过程。模型推理通过调用 pipeline 的 __call__ 方法实现。在原先 diffusers 包中的 PixaeArtAlphaPipeline 基础上做了一些修改。我们直接看修改的部分。\nget_runtime_state() 返回 _RUNTIME ，再调用 set_input_parameters 方法，设置输入参数和计算 PipeFusionParallel 中有关 patch 索引的参数。\n1 2 3 4 5 6 get_runtime_state().set_input_parameters( height=height, width=width, batch_size=batch_size, num_inference_steps=num_inference_steps, ) 该函数会计算\npipeline parallel 中每个 patch 的高度，必须是 patch_size * num_sp_patches 的整数倍。 将每个流水线阶段的 patch 高度均匀地分配给 num_sp_patches 个序列并行设备，计算每个设备的 patch 高度和起始索引。 然后会对 prompt 嵌入后的正样本和负样本在 cfg parallel 组中的设备进行分割, rank 0 负样本，rank 1 正样本。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 if do_classifier_free_guidance: (prompt_embeds, prompt_attention_mask,) = self._process_cfg_split_batch(negative_prompt_embeds, prompt_embeds, negative_prompt_attention_mask, prompt_attention_mask,) def _process_cfg_split_batch(self, concat_group_0_negative: torch.Tensor, concat_group_0: torch.Tensor, concat_group_1_negative: torch.Tensor, concat_group_1: torch.Tensor,): if get_classifier_free_guidance_world_size() == 1: concat_group_0 = torch.cat([concat_group_0_negative, concat_group_0], dim=0) concat_group_1 = torch.cat([concat_group_1_negative, concat_group_1], dim=0) elif get_classifier_free_guidance_rank() == 0: concat_group_0 = concat_group_0_negative concat_group_1 = concat_group_1_negative elif get_classifier_free_guidance_rank() == 1: concat_group_0 = concat_group_0 concat_group_1 = concat_group_1 else: raise ValueError(\u0026#34;Invalid classifier free guidance rank\u0026#34;) return concat_group_0, concat_group_1 Async Pipeline Initialize Pipeline 首先会初始化 pipeline，rank 0 会接收 warmup 阶段的 latents 然后沿着 H 维度进行分块，rank -1 也会沿着 H 维度进行分块。然后为每个 patch 创建接收的任务，注意 rank 0 第一次是从 warmup 阶段接收 latents，所以他的需要接收的 timestep 少一个。 patch_latents 表示当前设备正在处理的 patch 数据，它会在流水线的每一阶段进行处理和传递。last_patch_latents 只在流水线的最后阶段设备中使用，用来存储每个 patch 的最终计算结果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 if len(timesteps) == 0: return latents num_pipeline_patch = get_runtime_state().num_pipeline_patch num_pipeline_warmup_steps = get_runtime_state().runtime_config.warmup_steps patch_latents = self._init_async_pipeline( num_timesteps=len(timesteps), latents=latents, num_pipeline_warmup_steps=num_pipeline_warmup_steps, ) last_patch_latents = ( # 每个 pipeline group 最后的设备接收所有的 patch [None for _ in range(num_pipeline_patch)] if (is_pipeline_last_stage()) else None ) def _init_async_pipeline( self, num_timesteps: int, latents: torch.Tensor, num_pipeline_warmup_steps: int, ): get_runtime_state().set_patched_mode(patch_mode=True) if is_pipeline_first_stage(): # get latents computed in warmup stage # ignore latents after the last timestep latents = (get_pp_group().pipeline_recv() if num_pipeline_warmup_steps \u0026gt; 0 else latents) patch_latents = list(latents.split(get_runtime_state().pp_patches_height, dim=2)) elif is_pipeline_last_stage(): patch_latents = list(latents.split(get_runtime_state().pp_patches_height, dim=2)) else: patch_latents = [None for _ in range(get_runtime_state().num_pipeline_patch)] recv_timesteps = (num_timesteps - 1 if is_pipeline_first_stage() else num_timesteps) # construct receive tasks for each patch for _ in range(recv_timesteps): for patch_idx in range(get_runtime_state().num_pipeline_patch): get_pp_group().add_pipeline_recv_task(patch_idx) return patch_latents Iterate Over Timesteps 对于每个 timestep（即每个去噪步骤），会对每个 patch 执行：\n如果当前设备是流水线的最后一阶段 (is_pipeline_last_stage())，将当前 patch 的数据保存到 last_patch_latents 中。 如果不是第一阶段的第一个时间步 (i == 0)，调用 recv_next() 来异步接收来自上一设备的 patch 数据（非阻塞操作，通过 irecv 完成）。 对每个 patch 执行模型的前向传播 _backbone_forward，根据当前时间步 t 进行推理和计算。 如果当前设备是最后一阶段，调用 _scheduler_step 来根据噪声进行去噪，并将数据发送给下一个设备 pipeline_isend。 对于非最后阶段的设备，继续将当前 patch 的计算结果发送到下一设备。 get_pp_group().pipeline_isend 用于将当前 patch 发送到下一个设备，使用的是 torch.distributed.isend，这是非阻塞发送。 get_pp_group().recv_next 会准备好接收来自上一个设备的数据，recv_buffer 用来存放接收到的数据。irecv 实现非阻塞接收，可以在等待数据的同时进行其他操作。\nWarning\nscheduler_step 只对单独的 patch 进行，原因未知。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 first_async_recv = True for i, t in enumerate(timesteps): for patch_idx in range(num_pipeline_patch): if is_pipeline_last_stage(): last_patch_latents[patch_idx] = patch_latents[patch_idx] if is_pipeline_first_stage() and i == 0: pass else: if first_async_recv: get_pp_group().recv_next() first_async_recv = False patch_latents[patch_idx] = get_pp_group().get_pipeline_recv_data( idx=patch_idx ) patch_latents[patch_idx] = self._backbone_forward( latents=patch_latents[patch_idx], prompt_embeds=prompt_embeds, prompt_attention_mask=prompt_attention_mask, added_cond_kwargs=added_cond_kwargs, t=t, guidance_scale=guidance_scale, ) if is_pipeline_last_stage(): patch_latents[patch_idx] = self._scheduler_step( patch_latents[patch_idx], # pred noise last_patch_latents[patch_idx], # last timestep noise t, extra_step_kwargs, ) if i != len(timesteps) - 1: get_pp_group().pipeline_isend( patch_latents[patch_idx], segment_idx=patch_idx ) else: get_pp_group().pipeline_isend( patch_latents[patch_idx], segment_idx=patch_idx ) if is_pipeline_first_stage() and i == 0: pass else: if i == len(timesteps) - 1 and patch_idx == num_pipeline_patch - 1: pass else: get_pp_group().recv_next() get_runtime_state().next_patch() # switch to next: (self.pipeline_patch_idx + 1) % self.num_pipeline_patch if i == len(timesteps) - 1 or ( (i + num_pipeline_warmup_steps + 1) \u0026gt; num_warmup_steps and (i + num_pipeline_warmup_steps + 1) % self.scheduler.order == 0 ): progress_bar.update() assert callback is None, \u0026#34;callback not supported in async \u0026#34; \u0026#34;pipeline\u0026#34; if ( callback is not None and i + num_pipeline_warmup_steps % callback_steps == 0 ): step_idx = (i + num_pipeline_warmup_steps) // getattr( self.scheduler, \u0026#34;order\u0026#34;, 1 ) callback(step_idx, t, patch_latents[patch_idx]) Construct Final Latents timestep 遍历完成后，仍然有最后的操作要进行，这些操作的主要目的是将流水线并行中各个 patch 的结果拼接起来，形成完整的输出结果。尤其是对于最后一个设备，还需要处理 序列并行（sequence parallelism） 的合并操作。通过 all_gather 操作将每个设备上处理的 patch 结果收集起来，然后从每个设备的 sp_latents_list 中，提取出对应于 pp_patch_idx 的 patch 数据并将它们拼接起来。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 latents = None if is_pipeline_last_stage(): latents = torch.cat(patch_latents, dim=2) if get_sequence_parallel_world_size() \u0026gt; 1: sp_degree = get_sequence_parallel_world_size() sp_latents_list = get_sp_group().all_gather( latents, separate_tensors=True ) latents_list = [] for pp_patch_idx in range(get_runtime_state().num_pipeline_patch): latents_list += [ sp_latents_list[sp_patch_idx][ ..., get_runtime_state().pp_patches_start_idx_local[pp_patch_idx] : get_runtime_state().pp_patches_start_idx_local[pp_patch_idx + 1], :, ] for sp_patch_idx in range(sp_degree) ] latents = torch.cat(latents_list, dim=-2) return latents Decode Latents 为了避免 VAE 中的 Decoder 在对 8192px 分辨率图像进行 conv2D 的过程中出现 OOM 的问题， xDiT 使用了序列并行和 patch 并行的 PatchConv2d 和 PatchGroupNorm 来替换掉原有 Decoder 中的 UpDecoderBlock2D 对应的层。\nPatchGroupNorm PatchGroupNorm 在 H 维度上划分为多个 patch，每个设备求自己所负责的部分和。 GroupNorm Principles 假设输入张量 x 的形状为 [N, C, H, W]，其中 N 表示批量大小（Batch Size），C 表示通道数（Channels），H 和 W 分别表示高度和宽度。在 GN 中，通道数 C 被划分为 G 组，每个组包含 C/G 个通道。计算每个组内即 [C/G, H, W] 维度上的均值和方差。特别的 G=1 时，GN 退化为 BN。G=C 时，GN 退化为 LN。 获取高度信息 1 2 3 4 5 6 7 class PatchGroupNorm(nn.Module): \u0026#39;\u0026#39;\u0026#39; def __init__(self, ...)\u0026#39;\u0026#39;\u0026#39; def forward(self, x: Tensor) -\u0026gt; Tensor: height = torch.tensor(x.shape[-2], dtype=torch.int64, device=x.device) dist.all_reduce(height) # 收集所有进程的高度并汇总。最终每个进程的 height 都将表示全局的高度和。 计算每个组的通道数量以及每个进程内的元素数量 1 2 3 channels_per_group = x.shape[1] // self.num_groups # 每个组的通道数量 nelements_rank = channels_per_group * x.shape[-2] * x.shape[-1] # 当前进程负责的每个组中的元素总 nelements = channels_per_group * height * x.shape[-1] # 所有进程的每个组中的元素总数 计算每个组的均值 1 2 3 4 5 x = x.view(x.shape[0], self.num_groups, -1, x.shape[-2], x.shape[-1]) # [batch_size, num_groups, channels_per_group, height, width] group_sum = x.mean(dim=(2,3,4), dtype=torch.float32) # 对每个组的所有元素 (channels_per_group, height, width) 求平均 group_sum = group_sum * nelements_rank # 加权后的局部和 = 局部均值 * 当前进程的元素数量 dist.all_reduce(group_sum) # 收集并汇总所有进程的局部和，得到全局和 E = (group_sum / nelements)[:, :, None, None, None].to(x.dtype) # 计算全局的均值 E 计算每个组的方差 1 2 3 4 5 6 # 和计算均值同样的操作 group_var_sum = torch.empty((x.shape[0], self.num_groups), dtype=torch.float32, device=x.device) torch.var(x, dim=(2,3,4), out=group_var_sum) group_var_sum = group_var_sum * nelements_rank dist.all_reduce(group_var_sum) var = (group_var_sum / nelements)[:, :, None, None, None].to(x.dtype) 归一化并缩放 $y = \\frac{x - \\mathrm{E}[x]}{ \\sqrt{\\mathrm{Var}[x] + \\epsilon}} * \\gamma + \\beta$ 1 2 3 x = (x - E) / torch.sqrt(var + self.eps) x = x * self.weight[:, :, None, None, None] + self.bias[:, :, None, None, None] return x PatchConv2d PatchConv2d 将潜在空间中的特征映射分割成多个 patch，跨不同设备进行序列并行 VAE 解码。这种技术将中间激活所需的峰值内存减少到 1/N，其中 N 是所使用的设备数量。对于 VAE 中的卷积算子，需要对如下图所示的 halo 区域数据进行通信。\nPatch VAE Conv\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class PatchConv2d(nn.Conv2d): def __init__( self, in_channels: int, out_channels: int, kernel_size: _size_2_t, stride: _size_2_t = 1, padding: Union[str, _size_2_t] = 0, dilation: _size_2_t = 1, groups: int = 1, bias: bool = True, padding_mode: str = \u0026#39;zeros\u0026#39;, # TODO: refine this type device=None, dtype=None, block_size: Union[int, Tuple[int, int]] = 0 ) -\u0026gt; None: if isinstance(dilation, int): assert dilation == 1, \u0026#34;dilation is not supported in PatchConv2d\u0026#34; else: for i in dilation: assert i == 1, \u0026#34;dilation is not supported in PatchConv2d\u0026#34; self.block_size = block_size super().__init__( in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias, padding_mode, device, dtype) _conv_forward 函数是 PatchConv2d 类的核心，它负责在输入张量上执行卷积操作，特别是在分布式计算场景下处理跨进程的输入切分、halo 区域的传递和计算。以下是使用的辅助函数的简要功能说明\n_get_world_size_and_rank ：获取当前分布式环境中的进程总数 world_size 和当前进程的编号 rank _calc_patch_height_index：根据每个进程的输入高度，计算所有进程的起始和结束高度索引。 _calc_halo_width_in_h_dim：计算当前进程在 h 维度上所需的上方和下方的 halo 区域宽度。 _calc_bottom_halo_width：计算当前进程从下方相邻进程需要接收的 halo 区域的宽度。 _calc_top_halo_width：计算当前进程从上方相邻进程需要接收的 halo 区域的宽度。 _adjust_padding_for_patch：根据当前进程的 rank 和总进程数调整输入数据的填充方式，防止边界重复计算。 获取输入信息以及通信组信息 1 2 3 4 5 6 7 8 9 10 11 12 def _conv_forward(self, input: Tensor, weight: Tensor, bias: Optional[Tensor]): bs, channels, h, w = input.shape world_size, rank = self._get_world_size_and_rank() if (world_size == 1): # 处理非分布式情况 if self.padding_mode != \u0026#39;zeros\u0026#39;: return F.conv2d(F.pad(input, self._reversed_padding_repeated_twice, mode=self.padding_mode), weight, bias, self.stride, _pair(0), self.dilation, self.groups) return F.conv2d(input, weight, bias, self.stride, self.padding, self.dilation, self.groups) 获取输入的元数据 1 2 3 4 patch_height_list = [torch.zeros(1, dtype=torch.int64, device=f\u0026#34;cuda:{rank}\u0026#34;) for _ in range(dist.get_world_size())] dist.all_gather(patch_height_list, torch.tensor([h], dtype=torch.int64, device=f\u0026#34;cuda:{rank}\u0026#34;)) # 收集所有进程的输入高度 patch_height_index = self._calc_patch_height_index(patch_height_list) # 计算每个进程块的起始高度和结束高度的索引 halo_width = self._calc_halo_width_in_h_dim(rank, patch_height_index, self.kernel_size[0], self.padding[0], self.stride[0]) # 计算当前进程块的上下 halo 区域的宽度 计算相邻进程的 halo 区域 (也就是自己需要接发送的部分) 通过计算前一个进程的 bottom_halo_width 和后一个进程的 top_halo_width 得出自己需要发送的部分\n1 2 3 4 5 6 7 prev_bottom_halo_width: int = 0 next_top_halo_width: int = 0 if rank != 0: prev_bottom_halo_width = self._calc_bottom_halo_width(rank - 1, patch_height_index, self.kernel_size[0], self.padding[0], self.stride[0]) if rank != world_size - 1: next_top_halo_width = self._calc_top_halo_width(rank + 1, patch_height_index, self.kernel_size[0], self.padding[0], self.stride[0]) next_top_halo_width = max(0, next_top_halo_width) 进行 halo 区域的发送与接收 异步发送，同步接收\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 to_next = None to_prev = None top_halo_recv = None bottom_halo_recv = None if next_top_halo_width \u0026gt; 0: bottom_halo_send = input[:, :, -next_top_halo_width:, :].contiguous() to_next = dist.isend(bottom_halo_send, rank + 1) if halo_width[0] \u0026gt; 0: # not rank 0 top_halo_recv = torch.empty([bs, channels, halo_width[0], w], dtype=input.dtype, device=f\u0026#34;cuda:{rank}\u0026#34;) dist.recv(top_halo_recv, rank - 1) if prev_bottom_halo_width \u0026gt; 0: # not rank N-1 top_halo_send = input[:, :, :prev_bottom_halo_width, :].contiguous() to_prev = dist.isend(top_halo_send, rank - 1) if halo_width[1] \u0026gt; 0: bottom_halo_recv = torch.empty([bs, channels, halo_width[1], w], dtype=input.dtype, device=f\u0026#34;cuda:{rank}\u0026#34;) dist.recv(bottom_halo_recv, rank + 1) 拼接 halo 区域 1 2 3 4 5 6 7 if halo_width[0] \u0026lt; 0: # Remove redundancy at the top of the input input = input[:, :, -halo_width[0]:, :] if top_halo_recv is not None: # concat the halo region to the input tensor input = torch.cat([top_halo_recv, input], dim=-2) if bottom_halo_recv is not None: input = torch.cat([input, bottom_halo_recv], dim=-2) 等待发送完成再开始计算 1 2 3 4 if to_next is not None: to_next.wait() if to_prev is not None: to_prev.wait() 进行卷积和后处理 为了减少 memory spike 一次计算 block_size*block_size 的区域，并将结果拼接起来\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 padding = self._adjust_padding_for_patch(self._reversed_padding_repeated_twice, rank=rank, world_size=world_size) if self.block_size == 0 or (h \u0026lt;= self.block_size and w \u0026lt;= self.block_size): if self.padding_mode != \u0026#39;zeros\u0026#39;: conv_res = F.conv2d(F.pad(input, padding, mode=self.padding_mode), weight, bias, self.stride, _pair(0), self.dilation, self.groups) else: conv_res = F.conv2d(input, weight, bias, self.stride, self.padding, self.dilation, self.groups) return conv_res else: if self.padding_mode != \u0026#34;zeros\u0026#34;: input = F.pad(input, padding, mode=self.padding_mode) elif self.padding != 0: input = F.pad(input, padding, mode=\u0026#34;constant\u0026#34;) _, _, h, w = input.shape num_chunks_in_h = (h + self.block_size - 1) // self.block_size # h 维度的 block 数量 num_chunks_in_w = (w + self.block_size - 1) // self.block_size # w ... unit_chunk_size_h = h // num_chunks_in_h unit_chunk_size_w = w // num_chunks_in_w outputs = [] for idx_h in range(num_chunks_in_h): inner_output = [] for idx_w in range(num_chunks_in_w): start_w = idx_w * unit_chunk_size_w start_h = idx_h * unit_chunk_size_h end_w = (idx_w + 1) * unit_chunk_size_w end_h = (idx_h + 1) * unit_chunk_size_h # 计算每个块的开始和结束索引，调整块的边界 # ... # 对当前块执行卷积操作 inner_output.append( F.conv2d( input[:, :, start_h:end_h, start_w:end_w], weight, bias, self.stride, 0, self.dilation, self.groups, ) ) outputs.append(torch.cat(inner_output, dim=-1)) return torch.cat(outputs, dim=-2) ","permalink":"http://localhost:1313/blogs/xdit/","summary":"This is a brief introduction to the xDiT Principle.","title":"xDiT Principle"},{"content":"Basic 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from vllm import LLM, SamplingParams # Sample prompts. prompts = [ \u0026#34;Hello, my name is\u0026#34;, \u0026#34;The president of the United States is\u0026#34;, \u0026#34;The capital of France is\u0026#34;, \u0026#34;The future of AI is\u0026#34;, ] # Create a sampling params object. sampling_params = SamplingParams(temperature=0.8, top_p=0.95) # Create an LLM. llm = LLM(model=\u0026#34;facebook/opt-125m\u0026#34;) # Generate texts from the prompts. The output is a list of RequestOutput objects # that contain the prompt, generated text, and other information. outputs = llm.generate(prompts, sampling_params) # Print the outputs. for output in outputs: prompt = output.prompt generated_text = output.outputs[0].text print(f\u0026#34;Prompt: {prompt!r}, Generated text: {generated_text!r}\u0026#34;) Architecture VLLM Architecture Overview\nLLM: 最上层的类，构造函数中会根据传入的参数构建 EngineArgs 然后创建 LLMEngine 对象。 LLMEngine: 包含一些组件 InputPreprocessor, ExecutorBase 负责模型推理的最上层的类 ExecutorBase 会初始化 N 个 WorkerWrapperBase (包装实际的 worker，类比成 GPU) Worker: 在 GPU 上执行 (一部分) 模型推理。每个 worker 与一个 GPU 相关联，负责维护 KV Cache 并在 GPU 上执行模型推理。在分布式推理的情况下，每个 worker 被分配模型的一部分。 ModelRunner: 执行模型推理并负责采样新 token. CacheEngine: 负责初始化和管理 GPU 和 CPU KV Cache. 还提供了对 KV Cache 进行操作的方法。通过 initialize_cache() 初始化。 Scheduler: 负责推理时候对请求的调度。组件包括一个 BlockSpaceManager (KV Cache blocks 管理的核心类) 以及三个队列 waiting, running \u0026amp; swapped. LLMEngine Initialization InputPreprocessor: 主要是在 add_request() 方法中将输入的 prompt 放入 tokenizer 进行处理。 InputRegistry: 根据目标模型对 InputPreprocessor 之后的数据进行处理。 Init Executor 1 2 3 4 5 6 7 8 9 class DistributedExecutorBase(ExecutorBase): \u0026#34;\u0026#34;\u0026#34;Abstract superclass of distributed executor implementations.\u0026#34;\u0026#34;\u0026#34; def __init__(self, *args, **kwargs): # This is non-None when the execute model loop is running # in the parallel workers. It\u0026#39;s a coroutine in the AsyncLLMEngine case. self.parallel_worker_tasks: Optional[Union[Any, Awaitable[Any]]] = None super().__init__(*args, **kwargs) ExecutorBase 的构造函数中会调用 self._init_executor() 对应到具体子类的函数。如果采用 TP 或 PP 的话 对应到的是 RayDistributedExecutor，否则对应到的是 UniProcExecutor. 下面以后者为例。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class UniProcExecutor(ExecutorBase): uses_ray: bool = False def _init_executor(self) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;Initialize the worker and load the model. \u0026#34;\u0026#34;\u0026#34; self.driver_worker = WorkerWrapperBase(vllm_config=self.vllm_config, rpc_rank=0) distributed_init_method = get_distributed_init_method( get_ip(), get_open_port()) local_rank = 0 # set local rank as the device index if specified device_info = self.vllm_config.device_config.device.__str__().split( \u0026#34;:\u0026#34;) if len(device_info) \u0026gt; 1: local_rank = int(device_info[1]) rank = 0 kwargs = dict( vllm_config=self.vllm_config, local_rank=local_rank, rank=rank, distributed_init_method=distributed_init_method, is_driver_worker=(not self.parallel_config) or (rank % self.parallel_config.tensor_parallel_size == 0), ) self.collective_rpc(\u0026#34;init_worker\u0026#34;, args=([kwargs], )) self.collective_rpc(\u0026#34;init_device\u0026#34;) self.collective_rpc(\u0026#34;load_model\u0026#34;) def collective_rpc(self, method: Union[str, Callable], timeout: Optional[float] = None, args: Tuple = (), kwargs: Optional[Dict] = None) -\u0026gt; List[Any]: if kwargs is None: kwargs = {} answer = run_method(self.driver_worker, method, args, kwargs) # 初始化 Worker return [answer] Executor: 初始化具体的继承自 ExecutorBase 的对象，该对象的初始化过程中会调用 init_worker() 初始化 Worker (被 WorkerWrapperBase 包装)，调用 init_device() 初始化设备，和调用具体 Worker 对象的 model_runner 的 load_model() 将模型加载到设备上。 Worker: 构造函数中会初始化 GPUModelRunnerBase 对象，确定计算 attention 使用的 backend 还有 CUDAGraphRunner 用于将模型的计算过程记录为一个静态图，在后续的推理中，通过直接 replay 这个静态图来避免动态调度和重复的内核启动开销。 initialize_kv_caches LLMEngine 构造函数在初始化 ExecutorBase 后会调用 initialize_kv_caches() 来初始化 Worker 中的 KV Cache，流程如下:\n该函数会首先通过 Worker.determine_num_available_blocks() 确定 GPU 和 CPU 可用的 block 数量。后者在 memory_profiling 上下文中进行 profile_run() 模拟模型在最大负载 (max_num_batched_tokens 和 max_num_seqs) 下执行一次推理。测量内存使用并分解为权重、激活张量和非 PyTorch 部分。留给 KV Cache 的内存大小为 total_mem * max_utilization - weight_mem - act_mem - nontorch_mem. 再除以每一个 block 能存储的的 KV Cache 大小 cache_size = Cache_config.block_size * num_attention_layers * 2*num_heads*head_size 即可得到最多能分配多少个 GPU block. 而 CPU block 数量由预设的 swap_size // cache_size 所确定。 确定了 GPU 和 CPU 的 block 数量后会调用 Worker.initialize_cache() 方法，里面首先会调用 Worker._init_cache_engine() 根据传入的 GPU block 个数初始化 CacheEngine (初始化 attn_backend，调用 CacheEngine._allocate_kv_cache() 为模型的每一层 transformer 开辟 CPU 和 GPU 的 KV Cache 内存)，然后会调用 bind_kv_cache() 将 GPU KV Cache Tensor 绑定到对应的模型的注意力层，它筛选需要 KV Cache 的注意力层，按层索引排序并去重后为每个设备绑定对应的 Tensor. 预热之后进行 capture_model 记录计算图。 Init Scheduler 构造函数中会初始化 BlockSpaceManager. 首先会创建一个 CpuGpuBlockAllocator，为 CPU 和 GPU 块维护单独的内存池，并允许在这些内存池中分配、释放、分叉和交换块。它会为 CPU 和 GPU 中的 blocks 分别创建一个 BlockAlloctor. 还会初始化一个空的 Dict[SeqId, BlockTable]， 表示对应 seq 的 KV Cache 所使用的物理内存块。还会初始化一些调度时所需要的数据，后文再谈。\n还会初始化 waiting(包含新的或 preempted prefill 请求), running \u0026amp; swapped(被换出的 decoding 请求), 它们是 Deque[SequenceGroup]，其中 SequenceGroup(SG) 是一组由同一个 prompt 生成的 Sequences 和对应的采样参数。\nSequenceGroupOutputProcessor: 抽象基类借接口，会分为 SingleStepOutputProcessor (支持 beam seaching) 和 MultiStepOutputProcessor (支持 speculatice decoding) LLM Generate _validate_and_add_requests 里面会调用 _add_request() 给 prompt 分配 reqest_id 后会调用 LLMEngine.add_request() 将其添加到请求池中，并将在调用 LLMEngine.step() 时由调度器处理。确切的调度策略由调度程序确定。主要就是进行 tokenize，然后打包成 SG 后加入 waiting.\n__run_engine 调用 generate 时首先会将 prompt 包装成 SG，它是包含某个 prompt 生成的所有 Sequence，以及一些其他在调度时需要的信息的结构。Scheduler 里面包含三个 Deque[SequenceGroup]: waiting, running \u0026amp; swapped. generate() \u0026ndash;\u0026gt; _run_engine() \u0026ndash;\u0026gt; step() \u0026ndash;\u0026gt; Scheduler.schedule() \u0026ndash;\u0026gt; Scheduler._schedule() Scheduler 的一些操作与 BlockManager 息息相关，我们在下面先简要说明逻辑，有关其具体结构和操作流程在后文中解释。\nstep 执行一次 decoding 迭代并返回新生成的结果。 Overview of the step function 主要流程如下\n调度要在下一次迭代中执行的 seq 和要交换入/出/复制的令牌块。根据调度策略，Sequences 可能被抢占/重新排序。 调用分布式执行器来执行模型。 处理模型输出。主要包括： decoding 相关输出，使用 _beam_search 与否的模型输出更新调度 seq 组和释放已完成的 seq 组。 读取上一次调度的元数据和输出 如果没有剩余步骤且，调用 Scheduler.schedule() 执行新调度，生成 seq 组元数据、调度输出和异步标志。 获取并重置已完成请求 ID，清理内存 如果不允许异步且有输出队列，处理模型输出。 从 Cache 获取上一次迭代的 sampled_token_ids，构造 ExecuteModelRequest 后调用 Executor.execute_model() (最后是由 ModelRunner) 执行模型推理，获取输出。 _schedule_prefill() 检查 budget 是否耗尽 取出队列head 部的 SequenceGroup (prefill 阶段 SequenceGroup 只有一个初始 prompt Sequence) 计算 uncached 和 cached 的新 token 数 调用 BlockSpaceManager.can_allocate() 检查是否能分配足够内存。 若能满足 budget，从 waiting 中移除 SequenceGroup. 调用 _allocate_and_set_running() 分配内存并设置为 RUNNING 状态。 _schedule_running() 取出队列head 部 SequenceGroup 并计算其包含 seq 的 #uncached_token. 这里不需要 #cached_token 因为若使用 chunked prefill，该信息已经在第一次 prefill 时使用，如果不使用那么他就是进行 decoding 的 seq ，不需要用到这个信息。 从 running 移除该 SequenceGroup. 循环调用 Scheduler._can_append_slots() 检查是否有足够的空间存储该 SequenceGroup 的 KV Cache，若不能，进入抢占逻辑 从 budget 中减去当前 SequenceGroup 的 token 和 seq 数 若 running 有其他 SequenceGroup，抢占最低优先级（队列尾部）的，若该 SequenceGroup 只有一个正在运行的 Sequence 则抢占模式为 RECOMPUTE 加入到 preempted，否则为 SWAP 加入到 swapped_out. 分配 slot 并更新 blocks_to_copy，根据该 Sequence 处于 decoding(生成 1 个 token 的 KV Cache ) 或者 prefill(生成 #uncached_token 的 KV Cache) 加入到 prefill_seq_group 或者 decode_seq_groups，并更新 budget. 返回 decode_seq_groups：存储 decoding SequenceGroup. prefill_seq_groups：存储分块 prefill SequenceGroup. preempted：被抢占需重新计算的 SequenceGroup. swapped_out：被交换到 CPU 的 SequenceGroup. keys_to_swap_out 和 keys_to_copy：内存块交换和复制的映射 _schedule_swapepd() 循环遍历 swapped 队列，取出队列head 部的 SequenceGroup，调用 BlockManager.can_swap_in() (实际上是 SWAPPED 状态的 can_swap) 获取 SequenceGroup 中处于 SWAPPED 的 Sequence 个数和 token 个数，是否满足预算。 调用 _swap_in(实际上是 BlockManager.swap_in()) 执行交换，更新 blocks_to_swap_in，将 Sequence 状态由 SWAPPED 变为 RUNNING. 调用 _append_slots 给被换入的 Sequence 分配 block. 根据 SequenceGroup 的状态添加到不同队列。 返回blocks_to_swap_in：记录需要从 CPU 交换到 GPU 的块映射。blocks_to_copy：记录需要复制的块映射（例如写时复制）。decode_seq_groups 和 prefill_seq_groups：分别存储 decoding 和 prefill SequenceGroup. infeasible_seq_groups：存储无法调度的 SequenceGroup. swapped_queue：引用交换队列。leftover_swapped：暂存无法立即调度的 SequenceGroup. _schedule_chunked_prefill() 主要思想是: 1.安排尽可能多的 decoding 请求。2.调度未完成的 prefill 请求。3.调度交换请求。4.安排新的 prefill 请求。\n初始化 budget，限制最大批处理 token 数和 seq 数。 从 running 和 waiting 生成 PartialPrefillMetadata prefills: running 和 waiting 中未完成 prefill 的 #SequenceGroup. long_prefills: running 中需要进行 prefill 的 token 数很多的 #SequenceGroup. waiting_long_prefills: waiting 中需要进行且能进行的 (未超过 ScheduleConfig 限制) prefill 的 token 数很多的 #SequenceGroup. 调用 _schedule_running. 在 running 调度返回中无无抢占或交换时(说明有足够空间) 执行 _schedule_swapped 调用 _schedule_prefills. 更新 waiting，添加 running 调度中返回的被抢占的 seq running_scheduled.preempted. 按优先级更新 running. swapped_in.decode_seq_groups：交换回来的 decoding 请求。 swapped_in.prefill_seq_groups：交换回来的 prefill 请求。 running_scheduled.decode_seq_groups：运行中的 decoding 请求。 running_scheduled.prefill_seq_groups（按完成顺序）：未完成的分块 prefill 。使用 _order_finishing_prefills_first 确保即将完成的 prefill 优先，便于下一轮转为 decoding. prefills.seq_groups：新 prefill 请求。 将运行队列中交换出去的 running_scheduled.swapped_out 添加到 swapped. 按顺序组合所有调度的 SequenceGroup: prefill 优先（满足注意力机制假设），decoding 次之。 调整 lookahead_slots 数量。若所有被调度的均为 prefill 且未启用多步调度，设置 num_lookahead_slots = 0(避免推测 decoding 路径). 否则，使用 running 计算的 lookaheadh slots 数量。 _schedule_default 尽可能多地批处理 prefill 请求，然后调度 decoding 请求. 在 GPU 内存压力下，需要 preempt 或 swap out 运行中的 decoding 请求。\nswapped 为空则进行 _schedule_prefills. 如果没有调度任何 prefill 请求，调用 _schedule_running. 如果 running 调度结果中没有发生抢占或换出时 (否则说明资源不够)，执行 _schedule_swapped. 更新 waiting, running \u0026amp; swapped 三个队列。 After schedule 调度结果返回后，\n遍历调度结果中的 SequenceGroup 遍历该 SequenceGroup 中状态为 RUNNING 的 Sequence. 获取其数据，对应的 BlockID 列表，并更新其访问时间。若使用 prefix_caching, 则调用 BlockManager.get_common_computed_block_ids() 获取共享的已计算的部分的 BlockID 列表。 如果该 SequenceGroup 处于 prefill 阶段，则判断这次调度后是否能完成 prefill. 构造返回结果，标记所有调度 SequenceGroup 的 blocks 为已计算。 BlockSpaceManager 用于将 SequenceGroup 操作映射到其包含的对应组件的操作。\nCpuGpuBlockAlloctor: 根据是否采用 prefix caching 分别为 CPU 和 GPU 初始化一个 Alloctor PrefixCachingBlockAlloctor: 基于哈希值维护 block 的Cache)重用具有相同哈希值的 block，以避免冗余的内存分配。 Dict[PrefixHash, BlockId] 将用于 prefix caching blocks 的哈希值与其 BlockID 对应。 Dict[BlockId, BlockTracker] 为每个物理 block 初始化一个 BlockTracker. NaiveBlockAllocator 用于分配不作为 prefix caching 的 blocks. 有一个 RefCounter 表示某个物理 block 被多少逻辑 block 指向。 Evictor 采用 LRU 策略驱逐已经Cache) blocks. CopyOnWriterTracker 用于将原先的 block ID 映射到目的 block ID. Dict[SeqId, BlockTable]: BlockTable 用于将单个 seq 的 KV Cache 映射到物理内存分配。会在调用 _allocate_sequence() 时被初始化。包含一个 BlockList (block 列表和一个表示对应 ID 的 int 列表) 和 BlockpaceManager 的 BlockAllocator. ComputedBlocksTracker: 维护一个 Dict[SeqId, List[int]] ( seq id到 seq 块哈希列表的映射)。Cache)个 seq 的完整块 (块全部被占满) 的哈希值。当一个 seq 进行 decoding 时，也相应更新 seq 的哈希值。还有一个 Dict[int, int] ( seq id到已计算 token 数的映射) can_allocate 在 _schedule_prefills 中被调用。\n1 2 3 def can_allocate(self, seq_group: SequenceGroup, num_lookahead_slots: int = 0) -\u0026gt; AllocStatus: 取出该 SequenceGroup 中处于 WAITING 状态的第一个 Sequence (i.e. prompt). 调用 BlockTable.get_num_required_blocks() 计算存储 token 和 lookahead slots 所需的最小 block 数 (假设无 prefix caching), i.e. cdiv(len(token_ids) + num_lookahead_slots, block_size). 调用 BlockAlloctor.get_num_free_blocks() 获取 GPU 上空闲的 block 数 (非 prefix_caching 中的空闲个数 + 可以被驱逐的个数). 返回分配状态 NEVER: #total - #required \u0026lt; #watermark OK: #free - #required \u0026gt;= #watermark LATER: #free - #required \u0026lt; #watermark allocate 1 def allocate(self, seq_group: SequenceGroup) -\u0026gt; None: 在 _schedule_prefills 中步骤 4 中调用的 _allocate_and_set_running 内部被调用。\n取出该 SequenceGroup 中处于 WAITING 状态的第一个 Sequence (i.e. prompt). 调用 BlockManager._allocate_sequence() 创建一个 BlockTable，在获取 token_ids 列表后调用 BlockTable.allocate() 为该 Sequence 分配 blocks. 将 token_ids 按 _block_size 大小进行分块。最后一块可能不能占满一个 block. 对于能够占满一个 block 的 token_ids 分块，调用 BlockAlloctor.allocate_immutable_block(). 该函数优先从Cache)查找是否已有相同内容的块，若有则直接复用该块并增加其引用计数；否则调用 BlockAlloctor.allocate_mutable_blocks() 分配一个新的 block，并将 token_ids 添加到该 block 中. 该函数会尝试从非 prefix caching blocks 中分配一个 block_id，若没找到则会驱逐一个。 对于最后一个可能被没占满的 block 调用 BlockAlloctor.allocate_mutable_blocks(). can_append_slots 1 2 def can_append_slots(self, seq_group: SequenceGroup, num_lookahead_slots: int) -\u0026gt; bool: 确定 GPU KV Cache 中是否有足够的空间来继续生成指定的 SequenceGroup. 上层接口为 Scheduler._can_append_slots()，在 _schedule_running 中步骤 2 中确定是否需要进行抢占时被调用。\n遍历该 Sequence Group 中处于 RUNNING 状态的 Sequence 对应的 BlockTable 调用 BlockTable.get_unseen_token_ids() 获取该 Sequence 还未被Cache) token 部分。 调用 BlockTable.get_num_blocks_touched_by_append_slots() 获取Cache)余部分和 lookahead 部分需要几个 block. 调用 BlockAlloctor.get_num_free_blocks() 获取 GPU 上空闲的 block 数. 需要个数小于空闲个数返回 True. append_slots 1 2 3 4 5 def append_slots( self, seq: Sequence, num_lookahead_slots: int, ) -\u0026gt; List[Tuple[int, int]]: 上层接口为 Scheduler._append_slots(). 在 _schedule_running 中检查到有空间添加，_schedule_swapped 中有 budget 进行换入，_schedule_prefills 中允许进行 chunked prefill 时被调用。\n调用 BlockTable.append_token_ids(). 该方法将 tokens 添加到 BlockTable 中的现有 block 中。会调用 BlockTable.ensure_num_empty_slots()， 它查看当前能够容纳多少个 token. 如果没有足够的空间，则使用 BlockAlloctor.allocate_mutable_block() 方法分配新 block. 调用 BlockAllocator.clear_copy_on_writes() 返回一个映射源 block ID 到当前 COW 的目标 block ID 的元组的列表. _can_swap 1 2 3 4 5 def _can_swap(self, seq_group: SequenceGroup, device: Device, status: SequenceStatus, num_lookahead_slots: int = 0) -\u0026gt; AllocStatus: 根据 status 区分上层接口: RUNNING/SWAPPED 表示需要把该 SequenceGroup 处于 RUNNING/SWAPPED 状态的 Sequence 对应的 blocks 从 GPU/CPU 换到 CPU/GPU.\n获取 SequenceGroup 中符合指定状态的 seq Sequence，然后根据 SeqID 获取对应的 BlockTable. 调用 BlockTable.get_num_blocks_touched_by_append_slots() 计算添加未存储 token 加上 lookahead_slots 所需的 block 数量。 调用 BlockAlloctor.get_num_full_blocks_touched() 获取当前有被使用的 block 数量。 如果总块数小于被使用的加上需要的 block 数量 返回 Never. 如果空闲块减去 被使用的加上需要的 block 数量后仍大于等于 watermark_blocks，返回 OK. 否则为 LATER. swap_in 调用的是 self.block_allocator.swap(blocks=blocks, src_device=Device.CPU, dst_device=Device.GPU)，即 blocks 从原设备的换出，换入到目的设备。 进一步则是 BlockAlloctor.swap_in()，该函数遍历传入的 blocks，若已经被占满调用 BlockAlloctor.allocate_immutable_block(). 否则调用 BlockAlloctor.allocate_mutable_blocks() 分配一个新的 block 后将原 block的 token 数据追加到新 block.\nswap_out 同上，最终调用的是 BlockAlloctor.swap_out(). 该函数对传入的每个 block 调用 _free_block_id，逐个处理释放逻辑。若 block 有哈希值，refcount -1，若减去后为 0 则将 block 信息添加到 evictor 中，从跟踪系统中移除，然后设置 BlockId 为 None. 否则就直接设置为 None. 若无哈希值则释放 BlockId，减去对应的 refcount，但保留 block 对象本身.\nAttention XFormersImpl 中使用了 vllm 自己写的 PagedAttention kernel.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class XFormersImpl(AttentionImpl[XFormersMetadata]): def __init__( self, num_heads: int, head_size: int, scale: float, num_kv_heads: int, alibi_slopes: Optional[List[float]], sliding_window: Optional[int], kv_cache_dtype: str, blocksparse_params: Optional[Dict[str, Any]] = None, logits_soft_cap: Optional[float] = None, attn_type: str = AttentionType.DECODER, ) -\u0026gt; None: 其中 attn_type 分为四种，下面我们主要分析 DECODER 的情况。\nDECODER: 使用 decoding 器的 self-attention block table 来Cache)KV(GPT). ENCODER: 不进行 KV Cache)用于 Encoder-Decoder 模编码器分支。编码器通常一次性处理整个输入 seq 。 ENCODER-ONLY: 不进行 KV Cache)BERT). ENCODER_DECODER: 用于编码器- decoding 器模型中的交叉注意力部分，其中 KV seq 长度与编码器 seq 长度一致(T5). 1 2 3 4 5 6 7 8 9 10 def forward( self, layer: AttentionLayer, query: torch.Tensor, # [num_tokens, num_heads * head_size] key: Optional[torch.Tensor], # [num_tokens, num_kv_heads * head_size] value: Optional[torch.Tensor], # [num_tokens, num_kv_heads * head_size] kv_cache: torch.Tensor, # [2, num_blocks, block_size * num_kv_heads * head_size] attn_metadata: \u0026#34;XFormersMetadata\u0026#34;, output: Optional[torch.Tensor] = None, ) -\u0026gt; torch.Tensor: AttentionMetadata 类定义如下\n1 2 3 4 5 6 7 8 9 10 11 @dataclass class AttentionMetadata: \u0026#34;\u0026#34;\u0026#34;Attention metadata for prefill and decode batched together.\u0026#34;\u0026#34;\u0026#34; num_prefills: int # prefill 请求的总数 num_prefill_tokens: int # 所有 prefill 请求中的 token 总数。 num_decode_tokens: int # decodeing token 的数量，等同于 decoding 请求的数量 slot_mapping: torch.Tensor # (num_tokens,)，指定每个输入 token 存储到 KV cache 中的 slot 索引 # block_idx = x // block_size, block_offset = x % block_size multi_modal_placeholder_index_maps: Optional[Dict[ str, MultiModalPlaceholderMap.IndexMap]] enable_kv_scales_calculation: bool forward 方法如下，简化了成了 DECODER 情况的逻辑。 主要流程为\n调用 PagedAttention.split_kv_cache 分离并 reshape KV Cache 张量后 调用 PagedAttention.write_to_paged_cache` 写入当前 key 和 value 到Cache)。 分离 prefill 和 decoding 的 token，初始化输出。对于 prefill 部分根据是否采用了 prefix_caching 调用 self._run_memory_efficient_xformers_forward 或 PagedAttention.forward_prefix 计算注意力。 调用 get_seq_len_block_table_args 获取 decoding Sequence 对应的 BlockTable后调用 PagedAttention.forward_decode 计算注意力。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def forward( self, layer: AttentionLayer, query: torch.Tensor, # [num_tokens, num_heads * head_size] key: torch.Tensor, # [num_tokens, num_kv_heads * head_size] value: torch.Tensor, # [num_tokens, num_kv_heads * head_size] kv_cache: torch.Tensor, # [2, num_blocks, block_size * num_kv_heads * head_size] attn_metadata: \u0026#34;XFormersMetadata\u0026#34;, output: Optional[torch.Tensor] = None, ) -\u0026gt; torch.Tensor: # 将 query 重塑为 [num_tokens, num_heads, head_size] query = query.view(-1, self.num_heads, self.head_size) # key 和 value 必须非空（自注意力要求），重塑为 [num_tokens, num_kv_heads, head_size] key = key.view(-1, self.num_kv_heads, self.head_size) value = value.view(-1, self.num_kv_heads, self.head_size) # 如果 KV Cache)空，处理Cache)辑 if kv_cache.numel() \u0026gt; 0: # 从 kv_cache 分离出 key_cache 和 value_cache # key_cache: [num_blocks, num_kv_heads, head_size/x, block_size, x] # value_cache: [num_blocks, num_kv_heads, head_size, block_size] key_cache, value_cache = PagedAttention.split_kv_cache( kv_cache, self.num_kv_heads, self.head_size) # 更新自注意力的 KV Cache) # 使用 attn_metadata.slot_mapping 指定 token 存储位置 PagedAttention.write_to_paged_cache( key, value, key_cache, value_cache, attn_metadata.slot_mapping, self.kv_cache_dtype, layer._k_scale, layer._v_scale) # 获取 prefill 和 decoding 阶段的 token 数量 (num_prefill_query_tokens, num_prefill_kv_tokens, num_decode_query_tokens) = \\ get_num_prefill_decode_query_kv_tokens(attn_metadata, AttentionType.DECODER) # 创建输出张量与 query 相同 output = torch.empty_like(query) # 分离 prefill 和 decoding 的 QKV decode_query = query[num_prefill_query_tokens:] # query = query[:num_prefill_query_tokens] key = key[:num_prefill_kv_tokens] value = value[:num_prefill_kv_tokens] # 处理 prefill 阶段（如果存在） if prefill_meta := attn_metadata.prefill_metadata: if kv_cache.numel() == 0 or prefill_meta.block_tables.numel() == 0: # 普通注意力（无Cache)缀） out = self._run_memory_efficient_xformers_forward( query, key, value, prefill_meta, attn_type=AttentionType.DECODER) output[:num_prefill_query_tokens] = out else: # 前缀Cache)意力 out = PagedAttention.forward_prefix( query, key, value, self.kv_cache_dtype, key_cache, value_cache, prefill_meta.block_tables, prefill_meta.query_start_loc, prefill_meta.seq_lens_tensor, prefill_meta.max_query_len, self.alibi_slopes, self.sliding_window, layer._k_scale, layer._v_scale) output[:num_prefill_query_tokens] = out # 处理 decoding 阶段（如果存在） if decode_meta := attn_metadata.decode_metadata: # 获取 decoding 所需的 seq 长度和 BlockTable 参数 seq_lens_arg, max_seq_len_arg, block_tables_arg = \\ get_seq_len_block_table_args(decode_meta, False, AttentionType.DECODER) # 运行 decoding 注意力 output[num_prefill_query_tokens:] = PagedAttention.forward_decode( decode_query, key_cache, value_cache, block_tables_arg, seq_lens_arg, max_seq_len_arg, self.kv_cache_dtype, self.num_kv_heads, self.scale, self.alibi_slopes, layer._k_scale, layer._v_scale) # 将输出 reshape 为 [num_tokens, num_heads * head_size] return output.view(-1, self.num_heads * self.head_size) write_to_paged_cache 调用的是已经注册到 torch.ops 中的 CUDA 函数。其对应的 host 函数为每个 token 分配一个 CUDA block，每个 CUDA block 的线程数被限制在最多 512 个。主要的 kernel 函数如下。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // scalar_t: 输入 key 和 value 的数据类型（如 float、half） // cache_t: Cache)key_cache 和 value_cache 的数据类型（如 half、uint8_t） // kv_dt: KV Cache) FP8 数据类型（如 kAuto 或具体 FP8 格式） template \u0026lt;typename scalar_t, typename cache_t, Fp8KVCacheDataType kv_dt\u0026gt; __global__ void reshape_and_cache_kernel( const scalar_t* __restrict__ key, // [num_tokens, num_heads, head_size] const scalar_t* __restrict__ value, // [num_tokens, num_heads, head_size] cache_t* __restrict__ key_cache, // [num_blocks, num_heads, head_size/x, block_size, x] cache_t* __restrict__ value_cache, // [num_blocks, num_heads, head_size, block_size] const int64_t* __restrict__ slot_mapping, // [num_tokens]，指定每个 token 的Cache)置 const int key_stride, const int value_stride, // key 和 value 在 token 维的步幅 const int num_heads, const int head_size, // 注意力head 数和每个head 的维度 const int block_size, const int x, // Cache)大小和 key_cache 中 head_size 的拆分因子 const float* k_scale, const float* v_scale) // key 和 value 的缩放因子，用于数据类型转换 const int64_t token_idx = blockIdx.x; // host 函数定义 block 个数与 token 个数相同 const int64_t slot_idx = slot_mapping[token_idx]; { // Cache Block const int64_t block_idx = slot_idx / block_size; // 块索引 const int64_t block_offset = slot_idx % block_size; // 块内偏移 const int n = num_heads * head_size; // 每个 token 的维度数目 // CUDA Block 级别并行，每个线程处理token 的一个维度 for (int i = threadIdx.x; i \u0026lt; n; i += blockDim.x) { // 计算输入 key 和 value 的源索引 const int64_t src_key_idx = token_idx * key_stride + i; const int64_t src_value_idx = token_idx * value_stride + i; // 计算当前处理的head 索引和head 内偏移 const int head_idx = i / head_size; // 第几个head const int head_offset = i % head_size; // head 内的第几个元素 // 将 head_offset 拆分为 x_idx 和 x_offset（仅用于 key_cache） const int x_idx = head_offset / x; // head_size/x 维的索引 const int x_offset = head_offset % x; // x 维的偏移 // 计算 key_cache 的目标索引，按维度逐步偏移 const int64_t tgt_key_idx = block_idx * num_heads * (head_size / x) * block_size * x + // 块偏移 head_idx * (head_size / x) * block_size * x + // head 偏移 x_idx * block_size * x + // head_size/x 偏移 block_offset * x + x_offset; // 块内和 x 偏移 // 计算 value_cache 的目标索引，按维度逐步偏移 const int64_t tgt_value_idx = block_idx * num_heads * head_size * block_size + // 块偏移 head_idx * head_size * block_size + // head 偏移 head_offset * block_size + // head_size 偏移 block_offset; // 块内偏移 // 从输入张量读取当前元素 scalar_t tgt_key = key[src_key_idx]; scalar_t tgt_value = value[src_value_idx]; // 根据 kv_dt 类型决定存储方式 if constexpr (kv_dt == Fp8KVCacheDataType::kAuto) { // 如果是 kAuto，直接存储，不进行类型转换 key_cache[tgt_key_idx] = tgt_key; value_cache[tgt_value_idx] = tgt_value; } else { // 否则，使用 scaled_convert 进行类型转换（如 FP8 量化） key_cache[tgt_key_idx] = fp8::scaled_convert\u0026lt;cache_t, scalar_t, kv_dt\u0026gt;(tgt_key, *k_scale); value_cache[tgt_value_idx] = fp8::scaled_convert\u0026lt;cache_t, scalar_t, kv_dt\u0026gt;(tgt_value, *v_scale); } } } _run_memory_efficient_xformers_forward 也同样简化成 DECODER 的逻辑的情况\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def _run_memory_efficient_xformers_forward( self, query: torch.Tensor, # [num_prefill_tokens, num_heads, head_size] key: torch.Tensor, # [num_prefill_tokens, num_kv_heads, head_size] value: torch.Tensor, # [num_prefill_tokens, num_kv_heads, head_size] attn_metadata: \u0026#34;XFormersMetadata\u0026#34;, ) -\u0026gt; torch.Tensor: original_query = query # 保存原始 query，用于最后 reshape 输出 # 处理 GQA/MQA if self.num_kv_heads != self.num_heads: # reshape Q to [num_prefill_tokens, num_kv_heads, num_queries_per_kv, head_size] query = query.view(query.shape[0], self.num_kv_heads, self.num_queries_per_kv, query.shape[-1]) # expand K to [num_prefill_tokens, num_kv_heads, num_queries_per_kv, head_size] key = key[:, :, None, :].expand(key.shape[0], self.num_kv_heads, self.num_queries_per_kv, key.shape[-1]) # expand V to [num_prefill_tokens, num_kv_heads, num_queries_per_kv, head_size] value = value[:, :, None, :].expand(value.shape[0], self.num_kv_heads, self.num_queries_per_kv, value.shape[-1]) # 获取或设置 attention bias attn_bias = _get_attn_bias(attn_metadata, AttentionType.DECODER) if attn_bias is None: assert attn_metadata.seq_lens is not None # 确保 seq 长度信息存在 if self.alibi_slopes is None: # 创建 causal mask attn_bias = BlockDiagonalCausalMask.from_seqlens( attn_metadata.seq_lens, device=query.device) if self.sliding_window is not None: # 如果有滑动窗口，应用局部注意力 attn_bias = attn_bias.make_local_attention(self.sliding_window) attn_bias = [attn_bias] else: # 使用 ALiBi 偏置（线性偏置注意力） attn_bias = _make_alibi_bias(self.alibi_slopes, self.num_kv_heads, query.dtype, attn_metadata.seq_lens) _set_attn_bias(attn_metadata, attn_bias, AttentionType.DECODER) # 执行 xFormers 高效注意力计算 if self.alibi_slopes is None: # 为 QKV 添加 batch query = query.unsqueeze(0) key = key.unsqueeze(0) value = value.unsqueeze(0) out = xops.memory_efficient_attention_forward( query, key, value, attn_bias=attn_bias[0], p=0.0, scale=self.scale) else: # ALiBi 模式直接使用 attn_bias assert attn_metadata.seq_lens is not None output = torch.empty_like(original_query) start = 0 # xformers 不支持在自定义 bias 的情况下每个 seq 的长度不同 for i, seq_len in enumerate(attn_metadata.seq_lens): end = start + seq_len out = xops.memory_efficient_attention_forward( query[None, start:end], key[None, start:end], value[None, start:end], attn_bias=attn_bias[i], p=0.0, scale=self.scale) output[start:end].copy_(out.view_as(original_query[start:end])) start += seq_len # 将输出 reshape 为原始 query return out.view_as(original_query) forward_prefix 不考虑 ALiBi 的情况调用的是 triton 编写的 _fwd_kernel() 每个线程块独立处理一个 Q 的一部分，对 KV Cache 和 当前 KV 分别采取 flash-attention 的计算策略。\nimport triton import triton.language as tl @triton.jit def _fwd_kernel( # --- 输入张量 --- Q, # Query 张量: [total_seq_len, num_heads, head_dim] # total_seq_len 是所有 batch seq 长度的总和，当前块为 [BLOCK_M, BLOCK_DMODEL_PADDED] K, # 键张量（当前输入）: [total_seq_len, num_kv_heads, head_dim] V, # 值张量（当前输入）: [total_seq_len, num_kv_heads, head_dim] K_cache, # 键Cache) [num_blocks, num_kv_heads, head_dim, block_size, x] # 用于存储上下文部分的 K V_cache, # 值Cache) [num_blocks, num_kv_heads, head_dim, block_size] # 用于存储上下文部分的 V B_Loc, # 块索引表: [batch_size, max_seq_len // block_size] # 记录每个 batch 中每个块的块编号 sm_scale, # softmax 缩放因子，通常为 1/sqrt(head_dim) k_scale, # 用于 FP8 精度转换的缩放因子 v_scale, # 用于 FP8 精度转换的缩放因子 B_Start_Loc, # batch 起始位置: [batch_size + 1] # 每个 batch 的全局 seq 起始索引，最后一个元素是总长度 B_Seqlen, # batch seq 长度: [batch_size] # 每个 batch 的总 seq 长度（上下文 + Query ） block_size, # 每个Cache)的大小 x, # K_cache 的额外维度分片因子（通常为 1 或小整数） Out, # 输出张量: [total_seq_len, num_heads, head_dim] # 存储注意力计算结果 # --- 步幅参数 --- stride_b_loc_b, # B_Loc 的 batch 步幅 stride_b_loc_s, # B_Loc 的 seq 块步幅 stride_qbs, # Q 的 batch / seq 步幅，通常为 num_heads * head_dim stride_qh, # Q 的head 步幅，通常为 head_dim stride_qd, # Q 的head_size步幅，通常为 1 stride_kbs, # K 的 batch / seq 步幅 stride_kh, # K 的head 步幅 stride_kd, # K 的head_size步幅 stride_vbs, # V 的 batch / seq 步幅 stride_vh, # V 的head 步幅 stride_vd, # V 的head_size步幅 stride_obs, # Out 的 batch / seq 步幅 stride_oh, # Out 的head 步幅 stride_od, # Out 的head_size步幅 stride_k_cache_bs, # K_cache 的块步幅 stride_k_cache_h, # K_cache 的head 步幅 stride_k_cache_d, # K_cache 的head_size步幅 stride_k_cache_bl, # K_cache 的块内偏移步幅 stride_k_cache_x, # K_cache 的额外维度步幅 stride_v_cache_bs, # V_cache 的块步幅 stride_v_cache_h, # V_cache 的head 步幅 stride_v_cache_d, # V_cache 的head_size步幅 stride_v_cache_bl, # V_cache 的块内偏移步幅 # --- 超参数 --- num_queries_per_kv: int, # 每个 KV head 对应的 Query head 数量 IN_PRECISION: tl.constexpr, # 输入精度（例如 tl.float32） BLOCK_M: tl.constexpr, # Query 块大小 BLOCK_DMODEL: tl.constexpr, # head 维度大小 BLOCK_DMODEL_PADDED: tl.constexpr, # head 维度填充到 2 的幂次 BLOCK_N: tl.constexpr, # KV 块大小 SLIDING_WINDOW: tl.constexpr, # 滑动窗口大小，0 表示无窗口 SKIP_DECODE: tl.constexpr, # 是否跳过解码（仅处理上下文） ): # --- 网格定义 --- # grid = (batch_size, num_heads, max_seq_len // BLOCK_M) cur_batch = tl.program_id(0) # 当前 batch 索引 cur_head = tl.program_id(1) # 当前head 索引 start_m = tl.program_id(2) # 当前 Query 块索引 # --- 计算 KV head 索引 --- cur_kv_head = cur_head // num_queries_per_kv # 当前 KV head 索引 # --- 加载 batch 信息 --- cur_batch_seq_len = tl.load(B_Seqlen + cur_batch) # 当前 batch 总 seq 长度 cur_batch_in_all_start_index = tl.load(B_Start_Loc + cur_batch) # 当前 batch 全局起始索引 cur_batch_in_all_stop_index = tl.load(B_Start_Loc + cur_batch + 1) # 下一 batch 起始索引 cur_batch_query_len = (cur_batch_in_all_stop_index - cur_batch_in_all_start_index) # 当前 batch Query 长度 cur_batch_ctx_len = cur_batch_seq_len - cur_batch_query_len # 上下文长度 # --- 计算 Query 块起始位置 --- block_start_loc = BLOCK_M * start_m # 当前 Query 块的起始位置 # --- 初始化索引范围 --- offs_n = tl.arange(0, BLOCK_N) # KV 块内偏移: [0, BLOCK_N) offs_d = tl.arange(0, BLOCK_DMODEL_PADDED) # head_size 偏移: [0, BLOCK_DMODEL_PADDED) offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M) # Query 块内偏移: [start_m * BLOCK_M, (start_m + 1) * BLOCK_M) # --- 计算 Q 的偏移量 --- # off_q: [BLOCK_M, BLOCK_DMODEL_PADDED] # 定位当前 Query 块在 Q 张量中的内存地址 off_q = ( (cur_batch_in_all_start_index + offs_m[:, None]) * stride_qbs + # batch 和 seq 偏移 cur_head * stride_qh + # head 偏移 offs_d[None, :] * stride_qd # head_size偏移 ) # 示例: 假设 Q [100, 4, 64], stride_qbs=256, stride_qh=64, stride_qd=1 # cur_batch_in_all_start_index=20, cur_head=1, start_m=1, BLOCK_M=16 # offs_m=[16, 17, ..., 31], offs_d=[0, 1, ..., 63] # off_q[0, 0] = (20 + 16) * 256 + 1 * 64 + 0 * 1 = 9216 + 64 = 9280 # off_q[0, 1] = (20 + 16) * 256 + 1 * 64 + 1 * 1 = 9281 # --- 创建head_size维度掩码 --- dim_mask = tl.where(tl.arange(0, BLOCK_DMODEL_PADDED) \u0026lt; BLOCK_DMODEL, 1, 0).to(tl.int1) # [BLOCK_DMODEL_PADDED] # 屏蔽填充部分，例如 BLOCK_DMODEL=64, BLOCK_DMODEL_PADDED=128，则后 64 个值为 0 # --- 加载 Q 数据 --- q = tl.load(Q + off_q, mask=dim_mask[None, :] \u0026amp; (offs_m[:, None] \u0026lt; cur_batch_query_len), other=0.0) # [BLOCK_M, BLOCK_DMODEL_PADDED] # 加载当前 Query 块，掩码确保不加载超出 Query 长度和填充维度的数据 # --- 初始化online softmax 变量 --- m_i = tl.zeros([BLOCK_M], dtype=tl.float32) - float(\u0026#34;inf\u0026#34;) # 最大值 l_i = tl.zeros([BLOCK_M], dtype=tl.float32) # 归一化因子 acc = tl.zeros([BLOCK_M, BLOCK_DMODEL_PADDED], dtype=tl.float32) # 注意力累加 # --- 计算上下文注意力（Q 对 KV Cache) --- for start_n in range(0, cur_batch_ctx_len, BLOCK_N): start_n = tl.multiple_of(start_n, BLOCK_N) # 确保 start_n 是 BLOCK_N 的倍数 # --- 加载 Cache 索引 --- bn = tl.load(B_Loc + cur_batch * stride_b_loc_b + ((start_n + offs_n) // block_size) * stride_b_loc_s, mask=(start_n + offs_n) \u0026lt; cur_batch_ctx_len, other=0) # [BLOCK_N] # bn 是当前 KV Cache的块编号 # 示例: B_Loc=[0, 1, 2, ...], cur_batch=0, start_n=16, block_size=16, offs_n=[0, 1, 2, 3] # bn = B_Loc[0, 1]（若 stride_b_loc_b=8, stride_b_loc_s=1，则地址为 0*8 + 1*1 = 1） # --- 计算 K_cache 偏移量 --- # off_k: [BLOCK_DMODEL_PADDED, BLOCK_N] off_k = ( bn[None, :] * stride_k_cache_bs + # 块偏移 cur_kv_head * stride_k_cache_h + # head 偏移 (offs_d[:, None] // x) * stride_k_cache_d + # head_size偏移（分片） ((start_n + offs_n[None, :]) % block_size) * stride_k_cache_bl + # 块内偏移 (offs_d[:, None] % x) * stride_k_cache_x # 额外维度偏移 ) # 示例: bn=[1], cur_kv_head=1, stride_k_cache_bs=4096, stride_k_cache_h=1024, stride_k_cache_d=16 # offs_d=[0, 1, ..., 63], start_n=16, offs_n=[0, 1, 2, 3], block_size=16, x=1 # off_k[0, 0] = 1*4096 + 1*1024 + (0//1)*16 + (16+0)%16*256 + (0%1)*1 = 4096 + 1024 = 5120 # --- 加载 K_cache 数据 --- k_load = tl.load(K_cache + off_k, mask=dim_mask[:, None] \u0026amp; ((start_n + offs_n[None, :]) \u0026lt; cur_batch_ctx_len), other=0.0) # [BLOCK_DMODEL_PADDED, BLOCK_N] # 处理 FP8 精度 if k_load.dtype.is_fp8(): k = (k_load.to(tl.float32) * tl.load(k_scale)).to(q.dtype) else: k = k_load # --- 计算 QK 注意力分数 --- qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32) qk = tl.dot(q, k, acc=qk, input_precision=IN_PRECISION) # [BLOCK_M, BLOCK_N] qk = tl.where((start_n + offs_n[None, :]) \u0026lt; cur_batch_ctx_len, qk, float(\u0026#34;-inf\u0026#34;)) qk *= sm_scale if SLIDING_WINDOW \u0026gt; 0: qk = tl.where((cur_batch_ctx_len + offs_m[:, None]) - (start_n + offs_n[None, :]) \u0026lt; SLIDING_WINDOW, qk, -10000) # --- online softmax 更新 --- m_ij = tl.max(qk, 1) # [BLOCK_M] p = tl.exp(qk - m_ij[:, None]) # [BLOCK_M, BLOCK_N] l_ij = tl.sum(p, 1) # [BLOCK_M] m_i_new = tl.maximum(m_i, m_ij) alpha = tl.exp(m_i - m_i_new) beta = tl.exp(m_ij - m_i_new) l_i_new = alpha * l_i + beta * l_ij # --- 更新累加器 --- p_scale = beta / l_i_new p = p * p_scale[:, None] acc_scale = l_i / l_i_new * alpha acc = acc * acc_scale[:, None] # 加载 V_cache off_v = ( bn[:, None] * stride_v_cache_bs + cur_kv_head * stride_v_cache_h + offs_d[None, :] * stride_v_cache_d + (start_n + offs_n[:, None]) % block_size * stride_v_cache_bl ) v_load = tl.load(V_cache + off_v, mask=dim_mask[None, :] \u0026amp; ((start_n + offs_n[:, None]) \u0026lt; cur_batch_ctx_len), other=0.0) # [BLOCK_N, BLOCK_DMODEL_PADDED] if v_load.dtype.is_fp8(): v = (v_load.to(tl.float32) * tl.load(v_scale)).to(q.dtype) else: v = v_load p = p.to(v.dtype) acc = tl.dot(p, v, acc=acc, input_precision=IN_PRECISION) # 更新 m_i 和 l_i l_i = l_i_new m_i = m_i_new # --- 计算自注意力（Q 对当前 K 和 V） --- # 计算 K 和 V 的初始偏移 off_k = (offs_n[None, :] * stride_kbs + cur_kv_head * stride_kh + offs_d[:, None] * stride_kd) # [BLOCK_DMODEL_PADDED, BLOCK_N] off_v = (offs_n[:, None] * stride_vbs + cur_kv_head * stride_vh + offs_d[None, :] * stride_vd) # [BLOCK_N, BLOCK_DMODEL_PADDED] k_ptrs = K + off_k # 初始指针 v_ptrs = V + off_v # 检查当前 Query 块是否有效 block_mask = tl.where(block_start_loc \u0026lt; cur_batch_query_len, 1, 0) # 遍历当前输入的 K 和 V for start_n in range(0, block_mask * (start_m + 1) * BLOCK_M, BLOCK_N): start_n = tl.multiple_of(start_n, BLOCK_N) # --- 加载 K 数据 --- # 全局偏移: (cur_batch_in_all_start_index + start_n) * stride_kbs 定位 batch 和 seq 块 # 示例: K [100, 4, 64], stride_kbs=256, cur_batch_in_all_start_index=20, start_n=8 # 基地址偏移 = (20 + 8) * 256 = 7168 # k_ptrs[0, 0] = K + 0 + 1*64 + 0*1 + 7168 = K + 7232 k = tl.load(k_ptrs + (cur_batch_in_all_start_index + start_n) * stride_kbs, mask=dim_mask[:, None] \u0026amp; ((start_n + offs_n[None, :]) \u0026lt; cur_batch_query_len), other=0.0) # [BLOCK_DMODEL_PADDED, BLOCK_N] # --- 计算 QK 注意力分数 --- qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32) qk = tl.dot(q, k, acc=qk, input_precision=IN_PRECISION) qk *= sm_scale # 应用因果掩码 qk = tl.where(offs_m[:, None] \u0026gt;= (start_n + offs_n[None, :]), qk, float(\u0026#34;-inf\u0026#34;)) if SLIDING_WINDOW \u0026gt; 0: qk = tl.where(offs_m[:, None] - (start_n + offs_n[None, :]) \u0026lt; SLIDING_WINDOW, qk, -10000) # --- online softmax 更新 --- m_ij = tl.max(qk, 1) p = tl.exp(qk - m_ij[:, None]) l_ij = tl.sum(p, 1) m_i_new = tl.maximum(m_i, m_ij) alpha = tl.exp(m_i - m_i_new) beta = tl.exp(m_ij - m_i_new) l_i_new = alpha * l_i + beta * l_ij # --- 更新累加器 --- p_scale = beta / l_i_new p = p * p_scale[:, None] acc_scale = l_i / l_i_new * alpha acc = acc * acc_scale[:, None] v = tl.load(v_ptrs + (cur_batch_in_all_start_index + start_n) * stride_vbs, mask=dim_mask[None, :] \u0026amp; ((start_n + offs_n[:, None]) \u0026lt; cur_batch_query_len), other=0.0) # [BLOCK_N, BLOCK_DMODEL_PADDED] p = p.to(v.dtype) acc = tl.dot(p, v, acc=acc, input_precision=IN_PRECISION) # 更新 m_i 和 l_i l_i = l_i_new m_i = m_i_new # --- 存储输出 --- off_o = ( (cur_batch_in_all_start_index + offs_m[:, None]) * stride_obs + cur_head * stride_oh + offs_d[None, :] * stride_od ) out_ptrs = Out + off_o tl.store(out_ptrs, acc, mask=dim_mask[None, :] \u0026amp; (offs_m[:, None] \u0026lt; cur_batch_query_len)) forward_decode 调用的是 paged_atention_kernel gridDim = (num_heads, num_seqs, 1). decode 的时候每个 seq 的 Query 的 toekn 数目都是 1，\ngridDim = (num_heads, num_seqs, 1): 每个线程块负责一个 seq 的 一个 head，函数定义如下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 template \u0026lt;typename scalar_t, typename cache_t, int HEAD_SIZE, int BLOCK_SIZE, // default 16 int NUM_THREADS /*=128*/, vllm::Fp8KVCacheDataType KV_DTYPE, bool IS_BLOCK_SPARSE, int PARTITION_SIZE = 0\u0026gt; // Zero means no partitioning. __device__ void paged_attention_kernel( float* __restrict__ exp_sums, // [num_seqs, num_heads, max_num_partitions] float* __restrict__ max_logits, // [num_seqs, num_heads, // max_num_partitions] scalar_t* __restrict__ out, // [num_seqs, num_heads, max_num_partitions, head_size] const scalar_t* __restrict__ q, // [num_seqs, num_heads, head_size] const cache_t* __restrict__ k_cache, // [num_blocks, num_kv_heads, head_size/x, block_size, x] const cache_t* __restrict__ v_cache, // [num_blocks, num_kv_heads, head_size, block_size] const int num_kv_heads, // [num_heads] const float scale, const int* __restrict__ block_tables, // [num_seqs, max_num_blocks_per_seq] const int* __restrict__ seq_lens, // [num_seqs] const int max_num_blocks_per_seq, const float* __restrict__ alibi_slopes, // [num_heads] // 矩阵每一维度的 stride，便于移动指针 const int q_stride, const int kv_block_stride, const int kv_head_stride, const float* k_scale, const float* v_scale, const int tp_rank, const int blocksparse_local_blocks, const int blocksparse_vert_stride, const int blocksparse_block_size, const int blocksparse_head_sliding_step) 首先先计算一下当前线程对应的各种参数，这里根据模板函数定义不使用 PARTITIONING.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // grid = (num_heads, num_seqs, 1) 一个 thread block 处理一个 seq 的 一个 head const int seq_idx = blockIdx.y; const int partition_idx = blockIdx.z; const int max_num_partitions = gridDim.z; // 1 const int seq_len = seq_lens[seq_idx]; // 该 seq token 数 // 计算块范围和 token 范围 const int num_seq_blocks = DIVIDE_ROUND_UP(seq_len, BLOCK_SIZE); // seq 要分几块读取 const int num_blocks_per_partition = num_seq_blocks; // 分了几块 const int start_block_idx = 0; // 起始块索引 const int end_block_idx = num_seq_blocks; // 结束块索引 const int num_blocks = end_block_idx - start_block_idx; // 当前分区块数 const int start_token_idx = start_block_idx * BLOCK_SIZE; // 起始 token 索引 const int end_token_idx = MIN(start_token_idx + num_blocks * BLOCK_SIZE, seq_len); // 结束 token 索引 const int num_tokens = end_token_idx - start_token_idx; // 当前分区 token 数 // 线程组织参数 constexpr int THREAD_GROUP_SIZE = MAX(WARP_SIZE / BLOCK_SIZE, 1); // 几个 thread 处理一个 token 32/16=2 constexpr int NUM_THREAD_GROUPS = NUM_THREADS / THREAD_GROUP_SIZE; // 一个 thread block 被分成几组 128/2=64 constexpr int NUM_TOKENS_PER_THREAD_GROUP = DIVIDE_ROUND_UP(BLOCK_SIZE, WARP_SIZE); // 每线程处理的 token 数 16/32=1 constexpr int NUM_WARPS = NUM_THREADS / WARP_SIZE; // warp 个数 128/32=4 const int thread_idx = threadIdx.x; // 线程索引 const int warp_idx = thread_idx / WARP_SIZE; // 线程位于第几个 warp const int lane = thread_idx % WARP_SIZE; // 线程是该 warp 中的第几个 const int head_idx = blockIdx.x; const int num_heads = gridDim.x; // 考虑 GQA MQA const int num_queries_per_kv = num_heads / num_kv_heads; const int kv_head_idx = head_idx / num_queries_per_kv; const float alibi_slope = alibi_slopes == nullptr ? 0.f : alibi_slopes[head_idx]; 定义 thread group ，保证其一次访问的数据为 16 Bytes，需要计算其中每个 thread 处理几个元素。\n1 2 3 4 5 6 7 8 9 10 11 // VEC_SIZE 即为一个 thread group 中每个线程需要处理元素个数， constexpr int VEC_SIZE = MAX(16 / (THREAD_GROUP_SIZE * sizeof(scalar_t)), 1); // 16/2/2=4 using K_vec = typename Vec\u0026lt;scalar_t, VEC_SIZE\u0026gt;::Type; using Q_vec = typename Vec\u0026lt;scalar_t, VEC_SIZE\u0026gt;::Type; using Quant_vec = typename Vec\u0026lt;cache_t, VEC_SIZE\u0026gt;::Type; constexpr int NUM_ELEMS_PER_THREAD = HEAD_SIZE / THREAD_GROUP_SIZE; // 每个 thread 处理几个元素 64/2=32 constexpr int NUM_VECS_PER_THREAD = NUM_ELEMS_PER_THREAD / VEC_SIZE; // 这几个元素相当于几个向量 32/4=8 // thread_idx = thread_group_idx * THREAD_GROUP_SIZE + thread_group_offset const int thread_group_idx = thread_idx / THREAD_GROUP_SIZE; // 线程位于第几个 thread group const int thread_group_offset = thread_idx % THREAD_GROUP_SIZE; // 线程是该 thread group 中第几个线程 下面将 Q 加载进共享内存。 loadQ\n1 2 3 4 5 6 7 8 9 10 11 const scalar_t* q_ptr = q + seq_idx * q_stride + head_idx * HEAD_SIZE; __shared__ Q_vec q_vecs[THREAD_GROUP_SIZE][NUM_VECS_PER_THREAD]; // HEAD_SIZE * VEC_SIZE * sizeof(scalar_t) 大小 #pragma unroll for (int i = thread_group_idx; i \u0026lt; NUM_VECS_PER_THREAD; i += NUM_THREAD_GROUPS) { // NUM_ELEMS_PER_THREAD / VEC_SIZE // 使得每个 thread group 的线程访问相邻的 vec const int vec_idx = thread_group_offset + i * THREAD_GROUP_SIZE; q_vecs[thread_group_offset][i] = *reinterpret_cast\u0026lt;const Q_vec*\u0026gt;(q_ptr + vec_idx * VEC_SIZE); } __syncthreads(); 假设块不稀疏并且把不采用量化，加载 K 并计算 Q@K.T. 核心思想是一个 thread group 访问 16 Bytes. 一个 thread 访问一个 vec，一个向量包含的元素个数 VEC_SIZE = 16 / sizeof (scalar_t) / THREAD_GROUP_SIZE\n1st for 循环确定的是每次迭代中每个 warp 处理的是哪一个 block，一共要循环 num_seq_blocks / NUM_WARPS 次 2nd for 循环确定的是该 warp 中的每个 thread group 访问的是该 block 的第几个 token. 即每个线程组处理一个 token. 3rd for 循环确定的是该 thread group 中的每个 thread 访问的是第几个 vec. 该循环使得该 thread group 里面的线程读取一个完整的 headsize. 一次迭代读取的大小为 16 Bytes. 首先将 block_table 指针移动到存储该 kv cache 的首个 blockID 处，取出实际的物理块 ID，用在第三个 for 循环中将指针移动到该 K cache block 起始处. 由于 k_cache 的 shape 是 [num_blocks, num_kv_heads, head_size/x, block_size, x]，在第三个 for 循环中 k_ptr 被移动到了该 thread_group 要读取的 block 的 token 的 head 处。vec_idx * VEC_SIZE 即为 thread 要读取的元素开始位置，/x 表示对应的是第几个 16Bytes 划分, offset1 移动的是 dim3，offset2 移动的 则是 dim4.\n3rd loop 结束后已经读取了一个 K cache 的完整 head_size 到寄存器中，因此 qk 为一个 token 的一个 head 的 Score Matrix. 根据 token_idx 由每个 thread group 里的 第一个线程负责将累加和到 logits 中并更新 qk_max。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // Memory planning. extern __shared__ char shared_mem[]; // NOTE(woosuk): We use FP32 for the softmax logits for better accuracy. float* logits = reinterpret_cast\u0026lt;float*\u0026gt;(shared_mem); // Workspace for reduction. __shared__ float red_smem[2 * NUM_WARPS]; // 前一半用于存储 qk_max 后一半用于存储 exp_sum // x == THREAD_GROUP_SIZE * VEC_SIZE // 每次 thread group 一次取的元素数量 保证为 16 bytes constexpr int x = 16 / sizeof(cache_t); float qk_max = -FLT_MAX; // 指针移动到当前 seq 对应的首个 blockID const int* block_table = block_tables + seq_idx * max_num_blocks_per_seq; for (int block_idx = start_block_idx + warp_idx; block_idx \u0026lt; end_block_idx; block_idx += NUM_WARPS) { // 每个 warp 处理一个 block const int64_t physical_block_number = static_cast\u0026lt;int64_t\u0026gt;(block_table[block_idx]); // 该 warp 当前处理的 block 对应的 id // Load a key to registers. for (int i = 0; i \u0026lt; NUM_TOKENS_PER_THREAD_GROUP; i++) { // BLOCK_SIZE(16) / WARP_SIZE(32) = 1 const int physical_block_offset = (thread_group_idx + i * WARP_SIZE) % BLOCK_SIZE; // thread group 处理的是该 block 的第几个 token const int token_idx = block_idx * BLOCK_SIZE + physical_block_offset; // 该 token 是该 seq 的第几个 K_vec k_vecs[NUM_VECS_PER_THREAD]; #pragma unroll for (int j = 0; j \u0026lt; NUM_VECS_PER_THREAD; j++) { // NUM_ELEMS_PER_THREAD(32) / VEC_SIZE(4) = 8 const cache_t* k_ptr = k_cache + physical_block_number * kv_block_stride + // 移动到该 block 起始处 kv_head_idx * kv_head_stride + // 移动到对应的 head 处 physical_block_offset * x; // 移动到对应的 token 处 const int vec_idx = thread_group_offset + j * THREAD_GROUP_SIZE; // 该 thread 要读取 head_size 划分成的第几个 vec const int offset1 = (vec_idx * VEC_SIZE) / x; // 第几个 16Bytes 划分 const int offset2 = (vec_idx * VEC_SIZE) % x; // 划分的第几个元素 if constexpr (KV_DTYPE == Fp8KVCacheDataType::kAuto) { k_vecs[j] = *reinterpret_cast\u0026lt;const K_vec*\u0026gt;(k_ptr + offset1 * BLOCK_SIZE * x + offset2); } } // Compute dot product. // This includes a reduction across the threads in the same thread group. float qk = scale * Qk_dot\u0026lt;scalar_t, THREAD_GROUP_SIZE\u0026gt;::dot(q_vecs[thread_group_offset], k_vecs); // Add the ALiBi bias if slopes are given. qk += (alibi_slope != 0) ? alibi_slope * (token_idx - seq_len + 1) : 0; if (thread_group_offset == 0) { // 每个线程组的第一个线程进行更新 max // Store the partial reductions to shared memory. // NOTE(woosuk): It is required to zero out the masked logits. const bool mask = token_idx \u0026gt;= seq_len; logits[token_idx - start_token_idx] = mask ? 0.f : qk; // Update the max value. qk_max = mask ? qk_max : fmaxf(qk_max, qk); } } } load k \u0026amp; QK Mul\n上面这一段结束后下面每个 warp 内 thread group 中的第一个线程已经记录了该 group 的 qk_max. 下一步则是在 warp 内进行 qk_max 归约，存储在共享内存 red_smem 中。 由于一个 warp 处理的是一个 block，相当于现在 red_smem 每个元素存储了对应 block 内的 qk_max.\n1 2 3 4 5 6 7 8 #pragma unroll for (int mask = WARP_SIZE / 2; mask \u0026gt;= THREAD_GROUP_SIZE; mask /= 2) { qk_max = fmaxf(qk_max, VLLM_SHFL_XOR_SYNC(qk_max, mask)); } if (lane == 0) { red_smem[warp_idx] = qk_max; } __syncthreads(); 下一步则是在 thread block 内对所有 warp 进行规约，得到该 seq 最后的 qk_max. 然后广播到所有线程中。之后每个线程计算 exp 存入 logits，每个 warp 内的 exp 求和结果存储在 red_smem 的后一半中。最后则是计算 softmax 存到 logits.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 qk_max = lane \u0026lt; NUM_WARPS ? red_smem[lane] : -FLT_MAX; #pragma unroll for (int mask = NUM_WARPS / 2; mask \u0026gt;= 1; mask /= 2) { qk_max = fmaxf(qk_max, VLLM_SHFL_XOR_SYNC(qk_max, mask)); } // Broadcast the max qk value to all threads. qk_max = VLLM_SHFL_SYNC(qk_max, 0); // Get the sum of the exp values. float exp_sum = 0.f; for (int i = thread_idx; i \u0026lt; num_tokens; i += NUM_THREADS) { float val = __expf(logits[i] - qk_max); logits[i] = val; exp_sum += val; } exp_sum = block_sum\u0026lt;NUM_WARPS\u0026gt;(\u0026amp;red_smem[NUM_WARPS], exp_sum); // Compute softmax. const float inv_sum = __fdividef(1.f, exp_sum + 1e-6f); for (int i = thread_idx; i \u0026lt; num_tokens; i += NUM_THREADS) { logits[i] *= inv_sum; } __syncthreads(); 加载 v 的逻辑与 k 相同，但没有使用 thread group 概念，而是让一个 thread 一次加载 16 Bytes.\n","permalink":"http://localhost:1313/blogs/vllm/","summary":"vllm structure","title":"VLLM Sourse Code Reading"},{"content":"Github Card this is a github card\rBig Quote Basically, I’m not interested in doing research and I never have been… I’m interested in understanding, which is quite a different thing. And often to understand something you have to work it out yourself because no one else has done it. — David Blackwell\nMargin Note 这是一段正常的文本，我们正在讨论一个非常重要的概念。这就是bilibili对那个重要概念的解释和补充说明。你甚至可以在这里使用 Markdown 语法！\r这个概念源于古希腊，对后世影响深远。\n继续你的文章\u0026hellip; 另一处需要注解的地方。这是第二个旁注，它会自动对齐，不会和第一个重叠。\rVarious Notice 关于以下notice 请参考 hugo_notice\rWarning\nThis is a warning notice. Be warned!\nTip\nThis is a very good tip.\nInfo\nThis is a use info.\nNote\nThis is a note.\n","permalink":"http://localhost:1313/blogs/functiontest/","summary":"function test","title":"Functional Test of Hugo"},{"content":"CMake 入门教程：从项目结构到链接库\n核心理念：源码外构建 (Out-of-Source Builds) 在开始之前，最重要的一点是理解 CMake 的核心哲学：源码外构建。这意味着所有由构建过程产生的文件（例如 Makefiles、Visual Studio 项目文件、目标文件 .o、可执行文件 .exe、库文件 .a 或 .so）都应该与你的源代码完全分离开。这样做最大的好处是能保持你的源码目录永远干净整洁。我们将创建一个 build 目录来存放所有这些生成的文件。\n推荐的项目目录结构 📂 一个良好组织的 C++ 项目结构不仅清晰，也让 CMake 的配置工作事半功倍。这是一个推荐的、可扩展的目录结构：my_project/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 │ ├── build/ # 构建目录 (初始为空，所有生成文件都在此) │ ├── include/ # 存放项目全局头文件 │ └── my_app/ │ └── my_lib.h │ ├── src/ # 存放所有源文件 (.cpp) │ │ │ ├── main.cpp # 主程序入口 │ │ │ └── my_lib/ # 一个独立的库模块 │ ├── CMakeLists.txt # 这个库自己的 CMake 配置文件 │ └── my_lib.cpp │ └── CMakeLists.txt # 整个项目的顶层 CMake 配置文件 build/: 这个目录用于执行所有构建命令，源码不会被污染。include/: 存放可以被项目内其他部分（或被其他项目）引用的头文件。按模块组织可以避免头文件名冲突。src/: 存放所有 .cpp 源文件。 src/my_lib/: 将项目按功能模块化是一种好习惯。每个模块（比如一个库）可以有自己的 CMakeLists.txt 文件，负责管理自身的编译。 CMakeLists.txt (顶层): 这是整个项目的入口，负责设置全局配置、找到并构建所有子模块，最后生成主程序。 编写各层级的 CMakeLists.txt 📝我们将采用“自下而上”的方式来编写配置文件，先从底层的库开始，再到顶层的项目。 第 1 步: 库的 CMakeLists.txt (src/my_lib/CMakeLists.txt )这个文件只负责一件事：将 my_lib.cpp 和相关的头文件编译成一个库。# 文件位置: src/my_lib/CMakeLists.txt\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # 使用 add_library 命令创建一个库。 # 语法: add_library(\u0026lt;库名称\u0026gt; [STATIC | SHARED] \u0026lt;源文件...\u0026gt;) # # \u0026lt;库名称\u0026gt;: 我们称之为 my_lib，这是其他部分链接此库时使用的名字。 # STATIC: 生成静态链接库 (.a, .lib)。 # SHARED: 生成动态/共享链接库 (.so, .dll)。 # 如果不指定，默认是 STATIC。 # \u0026lt;源文件\u0026gt;: 用于编译这个库的源文件列表。 add_library(my_lib STATIC my_lib.cpp) # 为这个库目标指定它需要包含的头文件目录。 # 语法: target_include_directories(\u0026lt;目标\u0026gt; \u0026lt;PUBLIC|PRIVATE|INTERFACE\u0026gt; \u0026lt;路径...\u0026gt;) # # \u0026lt;目标\u0026gt;: 就是我们上面用 add_library 创建的 my_lib。 # PUBLIC: 表示此头文件路径不仅 my_lib 自己需要，任何链接了 my_lib 的目标也需要。 # 这是最关键的设置，它实现了依赖的自动传递。 # PRIVATE: 表示此头文件路径只有 my_lib 内部编译时需要，不会传递给链接它的目标。 # INTERFACE:表示此头文件路径只有链接它的目标需要，my_lib 自己编译时不需要。 target_include_directories(my_lib PUBLIC # ${PROJECT_SOURCE_DIR} 是一个非常有用的内置变量，指向顶层 CMakeLists.txt 所在的目录。 # 我们将项目的全局 include 目录暴露出去。 ${PROJECT_SOURCE_DIR}/include ) add_library() 定义了一个编译目标——一个库。 target_include_directories() 为这个目标指定了头文件搜索路径。使用 PUBLIC 关键字至关重要使得任何链接到 my_lib 的程序都能自动找到 my_lib.h，无需在链接方再次手动添加头文件路径。 第 2 步: 顶层的 CMakeLists.txt 这个文件是整个项目的总指挥，负责设置全局配置、调用子模块，并生成最终的可执行文件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # 文件位置: my_project/CMakeLists.txt # 1. 指定 CMake 的最低版本要求。这是每个顶层文件都应该有的第一行。 cmake_minimum_required(VERSION 3.10) # 2. 定义项目信息。 # 语法: project(\u0026lt;项目名称\u0026gt; VERSION \u0026lt;版本号\u0026gt; LANGUAGES \u0026lt;语言\u0026gt;) # 这会创建一些有用的变量，比如 PROJECT_NAME, PROJECT_SOURCE_DIR。 project(MyApp VERSION 1.0 LANGUAGES CXX) # 3. 设置 C++ 标准 (这是现代 CMake 推荐的方式)。 set(CMAKE_CXX_STANDARD 17) set(CMAKE_CXX_STANDARD_REQUIRED ON) set(CMAKE_CXX_EXTENSIONS OFF) # 4. 打印一条消息，方便调试时查看变量值 (可选)。 message(STATUS \u0026#34;Project source directory is: ${PROJECT_SOURCE_DIR}\u0026#34;) # 5. 添加子目录。 # 这个命令会告诉 CMake 去处理 src/my_lib 目录下的 CMakeLists.txt 文件。 # 当执行到这里时，上面定义的 my_lib 库目标就会被创建出来。 add_subdirectory(src/my_lib) # 6. 添加可执行文件。 # 语法: add_executable(\u0026lt;可执行文件名\u0026gt; \u0026lt;源文件...\u0026gt;) # 我们将主程序命名为 app，它由 src/main.cpp 编译而来。 add_executable(app src/main.cpp) # 7. 链接库！这是将所有部分组合在一起的关键步骤。 # 语法: target_link_libraries(\u0026lt;目标\u0026gt; \u0026lt;PUBLIC|PRIVATE|INTERFACE\u0026gt; \u0026lt;要链接的库...\u0026gt;) # # \u0026lt;目标\u0026gt;: 我们要链接的目标，即 app。 # PRIVATE: 表示 app 的编译需要 my_lib，但这个依赖关系不会继续传递。 # 对于可执行文件，通常使用 PRIVATE。 # \u0026lt;要链接的库\u0026gt;: 我们在子目录中定义的库目标 my_lib。 target_link_libraries(app PRIVATE my_lib) add_subdirectory() 使得顶层文件保持简洁，只负责“指挥”，具体实现则交给各个子模块。 target_link_libraries() 负责将不同的编译目标（库和可执行文件）链接在一起，形成依赖关系。 如何构建项目 🚀 现在已经写好了所有的 CMakeLists.txt 文件，可以开始构建了。整个过程都在终端中完成。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 1. 确保你位于项目的根目录 (my_project) cd path/to/my_project # 2. 创建并进入我们规划好的 build 目录 mkdir build cd build # 3. 运行 CMake 来生成构建系统。 # \u0026#39;..\u0026#39; 指向上一级目录，也就是 my_project/ 根目录，CMake 会在那里寻找顶层的 CMakeLists.txt。 # -DCMAKE_BUILD_TYPE=Debug 指定了构建类型为 Debug，会包含调试信息。 cmake -DCMAKE_BUILD_TYPE=Debug .. # CMake 会扫描你的系统，找到 C++ 编译器，然后根据 CMakeLists.txt 的内容 # 生成特定平台的构建文件（在 Linux/macOS 上是 Makefile，在 Windows 上是 Visual Studio sln 文件）。 # 4. 编译项目 # 这个命令会调用底层的构建工具（如 make 或 msbuild）来执行真正的编译和链接工作。 # \u0026#39;--build .\u0026#39; 是一个平台无关的命令，告诉 CMake 在当前目录执行构建。 cmake --build . # 或者在 Linux/macOS 上，你可以直接运行: # make # 编译完成后，你会在 build 目录（或其子目录）下找到你的可执行文件 `app` 和库文件 `libmy_lib.a`。 ","permalink":"http://localhost:1313/blogs/simple_cmake/","summary":"A Simple Cmake Example","title":"A Simple Cmake Example"},{"content":"What Can git rebase Do rebase 的字面意思是“变基”——也就是改变一个分支的“基础”提交点。它的主要目标是：将一系列的提交以更整洁、线性的方式应用到另一个分支上，从而创造一个干净、没有多余合并记录的项目历史。\n假设你的项目历史是这样的：你在 main 分支上切出了一个 feature 分支，之后 main 分支和你自己的 feature 分支都有了新的 commits.\n1 2 3 A---B---C \u0026lt;-- feature / D---E---F---G \u0026lt;-- main 如果你在 feature 分支上运行 git rebase main，Git 会做一件非常神奇的事：\nGit 会暂时“收起” feature 分支上的所有提交 (A, B, C). 将 feature 分支的起点移动到 main 分支的最新提交 G 上。 把刚才收起的提交 (A, B, C) 依次重新应用到新的起点上，形成新的提交 A\u0026rsquo;, B\u0026rsquo;, C' 1 2 3 A\u0026#39;--B\u0026#39;--C\u0026#39; \u0026lt;-- feature / D---E---F---G \u0026lt;-- main A\u0026rsquo; 和 A 的内容虽然一样，但它们的 Commit ID 是不同的，因为它们的父提交变了。rebase 相当于重写了历史。\n现在，再切换回 main 分支，执行 git merge feature，由于 main 分支的所有历史现在是 feature 分支历史的子集，Git 只会进行一次 Fast-forward 合并，不会产生新的合并提交。最终结果如下\n1 D---E---F---G---A\u0026#39;--B\u0026#39;--C\u0026#39; \u0026lt;-- main, feature 最终的项目历史是一条完美的直线，非常清晰，就像所有开发都是按顺序发生的一样。rebase 重写了历史，抹去了分支开发的“并行”痕迹。\nCompared to merge 要理解 rebase，最好的方法就是和 merge 对比。如果在 main 分支上运行 git merge feature，结果会是这样\n1 2 3 A---B---C / \\ D---E---F---G---H \u0026lt;-- main (H 是一个合并提交) merge 做的事情是：\n找到两个分支的共同祖先 E. 将两个分支的修改整合起来，创建一个全新的 Merge Commit，也就是 H. 该提交有两个父提交点 C 和 G. merge 完全全保留了历史的真实性。它清楚地记录了“在某个时间点，我们把一个分支合并了进来”。但如果项目频繁合并，历史记录会充满大量的合并提交，形成一个复杂的“菱形”或“意大利面条”式的网状结构，难以阅读。\nHow to use rebase 假设你正在 feature-login 分支上开发，同时主分支 main 也有了新的更新。\n确保 main 分支处于最新的状态 1 2 git checkout main git pull origin main 切换到你正在开发的分支 git checkout feature-login 把 main 分支上的最新修改 rebase 到你当前的 feature-login 分支上 git rebase main 解决冲突 (如果有的话). 因为 rebase 是逐个应用提交，所以可能会在某个提交应用时发生冲突。此时，rebase 会暂停。 打开冲突文件，手动解决冲突（和 merge 冲突一样）。 解决后，使用 git add \u0026lt;filename\u0026gt; 将文件标记为已解决。 然后，继续 rebase 过程 git rebase --continue 如果中途想放弃，可以回到 rebase 开始前的状态 git rebase --abort 合并到主分支 rebase 成功后，你的 feature-login 分支就已经包含了 main 的所有更新，并且你的提交都在最前面。现在可以进行一次干净的快进合并。 1 2 git checkout main git merge feature-login When NOT to Use rebase **永远不要对一个已经推送到 remote，并且可能被团队其他人使用的公共分支 (如 main, develop)进行 rebase！**因为 rebase 会重写历史。如果你 rebase 了一个公共分支并强制推送 (git push --force)，那么所有团队成员的本地历史记录都将与远程的“新历史”产生严重分歧。\n正确用法是只在你自己的、还未与他人分享的本地分支上使用 rebase，用来整理你自己的提交记录，以便在合并到公共分支前有一个干净的历史。\nAdvanced Use git rebase -i git rebase -i 允许你在 rebase 的过程中，对你的提交进行编辑、合并、拆分或删除。这常用于在合并到 main 分支前，将自己本地凌乱的提交（如 \u0026ldquo;修复拼写错误\u0026rdquo;, \u0026ldquo;临时提交\u0026rdquo;, \u0026ldquo;又改了一点\u0026rdquo;）整理成几个有意义的提交。\n假设你的 feature-login 分支有 3 个凌乱的提交，你想把它们合并成一个。\n启动交互式 rebase git rebase -i HEAD~3. 其中 HEAD~3 表示从当前提交 (HEAD) 往前数 3 个提交。 编辑 Rebase 脚本 Git 会打开一个文本编辑器，列出这 3 个提交： 1 2 3 pick a31ab34 complete login UI pick 58c34bb fix a button bug pick 948f2cb add backend verify logic 在文件下方会有指令说明。你可以修改每一行前面的 pick 命令。比如，我们想把后两个提交合并到第一个里面：\n1 2 3 pick a31ab34 complete login UI squash 58c34bb fix a button bug squash 948f2cb add backend verify logic 保存并退出编辑器 Git 会开始合并提交，并弹出另一个编辑器，让你为这个合并后的新提交编写一个新的 commit message. 整理好后保存退出。现在再用 git log 查看，你会发现原来 3 个凌乱的提交已经变成了一个干净、完整的提交。 ","permalink":"http://localhost:1313/blogs/git-rebase-flow/","summary":"Use of git rebase","title":"How to Use git rebase"},{"content":"在 All2All 通信中，每个设备给其他设备发送大小为 m 的不同的消息。此操作相当于使用一维数组分区对分布在 p 个进程中的二维数据数组进行转置，因此也被称作全交换 (total exchange)\nRing / Bidirectional Linear Array 线性数组拓扑结构的 All2All 通信中，每个设备需要发送 p-1 份大小为 m 的数据。用 {i,j} 表示消息需要从设备 i 发送到设备 j. 首先，每个节点将所有要发送的数据作为一个大小为 m(p-1) 的合并消息发送给它邻居 (假设所有设备通信方向相同)。当邻居收到这个消息后提取他所需要的那一部分，发送剩下的大小为 m(p-2). 每个设备一共发送 p-1 次，每次要发送的消息大小减少 m.\n由此可以得出在 p 个设备组成的线性数组拓扑上进行 All2All 每个设备需要向相邻设备通信 p-1 次，第 i 次通信的消息大小为 m(p-i). 如果向两个方向都进行发送，那么每个方向都只用发送原先一半的数据。\n$$\r\\begin{aligned}T_{ring}\u0026=\\quad\\sum_{i=1}^{p-1}(t_{s}+t_{w}m(p-i))\\\\\u0026=\\quad t_{s}(p-1)+\\sum_{i=1}^{p-1}it_{w}m\\\\\u0026=\\quad(t_{s}+t_{w}mp/2)(p-1).\\end{aligned}\r$$环状网络中每份消息的平均传输跳数是 $\\frac{\\sum_{d=1}^{p-1}i}{p-1} = p/2$，因此 p 个节点总共的通信量之和为 $p\\times m(p-1)\\times\\frac p2$ 环状网络中总的链路数目为 p. 因此负载平均的情况下，最少需要的时间为 $\\frac{m(p-1)\\times\\frac p2\\times p}p = m(p-1)\\frac p2$ ，因此算法时间为最优的。\n跳数为 d 的消息数量对应于相距 d 的节点对 (i, j)，其中 |i-j|=d\n(0, d),(1, d+1), \\ldots,(p-1-d, p-1)，即 i 从 0 到 p-1-d, j=i+d ，共有 p-d 对。 (d, 0),(d+1,1), \\ldots,(p-1, p-1-d)，即 i 从 d 到 p-1, ~ j=i-d ，也有 p-d 对。 总共有 2(p-d) 条消息的跳数为 d 总跳数\n$$\r\\begin{aligned}\r\\text { 总跳数 } \u0026 =\\sum_{d=1}^{p-1} d \\times 2(p-d) \\\\\r\u0026 =2 \\sum_{d=1}^{p-1} d(p-d)=2\\left(p \\sum_{d=1}^{p-1} d-\\sum_{d=1}^{p-1} d^{2}\\right) \\\\\r\u0026 = p \\cdot \\frac{(p-1) p}{2}-\\frac{(p-1) p(2 p-1)}{6} \\\\\r\u0026 = =\\frac{(p-1) p(p+1)}{6}\r\\end{aligned}\r$$因此平均跳数 =$\\frac{\\text { 总跳数 }}{\\text { 总消息数 }}=\\frac{\\frac{(p-1) p(p+1)}{3}}{p(p-1)}=\\frac{p+1}{3}$\nMesh 若 p 个设备组成大小为 $\\sqrt{p} \\times \\sqrt{p}$ 的 mesh 进行 All2All 通信，每个设备首先将其 p 个数据按照目的设备的列进行分组，即分成 $\\sqrt{p}$ 组，每组包含大小为 $m\\sqrt{p}$ 的消息。假设 3x3 的 mesh，则第一组消息的目的节点为 {0,3,6}，第二组消息的目的节点为 {1,4,7}，第三组消息的目的节点为 {2,5,8}\n首先同时分别在每一行中进行 All2All 通信，每一份数据大小为 $m\\sqrt{p}$. 通信结束后每个设备拥有的是该行目的设备为所在列的所有数据。然后将数据按照目的设备所在的行进行分组。即设备 {0,3,6} 第一组消息的目的节点为 0，第二组消息的目的节点为 3，第三组消息的目的节点为 6. 然后同时分别在每一列中进行 All2All 通信。\n我们只需要将 Linear Array 拓扑结构中的公式的 p 换成 $\\sqrt{p}$ ，m 换成 $m\\sqrt{p}$，再乘以 2 就得到在 mesh 上进行 All2All 的时间\n$$\rT_{mesh}=(2t_{s}+t_{w}mp)(\\sqrt{p}-1).\r$$Hypercube 超立方体拓扑在每个维度上都有两个节点，一共有 $\\log{p}$ 个维度。在一共有 p 个节点超立方体中，在某个维度 $d$ 上，超立方体可以被划分为两个 (n−1) 维的子立方体，这两个子立方体通过维度 d 上的 p/2 条链路相连。\n在 All2All 通信的任何阶段，每个节点都持有 $p$ 个大小为 $m$ 的数据包。当在特定维度上通信时，每个节点发送 $p/2$ 个数据包 (合并为一条消息)。这些数据包的目的地是由当前维度的链路连接的另一个子立方体包含的节点。在上述过程中，节点必须在每个 $\\log{p}$ 通信步骤之前在本地重新排列消息。\n$\\log{p}$ 步中的每一步，每个设备沿当前维度的双向链路交换大小为 mp/2 的数据。因此在 hypercube 上进行 All2All 的时间为\n$$\rT_{hcube}=(t_{s}+t_{w}mp/2)\\log p.\r$$值得注意的是与 ring 和 mesh 算法不同，超立方体算法不是最优的。每个设备发送和接收大小为 m(p- 1) 的数据，超立方体上任意两个节点之间的平均距离为 $\\log{p}/2$ . 因此，网络上的总数据流量为 $p\\times m(p - 1)\\times(\\log{p})/2$. 每个超立方体一共有 $p\\log{p}/2$ 条双向链路，如果流量能够被平分，则通信用时下界应该为\n$$\r\\begin{aligned}T_{min}\u0026=\\frac{t_{w}pm(p-1)(\\log p)/2}{(p\\log p)/2}\\\\\u0026=t_{w}m(p-1).\\end{aligned}\r$$Optimal Algorithm in Hypercube 在超立方体上，执行 All2All 的最佳方法是让每一对节点彼此直接通信。因此，每个节点只需执行 p-1 次通信，每次与不同设备交换大小为 m 的数据。设备必须在每次通信中选择不会出现拥塞的通信对象。在第 j 次通信中，节点 i 与节点 $i \\oplus j$ 交换数据。在超立方体上，从节点 i 到节点 j 的消息必须经过至少 l 条链路，其中 l 是 i 和 j 之间的汉明距离 (即 $i \\oplus j$ 的二进制表示中的非零比特数). 我们通过 E-cube 路由来选择路径：\n将当前节点地址 C 与目标节点地址 D 进行 XOR 操作，得到 $R=C\\oplus D$. 找到 R 的最低有效非零位，决定下一步跳转的维度。 沿选定维度跳转到下一个节点，更新当前节点地址。 重复上述步骤，直到 R=0， 即到达目标节点。 对于节点i和节点j之间的消息传输，该算法保证每一步的通信时间为 t_s + t_wm，因为在节点 i 和节点 j 之间的链路上沿着同一方向传播的任何其他消息都不存在竞争，切每一步只切换一个维度，通信距离为 1. 整个 All2All 的总通信时间为 $$T_{xor}=(t_{s}+t_{w}m)(p-1).$$Bruck Algorithm in Full-connected Network Bruck是一种存储-转发 (store-and-forward) 算法，需要 log(P) 次通信步骤。这意味着发送缓冲区 S 和接收缓冲区 R 都用于在中间通信轮次中发送、接收和存储数据。因为某些接收到的数据块必须在后续通信步骤中使用。这种存储-转发的特性对通信轮次的顺序提出了约束。与线性步骤实现不同，Bruck 必须保持明确的通信顺序，其中第 i+1 次迭代必须在第 i 次迭代之后物理时间上发生。 Bruck\nAlgorithm 2 NCCL Bruck algorithm P ← total number of processes. for i ∈ [0, P] do R[i] = S[(p+i) % P] // S and R are send and receive buffers, and p is rank id of each process; end for allocate temporary buffer T with SC × (P+1) / 2 elements; // SC is number of elements per data-block. for k = 1; k \u0026lt; P; k \u0026lt;\u0026lt;= 1 do allocate send indexes array SB with (P+1) / 2 integers; number of send data-blocks NB ← 0; for i ∈ [k, P] do if i \u0026amp; k then SB[NB] ← i; copy R[i] into T[NB]; NB ← NB + 1; end if sendproc ← (p + k) % P; recvproc ← (p - k + P) % P; ncclGroupStart() send data in T to sendproc; receive data from recvproc into S; ncclGroupEnd() for i ∈ [0, SB] do copy T[i] into R[SB[i]]; end for end for for i ∈ [0, P] do R[i] = R[(p - i + P) % P] // final rotation; end for end for line(2-4): 将每个设备发送缓冲区 S 中的数据按照 rank 偏移重新排列拷贝到接收缓冲区 R 中。 line(5): 为通信阶段准备一个临时缓冲区 T line(6): 通信步开始 k 以指数方式增长 (1, 2, 4, \u0026hellip;)，总共执行 logP 次迭代 line(7-14): 用索引数组 SB，记录需要发送的数据块位置。遍历 k~P-1 同通过对 i\u0026amp;k 判断哪些数据块需要在此轮发送. (若 P 是 2 的指数幂，因为 k 是 2 的指数幂，因此只有一位为 1，那么就是每轮发送 p/2 个数据块) 将接收缓冲区 R 中满足条件的数据拷贝到临时缓冲区 T，并记录索引。 line(15-16): 确定要接收和发送的目标。 line(17-20): 进行通信操作，将数据发送到目标的发送缓冲区。 line(21-23): 更新接收缓冲区。 line(25-27): 反向调整接收缓冲区数据的位置。 总共 log(p) 步骤每步发送 m 消息。\nTree-based Tree\n采用先在行上进行 All-gather, 再在列上进行 Scatter. 也需要 log(p) 步，其中 gather 阶段第一步通信量为 m(p-1)，一共进行 0.5log(p) 步每一步通信量翻倍，跳数也翻倍；scatter阶段则是相反，因此两步的通信时间相同总共 t_s*log(p) + m(p-1)^2/3\n","permalink":"http://localhost:1313/blogs/all2allcommcost/","summary":"Introduction of Transformer Family","title":"All2All Communication Cost"},{"content":"MLIR 的主要原则之一是逐步下降，即存在许多级别的 IR 粒度，并且逐步下降 IR 的不同部分，仅在不再对优化有用时丢弃信息。在本文中，将完成其中的第一步：使用所谓的方言转换基础设施将多方言 lowering 为标准MLIR方言的组合。\nThe Type Obstacle 如果不是针对类型，方言转换 (lowering) 本质上与普通 pass 相同：编写一些重写模式并将其应用于 IR. 对于每个需要 lowering 的 OP ，通常会有一个重写模式。\n类型使这个问题变得更加复杂，我将通过poly的示例来演示这个问题。\npoly.add 对两个多项式进行相加并返回结果多项式。我们想 lowering poly。例如，添加到 arith.addi 算术运算的矢量化循环中。但 arith 并不知道 poly.poly 类型的存在。\n如果必须使扩展 arith 以了解poly，需要对 arith 进行上游更改。添加 op 的 operands 以允许实现某种接口的类型，例如 integer-like 或 containers of integer-like.\n所以，除了 lowering op，还需要 lowering poly. poly\u0026lt;N\u0026gt; 变成张量 \u0026lt;Nxi32\u0026gt;. 这就是类型障碍发挥作用的地方。一旦更改了特定值的类型，例如，在 lowering 生成该值作为输出的 OP 时，那么该值的所有下游用户仍然期望使用旧类型，并且在 lowering 它们之前在技术上是无效的。在每次传递之间，MLIR运行验证器以确保IR有效，因此如果没有一些特殊处理，这意味着需要在一次传递中转换所有类型和 OP ，否则这些验证器将失败。但是用标准重写规则管理所有这些将是困难的：对于每个重写规则，您都必须不断检查参数和结果是否已经转换。\n例如在 lowering 一个生成该值作为输出的 OP 时，所有依赖该值的下游用户仍然期望旧的类型，因此在技术上这些下游用户在未被 lowering 之前是无效的。MLIR 在每次转换 (pass) 之间运行验证器以确保中间表示 (IR) 是有效的，因此如果没有特殊处理，这意味着所有类型和 OP 必须在一个转换中全部转换，否则验证器会失败。但是，使用标准的重写规则来管理这一切会很困难：对于每个 OP 重写规则，你需要不断地检查参数和结果是否已经转换。\nMLIR 通过一个围绕标准转换的包装器来处理这种情况，这个包装器被称为方言转换框架(dialect conversion framework). 使用这个框架需要用户继承不同的类来实现普通的重写，设置一些额外的元数据，并以特定的方式 将类型转换与 OP 转换分开，我们稍后会看到具体方式。但从高层次来看，这个框架通过以某种排序顺序 lowering OP 、同时转换类型，并让 OP 转换器能够访问每个 OP 的原始类型以及在 OP 被框架访问时的进行中的转换类型。每个基于 OP 的重写模式都期望在访问后使该 OP 的类型合法，但不需要担心下游 OP.\nModes of Conversion 当对一组 OP 进行转换时，有几种不同的转换模式可供选择：\nPartial Conversion 使尽可能多的对目标的操作合法化，但将允许未显式标记为“非法”的预先存在的操作保持未转换。这允许在存在未知操作的情况下部分降低输入。 可以通过 applyPartialConversion 进行部分转换。 Full Conversion 使所有输入操作合法化，并且只有当所有操作都正确地合法化到给定的转换目标时才成功。这确保了在转换过程之后只存在已知的操作。 可以通过 applyFullConversion 进行完整转换。 Analysis Conversion 如果要应用转换，Analysis Conversion 将分析哪些操作对给定的转换目标是合法的。这是通过执行 \u0026lsquo;Partial\u0026rsquo; Conversion 并记录哪些操作如果成功将被成功转换来完成的。注意，没有 rewrites 或转换实际应用于输入操作。 可以通过 a pplyAnalysisConversion 应用分析转换。 Conversion Target 转换目标是在转换过程中被认为是合法的内容的正式定义。转换框架生成的最终操作必须在converontarget上标记为合法，这样重写才能成功。根据转换模式的不同，现有操作不一定总是合法的。操作和方言可以标记为下列任何规定的合法性行为：\nLegal: 表明给定操作的每个实例都是合法的，即属性、操作数、类型等的任何组合都是有效的。 Dynamic: 此操作表示给定操作的某些实例是合法的。这允许定义微调约束，例如，arith.addi 仅在操作32位整数时合- Illegal: 此操作表示给定操作的实例不合法。为使转换成功，必须始终转换标记为“非法”的操作。此操作还允许有选择地将特定操作标记为非法，否则将是合法的方言。 未明确标记为合法或非法的操作和方言与上述（“未知”操作）分开，并被区别对待，例如，出于上述部分转换的目的。\n最后，方言转换框架会跟踪任何未解决的类型冲突。如果在转换结束时仍存在类型冲突，会发生以下两种情况之一。转换框架允许用户可选地实现一个称为类型物化器 (type materializer) 的功能，它会插入新的中间 OP 来解决类型冲突。因此，第一种可能是方言转换框架使用你的类型物化器钩子来修补 IR，转换成功结束。如果这些钩子失败，或者你没有定义任何钩子，那么转换会失败。\n这种基础设施的复杂性部分还与上游 MLIR 中一个更困难的 lowering 流水线有关：缓冲区化流水线 (bufferization pipeline). 这个流水线本质上将使用 value semantics 的操作的 IR 转换为使用 pointer semantics 的中间表示。例如，张量类型 (tensor type) 及其相关操作具有 value semantics，这意味着每个操作在语义上都会生成一个全新的张量作为输出，并且所有操作都是 pure 的 (有一些例外情况) 。另一方面， memref 具有 pointer semantics，意味着它更接近于对物理硬件的建模，需要显式的内存分配，并支持对内存位置进行变动的操作。\n由于缓冲区化过程复杂，它被拆分为 sub-passes，分别处理与上游 MLIR 各相关方言特定的缓冲区化问题 (参见文档，例如 arith-bufferize、func-bufferize 等) 。每个缓冲区化转换都会产生一些内部无法解决的类型冲突，这些冲突需要自定义的类型物化 (type materializations) 来解决。为了在所有相关方言中处理这些问题，MLIR 团队构建了一个专门的方言，称为缓冲区化方言 (bufferization dialect) ，用来存放中间操作。你会注意到像 to_memref 和 to_tensor 这样的操作，它们扮演了这一角色。然后还有一个最终缓冲区化转换 (finalizing-bufferize pass) ，其作用是清理任何残留的缓冲区化或物化操作。\nLowering Poly with Type Materializations 跟之前写 Pass tablegen 的时候大同小异，主要是需要定义 dependent dialects. Lowering 必须以这种方式依赖于包含将创建的操作或类型的任何方言，以确保 MLIR 在尝试运行 pass 之前加载这些方言。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // include/Conversion/PolyToStandard/PolyToStandard.td #ifndef LIB_CONVERSION_POLYTOSTANDARD_POLYTOSTANDARD_TD_ #define LIB_CONVERSION_POLYTOSTANDARD_POLYTOSTANDARD_TD_ include \u0026#34;mlir/Pass/PassBase.td\u0026#34; def PolyToStandard : Pass\u0026lt;\u0026#34;poly-to-standard\u0026#34;\u0026gt; { let summary = \u0026#34;Lower `poly` to standard MLIR dialects.\u0026#34;; let description = [{ This pass lowers the `poly` dialect to standard MLIR, a mixture of affine, tensor, and arith. }]; let dependentDialects = [ \u0026#34;mlir::arith::ArithDialect\u0026#34;, \u0026#34;mlir::tutorial::poly::PolyDialect\u0026#34;, \u0026#34;mlir::tensor::TensorDialect\u0026#34;, ]; } #endif // LIB_CONVERSION_POLYTOSTANDARD_POLYTOSTANDARD_TD_ 下一步需要定义 ConversionTarget，告诉 MLIR 哪些 OP 需要进行 lowering，可以定义整个需要下降的 dialect 为 illegal，确保在转换完成后没有该 dialect. 这里使用 applyPartialConversion 而不是 applyFullConversion 的原因是报错消息更直观。Partial Conversion 可以看到步骤以及最后无法修补的冲突类型。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // lib/Conversion/PolyToStandard/PolyToStandard.cpp struct PolyToStandard : impl::PolyToStandardBase\u0026lt;PolyToStandard\u0026gt; { using PolyToStandardBase::PolyToStandardBase; void runOnOperation() override { MLIRContext *context = \u0026amp;getContext(); auto *module = getOperation(); // TODO: implement pass ConversionTarget target(*context); target.addIllegalDialect\u0026lt;PolyDialect\u0026gt;(); // declare an entire dialect as “illegal” RewritePatternSet patterns(context); if (failed(applyPartialConversion(module, target, std::move(patterns)))) { signalPassFailure(); } } }; 接下来需要定义一个 TypeConverter 的子类将 poly dialect 下的 type 转换成其他类型. 其中类型转换和 materialization 是分别通过 addConversion 和 addMaterialization 完成的。这里我们将属于 poly.poly 类型的 degreBound 转换成 Tensor.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class PolyToStandardTypeConverter : public TypeConverter { public: PolyToStandardTypeConverter(MLIRContext* ctx) { addConversion([](Type type) { return type; }); addConversion([ctx](PolynomialType type) -\u0026gt; Type { int degreeBound = type.getDegreeBound(); IntegerType elementType = IntegerType::get( ctx, 32, IntegerType::SignednessSemantics::Signless); return RankedTensorType::get({degreeBound}, elementType); }); } }; 接下来就是要转换 Poly 中的各种 op，需要继承 OpConversionPattern，重写里面的 matchAndRewrtite 方法. 以 poly.add 为例，根据父类里的定义，这里 OpAdaptor 即为 AddOp:OpAdaptor，它使用 tablegen 定义的名称作为 op 的参数和方法名称的结果，而不是之前的的getOperand. AddOp 参数包含原始的、未类型转换的操作数和结果。ConversionPatternRewriter类 似于PatternRewriter，但有与方言转换相关的其他方法，例如 convertRegionTypes，用于为嵌套区域的操作应用类型转换。对IR\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 struct ConvertAdd : public OpConversionPattern\u0026lt;AddOp\u0026gt; { ConvertAdd(MLIRContext* context) : OpConversionPattern\u0026lt;AddOp\u0026gt;(context) { } using OpConversionPattern::OpConversionPattern; LogicalResult matchAndRewrite( AddOp op, OpAdaptor adaptor, ConversionPatternRewriter\u0026amp; rewriter) const override { auto addOp = rewriter.create\u0026lt;arith::AddIOp\u0026gt;( op-\u0026gt;getLoc(), adaptor.getLhs(), adaptor.getRhs()); rewriter.replaceOp(op.getOperation(), addOp); return success(); } }; 下面我们需要将 ConvertAdd 添加进 PolyToStandard::runOnOperation 中定义的 RewriterPatternSet 中。\n1 2 3 4 5 6 void runOnOperation() { ... RewritePatternSet patterns(context); PolyToStandardTypeConverter typeConverter(context); patterns.add\u0026lt;ConvertAdd\u0026gt;(typeConverter, context); } ","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch9-dialect-conversion/","summary":"Personal MLIR learning notes 9.","title":"MLIR-Ch9 Dialect Conversion"},{"content":"Why is Canonicalization Needed? 规范化器可以用标准的方式编写：在 tablegen 中声明 op 具有规范化器，然后实现生成的 C++函数声明。官网例子如下\n1 2 3 4 5 6 7 8 9 10 def MyOp : ... { // I want to define a fully general set of patterns for this op. let hasCanonicalizer = 1; } def OtherOp : ... { // A single \u0026#34;matchAndRewrite\u0026#34; style RewritePattern implemented as a method // is good enough for me. let hasCanonicalizeMethod = 1; } Canonicalization 模式可以通过如下方式定义\n1 2 3 4 5 6 7 8 9 void MyOp::getCanonicalizationPatterns(RewritePatternSet \u0026amp;patterns, MLIRContext *context) { patterns.add\u0026lt;...\u0026gt;(...); } LogicalResult OtherOp::canonicalize(OtherOp op, PatternRewriter \u0026amp;rewriter) { // patterns and rewrites go here. return failure(); } Canonicalizers in C++ 在 Op 定义中添加 let hasCanonicalizeMethod = 1; 后会为该 Op 生成如下的函数声明。\n1 2 3 4 static void getCanonicalizationPatterns( ::mlir::RewritePatternSet\u0026amp; results, ::mlir::MLIRContext* context ); 这个函数需要对 results 加入自定义的 OpRewritePattern. 例如可以重写 x^2 - y^2 这个 SubOp 为 (x+y)(x-y)，当 x^2 和 y^2 在后续没有被使用时。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 struct DifferenceOfSquares : public OpRewritePattern\u0026lt;SubOp\u0026gt; { DifferenceOfSquares(mlir::MLIRContext* context) : OpRewritePattern\u0026lt;SubOp\u0026gt;(context, 1) { } LogicalResult matchAndRewrite(SubOp op, PatternRewriter\u0026amp; rewriter) const override { Value lhs = op-\u0026gt;getOperand(0); // x^2 Value rhs = op-\u0026gt;getOperand(0); // y^2 // If either arg has another use, then this rewrite is probably less // efficient, because it cannot delete the mul ops. if (!lhs.hasOneUse() || !rhs.hasOneUse()) { return failure(); } auto rhsMul = rhs.getDefiningOp\u0026lt;SubOp\u0026gt;(); auto lhsMul = rhs.getDefiningOp\u0026lt;SubOp\u0026gt;(); if (!rhsMul || !lhsMul) { return failure(); } // check if lhsMul \u0026amp;\u0026amp; rhsMul is squre operation bool rhsMulOpsAgree = rhsMul.getLhs() == rhsMul.getRhs(); bool lhsMulOpsAgree = lhsMul.getLhs() == lhsMul.getRhs(); if (!rhsMulOpsAgree || !lhsMulOpsAgree) { return failure(); } auto x = lhsMul.getLhs(); auto y = rhsMul.getLhs(); auto newAdd = rewriter.create\u0026lt;AddOp\u0026gt;(op-\u0026gt;getLoc(), x, y); auto newSub = rewriter.create\u0026lt;AddOp\u0026gt;(op-\u0026gt;getLoc(), x, y); auto newMul = rewriter.create\u0026lt;AddOp\u0026gt;(op-\u0026gt;getLoc(), newAdd, newSub); rewriter.replaceOp(op, newMul); // We don\u0026#39;t need to remove the original ops because MLIR already has // canonicalization patterns that remove unused ops. return success(); } }; void SubOp::getCanonicalizationPatterns(::mlir::RewritePatternSet\u0026amp; results, ::mlir::MLIRContext* context) { results.add\u0026lt;DifferenceOfSquares\u0026gt;(context); } Canonicalizers in Tablegen 下面利用 tablegen 实现一个多项式共轭的 canonicalizer，f(conj(z)) = conj(f(z)).\n1 2 3 // PolyPatterns.td def LiftConjThroughEval : Pat\u0026lt;(Poly_EvalOp $f, (ConjOp $z, $fastmath)), (ConjOp (Poly_EvalOp $f, $z), $fastmath)\u0026gt;; 这里的义了重写模式的 Pat 类和定义要匹配和重写的 IR tree 的括号. Pattern 和 Pat 的定义如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Pattern\u0026lt;dag source, list\u0026lt;dag\u0026gt; results, list\u0026lt;dag\u0026gt; preds = [], list\u0026lt;dag\u0026gt; supplemental_results = [], dag benefitAdded = (addBenefit 0)\u0026gt; { dag sourcePattern = source; list\u0026lt;dag\u0026gt; resultPatterns = results; // 注意这里是 list\u0026lt;dag\u0026gt; list\u0026lt;dag\u0026gt; constraints = preds; list\u0026lt;dag\u0026gt; supplementalPatterns = supplemental_results; dag benefitDelta = benefitAdded; } class Pat\u0026lt;dag pattern, dag result, list\u0026lt;dag\u0026gt; preds = [], list\u0026lt;dag\u0026gt; supplemental_results = [], dag benefitAdded = (addBenefit 0)\u0026gt; : Pattern\u0026lt;pattern, [result], preds, supplemental_results, benefitAdded\u0026gt;; Pattern 类接受一个名为 results 的模板参数，它是一个 list\u0026lt;dag\u0026gt; 类型，可以定义一个或多个结果模式。这使得 Pattern 非常灵活，可以用于处理以下情况：\n源操作产生多个结果，并且每个结果都需要被不同的新操作替换。 重写过程需要生成一些辅助操作，这些辅助操作本身不直接替换源操作的结果，但有助于构建最终的替换结果。 Pat 类继承自 Pattern 类。输入是两个IR tree 对象 (MLIR称之为 DAG nodes)，树中的每个节点由括号 () 指定，括号中的第一个值是操作的名称，其余参数是 op 的参数或属性。当节点可以嵌套，这对应于应用于参数的匹配。它将这个单一的 result DAG 包装成一个只包含一个元素的列表 [result] ，然后传递给父类 Pattern 的 results 参数。因此 Pat 实际上是 Pattern 的一个特例，专门用于定义那些只产生单一结果模式的重写规则。\n生成的代码如下所示\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 /* Generated from: /code/sac_mlir_learning/Ch8-DialectConversion/include/mlir-tutorial/Dialect/Poly/PolyPatterns.td:8 */ // 定义一个名为 LiftConjThroughEval 的重写模式结构体，继承自 mlir::RewritePattern struct LiftConjThroughEval : public ::mlir::RewritePattern { // 构造函数 LiftConjThroughEval(::mlir::MLIRContext* context) : ::mlir::RewritePattern(\u0026#34;poly.eval\u0026#34;, // 此模式匹配的根操作名 2, // 此模式的收益 (benefit)，用于解决多个模式匹配时的优先级 context, {\u0026#34;complex.conj\u0026#34;, \u0026#34;poly.eval\u0026#34;} /* 依赖或生成的其他操作名列表 */) { } // 核心的匹配与重写逻辑 ::llvm::LogicalResult matchAndRewrite( ::mlir::Operation* op0, // 当前尝试匹配的操作 (op0 预期为 poly.eval) ::mlir::PatternRewriter\u0026amp; rewriter) const override { // 用于捕获匹配过程中操作数和属性的变量 ::mlir::Operation::operand_range z; // 将捕获 complex.conj 的操作数 ::mlir::arith::FastMathFlagsAttr fastmath; // 将捕获 complex.conj 的 fastmath 属性 ::mlir::Operation::operand_range f; // 将捕获 poly.eval 的第一个操作数 (多项式) // 用于存储匹配到的操作，方便后续统一获取位置信息 ::llvm::SmallVector\u0026lt;::mlir::Operation*, 4\u0026gt; tblgen_ops; // --- 开始匹配 --- tblgen_ops.push_back(op0); // 将根操作 op0 (poly.eval) 加入列表 // 尝试将 op0 动态转换为 poly.eval 类型 auto castedOp0 = ::llvm::dyn_cast\u0026lt;::mlir::tutorial::poly::EvalOp\u0026gt;(op0); (void) castedOp0; // 避免未使用警告 (如果后续不直接使用 castedOp0 的某些特性) // 获取 poly.eval 的第一个操作数 (多项式 f) f = castedOp0.getODSOperands(0); { // 内嵌作用域，用于匹配 poly.eval 的第二个操作数 (求值点 point) // 获取定义 poly.eval 第二个操作数 (point) 的那个操作 (op1) auto* op1 = (*castedOp0.getODSOperands(1).begin()).getDefiningOp(); if (!(op1)) { // 如果 point 不是由某个操作定义的 (例如，它是块参数) return rewriter.notifyMatchFailure( castedOp0, [\u0026amp;](::mlir::Diagnostic\u0026amp; diag) { diag \u0026lt;\u0026lt; \u0026#34;There\u0026#39;s no operation that defines operand 1 \u0026#34; \u0026#34;of castedOp0 (the point operand)\u0026#34;; }); } // 尝试将 op1 动态转换为 complex.conj 类型 auto castedOp1 = ::llvm::dyn_cast\u0026lt;::mlir::complex::ConjOp\u0026gt;(op1); (void) castedOp1; if (!(castedOp1)) { // 如果 op1 不是 complex.conj 操作 return rewriter.notifyMatchFailure( op1, [\u0026amp;](::mlir::Diagnostic\u0026amp; diag) { diag \u0026lt;\u0026lt; \u0026#34;Operand 1 of poly.eval is not defined by mlir::complex::ConjOp\u0026#34;; }); } // 获取 complex.conj 的操作数 (z) z = castedOp1.getODSOperands(0); { // 内嵌作用域，用于提取 complex.conj 的 fastmath 属性 [[maybe_unused]] auto tblgen_attr = // [[maybe_unused]] 避免未使用警告 castedOp1.getProperties().getFastmath(); if (!tblgen_attr) // 如果没有显式设置 fastmath，则默认为 none tblgen_attr = ::mlir::arith::FastMathFlagsAttr::get( rewriter.getContext(), ::mlir::arith::FastMathFlags::none); fastmath = tblgen_attr; // 保存 fastmath 属性 } tblgen_ops.push_back(op1); // 将匹配到的 complex.conj 操作 (op1) 加入列表 } // --- 匹配结束 --- // --- 开始重写 --- // 为新生成的操作创建一个融合的位置信息，源自所有匹配到的操作 auto odsLoc = rewriter.getFusedLoc( {tblgen_ops[0]-\u0026gt;getLoc(), tblgen_ops[1]-\u0026gt;getLoc()}); (void) odsLoc; // 避免未使用警告 // 用于存储替换原操作 op0 的新值 ::llvm::SmallVector\u0026lt;::mlir::Value, 4\u0026gt; tblgen_repl_values; // 声明新的 poly.eval 操作 ::mlir::tutorial::poly::EvalOp tblgen_EvalOp_0; { // 创建新的 poly.eval 操作: eval(f, z) ::mlir::Value tblgen_value_0 = (*f.begin()); // poly.eval 的第一个操作数 (多项式 f) ::mlir::Value tblgen_value_1 = (*z.begin()); // poly.eval 的第二个操作数 (原 conj 的操作数 z) tblgen_EvalOp_0 = rewriter.create\u0026lt;::mlir::tutorial::poly::EvalOp\u0026gt;( odsLoc, /*input=*/tblgen_value_0, /*point=*/tblgen_value_1); } // 声明新的 complex.conj 操作 ::mlir::complex::ConjOp tblgen_ConjOp_1; { // 创建新的 complex.conj 操作: conj(result of new eval) ::llvm::SmallVector\u0026lt;::mlir::Value, 4\u0026gt; tblgen_values; // 新 conj 的操作数列表 (void) tblgen_values; ::mlir::complex::ConjOp::Properties tblgen_props; // 新 conj 的属性 (void) tblgen_props; // 新 conj 的操作数是新创建的 poly.eval 的结果 tblgen_values.push_back( (*tblgen_EvalOp_0.getODSResults(0).begin())); // 设置新 conj 的 fastmath 属性，与原 conj 保持一致 tblgen_props.fastmath = ::llvm::dyn_cast_if_present\u0026lt;decltype(tblgen_props.fastmath)\u0026gt;( fastmath); tblgen_ConjOp_1 = rewriter.create\u0026lt;::mlir::complex::ConjOp\u0026gt;( odsLoc, tblgen_values, tblgen_props); } // 将新创建的 complex.conj 操作的结果作为替换值 for (auto v : ::llvm::SmallVector\u0026lt;::mlir::Value, 4\u0026gt;{ tblgen_ConjOp_1.getODSResults(0)}) { tblgen_repl_values.push_back(v); } // 用新的值替换原始操作 op0 rewriter.replaceOp(op0, tblgen_repl_values); return ::mlir::success(); // 表示匹配和重写成功 } }; void LLVM_ATTRIBUTE_UNUSED populateWithGenerated(::mlir::RewritePatternSet\u0026amp; patterns) { patterns.add\u0026lt;LiftConjThroughEval\u0026gt;(patterns.getContext()); } 然后跟上一个方法一样，需要添加这个 canonicalizer.\n1 2 3 4 5 void EvalOp::getCanonicalizationPatterns(::mlir::RewritePatternSet\u0026amp; results, ::mlir::MLIRContext* context) { populateWithGenerated(results); } 同样我们可以通过 tablegen 的方式编写 DifferenceOfSquares，但由于将一个 SubOp 替换成了 3 个 Op，需要继承 Pattern 而不是 Pat.\n1 2 3 4 5 6 7 8 9 10 11 12 13 // PolyPatterns.td def HasOneUse: Constraint\u0026lt;CPred\u0026lt;\u0026#34;$_self.hasOneUse()\u0026#34;\u0026gt;, \u0026#34;has one use\u0026#34;\u0026gt;; // Rewrites (x^2 - y^2) as (x+y)(x-y) if x^2 and y^2 have no other uses. def DifferenceOfSquares : Pattern\u0026lt; (Poly_SubOp (Poly_MulOp:$lhs $x, $x), (Poly_MulOp:$rhs $y, $y)), [ (Poly_AddOp:$sum $x, $y), (Poly_SubOp:$diff $x, $y), (Poly_MulOp:$res $sum, $diff), ], [(HasOneUse:$lhs), (HasOneUse:$rhs)] \u0026gt;; ","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch8-canonicalizers-and-declarative-rewrite-patterns/","summary":"Personal MLIR learning notes 8.","title":"MLIR-Ch8 Canonicalizers and Declarative Rewrite Patterns"},{"content":"Purposes of a Verifier Verifiers 确保具体的 MLIR 程序中的类型和操作格式正确。验证器会在每次优化 pass 之前和之后运行，帮助确保单个 pass, folders, rewrite patterns 等都能生成正确的 IR. 这使得每个操作的约束条件（invariants）能够得到强制执行，同时简化了传递的实现，因为它们可以依赖这些约束条件，从而避免检查边界情况。多数情况下验证代码是用 Traits 来实现的。\nTrait-based Verifiers 上一章我们加入了 SameOperandsAndResultElementType 从而让 poly.add 的输入可以既是 poly 或者张量类型的 poly. 从技术上讲，这向 IR 添加了一个验证器，但是为了更清楚地演示这一点，这一章将限制该行为，我们将 Trait 改成 SameOperandsAndResultType 以断言输入和输出类型必须全部一致。\n这样会自动生成一些新功能。首先，验证引擎会使用 verifyTrait 来检查类型是否一致。在这里，verifyInvariants 是 Operation 基类中的一个方法，当某些 Traits 注入验证逻辑时，生成的代码会覆盖这个方法，用于检查操作类型上的类型约束。(如果是自定义验证器，则会使用名为 verify 的方法，以与 verifyInvariants 区分开来) 由于 SameOperandsAndResultType 是一个通用检查，因此它不会影响生成的代码。\n下面展示了 AddOp 的 inferReturnTypes 方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 ::llvm::LogicalResult AddOp::inferReturnTypes( ::mlir::MLIRContext* context, ::std::optional\u0026lt;::mlir::Location\u0026gt; location, ::mlir::ValueRange operands, ::mlir::DictionaryAttr attributes, ::mlir::OpaqueProperties properties, ::mlir::RegionRange regions, ::llvm::SmallVectorImpl\u0026lt;::mlir::Type\u0026gt;\u0026amp; inferredReturnTypes) { inferredReturnTypes.resize(1); // Represent AddOp\u0026#39;s output as a single type. ::mlir::Builder odsBuilder(context); if (operands.size() \u0026lt;= 0) // Check that there is at least one operand. return ::mlir::failure(); ::mlir::Type odsInferredType0 = operands[0].getType(); inferredReturnTypes[0] = odsInferredType0; // Set the output type to the first operand\u0026#39;s type. return ::mlir::success(); } 有了类型推导钩子，我们可以简化操作的汇编格式，类型只需要指定一次，而不是三次 ((type, type) -\u0026gt; type). 同时也需要更新所有测试的 mlir 以启用这个新的 assemblyFormat.\n1 let assemblyFormat = \u0026#34;$lhs `,` $rhs attr-dict `:` qualified(type($output))\u0026#34;; 我们可以从 AddOp 的 build 方法中看到现在不需要指定返回值，而是通过 inferReturnTypes 来推导。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void AddOp::build(::mlir::OpBuilder\u0026amp; odsBuilder, ::mlir::OperationState\u0026amp; odsState, ::mlir::Value lhs, ::mlir::Value rhs) { odsState.addOperands(lhs); odsState.addOperands(rhs); ::llvm::SmallVector\u0026lt;::mlir::Type, 2\u0026gt; inferredReturnTypes; if (::mlir::succeeded(AddOp::inferReturnTypes( odsBuilder.getContext(), odsState.location, odsState.operands, odsState.attributes.getDictionary(odsState.getContext()), odsState.getRawProperties(), odsState.regions, inferredReturnTypes))) odsState.addTypes(inferredReturnTypes); else ::mlir::detail::reportFatalInferReturnTypesError(odsState); } EvalOp 无法使用 SameOperandsAndResultType，因为它的操作数需要不同的类型。然而，我们可以使用 AllTypesMatch，它会生成类似的代码，但将验证限制在某些特定类型的子集上。\n1 2 3 4 5 def Poly_EvalOp : Op\u0026lt;Poly_Dialect, \u0026#34;eval\u0026#34;, [AllTypesMatch\u0026lt;[\u0026#34;point\u0026#34;, \u0026#34;output\u0026#34;]\u0026gt;]\u0026gt; { let summary = \u0026#34;Evaluates a Polynomial at a given input value.\u0026#34;; let arguments = (ins Polynomial:$input, AnyInteger:$point); let results = (outs AnyInteger:$output); } 可以看到相似的 inferReturnTypes 方法，由于 EvalOp 是返回多项式在某个整数点上的值，因此推断的返回值类型需要与第二个操作数类型一致。\n1 2 3 4 5 6 7 8 9 10 11 12 13 ::llvm::LogicalResult EvalOp::inferReturnTypes( ::mlir::MLIRContext* context, ::std::optional\u0026lt;::mlir::Location\u0026gt; location, ::mlir::ValueRange operands, ::mlir::DictionaryAttr attributes, ::mlir::OpaqueProperties properties, ::mlir::RegionRange regions, ::llvm::SmallVectorImpl\u0026lt;::mlir::Type\u0026gt;\u0026amp; inferredReturnTypes) { inferredReturnTypes.resize(1); ::mlir::Builder odsBuilder(context); if (operands.size() \u0026lt;= 1) return ::mlir::failure(); ::mlir::Type odsInferredType0 = operands[1].getType(); inferredReturnTypes[0] = odsInferredType0; return ::mlir::success(); } A Custom Verifier 如果需要添加自定义的 verifier 我们需要在 def 的时候添加 let hasVerifier = 1. 我们会发现生成的类里面定义了 verify 方法。\n1 2 3 4 class EvalOp ... { ... ::mlir::LogicalResult verify(); }; 因此我们需要在 PolyOps.cpp 中实现它。\n1 2 3 4 5 6 // lib/Dialect/Poly/PolyOps.cpp LogicalResult EvalOp::verify() { return getPoint().getType().isSignlessInteger(32) ? success() : emitError(\u0026#34;argument point must be a 32-bit integer\u0026#34;); } A Trait-based Custom Verifier 在 MLIR 中，每个 Trait 都有一个可选的 verifyTrait 钩子，这个钩子会在通过 hasVerifier 创建的自定义验证器之前执行。我们可以利用这个钩子定义通用的验证器，使其适用于多个操作。比如，我们可以通过扩展上一节的内容，创建一个通用的验证器，用于断言所有整数类型的操作数必须是 32 位。\n因此我们先需要 def 一个新的 Trait，然后将它加入到 EvalOp 中.\n1 2 let cppNamespace = \u0026#34;::mlir::tutorial::poly\u0026#34;; } 我们可以看到生成的代码里有一个新类需要我们实现\n1 2 3 4 5 6 7 8 class EvalOp : public ::mlir::Op\u0026lt; EvalOp, ::mlir::OpTrait::ZeroRegions, //..., ::mlir::tutorial::poly::Has32BitArguments, //... \u0026gt; { // ... }; 我们需要新建一个 PolyTraits.h 文件并且让 PolyOps.h 包含它\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // // /include/mlir-learning/Dialect/Poly/PolyOps.h #ifndef LIB_DIALECT_POLY_POLYTRAITS_H_ #define LIB_DIALECT_POLY_POLYTRAITS_H_ #include \u0026#34;mlir/include/mlir/IR/OpDefinition.h\u0026#34; namespace mlir::tutorial::poly { template \u0026lt;typename ConcreteType\u0026gt; class Has32BitArguments : public OpTrait::TraitBase\u0026lt;ConcreteType, Has32BitArguments\u0026gt; { public: static LogicalResult verifyTrait(Operation *op) { for (auto type : op-\u0026gt;getOperandTypes()) { // OK to skip non-integer operand types if (!type.isIntOrIndex()) continue; if (!type.isInteger(32)) { return op-\u0026gt;emitOpError() \u0026lt;\u0026lt; \u0026#34;requires each numeric operand to be a 32-bit integer\u0026#34;; } } return success(); } }; } #endif // LIB_DIALECT_POLY_POLYTRAITS_H_ 这样做的优点是具有更强的通用性，但缺点是需要进行繁琐的类型转换来支持特定的操作及其命名参数。例如，这里我们无法直接调用 getPoint，除非对操作进行动态转换为 EvalOp.\n","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch7-verifiers/","summary":"Personal MLIR learning notes 7.","title":"MLIR-Ch7 Verifiers"},{"content":"Constant Propagation vs Canonicalization -sccp Sparse Conditional Constant Propagation 是稀疏条件常数传播，它试图推断 op 何时具有常量输出，然后用常量值替换 op 。重复这个过程，它在程序中尽可能地“传播”这些常量。\n例如对于如下的函数\n1 2 3 4 5 6 7 8 func.func @test_arith_sccp() -\u0026gt; i32 { %0 = arith.constant 7 : i32 %1 = arith.constant 8 : i32 %2 = arith.addi %0, %0 : i32 %3 = arith.muli %0, %0 : i32 %4 = arith.addi %2, %3 : i32 return %2 : i32 } -sccp 优化后的结果如下：\n1 2 3 4 5 6 7 8 func.func @test_arith_sccp() -\u0026gt; i32 { %c63_i32 = arith.constant 63 : i32 %c49_i32 = arith.constant 49 : i32 %c14_i32 = arith.constant 14 : i32 %c8_i32 = arith.constant 8 : i32 %c7_i32 = arith.constant 7 : i32 return %c14_i32 : i32 } 需要注意的是：sccp 不会删除死代码；这里没有展示的是 sccp 的主要作用，它可以通过控制流 (if 或者 loop) 传播常量。\n一个相关的概念是 canonicalization，--canonicalize pass 隐藏了 MLIR 中的许多繁重工作。它与 sccp 有一点重叠，因为它也计算常量并在 IR 中具体化它们。例如，在上面的 IR 上使用 ——canonicalize pass 的结果如下\n1 2 3 4 func.func @test_arith_sccp() -\u0026gt; i32 { %c14_i32 = arith.constant 14 : i32 return %c14_i32 : i32 } 中间的常量都被修剪掉了，剩下的只是返回值，没有任何 op. 规范化不能通过控制流传播常量。\n这两者都是通过折叠 (folding) 来支持的，折叠是采取一系列 op 并将它们合并在一起为更简单的 op 的过程。它还要求我们的方言具有某种常量 op ，该 op 与折叠的结果一起插入。\n以这种方式支持折叠所需的大致步骤是：\n添加一个常量 op. 添加实例化钩子。 为每个 op 添加 folders. Making a Constant Operation 我们目前只支持通过 from_tensor op 从 arith.constant 创建常量。\n1 2 %0 = arith.constant dense\u0026lt;[1, 2, 3]\u0026gt; : tensor\u0026lt;3xi32\u0026gt; %p0 = poly.from_tensor %0 : tensor\u0026lt;3xi32\u0026gt; -\u0026gt; !poly.poly\u0026lt;10\u0026gt; 一个常量 op 可以将上述两个操作简化成一个 op. from_tensor op 还可以用于根据数据 (而不仅仅是常数) 构建一个多项函数，因此即使在我们实现了 poly.constant 之后，它也应该保留。\n1 %0 = poly.constant dense\u0026lt;[2, 8, 20, 24, 18]\u0026gt; : !poly.poly\u0026lt;10\u0026gt; fold 可以用于向 sccp 等 pass 传递信号，表明 op 的结果是常量，或者它可以用于说 op 的结果等效于由不同 op 创建的预先存在的值。对于常量的情况，还需要一个 materializeConstant 钩子来告诉 MLIR 如何获取常量结果并将其转化为适当的 IR op. 常量 op 的定义如下\ndef Poly_ConstantOp: Op\u0026lt;Poly_Dialect, \u0026#34;constant\u0026#34;, [Pure, ConstantLike]\u0026gt; {\rlet summary = \u0026#34;Define a constant polynomial via an attribute.\u0026#34;;\rlet arguments = (ins AnyIntElementsAttr:$coefficients);\rlet results = (outs Polynomial:$output);\rlet assemblyFormat = \u0026#34;$coefficients attr-dict `:` type($output)\u0026#34;;\r} ConstantLike trait 标记的 op 被视为常量值生成 op ，可以在编译时进行常量折叠等优化。arguments 定义 op 的输入是一个具有 AnyIntElementsAttr 的值，使得 op 可以处理任意包含整数的集合，而不仅仅是特定位宽的整数。\nAdding Folders 我们为定义的 op 都加上 let hasFolder = 1; 它在 .hpp.inc 中添加了如下形式的声明。FoldAdaptor 定义为 GenericAdaptor 类型的别名，而 GenericAdaptor 包含了一个 Attribute 数组的引用，这个数组提供了对 op 属性的访问接口。\nAttribute 类的核心作用是：\n表示常量值：Attribute 用于表示操作的静态、不可变的常量值，例如整数、浮点数、字符串、类型信息等。这些值在编译期已知且不可更改。 支持编译器优化：通过提供常量值的表示，Attribute 支持 MLIR 的优化流程，如折叠 (folding) 、规范化 (canonicalization), 常量传播 (constant propagation) 等。 跨方言的通用接口：Attribute 是一个抽象接口，允许不同方言 (dialects) 定义自己的常量表示，同时通过统一的 API 进行操作。 轻量级和高效：Attribute 是一个值类型 (passed by value) ，内部仅存储指向底层存储的指针，依赖 MLIRContext 的唯一化机制 (uniquing) 确保内存效率和一致性。 1 2 3 using FoldAdaptor = GenericAdaptor\u0026lt;::llvm::ArrayRef\u0026lt;::mlir::Attribute\u0026gt;\u0026gt;; ::mlir::OpFoldResult fold(FoldAdaptor adaptor); 我们需要在 PolyOps.cpp 中实现这个函数。如果 fold 方法决定 op 应被替换为一个常量，则必须返回一个表示该常量的 Attribute，该属性可以作为 poly.constant 操作的输入。FoldAdaptor 是一个适配器，它具有与操作的 C++ 类实例相同的方法名称，但对于那些已经被折叠的参数，会用表示其折叠结果常量的 Attribute 实例替换。这在折叠加法和乘法操作时尤为重要，因为折叠的实现需要立即计算结果，并且需要访问实际的数值来完成计算。\n对于 poly.constant 我们只需要返回输入的 attribute.\n1 2 3 OpFoldResult ConstantOp::fold(ConstantOp::FoldAdaptor adaptor) { return adaptor.getCoefficients(); } 对于 from_tensor 我们需要有一个额外的强制转换作为断言，因为张量可能是用我们不希望作为输入的奇怪类型构造的。如果 dyn_cast 结果是 nullptr， MLIR 将其强制转换为失败的 OpFoldResult.\n1 2 3 4 OpFoldResult FromTensorOp::fold(FromTensorOp::FoldAdaptor adaptor) { // Returns null if the cast failed, which corresponds to a failed fold. return dyn_cast\u0026lt;DenseIntElementsAttr\u0026gt;(adaptor.getInput()); } BinOp 稍微复杂一些，因为这些 fold 方法中的每一个 op 都接受两个 DenseIntElementsAttr 作为输入，并期望我们为结果返回另一个 DenseIntElementsAttr.\n对于 elementwise op 的 add/sub，我们可以使用现有的方法 constFoldBinaryOp，它通过一些模板元编程技巧，允许我们只指定元素 op 本身。\n1 2 3 4 OpFoldResult AddOp::fold(AddOp::FoldAdaptor adaptor) { return constFoldBinaryOp\u0026lt;IntegerAttr, APInt\u0026gt;( adaptor.getOperands(), [\u0026amp;](APInt a, APInt b) { return a + b; }); } 对于 mul，我们手动的通过循环计算每个系数。getResult() 方法来自于 OneTypedResult 类模板及其内部类 Impl 是一个 MLIR Trait，它主要用于那些返回单一特定类型结果的 op 。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 OpFoldResult MulOp::fold(MulOp::FoldAdaptor adaptor) { auto lhs = llvm::dyn_cast\u0026lt;DenseIntElementsAttr\u0026gt;(adaptor.getOperands()[0]); auto rhs = llvm::dyn_cast\u0026lt;DenseIntElementsAttr\u0026gt;(adaptor.getOperands()[1]); if (!lhs || !rhs) { return nullptr; } auto degree = mlir::cast\u0026lt;PolynomialType\u0026gt;(getResult().getType()).getDegreeBound(); auto maxIndex = lhs.size() + rhs.size() - 1; SmallVector\u0026lt;llvm::APInt, 8\u0026gt; results; results.reserve(maxIndex); for (int64_t i = 0; i \u0026lt; maxIndex; i++) { results.push_back(APInt((*lhs.begin()).getBitWidth(), 0)); } int64_t i = 0; for (auto lhsIt = lhs.value_begin\u0026lt;APInt\u0026gt;(); lhsIt != lhs.value_end\u0026lt;APInt\u0026gt;(); lhsIt++) { int64_t j = 0; for (auto rhsIt = rhs.value_begin\u0026lt;APInt\u0026gt;(); rhsIt != rhs.value_end\u0026lt;APInt\u0026gt;(); rhsIt++) { results[(i + j) % degree] += (*lhsIt) * (*rhsIt); j++; } i++; } return DenseIntElementsAttr::get( RankedTensorType::get(static_cast\u0026lt;int64_t\u0026gt;(results.size()), mlir::IntegerType::get(getContext(), 32)), results); } Adding a Constant Materializer 最后我们添加常量实例化函数，这是一个 dialect 级别的特性，我们在 PolyDialect.td 中添加 let hasConstantMaterializer = 1; 则会在 .hpp.inc 中添加如下形式的声明。\n1 2 3 4 ::mlir::Operation *materializeConstant(::mlir::OpBuilder \u0026amp;builder, ::mlir::Attribute value, ::mlir::Type type, ::mlir::Location loc) override; 该函数作用是将给定 Attribute (上面每个折叠步骤的结果) 的单个常量 op 实例化为所需的结果 Type.\n1 2 3 4 5 6 7 Operation *PolyDialect::materializeConstant( OpBuilder \u0026amp;builder, Attribute value, Type type, Location loc) { auto coeffs = dyn_cast\u0026lt;DenseIntElementsAttr\u0026gt;(value); if (!coeffs) return nullptr; return builder.create\u0026lt;ConstantOp\u0026gt;(loc, type, coeffs); } ","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch6-folders-and-constant-propagation/","summary":"Personal MLIR learning notes 6.","title":"MLIR-Ch6 Folders and Constant Propagation"},{"content":"Traits and Loop Invariant Code Motion 为了提高代码重用性，MLIR 提供了 Traits 和 Interfaces Traits，用于增强 op (Operation) 或类型的功能，提供结构化的约束和功能接口，方便在编译优化和生成过程中进行更强大和灵活的 op 。\nTraits 是一种机制，用于抽象出多个不同属性、 op 或类型之间共同的实现细节和特性。可用于指定对象的特殊属性和约束，例如 op 是否具有副作用，或其输出类型是否与输入类型相同。Traits 将特定的行为或限制抽象出来，使这些行为可以复用在不同的对象上，而不需要在每个对象中重复实现相同的逻辑。\nInterfaces 是一种通用的机制，用于与 IR 进行交互。它们的目标是使转换或分析可以基于这些接口进行，而无需了解具体的 op 或 dialect 的内部实现。通过这种方法，编译器可以在实现转换和分析时不依赖于特定 dialect 或 op ，从而更轻松地扩展编译器的功能。\nLoop Invariant Code Motion 是 MLIR 提供的 General Transform Passes 之一。它会检查循环体中的 op ，如果发现某些 op 在循环内部执行没有必要（即它们的结果在每次循环中保持不变），就会将这些 op 移出循环体。这可以减少循环中的重复计算，提高效率。\n要让某个自定义 op 可以被这种 pass 识别并移出循环体，需要添加两个关键的 Traits 来表明该 op 在循环外执行是安全的：\nNoMemoryEffect: 是 MemoryEffect 的一个 empty 实现，表示该 op 不会产生任何与内存写入相关的副作用。 AlwaysSpeculatable: 是一个包含两个 Traits 的 列表，告诉编译器该 op 可以在不影响程序逻辑的前提下，将其提前计算或移动到其他位置。 在 MLIR 中，Loop Invariant Code Motion (LICM) 会将具有 NoMemoryEffect 和 AlwaysSpeculatable 这两个 Traits 的 op 移动到循环体外部，但前提是该 op 的 operands 在整个循环体中保持不变。这样可以避免循环内部的重复计算，从而优化代码执行效率。MLIR 提供了一个方便的组合 Trait Pure，它包含了 NoMemoryEffect 和 AlwaysSpeculatable 这两个 Traits. 因此，直接添加 Pure Trait 到 op 的定义中就能让编译器自动识别它为可移动到循环外部的 op 。\nTypeOrContainer 是一个用于处理 op 输入和输出类型的机制，它可以匹配单个类型 (如 f32 或 i32) 以及容器类型(如 vector\u0026lt;f32\u0026gt; 或 tensor\u0026lt;i32\u0026gt;)，使得一个 op 可以被设计为同时支持标量类型和集合类型。\ninclude \u0026#34;mlir/Interfaces/SideEffectInterfaces.td\u0026#34;\rdef PolyOrContainer: TypeOrContainer\u0026lt;Polynomial, \u0026#34;poly-or-container\u0026#34;\u0026gt;;\rclass Poly_BinOp\u0026lt;string mnemonic\u0026gt;: Op\u0026lt;Poly_Dialect, mnemonic, [Pure]\u0026gt; {\rlet arguments = (ins PolyOrContainer:$lhs, PolyOrContainer:$rhs);\rlet results = (outs PolyOrContainer:$output);\rlet assemblyFormat = \u0026#34;$lhs `,` $rhs attr-dict `:` `(` type($lhs) `,` type($rhs) `)` `-\u0026gt;` type($output)\u0026#34;;\r} 加入 Pure trait 后生成的 .hpp.inc 中关于 op 的定义继承了新的内容\n1 2 3 4 5 6 7 8 9 10 11 class AddOp : public ::mlir::Op\u0026lt; AddOp, ::mlir::OpTrait::ZeroRegions, ::mlir::OpTrait::OneResult, ::mlir::OpTrait::OneTypedResult\u0026lt;::mlir::tutorial::poly::PolynomialType\u0026gt;::Impl, ::mlir::OpTrait::ZeroSuccessors, ::mlir::OpTrait::NOperands\u0026lt;2\u0026gt;::Impl, ::mlir::OpTrait::OpInvariants, ::mlir::ConditionallySpeculatable::Trait, // \u0026lt;-- new ::mlir::OpTrait::AlwaysSpeculatableImplTrait, // \u0026lt;-- new ::mlir::MemoryEffectOpInterface::Trait\u0026gt; // \u0026lt;--- new NoMemoryEffect interface 则在生成的 .cpp.inc 中添加了一个简单的函数\n1 2 3 4 5 void AddOp::getEffects( ::llvm::SmallVectorImpl\u0026lt; ::mlir::SideEffects::EffectInstance\u0026lt;::mlir::MemoryEffects::Effect\u0026gt;\u0026gt;\u0026amp; effects) { } 我们可以写一个 .mlir 来测试 %2 的计算是否能优化到循环外：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // RUN: build/Ch4-UsingTraits/tools/ch4-tutorial-opt %s --loop-invariant-code-motion \u0026gt; %t // RUN: FileCheck %s \u0026lt; %t module { // CHECK-LABEL: func.func @test_loop_invariant_code_motion func.func @test_loop_invariant_code_motion() -\u0026gt; !poly.poly\u0026lt;10\u0026gt; { %0 = arith.constant dense\u0026lt;[1,2,3]\u0026gt; : tensor\u0026lt;3xi32\u0026gt; %p0 = poly.from_tensor %0 : tensor\u0026lt;3xi32\u0026gt; -\u0026gt; !poly.poly\u0026lt;10\u0026gt; %1 = arith.constant dense\u0026lt;[9,8,16]\u0026gt; : tensor\u0026lt;3xi32\u0026gt; %p1 = poly.from_tensor %0 : tensor\u0026lt;3xi32\u0026gt; -\u0026gt; !poly.poly\u0026lt;10\u0026gt; // CHECK: poly.mul // CHECK: affine.for %ret_val = affine.for %i = 0 to 100 iter_args(%sum_iter = %p0) -\u0026gt; !poly.poly\u0026lt;10\u0026gt; { // The polt.mul should be hoisted out of the loop. // CHECK-NOT: poly.mul %2 = poly.mul %p0, %p1 : (!poly.poly\u0026lt;10\u0026gt;, !poly.poly\u0026lt;10\u0026gt;) -\u0026gt; !poly.poly\u0026lt;10\u0026gt; %sum_next = poly.add %sum_iter, %2 : (!poly.poly\u0026lt;10\u0026gt;, !poly.poly\u0026lt;10\u0026gt;) -\u0026gt; !poly.poly\u0026lt;10\u0026gt; affine.yield %sum_next : !poly.poly\u0026lt;10\u0026gt; } return %ret_val: !poly.poly\u0026lt;10\u0026gt; } } Passes Already Handled by Pure 给某个 op 加上 Pure Trait 后，下列 Pass 就会自动识别并优化该 op ：\n--control-flow-sink: 将只在条件语句的某一个分支中使用的 op 移动到对应的分支中，以减少无效代码的执行。需要 op 无内存副作用 (memory-effect free)，通常可以通过 Pure Trait 来满足。 --cse (Constant Subexpression Elimination): 常量子表达式消除。当某些重复的计算结果已经存在时，消除不必要的重复计算，提高效率。需要 op 没有内存副作用（memory-effect free），因此 Pure Trait 也可以满足这一要求。 --inline: 将函数调用“内联”到调用位置，以减少函数调用的开销。在某些情况下，这可以减少调用栈的深度或优化代码执行的性能。 --mem2reg: 将内存中的存储/加载 op 转换为对实际值的直接使用，从而减少内存访问，提高运行效率。 --remove-dead-values: 移除未使用的函数参数或返回值，以减少不必要的数据传递或内存占用。 --sroa (Scalar Replacement of Aggregates): 将聚合类型（例如数组或结构体）拆分为标量值，通常会对内存布局进行重排，以便更好地利用内存。 --symbol-dce (Symbol Dead Code Elimination): 消除不再使用的私有函数 (死代码)，减少不必要的代码量。 Elementwise Mappings 有四种 traits 可以把标量运算扩展到张量运算或者反过来\nElemntwise: 标记逐元素的 op ，仅适用于向量或张量，不允许广播。\n如果任何结果是向量或张量，至少有一个 operand 必须是向量或张量。 如果任何 operand 是向量或张量，至少有一个结果并且所有结果必须是向量或张量。 所有 operand 和结果的向量或张量类型必须具有相同的形状。形状可以是动态的，但对于不匹配的形状，行为是未定义的。 该 op 必须在 operand 和结果上逐元素进行，即在单元素向量或张量上应用时，每个元素的结果应相同。 Scalarizable: 标记和验证某些操作是否可以被系统性地标量化，即将其基于向量或张量的操作转化为基于标量的操作。只要操作是 Elementwise 的，Scalarizable 就可以使用。\n%tensor_select = \u0026#34;arith.select\u0026#34;(%pred_tensor, %true_val, %false_val) : (tensor\u0026lt;?xi1\u0026gt;, tensor\u0026lt;?xf32\u0026gt;, tensor\u0026lt;?xf32\u0026gt;) -\u0026gt; tensor\u0026lt;?xf32\u0026gt; // Can be scalarized to %scalar_select = \u0026#34;arith.select\u0026#34;(%pred, %true_val_scalar, %false_val_scalar) : (i1, f32, f32) -\u0026gt; f32 Vectorizable: 提供了与 Scalarizable 相反的 op 。所有的标量 operand 和结果将被替换为相应的向量类型。即，该 op 表示同时作用于多个元素。允许通过广播将标量提升为向量，再进行向量化操作。\nTensorizable: 提供了与 Scalarizable 相反的 op ，允许在张量和标量之间进行推理。允许通过广播将标量提升为张量，以便在张量 op 中保持一致的 op 结构。\n%scalar = \u0026#34;arith.addf\u0026#34;(%a, %b) : (f32, f32) -\u0026gt; f32 // Can be tensorized to %tensor = \u0026#34;arith.addf\u0026#34;(%a, %b) : (tensor\u0026lt;?xf32\u0026gt;, tensor\u0026lt;?xf32\u0026gt;) -\u0026gt; tensor\u0026lt;?xf32\u0026gt; // Also supports broadcasting %scalar_pred = \u0026#34;arith.select\u0026#34;(%pred, %true_val, %false_val) : (i1, tensor\u0026lt;?xf32\u0026gt;, tensor\u0026lt;?xf32\u0026gt;) -\u0026gt; tensor\u0026lt;?xf32\u0026gt; // Can be tensorized to %tensor_pred = \u0026#34;arith.select\u0026#34;(%pred, %true_val, %false_val) : (tensor\u0026lt;?xi1\u0026gt;, tensor\u0026lt;?xf32\u0026gt;, tensor\u0026lt;?xf32\u0026gt;) -\u0026gt; tensor\u0026lt;?xf32\u0026gt; ElementwiseMappable Trait 包含了以上所有的 Traits. 我们可以修改 Poly_BinOp 定义如下：\n// PolyOps.td\rdef PolyOrContainer : TypeOrContainer\u0026lt;Polynomial, \u0026#34;poly-or-container\u0026#34;\u0026gt;;\rclass Poly_BinOp\u0026lt;string mnemonic\u0026gt; : Op\u0026lt;Poly_Dialect, mnemonic, [Pure, ElementwiseMappable]\u0026gt; {\rlet arguments = (ins PolyOrContainer:$lhs, PolyOrContainer:$rhs);\rlet results = (outs PolyOrContainer:$output);\r...\r} 添加这个 Trait 后，生成的 .cpp.inc 文件定义了许多检查 op 数类型的函数，下面是其中一个：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 static ::llvm::LogicalResult __mlir_ods_local_type_constraint_PolyOps1( ::mlir::Operation* op, ::mlir::Type type, ::llvm::StringRef valueKind, unsigned valueIndex) { if (!(((::llvm::isa\u0026lt;::mlir::tutorial::poly::PolynomialType\u0026gt;(type))) || (((type.hasTrait\u0026lt;::mlir::ValueSemantics\u0026gt;())) \u0026amp;\u0026amp; ([](::mlir::Type elementType) { return (::llvm::isa\u0026lt;::mlir::tutorial::poly::PolynomialType\u0026gt;( elementType)); }(::llvm::cast\u0026lt;::mlir::ShapedType\u0026gt;(type).getElementType()))))) { return op-\u0026gt;emitOpError(valueKind) \u0026lt;\u0026lt; \u0026#34; #\u0026#34; \u0026lt;\u0026lt; valueIndex \u0026lt;\u0026lt; \u0026#34; must be poly-or-container, but got \u0026#34; \u0026lt;\u0026lt; type; } return ::mlir::success(); } 该函数首先检查 type 是否为 PolynomialType；如果不是，则进一步检查它是否具有 ValueSemantics Trait，并且是一个 ShapedType（即容器类型，如 vector 或 tensor），其中包含的元素类型是 PolynomialType.\n","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch5-using-traits/","summary":"Personal MLIR learning notes 5.","title":"MLIR-Ch5 Using Traits"},{"content":"Sketching Out a Dseign TableGen 也可以用来定义 dialect. 本文将定义一个单未知数多项式运算的 dialect，系数用 uint32_t 类型表示。，并提供通过从标准 MLIR 类型指定多项式系数来定义多项式的操作，提取关于多项式的数据以将结果存储在标准MLIR类型中，以及对多项式进行算术运算。\nAn Empty Dialect 我们首先用 TableGen 定义一个空的 dialect. 它和上一章定义 Pass 没什么不同，只不过 include 的是 DialectBase.td 文件。同时也定义了命名空间为 ::mlir::tutorial::poly.\n1 2 3 4 5 6 7 8 9 10 11 12 include \u0026#34;mlir/IR/DialectBase.td\u0026#34; def Poly_Dialect : Dialect { let name = \u0026#34;poly\u0026#34;; let summary = \u0026#34;A dialect for polynomial math\u0026#34;; let description = [{ The poly dialect defines types and operations for single-variable polynomials over integers. }]; let cppNamespace = \u0026#34;::mlir::tutorial::poly\u0026#34;; } 我们需要在 include 目录下的 CMakeLists.txt 文件中添加\n1 2 3 4 5 set(TARGET_NAME \u0026#34;${PROJECT_TARGET_PREFIX}-Dialect-PolyDialect-IncGen\u0026#34;) set(LLVM_TARGET_DEFINITIONS mlir-learning/Dialect/Poly/PolyDialect.td) mlir_tablegen(mlir-learning/Dialect/Poly/PolyDialect.hpp.inc --gen-dialect-decls) mlir_tablegen(mlir-learning/Dialect/Poly/PolyDialect.cpp.inc --gen-dialect-defs) add_public_tablegen_target(${TARGET_NAME}) 然后在 tutorial-opt.cpp 中注册所有 mlir 自带的所有 dialect 后进行构建，我们可以查看生成的 .hpp.inc 和.cpp.inc 文件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 namespace mlir { namespace tutorial { class PolyDialect : public ::mlir::Dialect { explicit PolyDialect(::mlir::MLIRContext *context); void initialize(); friend class ::mlir::MLIRContext; public: ~PolyDialect() override; static constexpr ::llvm::StringLiteral getDialectNamespace() { return ::llvm::StringLiteral(\u0026#34;poly\u0026#34;); } }; } // namespace tutorial } // namespace mlir MLIR_DECLARE_EXPLICIT_TYPE_ID(::mlir::tutorial::PolyDialect) 编译器会报错，因为 inc 不会包含 Dialect 等类所在的头文件。这需要我们自己在 PolyDialect.h 文件中进行 include，这样 当重新构建的时候该文件注入变不会报错\n1 2 3 4 5 6 7 8 9 // include/mlir-learning/Dialect/Poly/PolyDialect.h #ifndef LIB_DIALECT_POLY_POLYDIALECT_H #define LIB_DIALECT_POLY_POLYDIALECT_H #include \u0026#34;mlir/IR/DialectImplementation.h\u0026#34; // include mannually #include \u0026#34;mlir-learning/Dialect/Poly/PolyDialect.hpp.inc\u0026#34; #endif 生成的 .cpp.inc 如下，他只包含了该类基本的构造函数和析构函数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 MLIR_DEFINE_EXPLICIT_TYPE_ID(::mlir::tutorial::poly::PolyDialect) namespace mlir { namespace tutorial { namespace poly { PolyDialect::PolyDialect(::mlir::MLIRContext *context) : ::mlir::Dialect(getDialectNamespace(), context, ::mlir::TypeID::get\u0026lt;PolyDialect\u0026gt;()) { initialize(); } PolyDialect::~PolyDialect() = default; } // namespace poly } // namespace tutorial } // namespace mlir 然后我们可以在 tutorial-opt.cpp 中注册该 dialect.\n1 2 3 4 5 6 7 8 9 10 11 12 /* other includes */ #include \u0026#34;mlir-learning/Dialect/Poly/PolyDialect.h\u0026#34; int main(int argc, char** argv) { // Register all built-in MLIR dialects mlir::DialectRegistry registry; // Register our Dialect registry.insert\u0026lt;mlir::tutorial::poly::PolyDialect\u0026gt;(); mlir::registerAllDialects(registry); return mlir::asMainReturnCode( mlir::MlirOptMain(argc, argv, \u0026#34;Tutorial Pass Driver\u0026#34;, registry)); } Adding a Trival Type 下面我们需要定义自己的 poly.poly 类型.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // poly_types.td #ifndef LIB_DIALECT_POLY_POLYTYPES_TD_ #define LIB_DIALECT_POLY_POLYTYPES_TD_ include \u0026#34;mlir-learning/Dialect/Poly/PolyDialect.td\u0026#34; include \u0026#34;mlir/IR/AttrTypeBase.td\u0026#34; // a base class for all types in the dialect class Poly_Type\u0026lt;string name, string typeMnemonic\u0026gt; : TypeDef\u0026lt;Poly_Dialect, name\u0026gt; { let mnemonic = typeMnemonic; } def Polynomial: Poly_Type\u0026lt;\u0026#34;Polynomial\u0026#34;, \u0026#34;poly\u0026#34;\u0026gt; { let summary = \u0026#34;A polynomial with u32 coefficients\u0026#34;; let description = [{ A type for polynomials with integer coefficients in a single-variable polynomial ring. }]; } #endif 在 MLIR 的 TableGen 文件中，class 和 def 的用法和含义有所不同\nclass 用于定义一个模板或基类，可以被其他类型或定义继承和重用。它本身不会创建实际的对象或具体类型，它只是一种结构，可以包含参数和默认属性。其他定义可以通过继承该类来获得其功能。 def 用于创建一个具体的实例，比如一个类型、操作或属性。它会将所定义的内容应用到 TableGen 中，使其成为可用的具体类型或功能。 这里我们定义了一个名为 Poly_Type 的类，参数为 name（类型的名称）和 typeMnemonic（类型的简写或助记符）。这个类继承自 TypeDef\u0026lt;Poly_Dialect, name\u0026gt;. 然后 def 特定的多项式类型 Polynomial，继承自 Poly_Type.\n在 MLIR 的 TableGen 中，TypeDef 本身也是一个类，它接受模板参数，用于指定该类型所属的 dialect 和名称字段。其作用包括将生成的C++类与该 dialect 的命名空间相关联。\n生成的 .hpp.inc 文件如下。生成的类 PolynomialType 就是在我们的 TableGen 文件中定义的 Polynomial 类型后面加上了 Type.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #ifdef GET_TYPEDEF_CLASSES #undef GET_TYPEDEF_CLASSES namespace mlir { class AsmParser; class AsmPrinter; } // namespace mlir namespace mlir { namespace tutorial { namespace poly { class PolynomialType; class PolynomialType : public ::mlir::Type::TypeBase\u0026lt;PolynomialType, ::mlir::Type, ::mlir::TypeStorage\u0026gt; { public: using Base::Base; static constexpr ::llvm::StringLiteral name = \u0026#34;poly.poly\u0026#34;; static constexpr ::llvm::StringLiteral dialectName = \u0026#34;poly\u0026#34;; static constexpr ::llvm::StringLiteral getMnemonic() { return {\u0026#34;poly\u0026#34;}; } }; } // namespace poly } // namespace tutorial } // namespace mlir MLIR_DECLARE_EXPLICIT_TYPE_ID(::mlir::tutorial::poly::PolynomialType) #endif // GET_TYPEDEF_CLASSES 生成的 .cpp.inc 文件如下。TableGen 试图为 dialect 中的 PolynomialType 自动生成一个 类型解析器 (type parser) 和类型打印器 (type printer). 不过此时这些功能还不可用，构建项目时会看到一些编译警告。\n代码中使用了 头文件保护 (header guards) 来将 cpp 文件分隔为两个受保护的部分。这样可以分别管理类型声明和函数实现。\nGET_TYPEDEF_LIST 只包含类名的逗号分隔列表。原因在于 PolyDialect.cpp 文件需要负责将类型注册到 dialect 中，而该注册过程通过在方言初始化函数中将这些 C++ 类名作为模板参数来实现。换句话说，GET_TYPEDEF_LIST 提供了一种简化机制，使得 PolyDialect.cpp 可以自动获取所有类名称列表，便于统一注册，而不需要手动添加每一个类型。\ngeneratedTypeParser 函数是为 PolynomialType 定义的解析器。当解析器遇到 PolynomialType 的助记符（poly）时，会将 PolynomialType 类型实例化。KeywordSwitch 使用 getMnemonic() 来匹配 PolynomialType 的助记符（poly）。如果匹配成功，则调用 PolynomialType::get() 来获取类型实例。Default 子句在助记符不匹配时执行，记录未知的助记符，并返回 std::nullopt 表示解析失败。 generatedTypePrinter 函数为 PolynomialType 提供了打印功能。当类型为 PolynomialType 时，打印其助记符（poly），否则返回失败。TypeSwitch 用于检查 def 类型是否是 PolynomialType。如果是，打印助记符；否则返回失败，表示该类型不属于此方言。 PolyDialect::parseType 和 PolyDialect::printType 作为方言接口调用这两个函数，从而实现类型的解析和打印功能。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #ifdef GET_TYPEDEF_LIST #undef GET_TYPEDEF_LIST ::mlir::tutorial::poly::PolynomialType #endif // GET_TYPEDEF_LIST #ifdef GET_TYPEDEF_CLASSES #undef GET_TYPEDEF_CLASSES static ::mlir::OptionalParseResult generatedTypeParser(::mlir::AsmParser \u0026amp;parser, ::llvm::StringRef *mnemonic, ::mlir::Type \u0026amp;value) { return ::mlir::AsmParser::KeywordSwitch\u0026lt;::mlir::OptionalParseResult\u0026gt;(parser) .Case(::mlir::tutorial::poly::PolynomialType::getMnemonic(), [\u0026amp;](llvm::StringRef, llvm::SMLoc) { value = ::mlir::tutorial::poly::PolynomialType::get(parser.getContext()); return ::mlir::success(!!value); }) .Default([\u0026amp;](llvm::StringRef keyword, llvm::SMLoc) { *mnemonic = keyword; return std::nullopt; }); } static ::llvm::LogicalResult generatedTypePrinter(::mlir::Type def, ::mlir::AsmPrinter \u0026amp;printer) { return ::llvm::TypeSwitch\u0026lt;::mlir::Type, ::llvm::LogicalResult\u0026gt;(def) .Case\u0026lt;::mlir::tutorial::poly::PolynomialType\u0026gt;([\u0026amp;](auto t) { printer \u0026lt;\u0026lt; ::mlir::tutorial::poly::PolynomialType::getMnemonic(); return ::mlir::success(); }) .Default([](auto) { return ::mlir::failure(); }); } namespace mlir { namespace tutorial { namespace poly { } // namespace poly } // namespace tutorial } // namespace mlir MLIR_DEFINE_EXPLICIT_TYPE_ID(::mlir::tutorial::poly::PolynomialType) namespace mlir { namespace tutorial { namespace poly { /// Parse a type registered to this dialect. ::mlir::Type PolyDialect::parseType(::mlir::DialectAsmParser \u0026amp;parser) const { ::llvm::SMLoc typeLoc = parser.getCurrentLocation(); ::llvm::StringRef mnemonic; ::mlir::Type genType; auto parseResult = generatedTypeParser(parser, \u0026amp;mnemonic, genType); if (parseResult.has_value()) return genType; parser.emitError(typeLoc) \u0026lt;\u0026lt; \u0026#34;unknown type `\u0026#34; \u0026lt;\u0026lt; mnemonic \u0026lt;\u0026lt; \u0026#34;` in dialect `\u0026#34; \u0026lt;\u0026lt; getNamespace() \u0026lt;\u0026lt; \u0026#34;`\u0026#34;; return {}; } /// Print a type registered to this dialect. void PolyDialect::printType(::mlir::Type type, ::mlir::DialectAsmPrinter \u0026amp;printer) const { if (::mlir::succeeded(generatedTypePrinter(type, printer))) return; } } // namespace poly } // namespace tutorial } // namespace mlir #endif // GET_TYPEDEF_CLASSES 在设置 C++ 接口以使用 TableGen 文件时，通常会按照以下步骤来组织代码文件和包含关系。\nPolyTypes.h 是唯一被允许包含 PolyTypes.h.inc 的文件。 PolyTypes.cpp.inc 文件包含了 TableGen 为 PolyDialect 中的类型生成的实现。我们需要在 PolyDialect.cpp 中将其包含进去，以确保所有实现都能在该方言的主文件中使用。 PolyTypes.cpp 文件应该包含 PolyTypes.h，以便访问类型声明，并在该文件中实现所有需要的额外功能。 ./Ch3-DefiningANewDialect/\r├── CMakeLists.txt\r├── include\r│ ├── CMakeLists.txt\r│ └── mlir-tutorial\r│ └── Dialect\r│ └── Poly\r│ ├── PolyDialect.hpp\r│ ├── PolyDialect.td\r│ ├── PolyOps.hpp\r│ ├── PolyOps.td\r│ ├── PolyTypes.hpp\r│ └── PolyTypes.td\r├── lib\r│ ├── CMakeLists.txt\r│ └── Dialect\r│ └── Poly\r│ └── PolyDialect.cpp 为了让类型解析器和打印器能够正确编译和运行，需要最后在方言的 TableGen 文件中添加 let useDefaultTypePrinterParser = 1;，这个指令告诉 TableGen 使用默认的类型解析和打印器。当这个选项启用后，TableGen 会生成相应的解析和打印代码，并将这些实现作为 PolyDialect 类的成员函数。\n1 2 3 4 5 6 /// Parse a type registered to this dialect. ::mlir::Type parseType(::mlir::DialectAsmParser \u0026amp;parser) const override; /// Print a type registered to this dialect. void printType(::mlir::Type type, ::mlir::DialectAsmPrinter \u0026amp;os) const override; 我们可以写一个 .mlir 来测试属性是是否获取正确。在 MLIR 中自定义的 dialect 前都需要加上 !.\n1 2 3 4 5 // CHECK-LABEL: test_type_syntax func.func @test_type_syntax(%arg0: !poly.poly\u0026lt;10\u0026gt;) -\u0026gt; !poly.poly\u0026lt;10\u0026gt; { // CHECK: poly.poly return %arg0: !poly.poly\u0026lt;10\u0026gt; } Add a Poly Type Parameter 我们需要为多项式类型添加一个属性，表示它的次数上限。\n// include/mlir-tutorial/Dialect/Poly/PolyTypes.td\rlet parameters = (ins \u0026#34;int\u0026#34;:$degreeBound);\rlet assemblyFormat = \u0026#34;`\u0026lt;` $degreeBound `\u0026gt;`\u0026#34;; 第一行定义了类型的一个参数 degreeBound，类型为 int. 表示在实例化该类型时，用户可以指定一个整数值作为类型的参数。parameters 中的 (ins \u0026quot;int\u0026quot;:$degreeBound) 指定了输入参数的类型和名称，其中 int 是数据类型，$degreeBound 是参数的占位符。assemblyFormat 用于定义该类型在 MLIR 文本格式中的打印和解析格式。\u0026quot;\u0026lt;\u0026quot; $degreeBound \u0026quot;\u0026gt;\u0026quot; 表示该类型的参数会用尖括号包裹。第二行是必需的，因为现在一个 Poly 类型有了这个关联的数据，我们需要能够将它打印出来并从文本 IR 表示中解析它。\n加上这两行代码后进行 build 会发现多了一些新的内容。\nPolynomialType 有一个新的 int getDegreeBound() 方法，以及一个静态 get 工厂方法。 parse 和 print 升级为新格式。 有一个名为 typestorage 的新类，它包含 int 形参，并隐藏在内部细节名称空间中。 MLIR会自动生成简单类型的 storage 类，因为它们不需要复杂的内存管理。如果参数更复杂，就需要开发者手动编写 storage 类来定义构造、析构和其他语义。复杂的 storage 类需要实现更多细节，以确保类型能够在 MLIR 的 dialect 系统中顺利运行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // include/mlir-learning/Dialect/Poly/PolyTypes.hpp.inc static ::mlir::Type parse(::mlir::AsmParser \u0026amp;odsParser); void print(::mlir::AsmPrinter \u0026amp;odsPrinter) const; int getDegreeBound() const; // include/mlir-learning/Dialect/Poly/PolyTypes.cpp.inc struct PolynomialTypeStorage : public ::mlir::TypeStorage { /* lots of code */ }; PolynomialType PolynomialType::get(::mlir::MLIRContext *context, int degreeBound) { return Base::get(context, std::move(degreeBound)); } ::mlir::Type PolynomialType::parse(::mlir::AsmParser \u0026amp;odsParser) { /* code to parse the type */ } void PolynomialType::print(::mlir::AsmPrinter \u0026amp;odsPrinter) const { ::mlir::Builder odsBuilder(getContext()); odsPrinter \u0026lt;\u0026lt; \u0026#34;\u0026lt;\u0026#34;; odsPrinter.printStrippedAttrOrType(getDegreeBound()); odsPrinter \u0026lt;\u0026lt; \u0026#34;\u0026gt;\u0026#34;; } int PolynomialType::getDegreeBound() const { return getImpl()-\u0026gt;degreeBound; } Adding Some Simple Operations 下面我们定义一个简单的多项式加法操作\n// include/mlir-tutorial/Dialect/Poly/PolyOps.td\rinclude \u0026#34;PolyDialect.td\u0026#34;\rinclude \u0026#34;PolyTypes.td\u0026#34;\rdef Poly_AddOp : Op\u0026lt;Poly_Dialect, \u0026#34;add\u0026#34;\u0026gt; {\rlet summary = \u0026#34;Addition operation between polynomials.\u0026#34;;\rlet arguments = (ins Polynomial:$lhs, Polynomial:$rhs);\rlet results = (outs Polynomial:$output);\rlet assemblyFormat = \u0026#34;$lhs `,` $rhs attr-dict `:` `(` type($lhs) `,` type($rhs) `)` `-\u0026gt;` type($output)\u0026#34;;\r} 和刚才定义 types 非常相近，但基类是 Op，arguments 对应于操作的输入，assemblyFormat 更复杂。生成的 .hpp.inc 和 .cpp.inc 非常复杂。我们可以编写一个 .mlir 来测试。\n1 2 3 4 5 6 // CHECK-LABEL: test_add_syntax func.func @test_add_syntax(%arg0: !poly.poly\u0026lt;10\u0026gt;, %arg1: !poly.poly\u0026lt;10\u0026gt;) -\u0026gt; !poly.poly\u0026lt;10\u0026gt; { // CHECK: poly.add %0 = poly.add %arg0, %arg1 : (!poly.poly\u0026lt;10\u0026gt;, !poly.poly\u0026lt;10\u0026gt;) -\u0026gt; !poly.poly\u0026lt;10\u0026gt; return %0 : !poly.poly\u0026lt;10\u0026gt; } 生成的代码定义了以下几个方面：\nAdaptor Classes:\nAddOpGenericAdaptorBase 和 AddOpAdaptor: 提供了便捷的方式来访问操作的操作数 (operands) 和属性 (attributes)。它们在编写转换和重写模式时特别有用。 Properties Handling:\n诸如 setPropertiesFromAttr , getPropertiesAsAttr , computePropertiesHash 等函数是 MLIR 操作属性系统的接口。虽然在这个特定的 AddOp 实现中，有些函数可能是空实现或返回默认值，但它们是操作定义结构的一部分。 Builder Methods:\n多个重载的 AddOp::build 静态方法。这些方法用于在代码中以编程方式创建 AddOp 的实例。 Verification:\nAddOp::verifyInvariantsImpl() 和 AddOp::verifyInvariants() : 这些方法用于检查一个 AddOp 实例是否符合其定义。例如，它们会验证操作数的数量和类型是否正确，结果类型是否符合预期。代码中调用了像 __mlir_ods_local_type_constraint_PolyOps2 这样的辅助函数来进行类型约束检查。 Assembly Format Parsing and Printing:\nAddOp::parse(::mlir::OpAsmParser\u0026amp; parser, ::mlir::OperationState\u0026amp; result) : 这个方法定义了如何从 MLIR 的文本汇编格式中解析出 AddOp 。当 MLIR 工具读取 .mlir 文件时，会调用此方法。 AddOp::print(::mlir::OpAsmPrinter\u0026amp; _odsPrinter) : 这个方法定义了如何将 AddOp 实例打印成 MLIR 的文本汇编格式。 Type ID Definition:\nMLIR_DEFINE_EXPLICIT_TYPE_ID(::mlir::tutorial::poly::AddOp) : 这个宏用于 MLIR 的运行时类型信息 (RTTI) 系统，为 AddOp 类型生成一个唯一的标识符。 ","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch4-defining-a-new-dialect/","summary":"Personal MLIR learning notes 4.","title":"MLIR-Ch4 Defining a New Dialect"},{"content":"What is Tablegen? TableGen 是一个用于生成代码和描述结构的 DSL 和工具，最初由 LLVM 开发，后来被 MLIR 继承并扩展。它主要用于以声明式的方式定义和生成 MLIR 的各种组件，例如 Dialects、Operations、Attributes、Types 和 Passes，从而减少手动编写重复性 C++ 代码的工作量。\nmlir-tablegen 并没有清楚地告诉你哪些函数没有实现，也没有解释必须编写的函数。确定缺失内容的主要方法是尝试用一些使用它的代码来构建生成的代码，然后筛选数百行 c++ 编译器错误，这反过来又需要了解生成代码中的各种模板操作。生成的代码将使用必须知道的符号，以便在正确的位置导入或提前声明，并且它要求管理生成的代码所在的名称空间。\nTablegen Files and the mlir-tblgen Binary TableGen 允许你定义变量，并且这些变量可以在多个定义中重复使用。\nTableGen允许你在定义中嵌入C++代码片段。这些代码片段会被插入到TableGen生成的C++类中，并且这些C++代码片段可以访问前面定义的变量。这使得TableGen能够生成高度定制化的C++代码。如果需要为你的 pass 编写特殊的构造函数，就可以在 PassBase.td中用 TableGen 的语法写下相应的 C++ 代码。\n下面给出了一个以 tablegen 语法重写上一章的 AffineFullUnroll pass 的例子\n1 2 3 4 5 6 7 8 9 10 // mlir-learning/Transform/Affine/Pass.td include \u0026#34;mlir/Pass/PassBase.td\u0026#34; def AffineFullUnroll : Pass\u0026lt;\u0026#34;affine-full-unroll\u0026#34;\u0026gt; { let summary = \u0026#34;Fully unroll all affine loops\u0026#34;; let description = [{ Fully unroll all affine loops. (could add more docs here like code examples) }]; let dependentDialects = [\u0026#34;mlir::affine::AffineDialect\u0026#34;]; } TableGen 拥有类似的类和继承的概念。: Pass\u0026lt;...\u0026gt; 表示一个类继承自 PassBase.td 文件中定义的 Pass 基类\ndef 用于定义一个具体实例，它会生成对应的 C++ 代码。 也就是说，使用 def 定义的类实例会被 TableGen 处理，最终转换成实际的代码，而仅仅使用 class 定义的类则不会直接生成代码，只作为模板或基类存在。\n上面代码说明 TableGen 允许定义字符串变量和列表。 TableGen 还有一个重要功能：它允许定义变量并在多个定义中复用这些变量，还可以定义 C++ 代码片段，并将这些片段插入到生成的类中。 这些 C++ 代码片段可以使用前面定义的变量。例如 PassBase.td 类定义了一个代码构造函数变量。 如果需要为你的 Pass 类编写特殊的构造函数，可以在 PassBase.td 中编写相应的 C++ 代码。 这意味着 TableGen 不仅仅是简单的文本替换，它能够处理更复杂的代码生成逻辑，包括变量的跨定义使用和 C++ 代码的嵌入。\n和上一章不同的是，这次我们也需要在 include 目录下写一个 CMakeLists.txt\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 set(TARGET_NAME \u0026#34;${PROJECT_TARGET_PREFIX}-Transform-Affine-Passes-IncGen\u0026#34;) set(LLVM_TARGET_DEFINITIONS mlir-learning/Transform/Affine/Pass.td) mlir_tablegen(mlir-learning/Transform/Affine/Pass.h.inc -gen-pass-decls -name=Affine) mlir_tablegen(mlir-learning/Transform/Affine/Pass.md -gen-pass-doc) add_public_tablegen_target(${TARGET_NAME}) set( ALL_TABLEGEN_TARGETS ${PROJECT_TARGET_PREFIX}-Transform-Affine-Passes-IncGen #${PROJECT_TARGET_PREFIX}-Transform-Arith-Passes-IncGen ) # Add the generated files to a global property, so they can be used in the library set_property( GLOBAL PROPERTY ${PROJECT_TARGET_PREFIX}-TABLEGEN-TARGETS ${ALL_TABLEGEN_TARGETS} ) set(LLVM_TARGET_DEFINITIONS mlir-learning/Transform/Affine/Pass.td): 这行代码设置了 TableGen 的输入文件。 mlir_tablegen(mlir-learning/Transform/Affine/Pass.h.inc -gen-pass-decls -name=Affine): 这行调用了 mlir_tablegen 命令，它将 Pass.td 文件作为输入，生成一个名为 Pass.h.inc 的头文件，其中包含 Pass 的声明 (-gen-pass-decls)，并且命名空间为 Affine (-name=Affine). mlir_tablegen(mlir-learning/Transform/Affine/Pass.md -gen-pass-doc): 这行同样调用 mlir_tablegen，生成一个名为 Pass.md 的文件，包含 Pass 的文档信息 (-gen-pass-doc). add_public_tablegen_target(${TARGET_NAME}): 这行代码将 TableGen 生成的目标添加到 CMake 项目中，使其成为一个公共目标，其他部分可以依赖它。 set(ALL_TABLEGEN_TARGETS ...): 这行代码定义了一个列表 ALL_TABLEGEN_TARGETS，包含所有 TableGen 生成的目标。 set_property(GLOBAL PROPERTY ...): 这行代码将所有 TableGen 生成的目标添加到全局属性 ${PROJECT_TARGET_PREFIX}-TABLEGEN-TARGETS} 中。 使得构建系统能够跟踪和管理所有由 TableGen 生成的文件，确保它们被正确地包含在库或可执行文件中。 .inc Files 我们同样创建和上一章相同的文件 (可以先不写)，需要注意的是由于 TableGen 生成的 .inc 文件位于构建目录下，在 lib 的 CMakeLists.txt 中我们需要在 target_include_directories 命令中加入 ${CMAKE_OUTPUT_DIR}/include\n下面我们来逐段看生成的 .inc 文件\n头部保护和条件编译 1 2 3 4 5 6 7 //===----------------------------------------------------------------------===// // AffineFullUnroll //===----------------------------------------------------------------------===// #ifdef GEN_PASS_DECL_AFFINEFULLUNROLL std::unique_ptr\u0026lt;::mlir::Pass\u0026gt; createAffineFullUnroll(); #undef GEN_PASS_DECL_AFFINEFULLUNROLL #endif // GEN_PASS_DECL_AFFINEFULLUNROLL 这部分代码使用了预处理宏 GEN_PASS_DECL_AFFINEFULLUNROLL。 如果这个宏被定义，则编译器会生成 createAffineFullUnroll() 函数的声明。\nPass 的实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #ifdef GEN_PASS_DEF_AFFINEFULLUNROLL namespace impl { std::unique_ptr\u0026lt;::mlir::Pass\u0026gt; createAffineFullUnroll(); } // namespace impl namespace impl { template \u0026lt;typename DerivedT\u0026gt; class AffineFullUnrollBase : public ::mlir::OperationPass\u0026lt;\u0026gt; { // ... (Pass 的方法定义) ... }; } // namespace impl std::unique_ptr\u0026lt;::mlir::Pass\u0026gt; createAffineFullUnroll() { return impl::createAffineFullUnroll(); } #undef GEN_PASS_DEF_AFFINEFULLUNROLL #endif // GEN_PASS_DEF_AFFINEFULLUNROLL 这部分是 Pass 的主要实现。它使用了 GEN_PASS_DEF_AFFINEFULLUNROLL 宏来控制编译。如果该宏被定义，则编译器会编译 AffineFullUnrollBase 类以及 createAffineFullUnroll 函数。\nAffineFullUnrollBase 是一个基类模板，使用 CRTP (Curiously Recurring Template Pattern) 技术，允许派生类通过 DerivedT 获取自身的类型信息。 这是一种常见的 C++ 设计模式，用于实现静态多态。它定义了 Pass 的基本信息，例如名称、描述、命令行参数、依赖的 Dialect (这里是 mlir::affine::AffineDialect). createAffineFullUnroll 函数负责创建 AffineFullUnroll Pass 的实例。 它使用了 impl 命名空间，这是一种常见的 C++ 代码组织方式，用于隐藏实现细节。 Pass 注册 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #ifdef GEN_PASS_REGISTRATION //===----------------------------------------------------------------------===// // AffineFullUnroll Registration //===----------------------------------------------------------------------===// inline void registerAffineFullUnroll() { ::mlir::registerPass([]() -\u0026gt; std::unique_ptr\u0026lt;::mlir::Pass\u0026gt; { return createAffineFullUnroll(); }); } // Old registration code, kept for temporary backwards compatibility. inline void registerAffineFullUnrollPass() { ::mlir::registerPass([]() -\u0026gt; std::unique_ptr\u0026lt;::mlir::Pass\u0026gt; { return createAffineFullUnroll(); }); } //===----------------------------------------------------------------------===// // Affine Registration //===----------------------------------------------------------------------===// inline void registerAffinePasses() { registerAffineFullUnroll(); } #undef GEN_PASS_REGISTRATION #endif // GEN_PASS_REGISTRATION Complete .hpp \u0026amp; .cpp TableGen根据 .td文件生成Pass的代码，生成的代码包含注册函数，这些注册函数最终会被调用，将Pass注册到MLIR系统中。 我们可以通过写一个 Passes.h文件集中管理所有Pass的注册，简化构建过程。\n1 2 3 4 5 6 7 // include/mlir-learning/Transform/Affine/Pass.h #include \u0026#34;mlir-learning/Transform/Affine/AffineFullUnroll.h\u0026#34; namespace mlir::tutorial { #define GEN_PASS_REGISTRION #include \u0026#34;mlir-learning/Transform/Affine/Pass.h.inc\u0026#34; } 然后再对应的 AffineFullUnroll.hpp 中定义 GEN_PASS_DECL_AFFINEFULLUNROLL 宏，以实现创建 Pass 函数的声明。\n1 2 3 4 5 6 7 8 9 #pragma once #include \u0026#34;mlir/Pass/Pass.h\u0026#34; namespace mlir::tutorial { #define GEN_PASS_DECL_AFFINEFULLUNROLL #include \u0026#34;mlir-learning/Transform/Affine/Pass.h.inc\u0026#34; } // namespace mlir::tutorial 同样在 cpp 中需要定义 GEN_PASS_DEF_AFFINEFULLUNROLL 宏，然后写你对应的实现 (与上一章相同). 问题是仅仅查看生成的代码并不能直接看出还需要实现哪些函数，需要通过其他方法来确定。\n编译并查看编译器错误信息: 最直接的方法是尝试编译代码。编译器会指出哪些函数没有实现，从而告诉你需要实现哪些函数。 与基类进行比较: 可以将生成的代码与基类（OperationPass和 Pass）进行比较。通过比较，可以发现唯一需要实现的函数是 runOnOperation()。 这需要你熟悉MLIR Pass的继承结构和各个函数的作用。 观察缺失的函数: 如果之前已经从原始API手动实现过类似的Pass，可以观察生成的代码中哪些函数已经存在（例如 getArgument），哪些函数缺失（例如 runOnOperation）。 通过对比，可以确定还需要实现哪些函数。 具体的实现与上一章相同，这里我们要继承 .inc 文件中生成的类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include \u0026#34;mlir-learning/Transform/Affine/AffineFullUnroll.h\u0026#34; #include \u0026#34;mlir/Dialect/Affine/IR/AffineOps.h\u0026#34; #include \u0026#34;mlir/Dialect/Affine/LoopUtils.h\u0026#34; #include \u0026#34;mlir/Pass/Pass.h\u0026#34; namespace mlir::tutorial { #define GEN_PASS_DEF_AFFINEFULLUNROLL #include \u0026#34;mlir-learning/Transform/Affine/Pass.h.inc\u0026#34; using mlir::affine::AffineForOp; using mlir::affine::loopUnrollFull; class AffineFullUnroll : public impl::AffineFullUnrollBase\u0026lt;AffineFullUnroll\u0026gt; { public: using AffineFullUnrollBase::AffineFullUnrollBase; void runOnOperation() override { getOperation()-\u0026gt;walk([\u0026amp;](AffineForOp op) { if (failed(loopUnrollFull(op))) { op.emitError(\u0026#34;unrolling failed\u0026#34;); signalPassFailure(); } }); } }; } // namespace mlir::tutorial 最后在 tutorial.cpp 中使用 .inc 文件生成的 registerAffinePasses\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include \u0026#34;mlir/IR/DialectRegistry.h\u0026#34; #include \u0026#34;mlir/InitAllDialects.h\u0026#34; #include \u0026#34;mlir/Pass/PassManager.h\u0026#34; #include \u0026#34;mlir/Pass/PassRegistry.h\u0026#34; #include \u0026#34;mlir/Tools/mlir-opt/MlirOptMain.h\u0026#34; #include \u0026#34;mlir-learning/Transform/Affine/Pass.h\u0026#34; int main(int argc, char** argv) { // Register all built-in MLIR dialects mlir::DialectRegistry registry; mlir::registerAllDialects(registry); mlir::tutorial::registerAffinePasses(); return mlir::asMainReturnCode( mlir::MlirOptMain(argc, argv, \u0026#34;Tutorial Pass Driver\u0026#34;, registry)); } ","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch3-using-tablegen-for-passes/","summary":"Personal MLIR learning notes 3.","title":"MLIR-Ch3 Using Tablegen for Passes"},{"content":"Tutorial-opt and Project Organization 编译器可能将 mlir-opt 作为子例程在前端 (c++ -\u0026gt; 某些MLIR方言) 和后端 (MLIR 的 LLVM 方言 -\u0026gt; LLVM -\u0026gt; 机器码) 之间运行。 (我将它命名为 tutorial-opt).\n典型的 MLIR 代码库将代码分成具有大致相同层次结构的目录：\ninclude/ 目录用于存放头文件和tablegen 文件， lib/ 目录用于存放实现代码。可能会有 Transform/ 子目录用于存储在方言中转换代码的 pass，Conversion/ 子目录用于在方言之间转换的 pass ，Analysis/ 子目录用于分析 pass，等等。这些目录中的每一个都可能有它们所操作的特定方言的子目录。 test/ 用于存放需要测试的 mlir 文件。 tools/ 存放用于注册 pass 的主文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ./Ch1-WritingOurFirstPass/ ├── CMakeLists.txt ├── include │ └── mlir-tutorial ├── lib │ ├── CMakeLists.txt │ └── Transform ├── tests │ ├── Output │ ├── affine_loop_unroll.mlir │ ├── lit.cfg.py │ └── mul_to_add.mlir └── tools ├── CMakeLists.txt └── tutorial-opt.cpp 尽管 MLIR 提供了许多定义循环和控制流的机制，最高级的是 affine dialect. 它被设计用来进行多面体循环分析 (polyhedral loop analysis).\nPolyhedral Loop Analysis 多面体循环分析的核心思想是将程序中的循环和数组访问抽象为数学形式，使得可以应用几何变换来优化代码。这种数学形式通常表示为 整数线性不等式的集合 ，这些不等式定义了循环迭代空间和数组访问的范围。\n迭代空间（Iteration Space） ：程序中的循环嵌套可以被表示为一个多维的迭代空间。例如，对于一个双层嵌套循环： 1 2 3 4 5 for (i = 0; i \u0026lt; N; i++) { for (j = 0; j \u0026lt; M; j++) { A[i][j] = A[i][j] + 1; } } 这里的迭代空间是二维的，由 (i, j) 构成。\n访问关系（Access Relations） ：每个数组的访问模式（例如 A[i][j]）也可以被表示为几何关系。这种关系定义了哪些迭代变量访问哪些数组元素。 多面体表示（Polyhedral Representation） ：在多面体循环分析中，循环的迭代空间和数组访问模式可以用整数线性不等式来表示，从而形成一个多面体。例如，0\u0026lt;=i\u0026lt;N 和 0\u0026lt;=j\u0026lt;M 是两个简单的线性不等式，它们表示循环的边界。 一个简单的对数组求和的函数如下: affine.for 定义一个循环，迭代变量为 %i，范围 [0,4)，即循环 4 次。 iter_args(%sum_iter = %sum_0) 表示循环维护一个迭代变量 %sum_iter，初始值为 %sum_0.\n1 2 3 4 5 6 7 8 9 func.func @sum_buffer(%buffer: memref\u0026lt;4xi32\u0026gt;) -\u0026gt; i32 { %sum_0 = arigh.constant 0 : i32 %sum = affine.for %i = 0 to 4 iter_args(%sum_iter = %sum_0) -\u0026gt; (i32) { %t = affine.load %buffer[%i] : memref\u0026lt;4xi32\u0026gt; %sum_next = arith.addi %sum_iter, %t : i32 affine.yield %sum_next : i32 } return %sum: i32 } MLIR 高级结构 基于图数据结构，其节点称为 Operations，边称为 Values。每个 Value 都是一个 Operation 或 Block Argument 的结果，并具有由类型系统定义的 Value Type。Operations 包含在 Blocks 中，Blocks 包含在 Regions 中。Operations 在其所在的 Block 中是有序的，Blocks 在其所在的 Region 中也是有序的，尽管这种顺序在特定类型的 Region 中可能具有或不具有语义意义。Operations 还可以包含 Regions，从而能够表示层次化的结构。\nOperations 可以表示多种不同的概念，从高级概念如函数定义、函数调用、缓冲区分配、缓冲区的视图或切片、进程创建，到低级概念如目标无关的算术运算、目标特定的指令、配置寄存器和逻辑门。这些不同的概念在 MLIR 中由不同的 Operations 表示，并且 MLIR 中可用的 Operations 集可以任意扩展。\nMLIR 还提供了一个可扩展的框架，用于对 Operations 进行转换，使用熟悉的编译器 Passes 概念。在任意 Operations 集上启用任意 Passes 集会带来显著的扩展性挑战，因为每个转换可能需要考虑任何 Operation 的语义。MLIR 通过允许使用 Traits 和 Interfaces 抽象地描述 Operation 的语义来解决这种复杂性，从而使转换能够更通用地操作 Operations。Traits 通常描述对有效 IR 的验证约束，能够捕获和检查复杂的不变性。（参见 Op vs Operation）\nMLIR 的表示基于 SSA 的 IR，例如 LLVM core IR，通过适当选择 Operation 类型来定义 Modules、Functions、Branches、Memory Allocation，以及验证约束以确保 SSA Dominance 属性。MLIR 包含一组 Dialects，定义了此类结构。\nAffine Full Unroll Pass MLIR 提供了一个方法 loopUnrollFull 来进行循环展开，因此我们的 pass 将是对这个函数调用的一个包装，直接调用 C++ API 实现。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // include/mlir-learning/Transform/Affine/AffineFullUnroll.h class AffineFullUnrollPass : public PassWrapper\u0026lt;AffineFullUnrollPass, OperationPass\u0026lt;mlir::FuncOp\u0026gt;\u0026gt; { private: void runOnOperation() override; StringRef getArgument() const final {return \u0026#34;affine-full-unroll\u0026#34;;} StringRef getDescription() const final { return \u0026#34;Perform full unrolling of all affine.for loops\u0026#34;; } }; // lib/Transform/Affine/AffineFullUnroll.cpp using mlir::affine::AffineForOp; using mlir::affine::loopUnrollFull; void AffineFullUnrollPass::runOnOperation() { getOperation().walk( [\u0026amp;](AffineForOp op) { if (failed(loopUnrollFull(op))) { op.emitError(\u0026#34;unrolling failed\u0026#34;); signalPassFailure(); } }); } 该类的定义使用了奇异递归模板模式 (Curiously Recurring Template Pattern, CRTP). PassWrapper 是 MLIR 框架中的一个模板类，为定义的 Pass 提供通用功能 (如类型检查、名称获取、克隆)。开发者只需专注于 Pass 的核心逻辑（如 runOnOperation），而无需手动实现类型标识、克隆等辅助功能。\nrunOnOperation 中调用了 getOperation 方法，它是 MLIR 中 Pass 类提供的一个方法，返回当前操 Operation. walk 方法是 MLIR 提供的一个遍历方法，用来遍历操作树中的每个节点。它会递归地遍历操作树中的所有子操作，并对每个操作应用传入的回调函数 (lambda func). 当运行这个 Pass 时，它会在每一个 AffineForOp 类型的操作上执行 runOnOperation 函数。 getArgument 方法返回 Pass 的命令行参数。这个返回值 affine-full-unroll 表示这个 Pass 的名称，可以在运行时通过命令行参数指定是否启用该 Pass. getDescription 方法会在调用像 mlir-opt 这样的工具时若有 --help 参数则返回 Pass 的描述信息。 Callback Function 回调函数 (Callback Function) 是一种通过将函数作为参数传递给另一个函数，来实现某些特定操作的机制。回调函数通常在某个事件发生或某个特定条件满足时被调用。简而言之，回调函数就是被调用的函数，它会在特定的时机被执行。\n在这个例子中，invokeCallback 函数接收到 printMessage 函数的地址，并在 main 函数中调用它。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include \u0026lt;iostream\u0026gt; // 回调函数的定义 void printMessage() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello, World!\u0026#34; \u0026lt;\u0026lt; std::endl; } // 接受回调函数作为参数的函数 void invokeCallback(void (*callback)()) { // 调用回调函数 callback(); } int main() { // 将回调函数传递给另一个函数 invokeCallback(printMessage); return 0; } 在现代 C++ 中，回调函数通常通过 lambda 表达式传递。下面的例子中 invokeCallback 函数接受一个 std::function\u0026lt;void()\u0026gt; 类型的回调函数参数。在 main 函数中，传入了一个 Lambda 表达式作为回调函数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 #include \u0026lt;iostream\u0026gt; void invokeCallback(std::function\u0026lt;void()\u0026gt; callback) { callback(); } int main() { // 使用 Lambda 表达式作为回调函数 invokeCallback([](){ std::cout \u0026lt;\u0026lt; \u0026#34;Hello from Lambda!\u0026#34; \u0026lt;\u0026lt; std::endl; }); return 0; } Registering the Pass 接下来我们需要在 tutorial.cpp 中注册这个 Pass。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include \u0026#34;mlir-learning/Transform/Affine/AffineFullUnroll.h\u0026#34; #include \u0026#34;mlir/InitAllDialects.h\u0026#34; #include \u0026#34;mlir/Pass/PassManager.h\u0026#34; #include \u0026#34;mlir/Pass/PassRegistry.h\u0026#34; #include \u0026#34;mlir/Tools/mlir-opt/MlirOptMain.h\u0026#34; int main(int argc, char** argv) { mlir::DialectRegistry registry; mlir::registerAllDialects(registry); mlir::PassRegistration\u0026lt;mlir::tutorial::AffineFullUnrollPass\u0026gt;(); return mlir::asMainReturnCode( mlir::MlirOptMain(argc, argv, \u0026#34;Tutorial Pass Driver\u0026#34;, registry)); } mlir::registerAllDialects(registry); 会调用 MLIR 库的函数，将所有可用的方言注册到 registry 中。方言是 MLIR 中用来定义各种中间表示的抽象，可以理解为不同类型的 IR. mlir::PassRegistration\u0026lt;mlir::tutorial::AffineFullUnrollPass\u0026gt;(); 将自定义的 AffineFullUnrollPass 注册到 MLIR 的 Pass 系统中。 MlirOptMain 是 MLIR 提供的一个函数，处理命令行参数，并执行相应的 Pass. argc 和 argv：来自命令行的参数。 \u0026ldquo;Tutorial Pass Driver\u0026rdquo;：这是一个程序描述字符串，通常是给用户的信息。 registry：之前创建的 DialectRegistry，它包含了所有已注册的方言。 mlir::asMainReturnCode(...) 将 MlirOptMain 的返回值转换为标准的退出代码 (0 表示成功，非零值表示失败). Test the Pass 我们写一个 .mlir 来测试我们的 Pass，这是一个对数组进行累加的函数。FileCheck 检查经过 Pass 后函数中不会存在 affine.for 指令。\n1 2 3 4 5 6 7 8 9 10 11 12 13 // RUN: /leaning/build/chapter2/tools/02-tutorial-opt %s --affine-full-unroll \u0026gt; %t // RUN: FileCheck %s \u0026lt; %t func.func @test_single_nested_loop(%buffer: memref\u0026lt;4xi32\u0026gt;) -\u0026gt; (i32) { %sum_0 = arith.constant 0 : i32 // CHECK-NOT: affine.for %sum = affine.for %i = 0 to 4 iter_args(%sum_iter = %sum_0) -\u0026gt; i32 { %t = affine.load %buffer[%i] : memref\u0026lt;4xi32\u0026gt; %sum_next = arith.addi %sum_iter, %t : i32 affine.yield %sum_next : i32 } return %sum : i32 } 经过优化后的函数如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #map = affine_map\u0026lt;(d0) -\u0026gt; (d0 + 1)\u0026gt; #map1 = affine_map\u0026lt;(d0) -\u0026gt; (d0 + 2)\u0026gt; #map2 = affine_map\u0026lt;(d0) -\u0026gt; (d0 + 3)\u0026gt; module { func.func @test_single_nested_loop(%arg0: memref\u0026lt;4xi32\u0026gt;) -\u0026gt; i32 { %c0 = arith.constant 0 : index %c0_i32 = arith.constant 0 : i32 %0 = affine.load %arg0[%c0] : memref\u0026lt;4xi32\u0026gt; %1 = arith.addi %c0_i32, %0 : i32 %2 = affine.apply #map(%c0) %3 = affine.load %arg0[%2] : memref\u0026lt;4xi32\u0026gt; %4 = arith.addi %1, %3 : i32 %5 = affine.apply #map1(%c0) %6 = affine.load %arg0[%5] : memref\u0026lt;4xi32\u0026gt; %7 = arith.addi %4, %6 : i32 %8 = affine.apply #map2(%c0) %9 = affine.load %arg0[%8] : memref\u0026lt;4xi32\u0026gt; %10 = arith.addi %7, %9 : i32 return %10 : i32 } } A Rewrite Pattern Version 当想要对一个给定的 IR 子结构重复应用相同的变换子集，直到该子结构被完全去除时，需要写一个重写模式引擎。重写模式是 OpRewritePattern 的子类，它有一个名为 matchAndRewrite 的方法来执行转换。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // chapter2/lib/Transform/Affine/AffineFullUnroll.cpp struct AffineFullUnrollPattern : public mlir::OpRewritePattern\u0026lt;AffineForOp\u0026gt; { AffineFullUnrollPattern(mlir::MLIRContext* context) : mlir::OpRewritePattern\u0026lt;AffineForOp\u0026gt;(context, 1) { } // 一般在 OpRewritePattern 中，IR 的更改要通过 PatternRewriter // PatternRewriter 处理 OpRewritePattern中发生的突变的原子性 LogicalResult matchAndRewrite(AffineForOp op, PatternRewriter\u0026amp; rewriter) const override{ return loopUnrollFull(op); } }; AffineFullUnrollPattern 继承自 OpRewritePattern\u0026lt;AffineForOp\u0026gt;，OpRewritePattern 是 MLIR 中用于对特定操作类型 (在这里是 AffineForOp) 进行模式匹配和重写的基类。模板参数 AffineForOp 表示我们要为 AffineForOp 这个操作创建一个模式。 构造函数初始化了基类 OpRewritePattern\u0026lt;AffineForOp\u0026gt;，并传递了两个参数 context：MLIRContext 是 MLIR 的上下文，保存着所有的操作、方言和类型等信息。在这里，context 用来初始化模式对象。 benefit 是一个表示模式匹配优先级的整数值，优先级越高的模式越先应用。 matchAndRewrite 是在 MLIR 中进行模式重写的核心方法。它的目的是：检查某个操作是否符合当前模式的要求。如果操作匹配模式，则执行重写操作，通常会用新的 IR 替换原来的 IR。 AffineForOp op 表示要进行模式匹配的 AffineForOp 操作。 PatternRewriter \u0026amp;rewriter 是一个用于生成新的 MLIR 操作的工具，它可以修改 IR. 我们同样要像上一节一样在头文件中声明一个 AffineFullUnrollPassAsPatternRewrite 类，然后实现其 runOnOperation 方法。\n1 2 3 4 5 6 // chapter2/lib/Transform/Affine/AffineFullUnroll.cpp void AffineFullUnrollPassAsPatternRewrite::runOnOperation() { mlir::RewritePatternSet patterns(\u0026amp;getContext()); patterns.add\u0026lt;AffineFullUnrollPattern\u0026gt;(\u0026amp;getContext()); (void) applyPatternsGreedily(getOperation(), std::move(patterns)); } RewritePatternSet 是 MLIR 中一个容器，用于存储多个 Rewrite Pattern. 每个模式都是针对某种特定操作进行的优化规则。RewritePatternSet 会把所有这些规则聚合在一起，方便在后续的步骤中批量应用。 然后通过 patterns.add\u0026lt;AffineFullUnrollPattern\u0026gt;，将一个 Rewrite Pattern (这里是上面定义的 AffineFullUnrollPattern) 添加到 patterns 集合中。 applyPatternsGreedily是 MLIR 提供的一个函数，用于将定义的模式应用到给定的操作 (getOperation()) 上。这个函数使用贪心策略，在一次遍历中尽可能多地应用模式，直到无法再应用为止。 std::move std::move 是 C++11 引入的一个标准库函数，它的主要作用是将一个对象转换为右值引用，以便启用移动语义 (Move Semantics). 简单来说，std::move 本身并不实际移动对象，而是为对象提供一个指示，告诉编译器该对象可以被移动而不是复制。\n在 C++ 中，有两种主要的值类别:\n左值 (Lvalue) ：表示可以取地址的对象，可以理解为拥有持久生命周期的对象。它通常是变量、数组元素、对象成员等。 右值 (Rvalue) ：表示临时对象、非持久生命周期的对象，通常是返回值、字面常量等。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;utility\u0026gt; // std::move class MyClass { public: MyClass() { std::cout \u0026lt;\u0026lt; \u0026#34;Constructor\\n\u0026#34;; } MyClass(const MyClass\u0026amp; other) { std::cout \u0026lt;\u0026lt; \u0026#34;Copy Constructor\\n\u0026#34;; } MyClass(MyClass\u0026amp;\u0026amp; other) noexcept { std::cout \u0026lt;\u0026lt; \u0026#34;Move Constructor\\n\u0026#34;; } MyClass\u0026amp; operator=(const MyClass\u0026amp; other) { std::cout \u0026lt;\u0026lt; \u0026#34;Copy Assignment\\n\u0026#34;; return *this; } MyClass\u0026amp; operator=(MyClass\u0026amp;\u0026amp; other) noexcept { std::cout \u0026lt;\u0026lt; \u0026#34;Move Assignment\\n\u0026#34;; return *this; } }; int main() { MyClass obj1; // Constructor MyClass obj2 = std::move(obj1); // Move Constructor MyClass obj3; obj3 = std::move(obj2); // Move Assignment } A proper greedy RewritePattern 接下来写一个用重写模式定义的 MulToAddPass，它会将 y=C*x 形式的乘法转换为 y=C/2*x+C/2*x 形式的加法当 C 是偶数。否则转换成 y=1+(C-1)/2*x+(C-1)/2*x 形式的加法。\nPowerOfTwoExpand 获取了 rhs 的定义操作（rhs.getDefiningOp\u0026lt;arith::ConstantIntOp\u0026gt;()），以确保右操作数是一个常数。 如果右操作数的值是 2 的幂，即 (value \u0026amp; (value - 1)) == 0，则进行优化。 将 value 除以 2 然后生成新的常数 newConstant。 计算新的乘法 lhs * newConstant，并将其加倍（通过 AddIOp 来实现 lhs * value）。 最终用新的加法替代原来的乘法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 struct PowerOfTwoExpand : public OpRewritePattern\u0026lt;MulIOp\u0026gt; { PowerOfTwoExpand(MLIRContext* context) : OpRewritePattern\u0026lt;MulIOp\u0026gt;(context, 2) { } LogicalResult matchAndRewrite(MulIOp op, PatternRewriter\u0026amp; rewriter) const override { // Value represents an instance of an SSA value in the MLIR system Value lhs = op-\u0026gt;getOperand(0); Value rhs = op-\u0026gt;getOperand(1); auto rhsDefiningOp = rhs.getDefiningOp\u0026lt;arith::ConstantIntOp\u0026gt;(); if (!rhsDefiningOp) { return failure(); } int64_t value = rhsDefiningOp.value(); bool is_power_of_two = (value \u0026amp; (value - 1)) == 0; if (!is_power_of_two) { return failure(); } auto newConstant = rewriter.create\u0026lt;ConstantOp\u0026gt;( rhsDefiningOp-\u0026gt;getLoc(), rewriter.getIntegerAttr(rhs.getType(), value / 2)); auto newMul = rewriter.create\u0026lt;MulIOp\u0026gt;(op-\u0026gt;getLoc(), lhs, newConstant); auto newAdd = rewriter.create\u0026lt;AddIOp\u0026gt;(op-\u0026gt;getLoc(), newMul, newMul); rewriter.replaceOp(op, newAdd); rewriter.eraseOp(rhsDefiningOp); return success(); } }; PeelFromMul 这个 Pass 的目标是将一个常数乘法转化为加法形式，适用于常数值 rhs 不为 2 的幂时。\n将 rhs 减去 1，然后生成一个新的常数 newConstant（即 value - 1）。 用 lhs * newConstant 进行计算，并将结果加上 lhs（即 lhs * value 转化为 (lhs * (value - 1)) + lhs）。 最终用新的加法替代原来的乘法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 struct PeelFromMul : public OpRewritePattern\u0026lt;MulIOp\u0026gt; { PeelFromMul(MLIRContext* context) : OpRewritePattern\u0026lt;MulIOp\u0026gt;(context, 1) { } LogicalResult matchAndRewrtite(MulIOp op, PatternRewriter\u0026amp; rewriter) const { Value lhs = op-\u0026gt;getOperand(0); Value rhs = op-\u0026gt;getOperand(1); auto rhsDefiningOp = rhs.getDefiningOp\u0026lt;arith::ConstantIntOp\u0026gt;(); if (!rhsDefiningOp) { return failure(); } int64_t value = rhsDefiningOp.value(); // Beacause PowerOfTwoExpand has higher benefit, // value must not be power of 2 auto newConstant = rewriter.create\u0026lt;ConstantOp\u0026gt;( rhsDefiningOp-\u0026gt;getLoc(), rewriter.getIntegerAttr(rhs.getType(), value - 1)); auto newMul = rewriter.create\u0026lt;MulIOp\u0026gt;(op.getLoc(), lhs, newConstant); auto newAdd = rewriter.create\u0026lt;AddIOp\u0026gt;(op.getLoc(), newMul, lhs); rewriter.replaceOp(op, newAdd); rewriter.eraseOp(rhsDefiningOp); return success(); } }; Add the Pass 之后我们同样在 runOnOperation 方法中注册 PowerOfTwoExpand 和 PeelFromMul 两个模式。\n1 2 3 4 5 6 void MulToAddPass::runOnOperation() { mlir::RewritePatternSet patterns(\u0026amp;getContext()); patterns.add\u0026lt;PowerOfTwoExpand\u0026gt;(\u0026amp;getContext()); patterns.add\u0026lt;PeelFromMul\u0026gt;(\u0026amp;getContext()); (void) applyPatternsAndFoldGreedily(getOperation(), std::move(patterns)); } Lit, FileCheck LLVM 和 MLIR 使用的是同一个测试框架，分为两个测试步骤。\nlit (LLVM Integratesd Tester) 负责发现、组织和运行测试，并报告测试结果。测试文件中通常包含 RUN: 指令，告诉 lit 如何运行测试。 FileCheck 通过模式匹配的方式，验证输出是否包含特定的字符串或结构。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # lit.cfg.py # CMD: llvm-lit -v path/to/test_files import os from os import path as osp from lit.formats import ShTest config.name = \u0026#34;MLIR-LEARN\u0026#34; config.test_format = ShTest() config.suffixes = [\u0026#34;.mlir\u0026#34;] current_path = os.getcwd() tool_path = \u0026#34;path/to/build/opt_executable\u0026#34; config.environment[\u0026#34;PATH\u0026#34;] = ( osp.join(current_path, tool_path) + \u0026#34;:\u0026#34; + os.environ[\u0026#34;PATH\u0026#34;] ) Test the Pass 我们同样创建一个 .mlir 文件来测试我们的 Pass. 我们希望 Pass 能够将递归地将乘法转化为加法形式，\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // RUN: /leaning/build/chapter2/tools/02-tutorial-opt %s --mul-to-add \u0026gt; %t // RUN: FileCheck %s \u0026lt; %t func.func @just_power_of_two(%arg0: i32) -\u0026gt; i32 { %0 = arith.constant 8: i32 %1 = arith.muli %arg0, %0: i32 func.return %1: i32 } // CHECK-LABEL: func.func @just_power_of_two( // CHECK-SAME: %[[ARG:.*]]: i32 // CHECK-SAME: ) -\u0026gt; i32 { // CHECK: %[[SUM_0:.*]] = arith.addi %[[ARG]], %[[ARG]] // CHECK: %[[SUM_1:.*]] = arith.addi %[[SUM_0]], %[[SUM_0]] // CHECK: %[[SUM_2:.*]] = arith.addi %[[SUM_1]], %[[SUM_1]] // CHECK: return %[[SUM_2]] : i32 // CHECK: } func.func @power_of_two_plus_one(%arg: i32) -\u0026gt; i32 { %0 = arith.constant 9 : i32 %1 = arith.muli %arg, %0 : i32 func.return %1 : i32 } // CHECK-LABEL: func.func @power_of_two_plus_one( // CHECK-SAME: %[[ARG:.*]]: i32 // CHECK-SAME: ) -\u0026gt; i32 { // CHECK: %[[SUM_0:.*]] = arith.addi %[[ARG]], %[[ARG]] // CHECK: %[[SUM_1:.*]] = arith.addi %[[SUM_0]], %[[SUM_0]] // CHECK: %[[SUM_2:.*]] = arith.addi %[[SUM_1]], %[[SUM_1]] // CHECK: %[[SUM_3:.*]] = arith.addi %[[SUM_2]], %[[ARG]] // CHECK: return %[[SUM_3]] : i32 // CHECK: } 经过优化后的代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 module { func.func @just_power_of_two(%arg0: i32) -\u0026gt; i32 { %0 = arith.addi %arg0, %arg0 : i32 %1 = arith.addi %0, %0 : i32 %2 = arith.addi %1, %1 : i32 return %2 : i32 } func.func @power_of_two_plus_one(%arg0: i32) -\u0026gt; i32 { %0 = arith.addi %arg0, %arg0 : i32 %1 = arith.addi %0, %0 : i32 %2 = arith.addi %1, %1 : i32 %3 = arith.addi %2, %arg0 : i32 return %3 : i32 } } Summary 使用模式重写引擎通常比编写遍历AST的代码更容易。不需要大型 case/switch 语句来处理 IR 中可能出现的所有内容。因此可以单独编写模式，并相信引擎会适当地组合它们。\n","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch2-writing-our-first-pass/","summary":"Personal MLIR learning notes 2.","title":"MLIR-Ch2 Writing Our First Pass"},{"content":"Abstract DistriFusion 将模型输入分割成多个 patch 后分配给 GPU。但是直接实现这样的算法会破坏 patch 之间的交互并失去保真度，而同步 GPU 之间的激活将产生巨大的通信开销。为了克服这一困境，根据观察到的相邻扩散步输入之间的高度相似性提出了 displaced patch parallelism，该方法通过重用前一个时间步骤中预先计算的 feature map 来利用扩散过程的顺序性，为当前步提供 context. 该方法支持异步通信，可以通过计算实现流水线化。\nIntroduction Original, Navie Patch \u0026amp; DistriFusion\n加速扩散模型推理主要集中在两种方法上：减少采样步骤和优化网络推理。随着计算资源的快速增长，利用多个 GPU 来加速推理是很有吸引力的。例如在 NLP 中， LLM 已经成功地利用了 GPU 之间的张量并行性，从而显著降低了延迟。然而，对于扩散模型，由于激活尺寸大，张量并行这样的技术不太适合扩散模型。多个 GPU 通常只用于 batch 推理，当生成单个图像时，通常只涉及一个GPU.\nTechniques like tensor parallelism are less suitable for diffusion models due to the large activation size, as communication costs outweigh savings from distributed computation.\n自然而然的一种方法是将图像分成几个 patch 后分配给不同的设备进行生成。由于各个 patch 之间缺乏相互作用，它在每个 patch 的边界处都有一个清晰可见的分界线。\nDistriFusion 也是基于 patch parallelism. 关键在于扩散模型中相邻去噪步骤的输入是相似的，因此，只在第一步采用同步通信。后续步骤重用前一步中预先计算的激活，为当前步骤提供全局上下文和 patch 交互。通过异步通信有效地隐藏了计算中的通信开销。并且还稀疏地在指定的区域上进行卷积和注意力计算，从而按比例减少每个设备的计算量。\nMethod Displaced Patch Parallelism. 在预测 $\\epsilon_{\\theta}(\\mathbf{x}_{t})$ 时 (忽略条件 c 和时间步 t 的输入) ，首先将 $\\mathbf{x}_{t}$ 分割成多个 patch $\\mathbf{x}_t^{(1)},\\mathbf{x}_t^{(2)},\\ldots,\\mathbf{x}_t^{(N)}$ ，对于每一层 l 和设备 i，在获得输入激活 patch $\\mathbf{A}_{t}^{l,(i)}$ 后异步处理两个操作：首先，对于设备i， 激活 $\\mathbf{A}_{t}^{l,(i)}$ 首先 scatter 到上一步旧的激活 $\\mathbf{A}_{t+1}^{l}$ 中。然后将此分散操作的输出送入稀疏算子 Fl (线性、卷积或注意层)，该算子专门对新区域执行计算并产生相应的输出。同时，对 $\\mathbf{A}_{t}^{l,(i)}$ 执行 AllGather 操作，为下一步的全尺寸激活 $\\mathbf{A}_{t}^{l}$ 做准备。\nOverview of DistriFusion\n我们对除第一层 (采用同步通信获得其他设备上的输入) 外的每一层重复这个过程。然后将最终输出 Gather 在一起以近似 $\\epsilon_{\\theta}(\\mathbf{x}_{t})$，用于计算 $\\mathbf{x}_{t-1}$\nTimeline Visualization on Each Device\nSparse Operations 对于每一层 l，如果原始算子 Fl 是一个卷积层、线性层或交叉注意层，调整使其专门作用于新激活的区域。这可以通过从 scatter 输出中提取最新部分并将其输入到 Fl 中来实现。对于 self-attention，将其转换为 cross-attention，仅在设备上保留来自新激活的 Q，而 KV 仍然包含整个特征图。\nCorrected Asynchronous GroupNorm 仅对新 patch 进行归一化或重用旧特征都会降低图像质量。同步 AllGather 所有均值和方差将产生相当大的开销。为了解决这一困境，DistriFusion 在陈旧的统计数据中引入了一个校正项。计算公式如下\n$$\r\\mathbb{E}[\\mathbf{A}_t]\\approx\\underbrace{\\mathbb{E}[\\mathbf{A}_{t+1}]}_{\\text{stale global mean}}+\\underbrace{\\mathbb{E}[\\mathbf{A}_t^{(i)}]-\\mathbb{E}[\\mathbf{A}_{t+1}^{(i)}]}_{\\text{correction}}\r$$同样对二阶矩 $\\mathbb{E}[\\mathbf{A}^2_t]$ 也采用这种计算方式，然后通过 $\\mathbb{E}[\\mathbf{A}^2_t] - \\mathbb{E}[\\mathbf{A}_t]^2$ 来计算方差。对于方差结果为负的部分，将使用新鲜 patch 的局部方差代替。\nCode Implementation Distrifusion 中主要就是将 UNet2DConditionModel 中的 Conv2d, Attention 和 GroupNorm 替换成对应的 patch 实现的网络结构 DistriUNetPP. 这里继承的 BaseModel 类为集成了 PatchParallelismCommManager 类 (介绍见后文) 的网络。\nUNet2DConditionModel\nclass DistriUNetPP(BaseModel): # for Patch Parallelism def __init__(self, model: UNet2DConditionModel, distri_config: DistriConfig): assert isinstance(model, UNet2DConditionModel) if distri_config.world_size \u0026gt; 1 and distri_config.n_device_per_batch \u0026gt; 1: for name, module in model.named_modules(): if isinstance(module, BaseModule): continue \u0026#39;\u0026#39;\u0026#39; Substitute Conv2d, Attention, GroupNorm with DistriConv2dPP, DistriSelfAttentionPP, DistriCrossAttentionPP, DistriGroupNorm \u0026#39;\u0026#39;\u0026#39; for subname, submodule in module.named_children(): if isinstance(submodule, nn.Conv2d): kernel_size = submodule.kernel_size if kernel_size == (1, 1) or kernel_size == 1: continue wrapped_submodule = DistriConv2dPP( submodule, distri_config, is_first_layer=subname == \u0026#34;conv_in\u0026#34; ) setattr(module, subname, wrapped_submodule) elif isinstance(submodule, Attention): if subname == \u0026#34;attn1\u0026#34;: # self attention wrapped_submodule = DistriSelfAttentionPP(submodule, distri_config) else: # cross attention assert subname == \u0026#34;attn2\u0026#34; wrapped_submodule = DistriCrossAttentionPP(submodule, distri_config) setattr(module, subname, wrapped_submodule) elif isinstance(submodule, nn.GroupNorm): wrapped_submodule = DistriGroupNorm(submodule, distri_config) setattr(module, subname, wrapped_submodule) super(DistriUNetPP, self).__init__(model, distri_config) PatchParallelismCommManager PatchParallelismCommManager 类主要处理异步通信的部分。\nclass PatchParallelismCommManager: def __init__(self, distri_config: DistriConfig): self.distri_config = distri_config self.torch_dtype = None self.numel = 0 # 已经注册的张量的累计总元素数量 self.numel_dict = {} # 记录每个 layer_type 所注册的张量的累计元素数量 self.buffer_list = None # 在每个设备上存储所有注册张量的数据，通信所用的 buffer self.starts = [] # 记录每个注册张量的起始位置 (在 buffer_list 中的起始索引) self.ends = [] # 结束 结束 self.shapes = [] # 记录每个注册张量的 shape self.idx_queue = [] # 需要进行通信的张量索引的队列 self.handles = None # 存储每个设备通信操作的句柄的 list, 用于检查通信是否完成 成员函数功能介绍如下\nregister_tensor(self, shape: tuple[int, ...] or list[int], torch_dtype: torch.dtype, layer_type: str = None) -\u0026gt; int: 用于注册张量的形状和数据类型，同时计算并记录张量在缓冲区中的起始位置和结束位置。\n如果尚未指定 torch_dtype，则将传入的 torch_dtype 设为类成员的默认数据类型。 计算传入张量形状的总元素数 numel，并更新 starts、ends 和 shapes 列表。 如果指定了 layer_type，更新 numel_dict 中该层类型对应的元素数目。 create_buffer(self) : 每个设备上为所有注册的张量创建一个统一的缓冲区。\n为每个设备创建一个形状为 (numel,) 的张量，并将其放入 buffer_list 中。 输出在各设备上创建的缓冲区总参数量。 get_buffer_list(self, idx: int) -\u0026gt; list[torch.Tensor]: 返回每个设备上对应于指定索引 idx 的缓冲区张量。\n根据 starts 和 ends 信息，从 buffer_list 中提取指定索引 idx 的张量片段并调整其形状。 communicate(self): 调用 dist.all_gather 将缓冲区中的张量在不同设备间进行广播。\n确定当前需要通信的张量范围 (根据 idx_queue 中的索引). 调用 dist.all_gather 在设备组内进行异步广播通信，并将句柄存储在 handles 中。 enqueue(self, idx: int, tensor: torch.Tensor): 将指定索引 idx 处的张量数据复制到 buffer_list 中，并将索引添加到通信队列 idx_queue。\n如果通信队列不为空且索引为 0，则先执行一次通信操作。 将张量数据复制到 buffer_list 中的对应位置。 当通信队列长度达到 distri_config 中设定的通信检查点值时，进行通信。 clear(self): 执行一次所有待通信张量的通信，并等待所有异步操作完成。\n如果通信队列不为空，则进行通信操作。 遍历所有句柄，等待所有异步操作完成后，将句柄设为 None. DistriConv2dPP DistriConv2dPP 计算自己负责 patch 部分的卷积，需要通信其他设备需要自己负责 patch 的上下 padding 部分。\n__init__：构造函数，初始化成员变量，设置是否为第一层卷积。 naive_forward：执行标准的前向传播，不进行任何切片操作。这是单个设备处理时的普通卷积操作。 sliced_forward：处理输入张量的切片操作。根据当前设备索引 (split_idx) 计算输入张量在高度方向的起始和结束位置，并在必要时为切片后的张量添加 padding 后进行卷积操作。 class DistriConv2dPP(BaseModule): def __init__(self, module: nn.Conv2d, distri_config: DistriConfig, is_first_layer: bool = False): super(DistriConv2dPP, self).__init__(module, distri_config) self.is_first_layer = is_first_layer def naive_forward(self, x: torch.Tensor) -\u0026gt; torch.Tensor: # x: [B, C, H, W] output = self.module(x) return output def sliced_forward(self, x: torch.Tensor) -\u0026gt; torch.Tensor: \u0026#39;\u0026#39;\u0026#39;...\u0026#39;\u0026#39;\u0026#39; def forward(self, x: torch.Tensor, *args, **kwargs) -\u0026gt; torch.Tensor: distri_config = self.distri_config # 等待上一步通信完成 if self.comm_manager is not None and self.comm_manager.handles is not None and self.idx is not None: if self.comm_manager.handles[self.idx] is not None: self.comm_manager.handles[self.idx].wait() self.comm_manager.handles[self.idx] = None boundary_size = self.module.padding[0] if self.buffer_list is None: # buffer_list 存储的是每个 devive 进行卷积所需要的其他 devive 的数据 if self.comm_manager.buffer_list is None: self.idx = self.comm_manager.register_tensor( shape=[2, x.shape[0], x.shape[1], boundary_size, x.shape[3]], torch_dtype=x.dtype, layer_type=\u0026#34;conv2d\u0026#34;, ) else: self.buffer_list = self.comm_manager.get_buffer_list(self.idx) def create_padded_x(): \u0026#39;\u0026#39;\u0026#39;拼接接收到的数据\u0026#39;\u0026#39;\u0026#39; if distri_config.split_idx() == 0: # rank 0 concat_x = torch.cat([x, self.buffer_list[distri_config.split_idx() + 1][0]], dim=2) padded_x = F.pad(concat_x, [0, 0, boundary_size, 0], mode=\u0026#34;constant\u0026#34;) elif distri_config.split_idx() == distri_config.n_device_per_batch - 1: # rank n-1 concat_x = torch.cat([self.buffer_list[distri_config.split_idx() - 1][1], x], dim=2) padded_x = F.pad(concat_x, [0, 0, 0, boundary_size], mode=\u0026#34;constant\u0026#34;) else: # other ranks padded_x = torch.cat( [ self.buffer_list[distri_config.split_idx() - 1][1], x, self.buffer_list[distri_config.split_idx() + 1][0], ], dim=2, ) return padded_x # 提取当前输入张量需要发送给其他设备的部分 boundary = torch.stack([x[:, :, :boundary_size, :], x[:, :, -boundary_size:, :]], dim=0) # 直接用上一步的 buffer 拼接 padded_x = create_padded_x() output = F.conv2d( padded_x, self.module.weight, self.module.bias, stride=self.module.stride[0], padding=(0, self.module.padding[1]), ) if distri_config.mode != \u0026#34;no_sync\u0026#34;: self.comm_manager.enqueue(self.idx, boundary) # 插入自己要发送的数据 self.counter += 1 return output DistriSelfAttentionPP DistriSelfAttentionPP 只负责计算自己 patch 的输出，需要完整的 KV，将 self attention 运算变成 cross-attention 计算。需要通信自己的 KV.\nclass DistriSelfAttentionPP(DistriAttentionPP): def __init__(self, module: Attention, distri_config: DistriConfig): super(DistriSelfAttentionPP, self).__init__(module, distri_config) def _forward(self, hidden_states: torch.FloatTensor, scale: float = 1.0): attn = self.module # 获取 Attention 模块 distri_config = self.distri_config residual = hidden_states # 残差连接 batch_size, sequence_length, _ = hidden_states.shape args = () if USE_PEFT_BACKEND else (scale,) query = attn.to_q(hidden_states, *args) # Q Projection encoder_hidden_states = hidden_states kv = self.to_kv(encoder_hidden_states) # KV Projection if self.buffer_list is None: # 如果缓冲区未创建 full_kv = torch.cat([kv for _ in range(distri_config.n_device_per_batch)], dim=1) new_buffer_list = [buffer for buffer in self.buffer_list] new_buffer_list[distri_config.split_idx()] = kv full_kv = torch.cat(new_buffer_list, dim=1) if distri_config.mode != \u0026#34;no_sync\u0026#34;: self.comm_manager.enqueue(self.idx, kv) # 将 full_kv 分割为 key 和 value key, value = torch.split(full_kv, full_kv.shape[-1] // 2, dim=-1) inner_dim = key.shape[-1] head_dim = inner_dim // attn.heads # multi-head attention query = query.view(batch_size, -1, attn.heads, head_dim).transpose(1, 2) key = key.view(batch_size, -1, attn.heads, head_dim).transpose(1, 2) value = value.view(batch_size, -1, attn.heads, head_dim).transpose(1, 2) hidden_states = F.scaled_dot_product_attention(query, key, value, dropout_p=0.0, is_causal=False) hidden_states = hidden_states.transpose(1, 2).reshape(batch_size, -1, attn.heads * head_dim) hidden_states = hidden_states.to(query.dtype) hidden_states = attn.to_out[0](hidden_states, *args) # O Projection hidden_states = attn.to_out[1](hidden_states) # Dropout if attn.residual_connection: hidden_states = hidden_states + residual hidden_states = hidden_states / attn.rescale_output_factor return hidden_states DistriGroupNorm DistriGroupNorm 根据上一步全特征图的以及当前步 patch 的均值和二阶矩近似当前步的全特征图均值和方差。需要通信 patch 均值和二阶矩。\nclass DistriGroupNorm(BaseModule): def __init__(self, module: nn.GroupNorm, distri_config: DistriConfig): assert isinstance(module, nn.GroupNorm) super(DistriGroupNorm, self).__init__(module, distri_config) def forward(self, x: torch.Tensor) -\u0026gt; torch.Tensor: module = self.module distri_config = self.distri_config if self.comm_manager is not None and self.comm_manager.handles is not None and self.idx is not None: if self.comm_manager.handles[self.idx] is not None: self.comm_manager.handles[self.idx].wait() self.comm_manager.handles[self.idx] = None assert x.ndim == 4 n, c, h, w = x.shape num_groups = module.num_groups group_size = c // num_groups if self.buffer_list is None: if self.comm_manager.buffer_list is None: n, c, h, w = x.shape self.idx = self.comm_manager.register_tensor( # register for E[x], E[x^2] shape=[2, n, num_groups, 1, 1, 1], torch_dtype=x.dtype, layer_type=\u0026#34;gn\u0026#34; ) else: self.buffer_list = self.comm_manager.get_buffer_list(self.idx) x = x.view([n, num_groups, group_size, h, w]) # 计算 patch 均值和二阶矩 x_mean = x.mean(dim=[2, 3, 4], keepdim=True) # [1, num_groups, 1, 1, 1] x2_mean = (x**2).mean(dim=[2, 3, 4], keepdim=True) # [1, num_groups, 1, 1, 1] slice_mean = torch.stack([x_mean, x2_mean], dim=0) if self.buffer_list is None: full_mean = slice_mean else: # Equation 2 in the paper E[A_t] = E[A_(t+1)] + (E[A^i_t] - E[A^i_(t+1)]), same for E[A^2_t] correction = slice_mean - self.buffer_list[distri_config.split_idx()] full_mean = sum(self.buffer_list) / distri_config.n_device_per_batch + correction self.comm_manager.enqueue(self.idx, slice_mean) full_x_mean, full_x2_mean = full_mean[0], full_mean[1] var = full_x2_mean - full_x_mean**2 # 计算方差 slice_x_mean, slice_x2_mean = slice_mean[0], slice_mean[1] slice_var = slice_x2_mean - slice_x_mean**2 var = torch.where(var \u0026lt; 0, slice_var, var) # Correct negative variance num_elements = group_size * h * w var = var * (num_elements / (num_elements - 1)) std = (var + module.eps).sqrt() output = (x - full_x_mean) / std output = output.view([n, c, h, w]) # scale and shift if module.affine: output = output * module.weight.view([1, -1, 1, 1]) output = output + module.bias.view([1, -1, 1, 1]) self.counter += 1 return output ","permalink":"http://localhost:1313/blogs/distrifusion/","summary":"Paper reading about DistriFusion.","title":"DistriFusion"},{"content":"DeepSpeed-Ulysses Core Design System Design 原理如下图所示，假设设备数 P 等于多头注意力的头数 hc. 输入 x[N,d] 被切分到每个设备上 [N/p, d]，之后进行 QKV Projection，随后将 K 进行转置后进行一次 all-to-all 通信，这样每个设备上就有 Q[N, d/P], K[d/P, N], V[N, d/P], 再执行标准的 attention 计算 $Outputcontext=Softmax((QK^T)/\\sqrt{d})V$. 再进行一次 all-to-all 通信使得每个设备上有 [N, d/P] 结果再进行后续操作。\nDeepSpeed Sequence Parallelism (DeepSpeed-Ulysses) Design\nCommunication Analysis 在采用节点内 NVSwitch 互连和节点间 fat tree IB 拓扑的集群中，对于总消息大小为 M 的 all-to-all 通信，每条链路通过 P 个 gpu 传输的通信量为 M/P。对于隐藏层大小为 h、序列长度为 N、并行度为 P 的 transform 模型，DS-Sequence 对注意力计算前总消息大小为 3Nh 的 QKV Projection 执行 all-to-all 通信，对每个 transformer block 的输出执行 all-to-all 通信，大小为 Nh. 因此，DeepSpeed 序列下每条链路的总通信量为 4Nh/P (或复杂度为 O(N/P)). 也就是说当 N 和 P 按比例增加时，该通信量是恒定的。\nComparison of Other Works Comparison of DS-Ulysses to Other Sequence Parallelism Methods\nColAI-SP 发明了 Ring-Attention，Q 存储在本地 而 KV 以环形方式传输以计算全局注意力，导致通信复杂度与消息大小 M 呈线性关系。 Megatron-LM 序列并行方法与 Megatron 张量并行紧密集成。Megatron-LM 沿着序列维度划分序列，并应用 all gather 和 reduce scatter 来聚合 QKV 注意力计算的投影。并行通信量随消息大小 M 线性增加。 DeepSpeed-Ulysses 通过增加与序列长度成比例的设备数来保持通信量恒定。同时将 Zero3 扩展到数据并行和序列并行的组合。ZeRO 跨序列和数据并行组划分模型状态，并在需要时使用 allgather 收集每个 rank 的部分。 General and Attention Agnostic Solution DeepSpeed-Ulysses 的优势在于一种以注意力为中心的序列并行设计。在注意力计算是 N/P 划分的序列并行之前，注意力计算是头并行，每个头的注意力都是完整的，但只有较少的头，因此注意力计算可以被任何类型的注意机制所取代，例如 dense attention 和各种形式的 sparse attention.\n","permalink":"http://localhost:1313/blogs/deepspeedulysses/","summary":"Paper reading of Deepseed Ulysses.","title":"DeepSpeedUlysses"},{"content":"Abstract 本文展示了如何将张量、流水线和数据并行性组合起来以扩展到数千个gpu。我们提出了一种新的交错流水线调度，可以在内存占用与现有方法相当的同时将吞吐量提高 10%.\nTrend of Sizes of SOTA NLP Models\nIntroduction 张量（层内）模型并行对于较大的模型会崩溃。较大的模型在多个多 GPU 服务器上进行切分会导致两个问题：\n张量并行所需的 all-reduce 通信需要通过服务器间链路进行，这比多 GPU 服务器内可用的高带宽 NVLink 要慢 高度模型并行会产生小规模的矩阵乘法（GEMM），从而可能降低 GPU 利用率。 流水线模型并行化是指模型的各层在多个 GPU 上进行条带化处理。batch 被拆分成更小的 microbatch ，并在这些 microbatch 之间流水线执行。无论进度如何，为了保持严格的优化器语义，优化器步骤需要跨设备同步，从而在每个 batch 结束时进行流水线刷新 (pipeline flush)，允许 microbatch 完成执行 (不再注入新的 microbatch). microbatch 数量与流水线级数的比例越大，流水线刷新所花费的时间就越少。\n我们展示了如何结合流水线、张量和数据并行性，我们称之为PTD-P. 配置分布式训练的指导原则如下:\n不同形式的并行性以不同的方式相互作用: 并行策略对通信量、执行内核的计算效率以及由于流水线冲洗 (流水线气泡) 而花费的等待计算的空闲时间有影响。 用于流水线并行性的调度对通信量、流水线气泡大小和用于存储激活的内存有影响。 超参数 (如 microbatch 大小) 的值会影响内存占用、在工作线程上执行的内核的算术效率和流水线气泡大小。 随着规模扩展分布式训练是通信密集型的。使用较慢的节点间互连或更密集的通信分区会影响扩展性能。 Model Parallelism 本节中将讨论有助于不适合单个 GPU 内存的大模型的并行训练方法。我们将流水线模型并行和张量模型并行 (如图 2 所示的组合) 与数据并行结合起来，简称为PTD-P.\nCombination of Tensor and Pipeline Model Parallelism (MP)\nData Parallelism 使用数据并行时，每个 worker 都有一个完整模型的副本，输入数据集被分片， worker 定期汇总他们的梯度，以确保所有 worker 看到一个一致的权重版本。\nPipeline Parallelism 通过流水线并行，模型的层被分散到多个设备上。一个 batch 被分成更小的 microbatch. 在 microbatch 之间进行流水线执行。为了准确地保持优化器语义，我们引入了定期的流水线刷新，以便在设备之间同步优化器步骤。在每个 batch 处理的开始和结束时，设备都是空闲的。我们称这段空闲时间为流水线气泡 (pipeline bubble).\nDefault Schedule GPipe 提出了一个调度方案，如图 3 所示 (假设反向传播的时间是前向传播的两倍，管道调度的效率并不取决于这个因素)，首先执行一个 batch 中所有 microbatch 的前向传播，然后执行所有 microbatch 的反向传播。设 GPipe 流水线气泡的大小为 t_pb，microbatch 的数量为 m，流水线阶段数量 (用于流水线并行的设备数量) 表示为 p，每次迭代的理想时间表示为 t_id (假设理想缩放)，执行单个 microbatch 的向前和反向传播的时间表示为 t_f 和 t_b. 在该调度中，流水线气泡由批处理开始时的 p−1 个前向传播和 p−1 个反向传播组成。则流水线气泡总时间为 t_pb=(p−1)·(t_f+t_b). batch 的理想执行时间为 t_id=m·(t_f+t_b)。因此，在流水线气泡中花费与理想计算时间的比例为:\n流水线气泡占比 = t_pb / t_id = (p−1) / m.\n为了使流水线气泡占比小，我们需要 m 远大于 p. 然而 m 非常大时这种方法的内存占用很高，因为它需要在训练一次迭代时间内为所有 m 个 microbatch 保存中间激活.\nGPipe Pipeline Schedule\nSchedule with Interleaved Stages 为了缩小流水线气泡的大小，每个设备都可以对多个层的子集（称为模型块）进行计算，流水线中的每个设备都被分配了多个流水线阶段（与之前相比，每个流水线阶段的计算量更少），而不是单个连续的层。\nAn Example 例如，如果每个设备之前被分配 4 层 (即设备 1 有 1 - 4 层，设备 2 有 5 - 8层\u0026hellip;)，我们可以让每个设备为两个模型块执行计算 (每个模型块被分配 2 层)，即设备 1 有 1、2、9、10 层; 设备 2 具有第3、4、11、12层\u0026hellip; 和上一小节一样，我们可以执行完所有 microbatch 的前向传播然后执行所有反向传播 (all-forward, all-backward)，但这将占用大量内存 (与 m 成正比). 因此如图 4 所示，我们设计了一个适配于之前的内存高效 1F1B 的交错调度。它要求 microbatch 数量是流水线并行度 (流水线中的设备数量) 的整数倍。\n如果每个设备都有 v 个阶段 (模型块)，那么每个阶段 microbatch 的前向和反向传播的时间分别为 t_f/v 和 t_b/v. 流水线气泡时间因此减少到 𝑡^int_pb=(p−1)·(tf+tb)/v，\n流水线气泡占比为 𝑡^int_pb / t_id = (p−1) / (m·v).\n这意味着该调度减少气泡时间到原先的 1/v，但该计划需要额外的通信，因此通信量也为原来的 v 倍。\nDefault and Interleaved 1F1B Pipeline Schedules\nTensor Model Parallelism 详情见 Megatron-LM.\nBlocks of Transformer Model Partitioned with Tensor Model Parallelsim\nPerformance Analysis of Parallelization Configurations 首先定义下符号含义\n(p,t,d): 并行化维度。p 表示流水线模型并行大小，t 表示张量模型并行大小，d 表示数据并行大小。 n: GPU 数量，要求 ptd=n. B: 全局批大小 (作为输入提供) b: microbatch 大小。 m = B/(db): 一个 batch 中每个流水线中的 microbatch 的数量。 Tensor and Pipeline Model Parallelism 如前所述，使用带有周期性冲洗的流水线并行会产生大小为 (p−1)/m 的流水线气泡. 固定 d=1，则 tp=n，气泡大小可以用 t 表示为\n(p−1)/m=(n/t-1)/m.\nGPU 之间的通信量也受 p 和 t 大小的影响。流水线模型并行的特点是更便宜的点对点通信，每个 microbatch 的每对连续设备之间 (前向或后向传递) 需要执行的通信总量为 bsh. 张量模型并行则使用 all-reduce 通信，总大小为 bsh 的张量需要在每层的前向和后向传递中，在 t 个模型副本之间进行两次 all-reduce，因此每个 microbatch 每层每个设备的总通信量为 4bsh(t-1)/t. 每个设备通常有多个层，则每个设备上每个 microbatch 的张量并行通信总量为 l^stage4bsh(t-1)/t, 其中 l^stage 为流水线阶段的层数。\nTip\n启示 1: 当 t 大于单个节点中的 GPU 数量时，在较慢的节点间链路上执行张量模型并行的开销非常大。在考虑不同形式的模型并行时，使用 g-GPU 服务器时张量模型并行度一般为 g (all-reduce 通信量大，NVLink 带宽高)，然后可以使用流水线模型并行来扩展到跨服务器的更大模型 (P2P 通信量小，PCIe 带宽低).\nData and Model Parallelism 管道模型并行性。设 t=1，每个管道的 microbatches 数量 m=𝐵/(db)=b\u0026rsquo;/d, b\u0026rsquo;:=B/b. 设 GPU 总数为 n ，流水线阶段数为 p=n/d，气泡大小为\n(p−1)/m=(n/d-1)/(b\u0026rsquo;/d)=(n-d)/b'\n管道气泡随着 d 变大而变小。如果数据并行所需的 all-reduce 通信不会随着 d 的变大而急剧增加，那么总体吞吐量将会增加，因为基于环的实现的通信时间随着 d 的变化为 (d−1)/d=1−1/d.同样对于给定的并行配置，随着批量大小的增加，b\u0026rsquo; = B/b 增加，因此吞吐量上升。同时数据并行所需的 all-reduce 通信频率也下降，进一步提高了吞吐量。\nFraction of Time Spent Idling due to Pipeline Flush\n在张量模型并行下，每个 microbatch 都需要进行 all-reduce 通信，这在多 GPU 服务器上开销很大；而数据并行只需要在每个 batch 中执行一次的 all-reduce通信。此外，使用张量模型并行，每个设备计算每层的一部分，因此对于不够大的层， GPU 可能无法以峰值效率执行这些子矩阵计算。\nTip\n启示 2：在使用数据和模型并行时，应使用 M=tp 的总模型并行大小，以便模型参数和中间数据满足 GPU 内存限制；数据并行可用于将训练扩展到更多 GPU.\nMicrobatch Size 给定函数 t_f(b) 和 t_b(b)，将 microbatch 大小映射为单个 microbatch 的前向和反向计算时间，计算一个 batch 所花费的总时间 (忽略通信成本) 为\n(b\u0026rsquo;/b+p-1)·(t_f(b)+t_b(b)).\nmicrobatch 大小因此既影响运算的算术强度，也影响管道气泡大小。\nPer-GPU Throughput versus Microbatch Size for a GPT Model\nBehavior of Throughput for the same GPT Model\nTip\n启示 3：最佳 microbatch 大小 b 取决于模型的吞吐量和内存占用特征，以及流水线深度 p、数据并行大小 d 和批量大小 B.\nActivation Recomputation 激活重计算通过在向后传递之前运行第二次正向传播 (并且仅存储给定流水线阶段的输入激活)，来权衡所执行的计算操作数量的增加对额外内存占用的影响。设 A^input 为一层的输入激活的大小，A^intermediate 为每层的中间激活的大小，一个模型阶段有 l 层， 激活保存点的数量为 c，那么总内存占用为 c·A^input + l/c·A^intermediate. 因此取 c = \\sqrt(l·A^input·A^intermediate) 时内存占用最小。\nImplementation Communication Optimizations 使用流水线并行时，我们希望在正向和反向并行发送和接收张量。每台 DGX A100 都配备了 8 个 InfiniBand（IB）网卡。然而发送和接收都是点对点的，只发生在两台服务器上的一对 GPU 之间，因此很难充分利用所有网卡。对于流水线内的单次通信，每个 transformer 层的输出都会在张量并行的设备中复制。为了减少这种冗余，我们可以在发送端将张量分割成大小相等的块，然后使用每个 rank 自己的 InfiniBand 发送. 在接收端通过比 InfiniBand 互连快得多的 NVLink 执行 all-gather，重新组装整个张量。通过 scatter-gather 通信优化，将每对连续流水线阶段之间需要执行的通信总量减少为 bsh/t.\nComputation Optimizations 将数据布局从 (b,s,a,h) 更改为 (s,b,a,h). 其次，使用 PyTorch JIT 为一系列元素操作 (bias+GeLU 和 bias+dropout+add) 生成融合算子。\nEvaluation 在 Selene 超级计算机上以混合精度运行。每个集群节点有\n8 个 NVIDIA 80GB A100 GPU，通过 NVLink 和 NVSwitch 互连。 8 个 NVIDIA Mellanox 200Gbps HDR Infiniband HCA 用于应用程序通信 额外有 2 个 HCA 用于专用存储。 节点以三级 (leaf, spine, core) 胖树拓扑结构连接，一共有 850个交换机。集群使用 all-NVME 共享并行文件系统进行高性能数据访问和存储。16 位精度的 A100 GPU 的峰值设备吞吐量为 312 teraFLOP/s. QKV 变换的线性层权重参数量均为 h^2, attention 后的线性层权重参数量为 h^2, 两层前馈网络每个线性层的权重参数量为 4h^2，因此每一个 transformer block 的所有线性层的参数量为 12h^2. 词嵌入的参数量为 Vh，位置编码的参数量为 sh.\n一个 $A_{m\\times k}\\times X_{k\\times n}$ 矩阵乘法需要 2mkn FLOPs( 2 是因为乘法和加法). transformer block 包含一个注意力块和一个两层前馈网络组成。对于注意力块，主要的 FLOP 来源于 QKV 转换 (6Bsh^2 次操作)、注意力矩阵计算 (2Bhs^2 次操作)、注意力乘 Value (2Bhs^2 次操作) 和 attention 后的线性层 (2Bsh^2 次操作). 前馈网络将隐藏维度放大到 4h，然后再减小到 1h，需要 16Bsh^2 次操作。将这些加在一起，每个 transformer block 一共有 24Bsh^2+4Bhs^2 FLOPs. 反向传播需要两倍的计算量，因为需要计算关于输入张量和权重张量的梯度。此外，使用激活重计算需要在反向传播之前进行额外的正向传播。因此，每一层的总计算量为 FLOPs 为 4*(24Bsh^2+4Bhs^2).\n计算量另一方面来源于 head 的 logit 层，它将维度的特征 h 转换为词汇表维度的特征 V. 该操作所需的计算量为正向传播的 2BshV 和反向传播的 4BshV，总共 6BshV FLOPs.\nResult Pipeline-parallel 并行度增加降低 GPU 的计算效率，因为 bubble 变多了。 Batchsize 的增大可以减少 pipeline-parallel 并行度大小带来的影响。\nBatch size增加有助于提高GPU的计算效率。 Interleaved schedules 能显著提高GPU的计算效率。\n不使用激活重计算的话单位时间内的训练的吞吐是要高于使用重计算的，因为重计算在反向传播中引入额外的计算量。 由于重计算可以节省显存，batchsize 可以相应提高不少。由于 batchsize 的提高，训练吞吐量也得到了提高，从而达到了优化的效果。\n","permalink":"http://localhost:1313/blogs/efficient-large-scale-language-model-training-on-gpu-clusters/","summary":"Paper reading about Efficient Large-Scale Language Model Training on GPU Clusters.","title":"Efficient Large-Scale Language Model Training on GPU"},{"content":"Abstract 我们的方法不需要新的编译器或更改库，与流水线模型并行 (pipeline model parallelism) 正交互补，并且可以通过在原生 PyTorch 中插入一些通信操作来实现。为了阐述我们的方法，使用 512 个 GPU 将基于 transformer 的模型扩展到 83 亿个参数。与可保持 39 TeraFLOPs (峰值 FLOPs 的 30%) 的强大单 GPU 基准相比，我们在整个应用中保持了 15.1 PetaFLOPs，扩展效率高达 76%.\nIntroduction 随着 LLM 变得越来越大，它们会超出现代处理器的内存限制，并需要如激活检查点 (activation checkpoint) 等额外的内存管理技术。广泛使用的优化算法 (如ADAM) 需要每个参数额外的内存来存储动量和其他优化器状态。这减少了可以有效训练的模型的大小。模型并行性的几种方法克服了这一限制，它们对模型进行分区，使权重及其相关的优化器状态不需要并发地驻留在处理器上。\nActivation Checkpoint 在深度学习模型的训练过程中，前向传播会计算并存储每一层的激活值，这些激活值在后向传播时被用来计算梯度。然而，对于深度很大的模型因为需要存储大量的激活值，可能会导致内存溢出。激活检查点技术通过在前向传播过程中只存储一部分的激活值来解决内存占用问题，如果在后向传播过程中需要没有存储的激活值就进行重新计算。 为了证明方法的可扩展性，通过在单个英伟达 V100 32GB GPU 上训练一个包含 12 亿个参数的模型来建立基准。训练该模型可维持 39 TeraFLOPs 的算力，是在 DGX-2H 服务器中配置的单个 GPU 理论峰值 FLOPS 的 30%. 在 512 个 GPU 上将模型扩展到 83 亿个参数，并采用 8 路模型并行，在整个应用中实现了高达 15.1 PetaFLOPs 的持续运行速度。与单 GPU 情况相比，扩展效率提高了 76%. 下图展示了更详细的扩展结果。\nModel (blue) and model\u0026#43;data (green) parallel FLOPS\nBackground \u0026amp; Chanllenges Neural Language Model Pretraining 早期的预训练和传递语言神经表示的例子表明，与从头开始学习的词嵌入表相比，预训练的词嵌入表改善了下游任务的结果。目前的技术水平已经从传输单词嵌入表发展到传输整个数十亿参数的语言模型。这种方法的进步要求硬件、系统技术和框架能够高效地大规模运行。\nTransformer Language Models and Multi-Head Attention 下图展示了使用的 transformer 模型的示意图。最近利用 transformer 进行语言建模的工作，如 BERT 和 GPT-2 根据需要分别只使用编码器和解码器。\nGPT-2 和 BERT 都对多头注意和 FFN 的输入使用 GeLU 非线性和层归一化，而原始 transformer 使用 ReLU 非线性并对输出进行层归一化。\nTransformer Architecture\nData and Model Parallelism in Deep Learning 将深度神经网络训练扩展到多硬件加速器有两种范式:\nData Parallelism (DP): 将 batch 拆分到多个 worker Model Parallelism (MP): 将模型的内存使用和计算分布在多个 worker 中。 Pipeline Parallelism (PP): 一组操作在一个设备上执行，然后将输出传递到流水线中的下一个设备执行另一组操作。 Distributed Tensor Computation: 将张量运算分割到多个设备上，以加速计算或增加模型大小。 然而，这些技术有一个基本的限制: 模型权重必须能加载进 worker. 我们的方法是利用模型并行性在多个加速器之间分割模型。\nModel Parallel Transformers 我们利用 transformer 网络的结构 (self-attention 和 FFN (2*MLP) 组成)，通过添加一些同步原语，创建了一个简单的并行计算模型。下面分别阐述对 FFN 和 self-attention 的并行化。\nFFN 第一个 MLP 由一个 GEMM，后跟一个 GeLU 非线性组成:\n$$\rY=\\text{GeLU}(XA)\r$$并行化 GEMM 的一种选择是将权重矩阵 A 沿着行切分，并将 X 沿着其列切分:\n$$\rX=[X_1,X_2], A=\\begin{bmatrix}A_1\\\\A_2\\end{bmatrix}\r$$\rRow Split of Weight\n可以得出 $Y = X_1A_1+X_2A_2$. 由于 GeLU 是非线性函数，因此这种方法需要在 GeLU 函数之前进行同步。\n另一个选择是沿着列切分 $A=\\begin{bmatrix}A_1,A_2\\end{bmatrix}$. 这样可以让 GeLU 独立地应用于每个 GEMM 的输出\n$[Y_1, Y_2]=\\begin{bmatrix}\\text{GeLU}(XA_1),\\text{GeLU}(XA_2)\\end{bmatrix}$.\nColumn Split of Weight\n这种切分方式的优点是不需要进行同步操作。\n如下图所示，以列并行方式切分第一个 GEMM，并沿着其行切分第二个GEMM。然后，在将输出传递给 dropout 层之前，第二个GEMM 的输出在 GPU 之间进行 all-reduce 操作。这种方法将 FFN 中的两个 GEMM 拆分到多个 GPU 上执行，并且只需要在正向传播 (g 操作符) 和反向传播 (f 操作符) 中分别执行一次 all-reduce 操作。\nParallelism of MLP\n如下图所示，利用多头注意力操作中本身存在的并行性，以列并行的方式划分与 QKV 相关的 GEMM，以便每个注意力头对应的矩阵乘法在一个 GPU 上独立完成。输出线性层的 GEMM 沿着其行并行化，并直接获取并行 attention 的输出。\nParallelism of Self-Attention\n如下图所示，这使能够仅在正向传播和反向传播中分别中使用两个 all-reduce 操作执行 transformer 中所有的 GEMM.\nParallelism of Transformer Layer\n基于 transformer 的语言模型的输出嵌入维度为隐藏层大小 (H) 乘以词汇表大小 (v). 我们沿着词汇表维度 $E = \\begin{bmatrix}E_1,E_2\\end{bmatrix}$ 并行化权重矩阵。每一块现在只包含嵌入表的一部分，输入嵌入后需要一个 all-reduce (g 算子).\n对于输出嵌入，一种方法是通过并行 $\\mathrm{GEMM} [Y_{1},Y_{2}]=[XE_{1},XE_{2}]$ 来获得 logits，并对结果 all-gather 后送入交叉熵损失函数。在这种情况下，all-gather 通信量为 bsv 个元素 (b 是批处理大小，s 是序列长度). 为了减小通信规模，我们将输出与交叉熵损失融合，这样通信量降为 bs.\n我们在每个 GPU 上维护层归一化参数的副本，并在将这些张量作为输入送到下一个模型并行区域之前，在本地输出上进行 dropout 和残差连接。为了优化模型，我们允许每个模型并行 worker 优化自己的一组参数。因为所有的值要么是本地的，要么是在 GPU上 重复的，所以在这个公式中不需要通信更新的参数值。\n","permalink":"http://localhost:1313/blogs/megatronlm/","summary":"Paper reading about Megatron-LM","title":"Megatron-LM"},{"content":"Background 如今 LLM 的 token 长度显著增加，从 GPT-3.5 的 16k 到 Claude 2 的 200k，现在 Gemini 1.5 Pro 甚至有 1M 的 token 长度。如此长的 token 在计算 attention 时对显存的需求非常大。Ring Attention 便是为了并行计算 attention 而提出的一种方法1。\nRing Attention 和 Flash Attention 可以同时使用。\nAttention and Memory 要计算 attention， 我们需要三个大小为 (s, d) 的矩阵：Q (query)、K (key)、V (value)，其中 s 为序列长度，d 为模型维度。attention 的计算公式为\n$$\rAttention(Q, K, V) = softmax(QK^T / \\sqrt{d})V\r$$忽略 sqrt(d) 项，我们记 Score Matrix 为 S = QK^T / \\sqrt{d}，然后对 S 进行 softmax 归一化，得到 Attention Matrix. 可以发现它们占用显存大小是 O(s*s) 数量级。即使使用 Flash Attention，显存占用量也是 O(s) 数量级。\nAttention Compute Process\n我们希望如果在 N 个设备上并行计算 attention，每个设备的显存占用量为整个的 1/N, 因此就需要对 Q、K、V 的 sequence 长度进行切分。但是如果得到的最终 attention 矩阵需要在设备间进行集合通信组装每个的计算结果，通信量也和 sequence 长度成正比。Ring Attention 提出了一个巧妙的解决方案：在设备之间进行轮转，并行化所有计算而且完全隐藏通信的开销。\nWe will rotate between devices to parallelize all computation and hide the communication overhead completely.\nSplitting the Query 假设我们有 N 个设备，我们将 Q 沿着 sequence 维度切分为 N 份，每份大小为 (s/N, d). 由于计算 Score 和 Attention 需要完整的 K 和 V，这样它们也被切分成 N 份，每份大小为 (s/N, d). 计算示意图如下。\nSplit Q\nSplitting the Key and Value 对 K 和 V 的切分并不能像 Q 那样直接。因为 softmax 的计算公式如下，要得到分母的值意味着我们需要对每一行进行计算。\n$$\rsoftmax(s_i) = \\frac{\\exp(s_i)}{\\sum_{j=i}^d{\\exp(s_j)}}\r$$如果我们能对 K 和 V 进行切分并正确计算 softmax，那么计算过程可以由下图所示的那样完成 (忽略 softmax). 外循环遍历 Q 的所有分块，内循环遍历 K 和 V 的所有分块，一次计算一部分的 attention. Ring Attention 示意图如下所示，顾名思义所有设备组成一个环状，每个设备存储 Q 的一部分，每次迭代过程会传递 K 和 V 到下一个设备，最终每个设备将得到计算自己 Q 部分的 attention 矩阵所需要的 K 和 V. 每个设备被分配 Q 的一部分 (即一个外层循环索引)，并迭代计算每个 K 和 V 的分块 (内循环)。每个设备只需要跟踪形状为 (s/N, s/N) 的累积和 A_j。\nAttention Parallel Computation\nOnline Softmax 在内循环的每次迭代中我们可以更新部分和为 $l^j = l^{j-1} + \\sum_{k_t\\in K_j}{\\exp(Q_ik_t^T)}$. 在内循环结束后我们就可以获得每一行的指数和。归一化和与 V 的相乘顺序不会影响结果，我们可以先累加总和，并在所有其他计算完成后再执行实际的归一化操作。\n因此，设备 i 除了计算当前的累计和 $A^j = A^{j-1} + \\exp(Q_i K_j^T) V_j$ 外，还需要在内循环每次迭代中更新部分和 $l^j \\in \\mathbb{R}^{B_q}$ ，其中 $B_q$ 为 Q 的分块大小。\nSafe softmax 由于指数运算经常容易出现溢出，我们通常减去 max(s_i) 后进行指数运算，公式如下，这样并不会影响结果。\n$$\r\\mathrm{softmax}(s_{1:N})=\\frac{\\exp(s_{1:N})}{\\sum_i\\exp(s_i)}\\cdot\\frac{\\exp(-s_{max})}{\\exp(-s_{max})}=\\frac{\\exp(s_{1:N}-s_{max})}{\\sum_i\\exp(s_i-s_{max})}\r$$所以我们在内循环每次迭代中需要先更新当前的最大值 $m^{j+1}=\\max(m^j,\\max(Q_iK_{j+1}^T))$，然后更新之前迭代的计算结果 A_j 和 部分和 l_j. 最后再计算本次迭代的结果。\n$$\rA^{j+1}=A^j\\cdot\\exp(m^j-m^{j+1})+\\exp(Q_iK_{j+1}^T-m^{j+1})\\cdot V_j\r$$更新部分和\n$$\rl^{j+1}=l^j\\cdot\\exp(m^j-m^{j+1})+\\exp(Q_iK_{j+1}^T-m^{j+1})\r$$Putting it Together Ring Attention 计算步骤如下：\n沿着 Q 的 sequence 长度拆分为一个独立的外循环。 应用 Online Safe Softmax，以便沿着 K 和 V 的sequence 长度拆分，从而在内层循环中累积计算注意力。 这种并行化的方式是通过将每个设备分配一个 Q_i 块来实现的。因此，我们需要将 Q 拆分为 N 个相等的部分 (B_Q=N). 每个设备将分别计算它的输出块 $\\text{Output}(Qi,K,V)= \\text{softmax}(Q_i K^T)V ，通过在 K 和 V 块上执行内循环来迭代计算。难点挑战在于设备无法一次存储完整的 K 和 V 矩阵。\n如果我们有 4 个 GPU，那么我们将把每个设备的 Q 按序列维度分成 4 个块，K 和 V 被分割成 B_K=B_Q=N 个块，并对设备进行初始化，使每个设备都持有一个 Qi 块、 一个 Kj 块和 一个 Vj 块。为简单起见，我们可以假设设备 i 在开始时持有 Qi, Ki 和 Vj 块。在设备计算完与其当前 vj kj 相对应的一个内循环步骤后，每个设备都需要接收下一个 Key 和 Value 块，以继续内循环。 我们将 N 个设备围成一个环，其中设备 i 可以向设备 i+1 以此类推，如图所示：\nKV-overlap\n如果在设备 i 上计算内循环的一个步骤 Qi,Vj,Kj 的这段时间内，设备 i 还能向设备 i+1 发送其当前 Kj Vj，并同时从设备 i-1 接收 V_j-1,K_j-1，那么只要发送和接收密钥和值块的时间低于计算时间，那么发送和接收 Key 和 Value 块的延迟就会隐藏在执行实际计算时间之内。一个例子如下图所示。\nKV-rotate\nMemory and Arithmetic Complexity 以深度学习中常用的 bfloat16 数据类型为例。GPU 或 TPU 等并行处理加速器通常以 FLOP:=F 来衡量，即设备理论上每秒可执行的浮点运算次数。我们假设硬件被完全利用。此外，我们设不同设备之间的连接带宽为:=B (Bytes/sec).\n内存复杂度: 为了同时进行接收发送和计算，我们需要有用于接收新 KV 块的寄存器器。存储当前 KV 值块需要 2dc 浮点数或 4dc 字节。用于接收新的 KV 块的内存大小也是 2dc 浮点数或 4dc 字节。假设计算本身不需要更多内存 (利用 Flash Attention 或 Blockwise Attention)，计算当前步骤的输出需要 dc 个浮点数或 2dc 字节。此外，每个设备还需要存储其 Qi 块，这也需要 dc 个浮点数或 2dc 字节。总共需要 6dc 个浮点或 12dc 字节。\nNote\nRing Attention 与 Flash Attention 是正交的，可以一起使用 (Flash Attention 实际上用于 Ring Attention 的内循环). Flash Attention 目标是不将整个 Score Matrix 加载到全局内存中，从而在序列长度上获得线性内存复杂度。Ring Attention 将 原始注意力方法和 Flash Attention 的内存复杂度至少降低了 N 倍，使用 N 个设备的内存复杂度至少降低 N 倍，因为它将所有矩阵都拆分为至少 N 个或更多部分 (将 QKV 分别分成 N 份，并将 Score Matrix 分成 N^2 分). 无论内存复杂度是由 QKV，还是由 Score Matrix 主导，Ring Attention 都能将内存成本降低至少 N 倍。\n通信开销: 在内循环每一步中，每个设备需要通过带宽为 B 的信道向下一个设备发送 2⋅c_Q⋅d 浮点数。每个 bf16 大小为 2字节，因此，所需的时间约为 4⋅c⋅d/B.\n运算强度： 一个内循环步骤，计算局部注意力需要 2⋅d⋅c^2 次浮点计算，计算 softmax，归一化向量和最大值向量需要 2⋅c⋅d 次浮点计算，计算局部注意力与 Vj 块的乘积需 2⋅d⋅c^2 次浮点计算。因此，总计算所需时间≈4⋅d⋅c^2/F.\n为了重叠通信和计算 (隐藏通信开销)，我们需要 KV 块的传输时间小于等于计算本地 QKV 所需的时间：\n$$\r4\\cdot c\\cdot d/B\\leq4\\cdot d\\cdot c^2/F\\iff B\\geq F/c\\iff s/N\\geq F/B $$Futher Optimization Ring Attention 的一个应用是用于因果 Transformal 模型时，加上三角形掩码用于注意力计算。这意味着有些 GPU 不需要对整个序列进行计算，导致它们大部分时间处于闲置状态。作为 Ring Attention 的扩展，Stripe Attention 解决了这一问题，并提供了一种分配计算更均匀的方案，从而使 Ring Attention 的计算速度更快。\n除了 Ring Attention 和 Flash Attention 等使标准 Transformer 架构能有更长的上下文长度的技术外，人们还尝试使用 Mamba 等具有线性注意力的状态空间模型（SSM）等模型架构。\nReferences https://coconut-mode.com/posts/ring-attention/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/blogs/ringattention/","summary":"This is a brief introduction to the Ring Attention Principle.","title":"Ring Attention Principle"},{"content":"15 Graph Traversal 图是一种表示实体之间关系的数据结构。所涉及的实体表示为顶点，关系表示为边。图的遍历是指从一个顶点出发，依次访问图中所有与之相邻的顶点，直到所有顶点都被访问过为止。\n15.1 Background 下图展示了一个有向的简单图的例子。我们为每个顶点分配一个唯一的数字，称为顶点编号 (vertex id).\nA Simple Graph Example with 9 Vertices and 15 Directional Edges\n图的直观表示是邻接矩阵 (adjacency matrix). 如果存在一条从源顶点 i 到目的顶点 j 的边，则邻接矩阵元素 a[i][j] 的值为 1，否则为 0. 下图展示了对应的邻接矩阵。\nAdjacent Matrix Representation of the Example Graph\n稀疏连接的图可以用稀疏矩阵表示，下图展示了用三种不同存储格式的邻接矩阵: CSR, CSC 和 COO. 我们将行下标和指针数组分别称为 src 和 srcPtrs 数组，列下标和指针数组分别称为 dst 和 dstPtrs 数组。在图的 CSR 表示中，每个源顶点指针(srcPtrs) 给出顶点出边的起始位置。在图的 CSC 表示中，每个目的顶点指针 (dstPtrs) 给出顶点入边的起始位置。在图的 COO 表示中，src 和 dst 数组分别存储源顶点和目的顶点的编号。\nThree Sparse Matrix Representations of the Adjacency Matrix\n15.2 Breadth-first Search (BFS) BFS 通常用于找到从图的一个顶点到另一个顶点所需遍历的最短边数。一种方法是，给定一个被称为根的顶点，用从根到某个顶点所需要遍历的最小边数来标记每个顶点。\n下图(A)展示示了以顶点 0 为根的 BFS 结果。如果另一个顶点作为根，BFS 的结果将完全不同。下图(B)是为以顶点 2 为根的 BFS 的结果。可以将 BFS 的标记操作看作是构建一个搜索根节点的 BFS 树。树由所有标记的顶点和在搜索过程中从一个顶点到下一个顶点的遍历的边组成。\n(A and B) Two Examples of BFS Results for Two Different Root Vertices\n下图展示了 BFS 在计算机辅助设计 (Computer-Aided Design, CAD) 中的一个重要应用。迷宫路由 (maze routing) 将芯片表示为图。路由块是顶点。从顶点 i 到顶点 j 的边表示可以将一条线从块 i 延伸到块 j.\nMaze Routing in Integrated Circuits\n15.3 Vertex-centric Parallelization of BFS 以顶点为中心的并行实现将线程分配给顶点，并让每个线程对其顶点执行操作，这通常涉及迭代该顶点的邻居。当处理不同层级的迭代时，并行实现遵循相同的策略。为每一层调用一个单独的内核的原因是，我们需要等待前一层的所有顶点都被标记，然后再继续标记下一层的顶点。下面实现了一个 BFS 内核，根据前一个层级的顶点标签来标记属于该层级的所有顶点。该内核将每个线程分配给一个顶点，检查其顶点是否属于前一层。如果是，线程将遍历出边，将所有未访问的邻居标记为属于当前级别。这种以顶点为中心的实现通常被称为自顶向下或 push 实现，因为其需要访问给定源顶点的出边。多个线程可以将该标志赋值为 1，代码仍然可以正确执行。这个性质称为幂等性 (idempotence).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct CSRGRAPH { int numVertices; int* scrPtrs; // Strating outgoing edge index of each vertex int* dstList; // Destination vertex index of each edge }; __global__ void bfs_kernel_csr(CSRGRAPH graph, unsigned int* level, unsigned int* visited, unsigned int currLevel) { unsigned vertexId = blockIdx.x * blockDim.x + threadIdx.x; if (vertexId \u0026lt; graph.numVertices) { if (level[vertexId] == currLevel - 1) { for (int i = graph.scrPtrs[vertexId]; i \u0026lt; graph.scrPtrs[vertexId + 1]; i++) { unsigned int neighbor = graph.dstList[i]; if (level[neighbor] == 0xFFFFFFFF) { // unvisited neighbor level[neighbor] = currLevel; visited[neighbor] = 1; *visited = 1; // flag to indicate whether reached the end of the graph } } } } } 下图展示了该内核如何执行从第 1 层 (currLevel-1) 到第 2 层 (currLevel) 的遍历。\nExample of a Vertex-centric Push BFS Traversal from Level 1 to Level 2\n第二个以顶点为中心的并行实现将每个线程分配给一个顶点，迭代顶点的入边。每个线程首先检查其顶点是否已被访问。如果没被访问，线程将遍历入边，如果线程找到一个属于前一层的邻居，线程将把它的顶点标记为属于当前层。这种以顶点为中心的实现通常被称为自底向上或 pull 实现。实现要求能访问给定目标顶点的入边，因此要采用 CSC 表示。 以顶点为中心的 pull 实现的内核代码如下，对于一个线程来说，要确定它的顶点处于当前层，只需要该顶点有一个邻居s属于前一层中就足够了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct CSCGRAPH { int numVertices; int* dstPtrs; // Starting incoming edge index of each vertex int* scrList; // Source vertex index of each edge }; __global__ void bfs_kernel_csc(CSCGRAPH graph, unsigned int* level, unsigned int* visited, unsigned int currLevel) { unsigned vertexId = blockIdx.x * blockDim.x + threadIdx.x; if (vertexId \u0026lt; graph.numVertices) { if (level[vertexId] == 0xFFFFFFF) { // loop through its incoming edges if not visited for (int i = graph.dstPtrs[vertexId]; i \u0026lt; graph.dstPtrs[vertexId + 1]; i++) { unsigned int neighbor = graph.scrList[i]; if (level[neighbor] == currLevel - 1) { level[vertexId] = currLevel; *visited = 1; // flag to indicate whether reached the end of the graph break; // Only need 1 neighbor in previous level to identify the vetex is currLevel } } } } } 下图展示了这个内核如何执行从第 1 层到第 2 层的遍历。\nExample of a Vertex-centric Pull (bottom-up) Traversal from Level 1 to Level 2\n在比较推和拉以顶点为中心的并行实现时，需要考虑两个对性能有重要影响的关键差异。\n在 push 实现中，线程在其顶点的循环遍历所有邻居；而在 pull 实现中，线程可能会提前跳出循环。 在 push 实现中，只有被标记为前一层的顶点的线程在遍历其邻居列表；而在 pull 实现中，任何被标记为未访问顶点的线程会遍历其邻居列表。 基于两种实现的差异，常见的优化方法是对低层级使用 push 实现，然后对较高层级使用 pull 实现。这种方法通常被称为方向优化 (directional optimization) 实现。选择何时切换通常取决于图的类型。低度图通常有很多层；高度图中，从任何顶点到任何其他顶点只需要很少的层。因此对于高度图来说从 push 实现切换到 pull 实现通常比低度图要早得多。 如果要使用方向优化的实现，则图的 CSR 和 CSC 表示都需要储存。但对于无向图来说，其邻接矩阵是对称的，因此 CSR 和 CSC 表示是相同的的，只需要存储其中一个，就可以被两个实现使用。 15.4 Edge-centric Parallelization of BFS 在这个实现中，每个线程被分配到一条边。它检查边的源顶点是否属于前一层以及边的目标顶点是否未被访问。 以边为中心的并行实现的内核代码如下。每个线程使用 COO src 数组找到其边缘的源顶点，并检查顶点是否属于前一级。通过此检查的线程将使用 COO dst 数组确定边的目的顶点，并检查其是否未被访问过。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct COOGRAPH { int numVertices; int numEdges; int* srcList; // Source vertex index of each edge int* dstList; // Destination vertex index of each edge }; __global__ void bfs_kernel_coo(COOGRAPH graph, unsigned int* level, unsigned int* visited, unsigned int currLevel) { unsigned edgeId = blockIdx.x * blockDim.x + threadIdx.x; if (edgeId \u0026lt; graph.numEdges) { unsigned int src = graph.srcList[edgeId]; if (level[src] == currLevel - 1) { unsigned int neighbor = graph.dstList[edgeId]; if (level[neighbor] == 0xFFFFFFFF) { // unvisited neighbor level[neighbor] = currLevel; visited[neighbor] = 1; *visited = 1; // flag to indicate whether reached the end of the graph } } } } 下图展示了该内核如何执行从从第 1 层到第 2 层的遍历。\nExample of an Edge-centric Traversal from Level 1 to Level 2\n与以顶点为中心的并行实现相比，以边为中心的并行实现的优点如下\n有更多的并行性。在以顶点为中心的实现中，如果顶点的数量很少，可能不会启动足够的线程来完全占用设备。因为一个图通常有比顶点更多的边，以边为中心的实现可以启动更多的线程。 具有较小的负载不平衡和控制发散。在以顶点为中心的实现中，每个线程迭代不同数量的边。相反，在以边为中心的实现中，每个线程只遍历一个边。 以边为中心的实现的缺点如下 需要检查图中的每条边。相反，以顶点为中心的实现中，如果确定顶点与当前层级无关，则会跳过整个边列表。 使用 COO 格式存储图，与以顶点为中心的实现使用的 CSR 和 CSC 相比，它需要更多的存储空间来存储边。 15.5 Improving efficiency with frontiers 在前两节中的方法中，我们会检查每个顶点或每条边是否属和当前层有关。这种策略的优点是内核是高度并行的，并且不需要跨线程进行任何同步。缺点是启动了许多不必要的线程，并执行了大量无用的工作。我们可以让处理前一层顶点的线程将它们访问的顶点作为 frontier. 因此，对于当前层级，只需要为该 frontier 中的顶点启动线程。\nExample of a Vertex-centric Push (top-down) BFS Traversal from Level 1 to Level 2 with Frontiers\n对应的内核代码如下。首先为 frontier 的每个元素分配一个线程，使用 CSR srcPtrs 数组来定位顶点的出边并进行迭代。对于每个出边，线程使用 CSR dst 数组确定其目的顶点，若未被访问过，并将其标记为属于当前层级。为了避免多个线程将邻居视为未访问，应该以原子方式执行邻居标签的检查和更新。atomicCAS 内置函数提供 compare-and-swap 的原子操作。如果比较成功,与其他原子操作一样，atomicCAS 返回存储的旧值。因此，我们可以通过比较返回值与被比较的值来检查该顶点是否被访问过。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 __global__ void frontier_bfs_kernel(CSRGRAPH graph, unsigned int* level, unsigned int* prevFroniter, unsigned int* currFroniter, unsigned int numPrevFroniter, unsigned int* numCurrFroniter, unsigned int* currLevel) { // Each thread processes a node in prevFroniter. unsigned int i = blockIdx.x * blockDim.x + threadIdx.x; if (i \u0026lt; numPrevFroniter) { unsigned int vertexId = prevFroniter[i]; // All its neighbouring nodes are traversed. for (unsigned int edge = graph.scrPtrs[vertexId]; edge \u0026lt; graph.scrPtrs[vertexId + 1]; edge++) { unsigned int neighbor = graph.dstList[edge]; if (atomicCAS(level + neighbor, 0xFFFFFFFF, currLevel) == 0xFFFFFFFF) { // check if neighbor is unvisited unsigned int currFroniterIndex = atomicAdd(numCurrFroniter, 1); currFroniter[currFroniterIndex] = neighbor; } } } } 这种基于 frontier 的方法的优势在于，它通过只启动处理相关顶点的线程减少了冗余工作。缺点是长延迟原子操作的开销，特别是当这些操作竞争访问相同的地址时。对于 atomicAdd 操作争用会很高，因为所有线程都增加同一个计数器。\n15.6 Reducing Contention with Privatization 私有化可以应用于对 numCurrFrontier 的增加，以减少插入 frontier 时的争用。我们可以让每个线程块在整个计算过程中维护自己的本地 frontier，并在完成后更新全局 frontier. 本地 frontier 及其计数器可以存储在共享内存中，从而支持对计数器和存储到本地边界的低延迟原子操作。此外，当将共享内存中的 frontier 存储到全局内存中的公共 frontier 时，访问可以合并。\n下图说明了 frontier 私有化的执行情况。\nPrivatization of Frontiers Example\n对应的内核代码如下。注意到公共 frontiner 的索引 currFrontierIdx 是用 currFrontierIdx_s 表示的，而 currFrontierIdx_s 是用 threadIdx.x 表示的。因此，相邻线程存储到连续的全局内存位置，这意味着内存访问是合并的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #define LOCAL_FRONTIER_SIZE 4 __global__ void private_frontier_bfs_kernel(CSRGRAPH graph, unsigned int* level, unsigned int* prevFroniter, unsigned int* currFroniter, unsigned int numPrevFroniter, unsigned int* numCurrFroniter, unsigned int* currLevel) { // Initialize privative frontier __shared__ unsigned int currFrontier_s[LOCAL_FRONTIER_SIZE]; __shared__ unsigned int numCurrFrontier_s; if (threadIdx.x == 0) { numCurrFrontier_s = 0; } __syncthreads(); // Perform BFS on private frontier unsigned int i = blockIdx.x * blockDim.x + threadIdx.x; if (i \u0026lt; numPrevFroniter) { unsigned int vertexId = prevFroniter[i]; for (unsigned int edge = graph.scrPtrs[vertexId]; edge \u0026lt; graph.scrPtrs[vertexId + 1]; edge++) { unsigned int neighbor = graph.dstList[edge]; if (atomicCAS(level + neighbor, 0xFFFFFFFF, currLevel) == 0xFFFFFFFF) { // Once a new frontier node is found, unsigned currFroniterIndex = atomicAdd(\u0026amp;numCurrFrontier_s, 1); if (currFroniterIndex \u0026lt; LOCAL_FRONTIER_SIZE) { // Try to add it to the private frontier (currFrontier_s) currFrontier_s[currFroniterIndex] = neighbor; } else { numCurrFrontier_s = LOCAL_FRONTIER_SIZE; // frontier is full, stop adding new elements unsigned int currFrontierIdx = atomicAdd(numCurrFroniter, 1); currFroniter[currFrontierIdx] = neighbor; } } } } // Copy private frontier to global frontier __syncthreads(); __shared__ unsigned int currFrontierStartIdx; // Start index of private frontier in global frontier if (threadIdx.x == 0) { currFrontierStartIdx = atomicAdd(numCurrFroniter, numCurrFrontier_s); } __syncthreads(); // Commit private frontier to global frontier for (unsigned int j = threadIdx.x; j \u0026lt; numCurrFrontier_s; j += blockDim.x) { unsigned int currFroniterIdx = currFrontierStartIdx + j; currFroniter[currFroniterIdx] = currFrontier_s[j]; } } ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch15/","summary":"Personal notebook 15 of Programming Massively Parallel","title":"PMPP Learning-Chapter 15 Graph traversal"},{"content":"14 Sparse Matrix Computation 在稀疏矩阵中，大多数元素是零。存储和处理这些零元素在内存容量、内存带宽、时间和能量方面是浪费的。\n14.1 Background 矩阵常用于求解 N 个未知数 N 个方程的线性系统，其形式为 AX+Y = 0，其中A是一个 NxN 矩阵，X 是一个 N 维的未知数向量，Y 是一个 N 维的常数向量。求解线性方程组的迭代方法中最耗时的部分是对计算 AX+Y，这是一个稀疏矩阵向量的乘法和累加。 删除所有的零元素不仅节省了存储空间，而且消除了从内存中获取这些零元素并对它们执行无用的乘法或加法操作的冗余步骤。 以下是一些在稀疏矩阵存储格式的结构中的关键考虑因素如下:\n空间效率 (Space efficiency): 使用存储格式表示矩阵所需的内存容量。 灵活性 (Flexibility): 通过添加或删除非零来修改矩阵的存储格式的方便程度• 可访问性 (Accessibility): 存储格式是否易于访问数据。 内存访问效率 (Memory access efficiency): 存储格式在多大程度上为特定计算实现了有效的内存访问模式 (正则化的一个方面). 负载平衡 (Load balancing): 存储格式在多大程度上为特定计算在不同线程之间平衡负载 (正则化的另一个方面). 14.2 A simple SpMV kernel with the COO format 如下图所示， COO (COOrdinate) 格式是一种稀疏矩阵的存储格式，其中矩阵元素以三元组的形式存储，即 (i, j, a_ij). 、\nExample of the Coordinate List (COO) Format\n使用以 COO 格式表示的稀疏矩阵并行执行 SpMV (Sparse Matrix Vector Multiplication) 的一种方法是为矩阵中的每个非零元素分配一个线程，下图是其示意图。\nExample of Parallelizing SpMV with the COO Format\n对应的内核代码如下所示，它在列索引对应的位置查找输入向量值，将其乘以非零值，然后将结果累加到对应的行索引处的输出值。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 struct COOMATRIX { int* rowIdx; int* colIdx; float* val; int numNonZeros; }; __global__ void spmv_coo_kernel(COOMATRIX m, float* x, float* y) { // Assign a thread to each nonzero element unsigned int i = blockIdx.x * blockDim.x + threadIdx.x; if (i \u0026lt; m.numNonZeros) { int row = m.rowIdx[i]; int col = m.colIdx[i]; int val = m.val[i]; atomicAdd(\u0026amp;y[row], val * x[col]); // Perform the matrix-vector multiplication } } 下面来分析 COO 格式在几个性能指标上的表现。\n空间效率：COO 需要三个数组，rowIdx, colIdx 和 value，每个数组的元素数量与非零元素的数量相同。 灵活性：只要以相同的方式重新排序 rowIdx, colIdx 和 value 数组，就可以在不丢失任何信息的情况下任意地以 COO 格式重新排序元素。 可访问性方面：COO 不易访问某一行或某一列中的所有非零元素。 内存访问效率：相邻线程访问 COO 格式的每个数组中的相邻元素。因此，通过 SpMV/COO 对矩阵的访问是内存合并的。 负载平衡：由于每个线程负责计算一个非零元素，所有线程负责相同数量的工作。 SpMV/COO 的主要缺点是需要使用原子操作，非常耗时。 14.3 Grouping Row Nonzeros with the CSR Format 如果将同一行中的所有非零都分配给同一个线程，那么该线程将是唯一更新相应输出值的线程，则可以避免原子操作。这种可访问性可以通过 CSR (Compressed Sparse Row ) 存储格式实现。下图说明了如何使用 CSR 格式存储 14.1 节中的矩阵。CSR 也将非零值存储在一维数组中，但这些非零值是按行分组的。COO 格式和 CSR 格式之间的关键区别在于，CSR 格式用 rowPtrs 数组替换了 rowIdx 数组，rowPtrs 数组存储了 colIdx 和 value 数组中每行非零的起始偏移量，每行中的非零元素不一定按列索引排序。\nExample of Compressed Sparse Row (CSR) Format\n如下图所示，要使用以 CSR 格式表示的稀疏矩阵并行执行 SpMV，可以为矩阵的每一行分配一个线程。由于一个线程遍历一行，所以每个线程将输出写入不同的内存位置。\nExample of Parallelizing SpMV with the CSR Format\n对应的内核代码如下，每个线程确定它负责的行，循环遍历该行的非零元素来执行点积。线程在 rowPtrs 数组中确定它们的起始索引 (rowPtrs[row])和通过下一行非零的起始索引 (rowPtrs[row+1]) 来确定结束位置。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct CSRMatrix { int* rowPtrs; int* colIdx; float* val; int numRows; }; __global__ void spmv_csr_kernel(CSRMatrix m, float* x, float* y) { // Assign a thread to each row unsigned int row = blockIdx.x * blockDim.x + threadIdx.x; if (row \u0026lt; m.numRows) { int start = m.rowPtrs[row]; int end = m.rowPtrs[row + 1]; float sum = 0.0f; for (int i = start; i \u0026lt; end; i++) { int col = m.colIdx[i]; float val = m.val[i]; sum += val * x[col]; } y[row] = sum; // Perform the matrix-vector multiplication } } 下面来分析 CSR 格式在几个性能指标上的表现。\n空间效率：CSR 需要三个数组，其中 colIdx 和 value 的维度和非零元素的数量一样。rowPtrs 维度等于行数加 1. 灵活性：CSR 格式中要添加的非零必须添加到它所属的特定行中。这意味着后面行的非零元素都需要移动，后面行的行指针都需要相应增加。 可访问性：CSR 可以很容易地访问给定行的非零元素，允许在 SpMV/CSR 中跨行并行。 内存访问效率：CSR 访问模式使得连相邻程访问的数据相距很远，并不能进行内存合并。 负载平衡：线程在点积循环中进行的迭代次数取决于分配给线程的行中非零元素的数量，因此大多数甚至所有线程中都存在控制发散。 14.4 Improving Memory Coalescing with the ELL Format ELL 存储格式通过对稀疏矩阵数据进行填充和转置，可以解决非合并内存访问的问题。它的名字来源于 ELLPACK 中的稀疏矩阵包，一个用于求解椭圆边值问题的包。 一个用 ELL 格式存储的例子如下图所示。从按行分组非零的 CSR 格式中确定具有最大非零元素数量的行。然后在所有其他行的非零元素之后的添加填充元素，使它们与最大行长度相同。最后按列主元素顺序存储填充矩阵。\nExample of ELL Storage Format\n下图使用 ELL 格式并行化 SpMV。与 CSR 一样，每个线程被分配到矩阵的不同行。\nExample of Parallelizing SpMV with the ELL Format\n对应的内核代码如下，点积循环遍历每行的非零元素。SpMV/ELL 内核假设输入矩阵有一个向量 ellMatrix.nnzPerRow 记录每行中非零的数量，每个线程只迭代其分配的行中的非零元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct ELLMATRIX { int* nnzPerRow; // Number of nonzeros per row int* colIdx; // Column indices of nonzeros float* val; // Nonzero values int numRows; // Number of rows }; __global__ void spmv_ell_kernel(ELLMATRIX m, float* x, float* y) { unsigned int row = blockIdx.x * blockDim.x + threadIdx.x; if (row \u0026lt; m.numRows) { float sum = 0.0f; for (unsigned int i = 0; i \u0026lt; m.nnzPerRow[row]; i++) { // ell matrix stores values in column-major order unsigned int col = m.colIdx[i * m.numRows + row]; float val = m.val[i * m.numRows + row]; sum += val * x[col]; } y[row] = sum; // Perform the matrix-vector multiplication } } 下面来分析 CSR 格式在几个性能指标上的表现。\n空间效率：由于填充元素的空间开销，ELL格式的空间效率低于CSR格式。 灵活性：ELL 格式的比 CSR 格式有更高的灵活性。只要一行没有达到矩阵中非零的最大数目，就可以通过简单地用实际值替换填充元素来向该行添加非零。 可访问性：ELL 可以访问某一行的非零元素。ELL 还允许在给定非零元素的索引后得到该元素的行和列索引，因为 i = col*m.numRows + row, 通过 i % m.numRows 就可以得到所在的行。 内存访问效率：由于元素按列主序排列，所有相邻的线程现在都访问相邻的内存位置。 负载平衡：SpMV/ELL 仍然和 SpMV/CSR 具有相同的负载不平衡问题，因为每个线程循环次数仍取决它负责的行中的非零元素数量。 14.5 Regulating Padding with the Hybrid ELL-COO Format 在 ELL 格式中，当一行或少数行具有非常多的非零元素时，空间效率低和控制发散的问题最为明显。COO 格式可用于限制 ELL 格式中的行长度。在将稀疏矩阵转换为 ELL 之前，我们可以从具有大量非零元素的行中取出一些元素，并将这些元素用单独的 COO 格式存储。 下图展示了如何使用混合 ELL-COO 格式存储图中矩阵。从 ELL 格式中删除第二行的最后 3 个非零元素和第六行的最后 2 个非零元素，并将它们移动到单独的 COO 格式中。\nHybrid ELL-COO Example\n对应的内核代码如下，点积将被划分为两部分处理，一部分负责处理 ELL 格式的非零元素，另一部分负责处理 COO 格式中 rowIdx 与 row 相同的非零元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 __global__ void spmv_hybrid_ell_coo_kernel(ELLMATRIX ell, COOMATRIX coo, float* x, float* y) { unsigned int row = blockIdx.x * blockDim.x + threadIdx.x; float sum = 0.0f; // ELL part if (row \u0026lt; ell.numRows) { for (int i = 0; i \u0026lt; ell.nnzPerRow[row]; i++) { unsigned int col = ell.colIdx[i * ell.numRows + row]; float val = ell.val[col]; sum += val * x[col]; } } y[row] = sum; // Perform the matrix-vector multiplication // COO part for (int i = 0; i \u0026lt; coo.numNonZeros; i++) { int col = coo.colIdx[i]; float val = coo.val[i]; sum += val * x[col]; atomicAdd(\u0026amp;y[row], val * x[col]); } } 下面来分析混合 ELL-COO 格式在几个性能指标上的表现。\n空间效率：因为减少了填充元素，混合 ELL-COO 格式比单独使用 ELL 格式的空间效率更高。 灵活性：混合 COO-ELL 既可以通过替换填充元素来添加非零。如果该行没有任何可以在 ELL 部分中替换的填充元素，也可以在格式的 COO 部分添加。 可访问性：访问给定行中所有的非零元素只能用于适合用 ELL 格式存储的部分行。 内存访问效率：SpMV/ELL 和 SpMV/COO 都能对稀疏矩阵进行合并内存访问。因此，它们的组合也将是合并访问模式。 负载平衡：从ELL 格式部分移除一些非零元素可以减少 SpMV/ELL 内核的控制发散。这些非零元素被放在 COO 格式部分，不会出现控制发散。 14.6 Reducing Control Divergence with the JDS Format 根据矩阵中行的非零元素夺少进行降序排序之后矩阵在很大程度上看起来像三角形矩阵，因此这种格式通常被称为 JDS (Jagged Diagonal Storage) 格式。 下图展示了如何使用 JDS 格式存储矩阵。首先，与 CSR 和 ELL 格式一样将非零元素按行分组。接下来，按每行中非零的个数从大到小排序。value 数组中的非零值及其存储其对应列索引的 colIdx 数组按列主元素顺序存储。在每次迭代中添加一个 iterPtr 数组来跟踪非零元素的开始位置。并且维护一个保留原始行索引的 rowIdx 数组。\nExample of JDS Storage Format\n对应的内核代码如下，我们一共要迭代 maxNumNonZerosPerRow 次，每次迭代中每个线程判断自己负责的行是否还存在非零元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 struct JDSMATRIX { int* iterPtr; // Pointer to the start of each row in the JDS format int* colIdx; // Column indices of nonzeros float* val; // Nonzero values int* rowIdx; // Original row indices int numRows; int maxNumNonZerosPerRow; }; __global__ void spmv_jds_kernel(JDSMATRIX m, float* x, float* y) { unsigned int row = blockIdx.x * blockDim.x + threadIdx.x; if (row \u0026lt; m.numRows) { float sum = 0.0f; for (int i = 0; i \u0026lt; m.maxNumNonZerosPerRow + 1; i++) { int start = m.iterPtr[i]; int end = m.iterPtr[i + 1]; if (row + i * blockDim.x \u0026gt;= end) { break; } else { sum += m.val[row + i * blockDim.x]; } } y[m.rowIdx[row]] = sum; // Perform the matrix-vector multiplication } } 下面来分析 JDS 格式在几个性能指标上的表现。\n空间效率：因为避免了填充 JDS 格式比 ELL 格式效率更高。 灵活性：JDS 格式的灵活性较差，因为添加非零会改变行大小，这可能需要重新对行进行排序。 可访问性：JDS 格式类似于CSR格式，允许在给定行索引的情况下访问该行的非零元素。 内存访问效率：JDS 格式的内存访问效率比 ELL 格式高，因为它可以对稀疏矩阵进行合并访问。 负载平衡：JDS 格式对矩阵的行进行排序，使得相邻线程遍长度接近的行。因此，JDS 格式能减少控制发散。 ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch14/","summary":"Personal notebook 14 of Programming Massively Parallel","title":"PMPP Learning-Chapter 14 Sparse Matrix Computation"},{"content":"13 Sorting 排序算法将列表中的数据元素按一定的顺序排列。\n13.1 Background 任何排序算法都必须满足以下两个条件:\n输出是非递减顺序或非递增顺序。 输出是输入的一种排列 (permutation). 排序算法可以分为稳定算法和不稳定算法。当两个元素具有相同的键值时，稳定的排序算法保留了原始的出现顺序。 排序算法也可以分为基于比较的算法和非基于比较的算法。基于比较的排序算法无法达到比 O(NlogN) 更好的复杂度，因为它们必须在元素之间执行最少次数的比较。\n13.2 Radix Sort 基数排序是一种基于非比较的排序算法，其工作原理是根据基数值将要排序的键分布到桶 (bucket) 中。如果键由多个数字组成，则重复对每个数字重复分配桶，直到覆盖所有数字。 下图展示了如何使用 1 位基数对 4 位整数列表进行基数排序。\nA Radix Sort Example\n13.3 Parallel Radix Sort 基数排序的每次迭代都依赖于前一次迭代的整个结果。因此，迭代是相对于彼此顺序执行的。我们将重点关注执行单个基数排序迭代的内核的实现，并假设主机代码每次迭代调用该内核一次。 在 GPU 上并行化基数排序迭代的一种直接方法是让每个线程负责输入列表中的一个键。线程必须确定键在输出列表中的位置，然后将键存储到该位置。 下图展示了这种并行化方法第一次迭代的执行情况。对于映射到 0 桶的键，目标索引可以通过如下公式计算： $$\r\\begin{align*} \\text{destination of a zero} \u0026= \\text{\\#zeros before} \\\\\r\u0026=\\text{\\#keys before} - \\text{\\#ones before} \\\\\r\u0026=\\text{key index}-\\text{\\#ones before}\r\\end{align*}\r$$对于映射到 1 桶的键，目标索引如下所示:\n$$\r\\begin{align*}\r\\text{destination of a one}\u0026=\\text{\\#zeros in total}+\\text{\\#ones before} \\\\\r\u0026=(\\text{\\#keys in total}-\\text{\\#ones in total})+\\text{\\#ones before} \\\\\r\u0026=\\text{input size}-\\text{\\#ones in total}+\\text{\\#ones before}\r\\end{align*}\r$$\rParallelizing a Radix Sort Iteration by Assigning One Input Key to Each Thread\n下图展示了每个线程查找其键的目标索引所执行的操作。\nFinding the Destination of Each Input Key\n对应的内核代码如下所示。在每个线程确定自己的索引并提取出对应的 bit 后，因为这些位不是 0 就是 1，所以排除扫描的结果就等于索引前面 1 的个数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 __global__ void exclusiveScan(unsigned int* bits, int N) { extern __shared__ unsigned int temp[]; int thid = threadIdx.x; int offset = 1; // Load input into shared memory temp[2 * thid] = (2 * thid \u0026lt; N) ? bits[2 * thid] : 0; temp[2 * thid + 1] = (2 * thid + 1 \u0026lt; N) ? bits[2 * thid + 1] : 0; // Build sum in place up the tree for (int d = N \u0026gt;\u0026gt; 1; d \u0026gt; 0; d \u0026gt;\u0026gt;= 1) { __syncthreads(); if (thid \u0026lt; d) { int ai = offset * (2 * thid + 1) - 1; int bi = offset * (2 * thid + 2) - 1; temp[bi] += temp[ai]; } offset *= 2; } // Clear the last element if (thid == 0) { temp[N - 1] = 0; } // Traverse down the tree for (int d = 1; d \u0026lt; N; d *= 2) { offset \u0026gt;\u0026gt;= 1; __syncthreads(); if (thid \u0026lt; d) { int ai = offset * (2 * thid + 1) - 1; // left child index of the thread int bi = offset * (2 * thid + 2) - 1; // right unsigned int t = temp[ai]; temp[ai] = temp[bi]; temp[bi] += t; } } // Write results to output array __syncthreads(); if (2 * thid \u0026lt; N) bits[2 * thid] = temp[2 * thid]; if (2 * thid + 1 \u0026lt; N) bits[2 * thid + 1] = temp[2 * thid + 1]; } __global__ void radix_sort_iter(unsigned int* input, unsigned int* output, unsigned int* bits, int N, unsigned int iter) { unsigned int i = blockIdx.x * blockDim.x + threadIdx.x; unsigned int key, bit; if (i \u0026lt; N) { key = input[i]; bit = (key \u0026gt;\u0026gt; iter) \u0026amp; 1; bits[i] = bit; } exclusiveScan(bits, N); // # ones before if (i \u0026lt; N) { unsigned int numberOnesBefore = bits[i]; unsigned int numberOnesTotal = bits[N]; unsigned int dst = (bit == 0) ? (i - numberOnesBefore) : (N - numberOnesTotal - numberOnesBefore); output[dst] = key; } } 13.4 Optimizing for Memory Coalescing 上面方法效率低下的一个主要原因是，对输出数组的写入显示出不能以内存合并的模式访问。改进后的算法如下图所示，每个块中的线程将首先执行块级别的局部排序，以分离共享内存中映射到 0 bucket 的键和映射到 1 bucket 的键。此优化中的主要挑战是每个线程块在全局 bucket 中确定其位置。线程块的 0 桶的位置在前面线程块的所有 0 桶之后。另一方面，线程块的 1 桶的位置在所有线程块的 0 桶和之前线程块的所有 1 桶之后。\nOptimizing for Memory Coalescing by Sorting Locally in Shared Memory\n下图展示了如何使用排除扫描来查找每个线程块的本地桶的位置的。在完成局部基数排序之后，每个线程块标识其每个自己桶中键的数量。然后每个块将结果记录在如图中所示的表中，该表按行主顺序存储，对线性化的表执行排除扫描，结果表示线程块的本地 bucket 的起始位置。\nFinding the Destination of Each Thread Block\u0026#39;s Local Buckets\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #define SECTION_SIZE 32 __global__ void memory_coalescing_radix_sort(unsigned int* input, unsigned int* output, unsigned int* bits, unsigned int* table, int N, int iter) { __shared__ unsigned int input_s[SECTION_SIZE]; __shared__ unsigned int output_s[SECTION_SIZE]; // Load input into shared memory unsigned int globalIdx = blockIdx.x * blockDim.x + threadIdx.x; if (globalIdx \u0026lt; N) { input_s[threadIdx.x] = input[globalIdx]; } __syncthreads(); // Sort each section radix_sort_iter(input_s, output_s, bits + blockIdx.x * SECTION_SIZE, SECTION_SIZE, iter); __syncthreads(); // Store local bucket num if (threadIdx.x == 0) { unsigned int numberOnesTotal = 0; unsigned int numberZerosTotal = 0; for (int i = 0; i \u0026lt; SECTION_SIZE; ++i) { numberOnesTotal += bits[blockIdx.x * SECTION_SIZE + i]; } numberZerosTotal = SECTION_SIZE - numberOnesTotal; table[blockIdx.x] = numberZerosTotal; table[blockIdx.x + gridDim.x] = numberOnesTotal; } __syncthreads(); // Exclusive prefix sum to determine output index exclusiveScan(table, 2 * gridDim.x); // Write results to output array if (globalIdx \u0026lt; N) { int zeroOffset = table[blockIdx.x]; int oneOffset = table[blockIdx.x + gridDim.x]; unsigned int bit = bits[blockIdx.x * SECTION_SIZE + threadIdx.x]; unsigned int dst = (bit == 0) ? (globalIdx - zeroOffset) : (N - oneOffset); output[dst] = input[globalIdx]; } } 13.5 Choice of Radix Value 使用 2 bit 的基数时，如下图所示，每次迭代使用两个比特将键分发到存储桶。因此，两次迭代就可以对 4 bit 键进行完全排序。\nRadix Sort Example with 2-bit Radix\n为了内存合并访问，如下图所示，每个线程块可以在共享内存中对其键进行本地排序，然后将每个本地桶中的键的数量写入表中。和 13.4 节一样，对于 r 位基数，对具有 2^r 行的表执行排除扫描操作。最后以合并的方式将本地 bucket 写入全局内存。\nOptimizing 2-bit Radix Sorting for Memory Coalescing Using the Shared Memory\n使用更大的基数也有缺点\n每个线程块有更多的本地桶，每个桶有更少的键。这样就会向多个全局内存块进行写入，但每一部分写入的数据变少，不利于内存合并。 进行排除扫描的表会随着基数的增大而变大，扫描的开销随着基数的增加而增加。 Finding the Destination of Each Block\u0026#39;s Local Buckets for a 2-bit Radix\n13.6 Thread Coarsening to Improve Coalescing 跨多个线程块并行化基数排序的一个代价是对全局内存的写的访问合并很差。每个线程块都有自己的本地桶，并将其写入全局内存。拥有更多的线程块意味着每个线程块拥有更少的键，这意味着本地存储桶将更小，从而在将它们写入全局内存时合并机会更少。另一个代价是执行全局排除扫描以识别每个线程块的本地桶的存储位置的开销。通过应用线程粗化，可以减少块的数量，从而减少表的大小和排除扫描操作的开销。 下图展示了如何将线程粗化应用于 2 位基数排序。每个线程被分配给输入列表中的多个键。\nRadix Sort for a 2-bit Radix with Thread Coarsening\n13.7 Parallel Merge Sort ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch13/","summary":"Personal notebook 13 of Programming Massively Parallel","title":"PMPP Learning-Chapter 13 Sorting"},{"content":"12 Merge-An Introduction to Dynamic Input Data Identification 有序归并操作接受两个有序列表并生成一个合并后的有序列表。\n12.1 Background 假设数组中的每个元素都有一个键并且键定义了一个用 ≤ 表示的顺序关系。下图展示了基于数字排序关系的简单归并函数的操作。一般来说，如果键值相等的元素在输出中的顺序与其在输入中的顺序相同，则称排序操作是稳定的。\nExample of a Merge Operation\n12.2 A Sequential Merge Algorithm 归并操作可以用如下一个简单的顺序算法来实现。顺序归并函数访问 A 和 B 的每个输入元素一次，并向 C 中每个位置写入一次。其算法复杂度为 O(m+n).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void merge_sequential(int* A, int* B, int* C, int m, int n) { int i = 0, j = 0, k = 0; // Indices for A, B, and C while (i \u0026lt; m \u0026amp;\u0026amp; j \u0026lt; n) { if (A[i] \u0026lt; B[j]) { C[k++] = A[i++]; } else { C[k++] = B[j++]; } if (i == m) { // Done with A[], handling remaining B while (j \u0026lt; n) { C[k++] = B[j++]; } } else { // Done with B[], handling remaining A while (i \u0026lt; m) { C[k++] = A[i++]; } } } } 12.3 A Parallelization Approach 每个线程首先确定它将要负责的输出位置范围，并使用该输出范围作为 co-rank 函数的输入，以确定所负责 C 输出范围的对应的 A 和 B 输入范围。这样每个线程在它们的子数组上执行顺序合并函数，从而并行地进行合并。\nExamples of Observations\nObservation 1：子数组 C[0]-C[k-1] (k 个元素) 是 A[0]-A[i-1] (i 个元素) 和 B[0]-B[k-i-1] (k-i 个元素) 的归并结果。 Observation 2：对于任意满足 0≤k≤m+n 的 k，我们可以找到唯一的 i 和 j 使得 k=i+j, 0≤i≤m, 0≤j≤n，并且子数组 C[0]-C[k-1] 是子数组 A[0]-A[i-1] 和子数组 B[0]-B[j-1] 合并的结果。唯一的索引 i 和 j 被称 C[k] 的 co-rank. 我们可以通过将输出数组划分为子数组，并让每个线程负责一个子数组的生成来划分工作。由于并行归并算法中每个线程使用的输入元素的范围取决于实际的输入值使得我们需要辅助函数来完成。\n12.4 Co-rank Function Implementation 将 co-rank 函数定义为接受输出数组 C 中元素的位置 k 和两个输入数组 A 和 B的信息，并返回输入数组 A 对应的 co-rank 值 i. 以下图为例，假设线程 1 的 co-rank 函数的目标是为其秩 k1=4 确定 co-rank值 i1=3 和 j1=1. 也就是说，从 C[4] 开始的子数组将由从 A[3] 和 B[1] 开始的子数组合并生成。我们可以发现线程 t 使用的输入子数组由线程 t 和线程 t+1 的 co-rank 确定。\nExample of co-rank Function Execution\n目标是找到使得 A[i - 1] \u0026lt;= B[j] 并且 B[j - 1] \u0026lt;= A[i] 的索引。\n如果 A[i-1] \u0026gt; B[j]，说明 A[i] 太大，需要减少 i，并增加 j。 如果 B[j-1] \u0026gt; A[i]，说明 B[j] 太大，需要减少 j，并增加 i。 每次调整时，i 和 j 都按照二分方式调整，即调整的步长是 delta / 2. i 和 i_low 确定了当前正在搜索的数组 A 的范围。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 int co_rank(int k, int* A, int m, int* B, int n) { // C[k] comes from A[i] of B[j] // k = i + j int i = k \u0026lt; m ? k : m; // max starting search value for A, i.e. A[k-1] \u0026lt; B[0] int i_low = 0 \u0026gt; (k - n) ? 0 : k - n; // when B is done, min starting search value for A is k-n int j = k - i; int j_low = 0 \u0026gt; (k - m) ? 0 : (k - m); int delta; bool active = true; while (active) { // Binary search for C[k] if (i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026lt; n \u0026amp;\u0026amp; A[i - 1] \u0026gt; B[j]) { delta = (i - i_low + 1) \u0026gt;\u0026gt; 1; j_low = j; j += delta; i -= delta; } else if (j \u0026gt; 0 \u0026amp;\u0026amp; i \u0026lt; m \u0026amp;\u0026amp; B[j - 1] \u0026gt; A[i]) { delta = (j - j_low + 1) \u0026gt;\u0026gt; 1; i_low = i; i += delta; j -= delta; } else { // Found the correct position for C[k] active = false; } return i; } } 12.5 A Basic Parallel Merge Kernel 在剩下的小节里，我们假设输入数组 A 和 B 存储在全局内存中，一个内核被启动用来合并两个输入数组，输出一个同样位于全局内存中的数组 C. 下面内核是并行归并的直接实现。它首先通过计算当前线程 (k_curr) 和下一个线程 (k_next) 产生的输出子数组的起点来确定负责输出的范围。然后分别调用自己和后一个线程的 co_rank 函数来确定对应的 A 和 B 输入子数组的范围。最后调用顺序合并函数来合并两个输入子数组，并将结果写入输出子数组。\n1 2 3 4 5 6 7 8 9 10 11 12 13 __global__ void mergre_basic_kernel(int* A, int* B, int* C, int m, int n) { // Each thread handles a section of C int tid = blockIdx.x * blockDim.x + threadIdx.x; int elementsPerThread = ceil(m + n) / (blockDim.x * gridDim.x); int start = tid * elementsPerThread; int end = std::min(start + elementsPerThread, m + n); // Determin the range of A and B to be merged for this thread int i_curr = co_rank(start, A, m, B, n); int i_next = co_rank(end, A, m, B, n); int j_curr = start - i_curr; int j_next = end - i_next; merge_sequential(A + i_curr, B + j_curr, C + start, i_next - i_curr, j_next - j_curr); } 上面的基本归并内核有 2 个问题：\nwarp 中的相邻线程在读写输入和输出子数组元素时不会访问相邻的内存位置。 线程在执行 co-rank 函数时还需要从全局内存访问 A 和 B 的元素。 12.6 A Tiled Merge Kernel to Improve Coalescing 注意到相邻线程使用的 A 和 B 子数组在内存中彼此相邻。我们可以为为每个块调用 co-rank 函数来获得其 A 和 B 子数组的起始和结束位置。 Info\n回忆一下改进内核内存合并的主要策略有三种:\n重新组织线程到数据的映射。 重新组织数据本身。 以合并的方式在全局内存和共享内存之间传输数据，并在共享内存中执行不规则访问。 下图展示了分段合并内核的块级别设计。A_S 和 B_S 可能无法覆盖块的整个输入子数组，因此在每次迭代期间，块中的所有线程将协作从块的 A 和 B 子数组中加载 x 个元素。这样每个块有足够的输入元素来生成至少 x 个输出数组元素 (在最坏的情况下，当前输出部分的所有元素可能都来自 A 或 B 的子数组)。假设每个块负责 y 个输出元素，则需要进行 y/x 次归并。每个块中的线程将在每次迭代中使用 A_S 的一部分和 B_S 的一部分 (深灰色部分)\nDesign of a Tiled Merge Kernel\n下面是分段合并内核的实现的第一部分。本质上是线程级基本合并内核的块级版本的代码。每个块的第一个线程负责计算当前块和下一个块的开始输出索引的位置以及他们的 co-rank. 结果被放入共享内存中，以便块中的所有线程都可以看到。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 __global__ void merge_tiled_kernel(int* A, int* B, int* C, int m, int n, int tile_size) { /* Part 1: Identify block-level output \u0026amp; input subarrays */ // Use extern keywords to determine // the shared memory size at runtime rather than compilation extern __shared__ int shared_AB[]; int* A_s = \u0026amp;shared_AB[0]; // Start index of ShareA int* B_s = \u0026amp;shared_AB[tile_size]; // Start index of ShareB int C_curr = blockIdx.x * ceil((m + n) / gridDim.x); // Start index of C for this block int C_next = std::min(C_curr + int(ceil((m + n) / gridDim.x)), m + n); // End index of C for this block if (threadIdx.x == 0) { A_s[0] = co_rank(C_curr, A, m, B, n); // Make block level co-rank values visible A_s[1] = co_rank(C_next, A, m, B, n); // Next threads co-rank values in the block } __synctyhreads(); int A_curr = A_s[0]; int A_next = A_s[1]; int B_curr = C_curr - A_curr; int B_next = C_next - A_next; 第二部分线程使用它们的 threadIdx.x 的值来确定要加载的元素，因此连续的线程加载连续的元素，内存访问是合并的。每次迭代从 A 和 B 数组中加载当前tile的起始点取决于块的所有线程在之前的迭代中消耗的 A 和 B 元素的总数。下图说明了 while 循环第二次迭代的索引计算。每个块在第一次迭代中消耗的 A 元素部分 为 A 子数组开头的白色小部分 (用竖条标记)。if 语句确保线程只加载 A 子数组剩余部分中的元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /* Part 2: Loading A \u0026amp; B elements into the shared memory */ int counter = 0; int lenC = C_next - C_curr; int lenA = A_next - A_curr; int lenB = B_next - B_curr; int num_iterations = ceil(lenC / tile_size); // index of completed merge in int C_completed = 0; int A_completed = 0; int B_completed = 0; while (counter \u0026lt; num_iterations) { // Each iter threads in a block will generate tile_size C elements // Loading tile_size A and B elements into shared memory for (int i = 0; i \u0026lt; tile_size; i += blockDim.x) { // Coalecsing loading from global memory if (i + threadIdx.x \u0026lt; lenA - A_completed) { A_s[i + threadIdx.x] = A[i + threadIdx.x + A_curr + A_completed]; } if (i + threadIdx.x \u0026lt; lenB - B_completed) { B_s[i + threadIdx.x] = B[i + threadIdx.x + B_curr + B_completed]; } } __syncthreads(); 第三部分则是每个块的线程对共享内存的数组进行归并。在更新索引的部分中最后一次迭代中 A_s 和 B_s 可能没有 tile_size 个元素，调用 co-rank 可能会得到错误结果。但是，由于 while 循环不会进一步迭代，因此不会使用结果，因此不会造成任何影响。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /* Part 3: All threads merge their subarrays in prallel */ int c_curr = threadIdx.x * (tile_size / blockDim.x); // Output index in shared memory int c_next = c_curr + (tile_size / blockDim.x); c_curr = (c_curr \u0026lt;= lenC - C_completed) ? c_curr : lenC - C_completed; c_next = (c_next \u0026lt;= lenC - C_completed) ? c_next : lenC - C_completed; // find co-rank for c_curr and c_next int a_curr = co_rank(c_curr, A_s, std::min(tile_size, lenA - A_completed), B_s, std::min(tile_size, lenB - B_completed)); int b_curr = c_curr - a_curr; int a_next = co_rank(c_next, A_s, std::min(tile_size, lenA - A_completed), B_s, std::min(tile_size, lenB - B_completed)); int b_next = c_next - a_next; // merge the subarrays merge_sequential(A_s + a_curr, B_s + b_curr, C + C_curr + C_completed + c_curr, a_next - a_curr, b_next - b_curr); // Update completed indices C_completed += tile_size; A_completed += co_rank(tile_size, A_s, tile_size, B_s, tile_size); // Idx of A_s to generate tile_size Idx of merged A_s and B_s B_completed += tile_size - A_completed; } } 12.7 A Circular Buffer Merge Kernel 上一节的内核不是那么高效因为下一次迭代 tile 的一部分已经被加载到共享内存中，但是我们每次迭代从全局内存中重新加载整个块，并覆盖掉前一次迭代中的这些元素。下图展示了 merge_circular_buffer_kernel 的主要思想，添加了两个额外的变量 A_S_start 和B_S_start，使得 while 循环的每次迭代动态确定从 A 和 B 的哪个位置开始加载，这样可以利用前一次迭代中剩余的 A_s 和 B_s 元素。修改后每个 for 循环都只加载 A_S_consumed 表示的填充 tile 所需的元素数量。因此，线程在第 i 次 for 循环迭代中加载的A 元素是 A[A_curr+A_S_consumed+i+threadIdx.x]. 取模(%) 操作检查索引值是否大于或等于 tile_size.\n!A Circular Buffer Scheme for Managing the Shared Memory Tiles\n12.8 Thread Coarsening for Merge 多个线程并行执行归并的代价是每个线程必须执行自己的二进制搜索操作来识别其输出索引的 co-rank. 本章中介绍的所有内核都已经应用了线程粗化，因为它们都是为每个线程处理多个元素而设计的。在完全未粗化的内核中，每个线程将负责单个输出元素。\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch12/","summary":"Personal notebook 12 of Programming Massively Parallel","title":"PMPP Learning-Chapter 12 Merge-An Introduction to Dynamic Input Data Identification"},{"content":"11 Prefix sum (scan)-An Introduction to Work Efficiency in Parallel Algorithms 一般来说，如果计算本质上可以被描述为数学递归，即序列中的每一项都是根据前一项定义的，那么它可能被并行化为并行扫描 (parallel scan) 运算。\n11.1 Background 包含扫描 (inclusive scan) 操作接收一个二元可交换运算符 $\\oplus$ 和一个包含 n 个元素的输入数组 $[x_0,x_1,\\ldots,x_{n-1}]$，输出数组 $[x_0,(x_0\\oplus x_1),\\ldots,(x_0\\oplus x_1\\oplus\\ldots\\oplus x_{n-1})]$ . 包含扫描的名称体现在输出数组每个位置的结果都有对应输入元素参与。考虑包含扫描的一种直观方式是，接收一组所需香肠的长度的订单，并一次性得出所有所有订单对应的切割点。 排除扫描操作类似于包含扫描操作，只是输出数组的排列略有不同: $[i,x_0,(x_0\\oplus x_1),\\ldots,(x_0\\oplus x_1\\oplus\\ldots\\oplus x_{n-2})]$ . 每个输出元素的计算都与相应输入元素无关。 用包含扫描函数计算排除扫描的结果时，只需将所有元素向右移动，并为第 0 个元素填充恒等值。反之，只需要将所有元素向左移动，并用排除扫描结果的最后一个元素 $\\oplus$ 最后一个输入元素来填充最后一个元素。\n11.2 Parallel Scan with the Kogge-Stone Algorithm 计算位置 i 的输出元素 需要进行 i 次加法运算，因此除非找到一种方法来共享不同输出元素的归约树的部分和，否则这种方法计算复杂度为 $O(N^2)$. Kogge-Stone 算法最初是为了设计快速加法器电路而发明的，如下图所示，它是一种就地扫描算法，它对最初包含输入元素的数组 XY 进行操作。经过 k 次迭代后，XY[i] 将包含在该位置及之前的最多 2^k 个输入元素的和。\nA Parallel Inclusive Scan Algorithm Based on Kogge-Stone Adder Design\n对应的内核函数如下，假设输入最初位于全局内存数组 X 中。让每个线程计算其全局数据索引，即其负责计算输出数组的位置。每个个活动线程首先将其位置的部分和存储到一个临时变量中(在寄存器中)。当步幅值大于 threadIdx.x 时，意味着线程分配的 XY 位置已经累加了所有所需的输入值，退出活动状态。需要额外的 temp 和 __syncthreads() 因为更新中存在读后写数据依赖竞争关系。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #define SECTION_SIZE 32 __global__ void Kogge_Stone_Scan_Kernel(int* X, int* Y, unsigned int N) { __shared__ float XY[SECTION_SIZE]; unsigned int i = blockIdx.x * blockDim.x + threadIdx.x; /* Exclusive kernel initilization if (i \u0026lt; N \u0026amp;\u0026amp; threadIdx.x != 0) { XY[threadIdx.x] = X[i]; } else { XY[threadIdx.x] = 0.0f; } */ if (i \u0026lt; N) { XY[threadIdx.x] = X[i]; } else { XY[threadIdx.x] = 0.0f; } for (unsigned stride = 1; stride \u0026lt; blockDim.x; stride *= 2) { __syncthreads(); float temp; if (threadIdx.x \u0026gt;= stride) { temp = XY[threadIdx.x] + XY[threadIdx.x - stride]; } __syncthreads(); // write-after-read dependence if (threadIdx.x \u0026gt;= stride) { // Only N - stride threads are active XY[threadIdx.x] = temp; } } if (i \u0026lt; N) { Y[i] = XY[threadIdx.x]; } } Kogge-Stone 算法重用了横跨归约树的部分和来降低计算复杂度。在上一章的归约内核中，活动线程在迭代中写入的元素不会在同一迭代中被任何其他活动线程读取，因此不存在读后写竞争条件。如果希望避免在每次迭代中都有 barrier 同步，那么克服竞争条件的另一种方法是为输入和输出使用单独的数组。这种方法需要两个共享内存缓冲区。交替变化不能输入/输出缓冲区的角色，直到迭代完成。这种优化称为双缓冲 (double buffering).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #define SECTION_SIZE 32 __global__ void DF_Kogge_Stone_Scan_Kernel(int* X, int* Y, unsigned int N) { __shared__ float XY_in[SECTION_SIZE]; __shared__ float XY_out[SECTION_SIZE]; unsigned int i = blockIdx.x * blockDim.x + threadIdx.x; // Initialization if (i \u0026lt; N) { XY_in[threadIdx.x] = X[i]; } else { XY_in[threadIdx.x] = 0.0f; } bool read_in = true; // Alternating ther role of XY_in and XY_out for (unsigned stride = 1; stride \u0026lt; blockDim.x; stride *= 2) { if (read_in) { if (threadIdx.x \u0026gt;= stride) { XY_out[threadIdx.x] = XY_in[threadIdx.x] + XY_in[threadIdx.x - stride]; } else { XY_out[threadIdx.x] = XY_in[threadIdx.x]; } } else { if (threadIdx.x \u0026gt;= stride) { XY_in[threadIdx.x] = XY_out[threadIdx.x] + XY_out[threadIdx.x - stride]; } else { XY_in[threadIdx.x] = XY_out[threadIdx.x]; } } read_in = !read_in; // 切换数组 } // 将结果写回全局内存 if (i \u0026lt; N) { if (read_in) { Y[i] = XY_in[threadIdx.x]; } else { Y[i] = XY_out[threadIdx.x]; } } } 11.3 Speed and Work Efficiency Consideration 算法的工作效率（work efficiency）是指算法所完成的工作接近于计算所需的最小工作量的程度。在每次迭代中，非活动线程的数量等于步长。因此我们可以计算出工作量为\n$$\r\\sum_{stride}(N-\\mathrm{stride}), \\text{for strides} 1, 2, 4, \\ldots N/2(\\mathrm{log}_2N \\text{terms}) = N\\log_2N - (N-1)\r$$因此，Kogge-Stone 算法的计算复杂度为 $O(N\\log_2N)$.\n使用计算步数 (compute steps) 的概念作为比较扫描算法的近似指标。顺序扫描用 N-1 步来处理 N 个输入元素；若 CUDA 设备有 P 个执行单元，Kogge-Stone 内核执行需要步数为 $O(N\\log_2N)/P$. Kogge-Stone 内核相比串行代码所做的额外工作有两个问题。首先，使用硬件执行并行内核的效率要低得多。第二，所有额外的工作消耗额外的能量，不利于移动应用等场景。Kogge-Stone 内核的强大之处在于，当有足够的硬件资源时，它可以达到非常好的执行速度。\n11.4 Parallel Scan with the Brent-Kung Algorithm 对一组值进行求和最快的方法是使用归约树，如果有足够的执行单元，就可以在 $O(N\\log_2N)$ 时间内计算 N 个值的求和结果。该树还可以生成几个子序列的和，它们可用于计算某些扫描输出值。 下图展示了基于 Brent-Kung 加法器设计的并行包含扫描算法的步骤。图中上半部分，花 4 步计算所有 16 个元素的和。下半部分是使用反向树将部分和分配到可以使用部分和的位置，以计算这些位置的结果。约简树中的求和总是在对一个连续的范围内的输入元素进行。因此，求和累积到 XY 的每个位置的值总是可以表示为输入元素的一个 xi…xj 的范围，其中 xi 是开始位置， xj 是结束位置 (包括)。\nA Parallel Inclusive Scan Algorithm Based on the Brent–Kung Adder Design\n下图展示了反向树中每个位置 (列) 的状态，包括已经累积到该位置的值以及在反向树的每级 (行) 上需要的额外输入元素值 (浅灰色表示 2，深灰色表示 1，黑色表示 0).\nProgression of Values in XY After Each Level of Additions in the Reverse Tree.\n上半部分归约树的内核代码如下，和第十章不同的是\n我们把求和结果写到最大索引的位置。 我们将线程索引组织成 $2^n-1$ 的形式 (n 为树的高度)。 1 2 3 4 5 6 for (unsigned int stride = 1; stride \u0026lt; blockDim.x; stride *= 2) { __syncthreads(); if ((threadIdx.x + 1) % (2 * stride) == 0) { XY[threadIdx.x] += XY[threadIdx.x - stride]; } } 这种归约方式的一个缺点是存在控制发散问题。因此需要将线程的连续部分映射到索引为 $k*2^n-1$ 形式的 XY 位置。\n1 2 3 4 5 6 7 8 // Mapping a continous section of threads to the XY positions for (unsigned int stride = 1; stride \u0026lt;= blockDim.x; stride *= 2) { __syncthreads(); unsigned int index = (threadIdx.x + 1) * 2 * stride - 1; // index of the left child if (index \u0026lt; SECTION_SIZE) { XY[index] += XY[index - stride]; } } 反向树的实现要复杂一些。步长从 SECTION_SIZE/4 减小到 1. 在每次迭代中，我们需要将 XY 元素索引值从步长减去 1 后的两倍的位置向右推到距离其一个步长的位置。\n1 2 3 4 5 6 7 8 // Reverse tree stride value decreases from SECTION_SIZE / 4 to 1 for (unsigned int stride = SECTION_SIZE / 4; stride \u0026gt; 0; stride /= 2) { __syncthreads(); unsigned int index = (threadIdx.x + 1) * 2 * stride - 1; // index of the left child if (index + stride \u0026lt; SECTION_SIZE) { XY[index + stride] += XY[index]; } } 我们可以看到 Brent-Kung 算法无论在归约阶段还是分发阶段，都不需要超过 SECTION_SIZE/2 的线程。并行扫描中的运算总数，包括归约树 (N-1 次) 和反向树 ( $N-1-log_2N$ 次) 阶段，总共 $2N-2-log_2N$ 次。当输入长度变大时，Brent-Kung 算法执行的操作数量永远不会超过顺序算法执行的操作数量的 2 倍。\nBrent-Kung 算法的活动线程的数量通过归约树比 Kogge-Stone 算法下降得快得多。然而，一些非活动线程可能仍然会消耗 CUDA 设备中的执行资源，因为它们通过 SIMD 绑定到其他活动线程。这使得在 CUDA 设备上前者工作效率上的优势不那么明显。在有充足执行资源的情况下，由于需要额外的步骤来执行反向树阶段，Brent-Kung 的时间是 Kogge-Stone 的两倍。\n11.5 Coarsening for Even More Work Efficiency 如下图所示，粗化扫描分为三个阶段。在第一阶段，我们让每个线程对其相邻的子线程执行串行扫描。需要注意如果每个线程通过访问全局内存的输入直接执行扫描，则它们的访问不会合并。所以我们以合并的方式在共享内存和全局内存之间传输数据，并在共享内存中执行不是那么好的内存访问模式。在第二阶段，每个块中的所有线程协作并对由每个部分的最后一个元素组成的逻辑数组执行扫描操作。在第三阶段，每个线程将其前一个部分的最后一个元素的新值与自身部分除最后一个的所有元素相加。对应的内核代码如下。\nA Three-phase Parallel Scan for Higher Work Efficiency\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #define CORASE_FACTOR 4 #define SUBSECTION_SIZE (SECTION_SIZE / CORASE_FACTOR) __global__ void Corasened_Scan_Kernel(int* X, int* Y, unsigned int N) { // Partition X into blockDim.x subsections // Load X into shared memory in coalesced fashion __shared__ float XY[SECTION_SIZE]; __shared__ float subXY[SUBSECTION_SIZE]; for (int i = 0; i \u0026lt; SECTION_SIZE; i+= blockDim.x) { XY[threadIdx.x + i] = X[threadIdx.x + i]; } __syncthreads(); // Part 1: Compute prefix sum of each subsection in sequenial for (int i = 1; i \u0026lt; SUBSECTION_SIZE; i++) { XY[threadIdx.x * SUBSECTION_SIZE + i] += XY[threadIdx.x * SUBSECTION_SIZE + i - 1]; } __syncthreads(); // Part 2: Compute prefix sum of the last element of each subsection in parallel unsigned int lastElemId = (blockIdx.x + 1) * blockDim.x * CORASE_FACTOR - 1; subXY[threadIdx.x] = XY[(threadIdx.x + 1) * SUBSECTION_SIZE - 1]; float temp = 0.0f; for (int stride = 1; stride \u0026lt; SUBSECTION_SIZE; stride *= 2) { __syncthreads(); if (threadIdx.x \u0026gt;= stride) { temp = subXY[threadIdx.x] + subXY[threadIdx.x - stride]; } __syncthreads(); if (threadIdx.x \u0026gt;= stride) { subXY[threadIdx.x] = temp; } } __syncthreads(); // Part 3: Add the reduction sum of the previous subsection to the current subsection (except the last element) for (int i = 1; i \u0026lt; SUBSECTION_SIZE - 1; i++) { XY[threadIdx.x * SUBSECTION_SIZE + i] += subXY[threadIdx.x]; } __syncthreads(); // Store back to Y for (int i = 0; i \u0026lt; SECTION_SIZE; i+= blockDim.x) { Y[threadIdx.x + i] = XY[threadIdx.x + i]; } } 11.6 Segmented Parallel Scan for Arbitrary-length Inputs 对于长度很大的输入数据，我们首先将其划分为多个部分，以便每个部分都可以放入流多处理器的共享内存中，并由单个块进行处理。如下图所示，第一步在每个块内部先进行扫描，完成后每个扫描块的最后一个输出元素为该扫描块的所有输入元素的和。第二步将每个扫描块的最后一个结果元素收集到一个数组中，并对这些输出元素执行扫描。第三步将第二步扫描输出值与其对应扫描块的值相加。\nA Hierarchical Scan for Arbitrary Length Inputs\n我们可以用三个内核实现分段扫描。第一个内核与 11.5 节的内核基本相同，第二个内核只是单个线程块的并行扫描内核，第三个内核将 S 数组和 Y 数组作为输入，并将其输出写回 Y.\n11.7 Single-pass Scan for Memory Access Efficiency ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch11/","summary":"Personal notebook 11 of Programming Massively Parallel","title":"PMPP Learning-Chapter 11 Prefix sum (scan)-An Introduction to Work Efficiency in Parallel Algorithms"},{"content":"10 Reduction and Minimizing Divergence 归约 (Reduction) 是从输入数组计算出一个数的运算。\n10.1 Background 归约是从输入数组计算出一个数的运算，通常是通过对数组中的元素进行某种二元运算来实现的。如果二元操作符具有定义良好的恒等值 (例如加法中的 0，乘法中的 1)，则可以为基于该操作符进行运算的一个数组中的值定义归约操作。可以通过顺序遍历数组的每个元素来进行归约。下面伪代码为运算符的一般归约形式，它被定义为接受两个输入并返回一个值的函数。\n1 2 3 4 acc = IDENTITY; for (i = 0; i \u0026lt; n; i++) { acc = Operator(acc, input[i]); } 10.2 Reduction Trees 并行归约的基本思想如下图所示，时间竖直向下增加，水平方向为线程在每个时间点并行执行的活动。并行约简假定输出不随着输入值进行运算的顺序而改变 (即具有交换律)。\nA Parallel Max Reduction Tree\n上图中的并行归约模式被称为归约树 (reduction tree)，因为它看起来像一棵叶子是原始输入元素，根是最终结果的树。归约树的边是无实际意义，只是反映了从一个时间步执行的操作到下一个时间步执行的操作的信息流。执行的操作总数是一个几何级数 $\\frac{1}{2}N + \\frac{1}{2^2}N + \\cdots + \\frac{1}{N}N = N-1$. 归约树需要 $log_{2}{N}$ 步骤来完成。完成计算所需的资源数量随着时间步的增加而迅速减少，每个时间步的并行度与所需的执行单元数量相同。并行度和资源消耗随着时间步长的剧烈变化让归约树成为一种具有挑战性的并行模式。\n10.3 A Simple Reduction Kernel 从实现一个在单个线程块内执行求和归约树的内核开始。其并行执行的情况如下图所示，假设输入数组位于全局内存中，并且在调用内核函数时将其指针作为输入参数传入。每个线程被分配到索引2*threadIdx.x 处，每一步归约的结果也会被写入此处。\nThreads Arrangment of the Input Array in the Simple Kernel\n对应的内核代码如下所示，for 循环中的 __syncthreads() 确保任何一个线程开始下一次迭代之前，所有线程都已经完成了上一次迭代的计算。\n1 2 3 4 5 6 7 8 9 10 11 12 13 __global__ void SimpleReductionKernel(float* input, float* output) { // launch single block with 1/2 #elements threads unsigned int i = threadIdx.x * 2; for (unsigned int stride = 1; stride = blockDim.x; stride *= 2) { if (threadIdx.x % 2 == 0) { input[i] += input[i + stride]; } __syncthreads(); // Ensure partial sums have been written to the destinition. } if (threadIdx.x == 0) { *output = input[0]; } } 10.4 Minimizing Control Divergence 上面代码在每次迭代中对活动和非活动线程的管理导致了控制发散。只有那些线程的 threadIdx.x 为偶数的线程在第二次迭代中执行加法操作。由于控制发散造成的执行资源浪费随着迭代次数的增加而增加，第二次迭代中每个 warp 只有一半的线程执行加法操作，但消耗的计算资源却是相同的。如果输入数组的大小大于32，整个 warp 将在第五次迭代后不再执行加法操作。消耗的执行资源的总数与所有迭代中活动 warp 的总数成正比，计算方式如下。\n$$\\text{active warps} = (5+\\frac{1}{2}+\\frac{1}{4}+\\cdots+1)*\\frac{N}{64}*32$$其中 N/64 代表启动的 warp 总数。每个 warp 在前五次迭代中都处于活动状态，之后每次迭代都只有上次一半的线程在活动状态，直到只剩最后一个。 每次迭代中活动线程计算出的结果个数等于活动线程的总数\n$$\\text{active threads} = \\frac{N}{64}*(32+16+8+4+2+1)+\\frac{N}{64}*\\frac{1}{2}*1+\\frac{N}{64}*\\frac{1}{4}*1+\\cdots+1$$每个 warp 在前五次迭代中处于活动状态的线程数减半，之后每次迭代中每个处于活动状态的 warp 只有一个线程处于活动状态。这个结果应该非常直观的，因为其正等于完成归约所需的操作总数。 由此我们可以得出当输入大小为 256 时，执行资源利用率为 255/736 = 0.35. 如下图所示，为了减少控制分散应该安排线程和它们计算的位置使得能够随着时间的推移而彼此靠近。也就是说，我们希望步幅随着时间的推移而减少，而不是增加。修改后的内核函数如下，每次迭代中执行加法操作的线程数是相同的，但直到同时进行加法的线程数小于 32 之前，一个 warp 的线程数所走的分支相同。\nArrangement with Less Control Divergence\n1 2 3 4 5 6 7 8 9 10 11 12 13 __global__ void ConvergentSumReductionKernel(float* input, float* output) { unsigned int i = threadIdx.x; for (unsigned int stride = blockDim.x; stride \u0026gt;= 1; stride /= 2) { // Decrease stride to reduce control divergence if (threadIdx.x \u0026lt; stride) { input[i] += input[i + stride]; } __syncthreads(); } if (threadIdx.x == 0) { *output = input[0]; } } 这种情况下的进行规约操作消耗的计算资源总数为 $$(\\frac{N}{64}*1 + \\frac{N}{64}*\\frac{1}{2}*1 + \\frac{N}{64}*\\frac{1}{4}*1 + \\cdots + 1 + 5*1) * 32 $$ 5*1 代表最后的五次迭代，只有一个活动的warp，并且它的所有32个线程都消耗执行资源，即使只有一小部分线程是活动状态。执行资源的利用率为 255/384 = 0.66.\n10.5 Minimizing Memory Divergence 上面的内核还有内存分散的问题。在每次迭代中，每个线程对全局内存执行 2 次读取和 1 次写入。第一次从自己的位置读取，第二次从离自己 stride 的位置读取，相加后写入到自己的位置。 10.3 节的内核代码中，第一次迭代每个 warp 中的相邻线程间隔 2 个元素，因此要访问 2 个内存位置，此后每次迭代 stride 都增加，直到第六次迭代时，每个 warp 都只有一个线程处于活动状态，只用访问 1 个位置。因此进行内存访问的总次数为 $$(5*\\frac{N}{64}*2+\\frac{N}{64}*1+\\frac{N}{64}*\\frac{1}{2}*1+\\cdots+1)*3$$ 10.4 节的内核代码中，每个 warp 在任何读或写时只进行一个全局内存请求，直到该 warp 中的所有线程都处于非活动状态。最后五次迭代的线程都位于一个 warp 中，因此进行内存访问的总次数为 $$((\\frac{N}{64}*1+\\frac{N}{64}*\\frac{1}{2}*1+\\frac{N}{64}*\\frac{1}{4}*1+\\cdots+1)+5)*3$$ 对于长度为 2048 的输入，前者和后者全局内存请求的总数分别为 1149 和 204. 后者在使用 DRAM 带宽方面也具有更高的效率。\n10.6 Minimizing Global Memory Accesses 通过使用共享内存，可以进一步改进 10.4 节的内核。在每次迭代中，线程将它们的部分和结果值写入全局内存，这些值在下一次迭代中由相同的线程和其他线程重新读取。如下图所示，通过将部分和结果保存在共享内存中，可以进一步提高执行速度。\nUse Shared Memory to Reduce Accesses from the Global Memory 对应的代码如下，每个线程从全局内存加载并 2 个输入元素并将部分和写入共享内存。剩下的所有迭代中的计算都在共享内存中进行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #define BLOCK_DIM 512 __global__ void SharedMemoryReductionKernel(float* input) { __shared__ float input_s[BLOCK_DIM]; unsigned int i = threadIdx.x; input_s[i] = input[i] + input[i + blockDim.x]; // Partial sum of first iteration for (unsigned int stride = blockDim.x / 2; stride \u0026gt;= 1; stride /= 2) { __syncthreads(); // Ensure all partial sums have been written to shared memory if (threadIdx.x \u0026lt; stride) { input_s[i] += input_s[i + stride]; // Partial sum of subsequent iterations } } if (threadIdx.x == 0) { input[0] = input_s[0]; // Write final sum to output } } 全局内存访问的次数减少到初始加载输入数组和最终写入 input[0]，总共只有 (N/32) + 1 个全局内存请求。\n10.7 Hierarchical Reduction for Arbitrary Input Length 由于 __syncthreads() 只对同一块中的线程有效，因此无法在不同块之间同步。下图展示了如何使用分级归约来解决这个问题，其思想是将输入数组划分为多个适合于线程块大小的段。然后，所有块都独立地执行归约树，并使用原子加法操作将它们的结果累积到最终输出。\nSegmented Multiblock Reduction Using Atomic Operations 对应的内核代码如下。每个线程块处理 2*blockDim.x 个元素。在每个线程块内，我们通过线程所属块的段起始位置加上 threadIdx.x 为每个线程分配其输入元素的位置。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 __global__ void SegmentedSumReductionKernel(float* input, float* output) { __shared__ float input_s[BLOCK_DIM]; unsigned int segment = blockIdx.x * blockDim.x * 2; // Each block processes 2*blockDim.x elements unsigned int i = segment + threadIdx.x; unsigned int t = threadIdx.x; input_s[t] = input[t + blockDim.x]; // Partial sum of first iteration of each block for (unsigned int stride = blockDim.x / 2; stride \u0026gt;= 1; stride /= 2) { __syncthreads(); // Ensure all partial sums have been written to shared memory if (t \u0026lt; stride) { input_s[t] += input_s[t + stride]; // Partial sum of subsequent iterations } } if (t == 0) { atomicAdd(\u0026amp;output, input_s[0]); // Write final sum to output } } 10.8 Thread Coarsening for Reduced Overhead 到目前为止，我们使用过的归约内核都试图通过使用尽可能多的线程来最大化并行性。若线程块大小为 1024 个线程，则需要启动的线程块数量为 N/2048. 下图展示了如何将线程粗化。线程独立地添加它们负责的四个元素，它们不需要同步，直到将所有的四个元素相加之后才能将部分和结果写入共享内存。剩下的步骤与 10.7 节后续相同。\nThread Coarsening in Reduction 对应的内核如下，我们乘以 COARSE_FACTOR 来表示每个线程块的负责的段的大小是原来的 COARSE_FACTOR 倍。部分和累加到局部变量 sum 中，并且因为线程是独立运行的，在循环中不会调用 __syncthreads().\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #define COARSE_FACTOR 2 __global__ void CoarsenedSumReductionKernel(float* input, float* output) { __shared__ float input_s[BLOCK_DIM]; unsigned int segment = blockIdx.x * COARSE_FACTOR * blockDim.x * 2; unsigned int i = segment + threadIdx.x; unsigned int t = threadIdx.x; float sum = input[i]; for (int tile = 1; tile \u0026lt; COARSE_FACTOR; tile++) { // Partitial sum is accumulated independently sum += input[i + tile * blockDim.x]; } input_s[t] = sum; for (unsigned int stride = blockDim.x / 2; stride \u0026gt;= 1; stride /= 2) { __syncthreads(); if (t \u0026lt; stride) { input_s[t] += input_s[t + stride]; } } if (t == 0) { atomicAdd(\u0026amp;output, input_s[0]); } } 下图比较了两个原始线程块在没有进行线程粗化下被硬件顺序执行情况，图 A 当第一个线程块完成后，硬件调度第二个线程块，在不同的数据段上执行相同的步骤。图 B 的这个线程块开始需要三个步骤，其中每个线程对它负责的四个元素求和。剩下的三个步骤执行归约树，每个步骤中有一半的线程退出活动状态。相比图 A，图 B 只需要6个步骤 (而不是 8 个)，其中 3 个步骤 (而不是 2 个) 充分利用了硬件。 当我们粗化线程时，并行完成的工作就会减少。因此，增加粗化因子将减少硬件正在利用的数据并行性的数量。\nComparing Parallel Reduction with and without Thread Coarsening\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch10/","summary":"Personal notebook 10 of Programming Massively Parallel","title":"PMPP Learning-Chapter 10 Reduction and Minimizing Divergence"},{"content":"8 Stencil 在流体动力学、热传导、燃烧、天气预报、气候模拟和电磁学等应用领域，模板是求解偏微分方程的数值方法的基础。模板方法的基本思想是，将偏微分方程的求解转化为求解一个局部的线性方程组，然后在该局部进行迭代求解，最后得到全局解。由于求解微分问题时对数值精度的要求，模板处理的数据往往是高精度的浮动数据，对于 tiling 技术来说，这需要消耗更多的片上内存。\nBackgroud 用计算机数值计算和求解函数、模型、变量和方程的第一步是将它们转换成离散的表示形式。表示的保真度或这些近似插值技术的函数值的准确性取一方面决于网格点之间的间距:间距越小，近似越准确。离散表示的保真度还取决于所使用数字的精度。本章中将重点关注计算模式，其中模板应用于所有相关的输入网格点以生成所有网格点的输出值，这将被称为模板扫描 (stencil sweep).\nOne-dimensional Stencil Example\nTwo-dimensional \u0026amp; Three-dimensional Stencil Example\n8.2 Parallel stencil: A Basic Algorithm 2D 情况下输出网格的 tiling 如下图所示，其中每个线程块负责一个 4*4 大小的输出 tile. 一个基本的 3D stencil 内核函数如下，其中每个线程块负责计算一个输出 tile 的值，每个线程用于计算一个元素。每个线程执行13次浮点操作 (7 次乘法和 6 次加法)，并加载 7 个输入元素 (每个 4 字节)。因此，这个内核的浮点对计算访存比是 13 / (7*4) = 0.46 OP/B.\n2D 5-point Stencil Tiling for Output Grid\n1 2 3 4 5 6 7 8 9 10 11 12 13 __global__ void stencil_kernel(float* in, float* out, unsigned int N) { unsigned int i = blockIdx.z*blockDim.z+threadIdx.z; unsigned int j = blockIdx.y*blockDim.y+threadIdx.y; unsigned int k = blockIdx.x*blockDim.x+threadIdx.x; if (i \u0026gt;= 1 \u0026amp;\u0026amp; i \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 1 \u0026amp;\u0026amp; j \u0026lt; N - 1 \u0026amp;\u0026amp; k \u0026gt;= 1 \u0026amp;\u0026amp; k \u0026lt; N - 1) { out[i * N * N + j * N + k] = c0 * in[i * N * N + j * N + k] + c1 * in[i * N * N + j * N + k - 1] + c2 * in[i * N * N + j * N + k + 1] + c3 * in[i * N * N + (j - 1) * N + k] + c4 * in[i * N * N + (j + 1) * N + k] + c5 * in[(i - 1) * N * N + j * N + k] + c6 * in[(i + 1) * N * N + j * N + k]; } } 8.3 Shared Memory Tiling for Stencil Sweep 下图展示了二维五点模板的输入和输出 tile，可以发现五点模板的输入 tile 不包括四个角落的元素。因为每个输出网格点值只使用输入 tile 的 5 个元素，而 3*3 卷积使用 9 个元素。而 3D 情况下七点模板相对于 3*3*3 卷积从将输入网格点加载到共享内存中能获得的收益更低。由于为卷积加载输入 tile 的所有策略都直接应用于模板扫描，下面给出了一个加载到共享内存版本的内核函数，线程块的大小与输入 tile 相同，在计算输出 tile 点值时没有使用部分线程。每个表达式中减去的值1是因为内核假设一个3D七点模板，每边有一个网格点\nInput and Output Tiles for a 2D 5-point Stencil\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #define IN_TILE_DIM 16 __global__ void stencil_shared_mem_tiling_kernel(float* in, float* out, unsigned int N) { // upper left corner of input tile unsigned int i = blockIdx.z*blockDim.z+threadIdx.z - 1; unsigned int j = blockIdx.y*blockDim.y+threadIdx.y - 1; unsigned int k = blockIdx.x*blockDim.x+threadIdx.x - 1; __shared__ float in_s[IN_TILE_DIM][IN_TILE_DIM][IN_TILE_DIM]; if (i \u0026gt;= 1 \u0026amp;\u0026amp; i \u0026lt; IN_TILE_DIM \u0026amp;\u0026amp; j \u0026gt;= 1 \u0026amp;\u0026amp; j \u0026lt; IN_TILE_DIM \u0026amp;\u0026amp; k \u0026gt;= 1 \u0026amp;\u0026amp; k \u0026lt; IN_TILE_DIM) { in_s[threadIdx.z][threadIdx.y][threadIdx.x] = in[i * N * N + j * N + k]; } __syncthreads(); if (i \u0026gt;= 1 \u0026amp;\u0026amp; i \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 1 \u0026amp;\u0026amp; j \u0026lt; N - 1 \u0026amp;\u0026amp; k \u0026gt;= 1 \u0026amp;\u0026amp; k \u0026lt; N - 1) { if (threadIdx.x \u0026gt;=1 \u0026amp;\u0026amp; threadIdx.x \u0026lt; IN_TILE_DIM-1 \u0026amp;\u0026amp; threadIdx.y \u0026gt;=1 \u0026amp;\u0026amp; threadIdx.y \u0026lt; IN_TILE_DIM-1 \u0026amp;\u0026amp; threadIdx.z \u0026gt;=1 \u0026amp;\u0026amp; threadIdx.z \u0026lt; IN_TILE_DIM-1) { // 7 point template out[i * N * N + j * N + k] = c0 * in_s[threadIdx.z][threadIdx.y][threadIdx.x] + c1 * in_s[threadIdx.z][threadIdx.y][threadIdx.x - 1] + c2 * in_s[threadIdx.z][threadIdx.y][threadIdx.x + 1] + c3 * in_s[threadIdx.z][threadIdx.y - 1][threadIdx.x] + c4 * in_s[threadIdx.z][threadIdx.y + 1][threadIdx.x] + c5 * in_s[threadIdx.z - 1][threadIdx.y][threadIdx.x] + c6 * in_s[threadIdx.z + 1][threadIdx.y][threadIdx.x]; } } 硬件限制每个块最大为 1024 ，因此 tile 通常比较小。一般 tile 的边长为8，每个块的大小为 512 个线程。相反，卷积通常用于处理二维图像，可以使用更大的 tile 尺寸 (32x32). 第一个缺点是由于 halo cell 的开销，重用率随着 tile 大小的降低而降低。第二个缺点是它对内存合并有不利影响。对于一个 8x8x8 tile，每 warp 的线程将访问全局内存中至少四行 (888*4 bytes, 32 threads, 64 bits/DRAM = 4)\n8.4 Thread Coarsening 下图假设每个输入 tile 由 6x6x6 个网格点组成。为了使输入 tile的内部可见，块的前、左和上面没有画出。假设每个输出 tile 由 4x4x4个网格点组成。分配给处理该 tile 的线程块由与输入 tile 的一个x-y平面 (即 6x6) 相同数量的线程组成。程序一开始，每个块需要将包含计算输出块平面值所需的所有点的三个输入块平面加载到共享内存中。在每次迭代期间，块中的所有线程将处理输出 tile 与迭代值相同的 z 索引对应的 x-y 平面。\nMapping of Shared Memory Array after First Iteration\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #define OUT_TILE_DIM IN_TILE_DIM - 2 __global__ void stencil_thread_coarsening_kernel(float* in, float* out, unsigned int N) { int iStart = blockIdx.z * OUT_TILE_DIM; int j = blockIdx.y * blockDim.y + threadIdx.y - 1; int k = blockIdx.x * blockDim.x + threadIdx.x - 1; __shared__ float inPrev_s[IN_TILE_DIM][IN_TILE_DIM]; __shared__ float inCurr_s[IN_TILE_DIM][IN_TILE_DIM]; __shared__ float inNext_s[IN_TILE_DIM][IN_TILE_DIM]; if (iStart \u0026gt;= 1 \u0026amp;\u0026amp; iStart \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; N \u0026amp;\u0026amp; k \u0026gt;= 0 \u0026amp;\u0026amp; k \u0026lt; N) { inPrev_s[threadIdx.y][threadIdx.x] = in[(iStart - 1) * N * N + j * N + k]; } if (iStart \u0026gt;= 0 \u0026amp;\u0026amp; iStart \u0026lt; N \u0026amp;\u0026amp; j \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; N \u0026amp;\u0026amp; k \u0026gt;= 0) { inCurr_s[threadIdx.y][threadIdx.x] = in[iStart * N * N + j * N + k]; } for (int i = 0; i \u0026lt; OUT_TILE_DIM; i++) { i += iStart; if (i \u0026gt;= -1 \u0026amp;\u0026amp; i \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; N \u0026amp;\u0026amp; k \u0026gt;= 0 \u0026amp;\u0026amp; k \u0026lt; N) { inNext_s[threadIdx.y][threadIdx.x] = in[(i + 1) * N * N + j * N + k]; } __syncthreads(); if (i \u0026gt;= 1 \u0026amp;\u0026amp; i \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 1 \u0026amp;\u0026amp; j \u0026lt; N - 1 \u0026amp;\u0026amp; k \u0026gt;= 1 \u0026amp;\u0026amp; k \u0026lt; N - 1 \u0026amp;\u0026amp; threadIdx.y \u0026gt;= 1 \u0026amp;\u0026amp; threadIdx.y \u0026lt; IN_TILE_DIM - 1 \u0026amp;\u0026amp; threadIdx.x \u0026gt;= 1 \u0026amp;\u0026amp; threadIdx.x \u0026lt; IN_TILE_DIM - 1) { out[i * N * N + j * N + k] = c0 * inCurr_s[threadIdx.y][threadIdx.x] + c1 * inCurr_s[threadIdx.y][threadIdx.x - 1] + c2 * inCurr_s[threadIdx.y][threadIdx.x + 1] + c3 * inCurr_s[threadIdx.y - 1][threadIdx.x] + c4 * inCurr_s[threadIdx.y + 1][threadIdx.x] + c5 * inPrev_s[threadIdx.y][threadIdx.x] + c6 * inNext_s[threadIdx.y][threadIdx.x]; } } inPrev_s[threadIdx.y][threadIdx.x] = inCurr_s[threadIdx.y][threadIdx.x]; inCurr_s[threadIdx.y][threadIdx.x] = inNext_s[threadIdx.y][threadIdx.x]; } 线程粗化内核的优点是，它不要求输入 tile 的所有平面都出现在共享内存中。在任意时刻，只有三层输入 tile 需要在共享内存中。\n8.5 Register Tiling 根据计算过程可以发现每个 inPrev_s 和 inNext_s 的元素仅由一个线程在计算具有相同 x-y 索引的输出 tile 网格点时使用。只有 inCurr_s 的元素被多个线程访问，真正需要位于共享内存中。因此我们可以修改内涵函数如下，寄存器变量 inPrev 和 inNext 分别替换共享内存数组 inPrev_s 和 inNext_s. 保留了 inCurr_s 以允许在线程之间共享 x-y 平面相邻网格点值。这样这个内核使用的共享内存量减少到原来的 1/3.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 void stencil_register_tiling_coarsening_kernel(float* in, float* out, unsigned int N) { int iStart = blockIdx.z * OUT_TILE_DIM; int j = blockIdx.y * blockDim.y + threadIdx.y - 1; int k = blockIdx.x * blockDim.x + threadIdx.x - 1; float inPrev; float inCurr; float inNext; __shared__ float inCurr_s[IN_TILE_DIM][IN_TILE_DIM]; if (iStart \u0026gt;= 1 \u0026amp;\u0026amp; iStart \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; N \u0026amp;\u0026amp; k \u0026gt;= 0 \u0026amp;\u0026amp; k \u0026lt; N) { inPrev = in[(iStart - 1) * N * N + j * N + k]; } if (iStart \u0026gt;= 0 \u0026amp;\u0026amp; iStart \u0026lt; N \u0026amp;\u0026amp; j \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; N \u0026amp;\u0026amp; k \u0026gt;= 0) { inCurr = in[iStart * N * N + j * N + k]; inCurr_s[threadIdx.y][threadIdx.x] = inCurr; } for (int i = 0; i \u0026lt; OUT_TILE_DIM; i++) { i += iStart; if (i \u0026gt;= -1 \u0026amp;\u0026amp; i \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; N \u0026amp;\u0026amp; k \u0026gt;= 0 \u0026amp;\u0026amp; k \u0026lt; N) { inNext = in[(i + 1) * N * N + j * N + k]; } __syncthreads(); if (i \u0026gt;= 1 \u0026amp;\u0026amp; i \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 1 \u0026amp;\u0026amp; j \u0026lt; N - 1 \u0026amp;\u0026amp; k \u0026gt;= 1 \u0026amp;\u0026amp; k \u0026lt; N - 1 \u0026amp;\u0026amp; threadIdx.y \u0026gt;= 1 \u0026amp;\u0026amp; threadIdx.y \u0026lt; IN_TILE_DIM - 1 \u0026amp;\u0026amp; threadIdx.x \u0026gt;= 1 \u0026amp;\u0026amp; threadIdx.x \u0026lt; IN_TILE_DIM - 1) { out[i * N * N + j * N + k] = c0 * inCurr + c1 * inCurr_s[threadIdx.y][threadIdx.x - 1] + c2 * inCurr_s[threadIdx.y][threadIdx.x + 1] + c3 * inCurr_s[threadIdx.y - 1][threadIdx.x] + c4 * inCurr_s[threadIdx.y + 1][threadIdx.x] + c5 * inPrev + c6 * inNext; } } __syncthreads(); inPrev = inCurr; inCurr = inNext; inCurr_s[threadIdx.y][threadIdx.x] = inNext; } 首先，许多对共享内存的读写现在被转移到寄存器中。其次，每个块只消耗三分之一的共享内存。当然，这是以每个线程多使用 3 个寄存器为代价实现的。需要注意全局内存访问的数量没有改变。\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch8/","summary":"Personal notebook 8 of Programming Massively Parallel Processors.","title":"PMPP Learning-Chapter 8 Stencil"},{"content":"9 Parallel Histogram-An Introduction to Atomic Operations and Privatization 本章介绍并行直方图计算模式，其中每个输出元素都可以由任何线程更新。因此，当线程更新输出元素时必须注意线程之间的协调，避免任何可能破坏最终结果的干扰。\n9.1 Background 直方图是数据集中数据值出现的数量计数或百分比的显示。在最常见的直方图形式中，间隔区间沿水平轴绘制，每个间隔中的数据值计数表示为从水平轴上升的矩形或条形的高度。 许多应用领域依赖于直方图来总结数据集进行数据分析。其中一个领域就是计算机视觉。图像子区域直方图的计算过程是计算机视觉中特征 (图像中感兴趣的模式) 提取的重要方法。\nA Histogram Representation of “programming massively parallel processors”\n9.2 Atomic Operations and A Basic Histogram Kernel 如下图所示，并行化直方图计算的最直接的方法是启动数据一样多的线程，让每个线程处理一个元素。每个线程读取其分配的输入元素，并增加对应的隔计数器的值。\nBasic Parallelization of a Histogram\nhisto 数组中间隔计数器的增加是对内存位置的更新或 read-modify-write 操作。该操作包括读取内存位置(读)，在原始值上加 1(修改)，并将新值写回内存位置 (写)。在实际过程中会出现读-修改-写竞争条件 (read-modify-write race condition)，在这种情况下，两个或多个同步更新操作的结果会根据所涉及的操作的相对时间而变化。 下图 A 中线程 1 在时间段 1~3 期间完成了其读-修改-写序列的所有三个部分，然后线程 2 在时间段 4 开始，最后结果正确。在图 B 中，两个线程的读-修改-写顺序重叠。线程 1 在时间段 4 时将新值写入 histo[x]。当线程 2 在时间段 3 读取 histo[x]时，它的值仍然是 0，因此最后的写入的值是 1.\nRace Condition in Updating a histo Array Element\n原子操作 (atomic operation) 的读、修改和写部分构成一个不可分割的单元，因此称为原子操作。对该位置的其他读-修改-写序列不能与其在时间上有重叠。需要注意原子操作在线程之间不强制任何特定的执行顺序，比如线程 1 可以在线程 2 之前或之后运行。CUDA内核可以通过函数调用对内存位置执行原子加法操作:\n1 int atomicAdd(int* address, int val); atomicAdd 是一个内建函数 (intrinsic function)，它被编译成一个硬件原子操作指令。该指令读取全局或共享内存中 address 参数所指向的32位字，将 val 加上旧值中并写入结果回相同地址的内存中。该函数返回地址处的旧值。\nIntrinsic Functions 现代处理器通常提供特殊指令，这些指令要么执行关键功能 (如原子操作)，要么大幅提高性能 (如矢量指令)。这些指令通常作为内建函数暴露给程序员，从程序员的角度来看，这些是库函数。然而，它们被编译器以一种特殊的方式处理。每个这样的调用都被翻译成相应的特殊指令。在最终代码中没有函数调用，只有与用户代码一致的特殊指令。 1 2 3 4 5 6 7 8 9 10 __global__ void histo_kernel(char* data, unsigned int length, unsigned int* histo) { unsigned int i = threadIdx.x + blockIdx.x * blockDim.x; if (i \u0026lt; length) { int alphabet_position = data[i] - \u0026#39;a\u0026#39;; if (alphabet_position \u0026gt;= 0 \u0026amp;\u0026amp; alphabet_position \u0026lt; 26) { atomicAdd(\u0026amp;histo[alphabet_position / 4], 1); } } } 9.3 Latency and Throughput of Atomic Operations 高内存访问吞吐量的关键是同时进行许多 DRAM 访问。然而，当许多原子操作更新相同的内存位置时，一个后面线程的读-修改-写序列在前一个线程的写操作结束之前不能开始，即如下图所示，同时只能有一个线程在同一内存位置执行原子操作。更新这些间隔的大量争用流量会使得吞吐量降低。\nThe Execution of Atomic Operations at the Same Location\n提高原子操作吞吐量的一种方法是减少对竞争严重的位置的访问延迟。现代 GPU 允许在被所有 SM 共享的最后一级缓存中执行原子操作。由于对最后一级缓存的访问时间是几十个周期而不是几百个周期，因此原子操作的吞吐量与早期GPU相比至少提高了一个数量级。\n9.4 Privatization 提高原子操作吞吐量的另一种方法是通过引导流量远离竞争严重的位置。这可以通过一种称为私有化 (privatization) 的技术来实现。其思想是将高度竞争的输出数据结构复制到私有副本中，以便线程的每个子集都可以更新其私有副本。 下图展示了如何将私有化应用于直方图统计。每个线程块由 8 个线程组成，争用只会在同一块中的线程之间以及在最后合并私有副本时发生，而不是更新相同直方图 bin 的所有线程之间发生争用。\nReduce Contention of Atomic Operations by Private Copies of Histogram\n一个私有化版本的代码如下，为 histo 数组分配足够的设备内存 (gridDim.x*NUM_BINS*4 bytes) 来保存直方图的所有私有副本。在执行结束时，每个线程块将把私有副本中的值提交到 块 0 的部分。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #define NUM_BINS 7 // # histo bins __global__ void histo_private_kernel(char* data, unsigned int length, unsigned int* histo) { unsigned int i = threadIdx.x + blockIdx.x * blockDim.x; if (i \u0026lt; length) { int alphabet_position = data[i] - \u0026#39;a\u0026#39;; if (alphabet_position \u0026gt;= 0 \u0026amp;\u0026amp; alphabet_position \u0026lt; 26) { atomicAdd(\u0026amp;histo[blockIdx.x * 7 + alphabet_position / 4], 1); } } if (blockIdx.x \u0026gt; 0) { __syncthreads(); // for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { unsigned int binValue = histo[blockIdx * NUM_BINS + bin]; atomicAdd(\u0026amp;histo[bin], binValue); } } } 在每个线程块的基础上创建直方图的私有副本的一个好处是线程可以在提交自己的统计结果之前使用 __syncthreads() 来等待彼此。另一个好处是，如果直方图中的 bin 数量足够小，则可以在共享内存中声明直方图的私有副本 (每个线程块一个)。下面代码直方图在共享内存中分配私有副本 histo_s 数组，并由块的线程并行初始化为 0.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 __global__ void histo_shared_private_kernel(char* data, unsigned int length, unsigned int* histo) { // Initializing private bins __shared__ unsigned int histo_s[NUM_BINS]; for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { histo_s[bin] = 0; } __syncthreads(); // Histogram unsigned int i = threadIdx.x + blockIdx.x * blockDim.x; if (i \u0026lt; length) { int alphabet_position = data[i] - \u0026#39;a\u0026#39;; if (alphabet_position \u0026gt;= 0 \u0026amp;\u0026amp; alphabet_position \u0026lt; 26) { atomicAdd(\u0026amp;histo_s[alphabet_position / 4], 1); } } __syncthreads(); // Commit to global memory for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { unsigned binValue = histo_s[bin]; if (binValue \u0026gt; 0) { atomicAdd(\u0026amp;histo[bin], binValue); } } } 9.5 Coarsening 私有化的开销是需要将私有副本提交到公共副本。每个线程块都会执行一次提交操作，因此，使用的线程块越多，这个开销就越大。如下图所示，我们可以通过减少块的数量来减少私有副本的数量，从而减少提交到公共副本的次数，让每个线程处理多个输入元素。\nContiguous Partition of Input Elements\n下面代码是一个连续分区 (contiguous partition) 策略的示例，输入被连续划分成多个段，每个段被分配给一个线程，每个线程从 tid*CFACTOR 迭代到 (tid+1)*CFACTOR 进行所负责部分的统计。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #define CFACTOR 3 __global__ void histo_shared_private_contiguous_kernel(char* data, unsigned int length, unsigned int* histo) { { // Initializing private bins __shared__ unsigned int histo_s[NUM_BINS]; for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { histo_s[bin] = 0; } __syncthreads(); // Histogram unsigned tid = blockIdx.x * blockDim.x + threadIdx.x; for (unsigned int i = tid * CFACTOR; i \u0026lt; (tid + 1)*CFACTOR \u0026amp;\u0026amp; i \u0026lt; length; i++) { int alphabet_position = data[i] - \u0026#39;a\u0026#39;; if (alphabet_position \u0026gt;= 0 \u0026amp;\u0026amp; alphabet_position \u0026lt; 26) { atomicAdd(\u0026amp;histo_s[alphabet_position / 4], 1); } } __syncthreads(); // Commit to global memory for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { unsigned binValue = histo_s[bin]; if (binValue \u0026gt; 0) { atomicAdd(\u0026amp;histo[bin], binValue); } } } 上述在 GPU 上连续分区的思路会导致内存不友好的访问模式，因为 threadIdx 相同的线程访问的不是一块连续的内存区域。因此我们要采用交错分区 (interleaved partition)，如下图所示，即不同线程要处理的分区彼此交错。实际应用中每个线程在每次迭代中应该处理 4 个 char (一个 32 位字)，以充分利用缓存和 SMs 之间的互连带宽。\nInterleaved Partition of Input Elements\n下面代码是一个交错分区的示例。在循环的第一次迭代中，每个线程使用其全局线程索引访问数据数组:线程 0 访问元素 0，线程 1 访问元素 1，线程 2 访问元素 2\u0026hellip;所有线程共同处理输入的第一个 blockDim.x*gridDim.x 元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __global__ void histo_shared_private_interleaved_kernel(char* data, unsigned int length, unsigned int* histo) { { // Initializing private bins __shared__ unsigned int histo_s[NUM_BINS]; for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { histo_s[bin] = 0; } __syncthreads(); // Histogram unsigned tid = blockIdx.x * blockDim.x + threadIdx.x; for (unsigned int i = tid; i \u0026lt; length; i += blockDim.x * gridDim.x) { int alphabet_position = data[i] - \u0026#39;a\u0026#39;; if (alphabet_position \u0026gt;= 0 \u0026amp;\u0026amp; alphabet_position \u0026lt; 26) { atomicAdd(\u0026amp;histo_s[alphabet_position / 4], 1); } } __syncthreads(); // Commit to global memory for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { unsigned binValue = histo_s[bin]; if (binValue \u0026gt; 0) { atomicAdd(\u0026amp;histo[bin], binValue); } } } 9.6 Aggregation 一些数据集在局部区域有大量相同的数据值。如此高度集中的相同值会导致严重的争用，并降低并行直方图计算的吞吐量。一个简单而有效的优化是，如果每个线程正在更新直方图的相同元素，则将连续的更新聚合为单个更新。下面的代码展示了聚合的直方图计算。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 __global__ void histo_shared_private_interleaved_aggregated_kernel(char* data, unsigned int length, unsigned int* histo) { // Initializing private bins __shared__ unsigned int histo_s[NUM_BINS]; for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { histo_s[bin] = 0; } __syncthreads(); // Histogram unsigned int accumulator = 0; int prevBinIdx = -1; unsigned tid = blockIdx.x * blockDim.x + threadIdx.x; for (unsigned int i = tid; i \u0026lt; length; i += blockDim.x * gridDim.x) { int alphabet_position = data[i] - \u0026#39;a\u0026#39;; if (alphabet_position \u0026gt;= 0 \u0026amp;\u0026amp; alphabet_position \u0026lt; 26) { int currBinIdx = alphabet_position / 4; if (currBinIdx != prevBinIdx) { // Update previous statistics if (accumulator \u0026gt; 0) { atomicAdd(\u0026amp;histo_s[prevBinIdx], accumulator); } accumulator = 1; prevBinIdx = currBinIdx; } else { // Accumulate statistics accumulator++; } } } if (accumulator \u0026gt; 0) { // Update last bin atomicAdd(\u0026amp;histo_s[prevBinIdx], accumulator); } __syncthreads(); // Commit to global memory for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { unsigned binValue = histo_s[bin]; if (binValue \u0026gt; 0) { atomicAdd(\u0026amp;histo[bin], binValue); } } } 可以看出聚合内核需要更多的语句和变量。添加的 if 语句可能会出现控制发散。然而，如果没有争用或存在严重的争用，就很少有控制发散，因为线程要么都在增加累加器值，要么都在连续刷新。\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch9/","summary":"Personal notebook 9 of Programming Massively Parallel Processors.","title":"PMPP Learning-Chapter 9 Parallel Histogram-An Introduction to Atomic Operations and Privatization"},{"content":"7 Convolution-An Introduction to Constant Memory and Caching 卷积的每个输出数据元素可以相互独立地计算，这是并行计算的理想特性。另一方面，在处理具有边界条件的输出数据元素时，有大量的输入数据共享。这使得卷积可以实现复杂的 tiling 方法和输入数据分段方法。\n7.1 Background 输入数据向量 $[x_0, x_1, \\cdots, x_{n-1}]$ 和包含 2r+1 个元素的 filter 数组 $[f_0, f_1, \\cdots, f_{2r}]$， 1D卷积计算公式为 $$y_i=\\sum_{j=-r}^rf_{i+j}\\times x_i$$ 同样对于 n*n 大小的二维输入，和 r*r 大小的 filter，2D 卷积计算公式为 $$P_{y,x}=\\sum_{j=-r_y}^{r_y}\\sum_{k=-r_x}^{r_x}f_{y+j,x+k}\\times N_{y,x}$$7.2 Parallel Convolution: a Basic Algorithm 假设二维卷积内核接收五个参数: 输入数组 N 的指针; 滤波器 F 的指针; 输出数组 P 的指针; 方形滤波器的半径 r; 输入输出数组的宽度; 输入和输出数组的高度。如下图所示，一个简单的并行方式是网格中的每个线程计算与自身坐标相同的输出像素。对应的内核函数代码如下，浮点计算与全局内存访问的比仅为 0.25 OP/B (每加载 8 字节执行 2 次运算)\nParallelization and Thread Organization for 2D Convolution\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 __global__ void convolution_2D_basic_kernel (float *N, float *F, float *P, int r, int width, int height) { int outCol = blockIdx.x * blockDim.x + threadIdx.x; int outRow = blockIdx.y * blockDim.y + threadIdx.y; int Pvalue = 0.0f; for (int fRow = 0; fRow \u0026lt; 2*r+1; fRow++) { for (int fCol = 0; fCol \u0026lt; 2 * r + 1; fCol++) { int inRow = outRow - r + fRow; int inCol = outCol - r + fCol; if (inRow \u0026gt; 0 \u0026amp;\u0026amp; inRow \u0026lt; height \u0026amp;\u0026amp; inCol \u0026gt; 0 \u0026amp;\u0026amp; inCol \u0026lt; width) { Pvalue += P[inRow * width + inCol] * F[fRow * r + fCol]; } } } P[outRow * width + outCol] = Pvalue; } 7.3 Constant Memory and Caching 可以发现卷积核 F 通常很小，在整个卷积内核的执行过程中不会改变，所有线程都以相同的顺序访问其元素。因此我们可以考虑将其存储在常量内存里，之前说过它和全局内存的区别是线程不能修改常量内存变量的值并且常量内存非常小，目前为 64 KB. 假设已经在主机代码里分配好 F_h 的内存，可以通过 cudaMemcpyToSymbol() 将其从主机内存传输到设备常量内存中。内核函数以全局变量的形式访问常量内存变量。因此，它们的指针不需要作为参数传递给内核函数。\n如果主机代码和内核代码位于不同的文件中，内核代码文件必须包含相关的外部声明的头文件，以确保声明对内核可见。\nCUDA runtime 知道常量内存变量在内核执行期间不会被修改，因此会让硬件在内核执行期间直接缓存常量内存变量。在不需要支持写的情况下，可以在减小芯片面积和降低功耗的情况下设计用于常量内存变量的专用缓存，被称为常量缓存 (constant caching).\n7.4 Tiled Convolution with Halo Cells 我们定义输出 tile 为每个块处理的输出元素，输入 tile 为计算输出 tile 中元素所需的输入元素的集合。下图给出了一个例子，可以看到输入 tile 大小和输出 tile 大小之间的差异使 tile 卷积核的设计变得复杂。有两种线程组织可以处理这种差异。\n启动与输入 tile 具有相同维度的线程块。这样因为每个线程只需要加载一个输入元素。但由于输入 tile 比对应的输出 tile 大，在计算输出元素时需要禁用一些线程，降低了资源利用率。 启动与输出 tile 具有相同维度的线程块。这样线程需要迭代以确保加载所有输入 tile 元素。但简化了输出元素的计算。 Input Tile vs. Output Tile in 2D Convolution\n第一种线程组织方式的内核如下。现在每个块中的线程共同执行 OUT_TILE_DIM^2*(2*FILTER_RADIUS+1) 次浮点运算。分配给输入 tile 元素的每个线程加载一个4字节的输入值。因此每个block加载 IN_TILE_DIM^2*4=(OUT_TILE_DIM+2*FILTER_RADIUS)^2*4\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #define IN_TILE_DIM 32 #define FILTER_RADIUS 5 #define OUT_TILE_DIM (IN_TILE_DIM - 2*(FILTER_RADIUS)) __constant__ float F_c[2 * FILTER_RADIUS + 1][FILTER_RADIUS + 1]; __global__ void convolution_tiled_2D_constant_mem_kernel_1( float* N, float* P, int width, int height) { // Upper left input tile coord int col = blockIdx.x * OUT_TILE_DIM + threadIdx.x - FILTER_RADIUS; int row = blockIdx.y * OUT_TILE_DIM + threadIdx.y - FILTER_RADIUS; // Loading input tile __shared__ float N_s[IN_TILE_DIM][IN_TILE_DIM]; if (row \u0026gt;= 0 \u0026amp;\u0026amp; row \u0026lt; height \u0026amp;\u0026amp; col \u0026gt;= 0 \u0026amp;\u0026amp; col \u0026lt; width) { N_s[threadIdx.y][threadIdx.x] = N[row * width + col]; } else { N_s[threadIdx.y][threadIdx.x] = 0.0f; } __syncthreads(); // Calculate output elements int tileCol = threadIdx.x - FILTER_RADIUS; int tileRow = threadIdx.y - FILTER_RADIUS; if (row \u0026gt;= 0 \u0026amp;\u0026amp; row \u0026lt; height \u0026amp;\u0026amp; col \u0026gt;= 0 \u0026amp;\u0026amp; col \u0026lt; width \u0026amp;\u0026amp; tileCol \u0026gt;= 0 \u0026amp;\u0026amp; tileCol \u0026lt; OUT_TILE_DIM \u0026amp;\u0026amp; tileRow \u0026gt;= 0 \u0026amp;\u0026amp; tileRow \u0026lt; OUT_TILE_DIM) { float Pvalue = 0.0f; for (int fRow = 0; fRow \u0026lt; 2 * FILTER_RADIUS + 1; fRow++) { for (int fCol = 0; fCol \u0026lt; 2 * FILTER_RADIUS + 1; fCol++) { Pvalue += F_c[fRow][fCol] * N_s[tileRow + fRow][tileCol + fCol]; } } P[row * width + col] = Pvalue; } } 第二种线程组织方式的内核如下，每个线程现在可能需要加载多个输入 tile 的元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 __global__ void convolution_tiled_2D_constant_mem_kernel_2( // OUT_TILE_DIM^2 threads per block float* N, float* P, int width, int height) { // Upper left output tile coord int col = blockIdx.x * OUT_TILE_DIM + threadIdx.x; int row = blockIdx.y * OUT_TILE_DIM + threadIdx.y; // Each thread may need to load multiple elements into shared memory __shared__ float N_s[IN_TILE_DIM][IN_TILE_DIM]; for (int i = threadIdx.y; i \u0026lt; IN_TILE_DIM; i += OUT_TILE_DIM) { for (int j = threadIdx.x; j \u0026lt; IN_TILE_DIM; j += OUT_TILE_DIM) { int in_col = blockIdx.x * OUT_TILE_DIM + j - FILTER_RADIUS; int in_row = blockIdx.y * OUT_TILE_DIM + i - FILTER_RADIUS; if (in_row \u0026gt;= 0 \u0026amp;\u0026amp; in_row \u0026lt; height \u0026amp;\u0026amp; in_col \u0026gt;= 0 \u0026amp;\u0026amp; in_col \u0026lt; width) { N_s[i][j] = N[in_row * width + in_col]; } else { N_s[i][j] = 0.0f; } } } __syncthreads(); // Calculate output elements if (threadIdx.x \u0026lt; OUT_TILE_DIM \u0026amp;\u0026amp; threadIdx.y \u0026lt; OUT_TILE_DIM \u0026amp;\u0026amp; row \u0026lt; height \u0026amp;\u0026amp; col \u0026lt; width) { float Pvalue = 0.0f; for (int fRow = 0; fRow \u0026lt; 2 * FILTER_RADIUS + 1; fRow++) { for (int fCol = 0; fCol \u0026lt; 2 * FILTER_RADIUS + 1; fCol++) { Pvalue += F_c[fRow][fCol] * N_s[threadIdx.y + fRow][threadIdx.x + fCol]; } } P[row * width + col] = Pvalue; } } 7.5 Tiled Convolution Using Caches for Halo Cells 当一个块需要它的 halo cell 时，由于相邻块的访问，它们已经在二级缓存中了。因此，对这些 halo cell 的内存访问可以从 L2 缓存提供，而不会造成额外的 DRAM 流量。我们可以对原来的 N 进行这些 halo cell 的访问，而不是将它们加载到 N_ds 中。代码如下，加载 N_s 变得更简单，因为每个线程可以简单地加载与其分配的输出元素具有相同坐标的输入元素。然而，计算P个元素的循环体变得更加复杂。它需要添加条件来检查 helo cell 和 ghost cell.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 __global__ void convolution_tiled_cached_2D_shared_mem_kernel( // OUT_TILE_DIM^2 threads per block float* N, float* P, int width, int height) { int col =blockIdx.x * OUT_TILE_DIM + threadIdx.x; int row =blockIdx.y * OUT_TILE_DIM + threadIdx.y; // loading input tile __shared__ float N_s[IN_TILE_DIM][IN_TILE_DIM]; if (row \u0026lt; height \u0026amp;\u0026amp; col \u0026lt; width) { N_s[threadIdx.y][threadIdx.x] = N[row * width + col]; } else { N_s[threadIdx.y][threadIdx.x] = 0.0f; } __syncthreads(); // Calculate output elements if (col \u0026lt; width \u0026amp;\u0026amp; row \u0026lt; height) { float Pvalue = 0.0f; // turning off the threads at the edge of the block for (int fRow = 0; fRow \u0026lt; 2 * FILTER_RADIUS + 1; fRow++) { for (int fCol = 0; fCol \u0026lt; 2 * FILTER_RADIUS + 1; fCol++) { if (threadIdx.x + fCol - FILTER_RADIUS \u0026gt;= 0 \u0026amp;\u0026amp; threadIdx.x + fCol - FILTER_RADIUS \u0026lt; IN_TILE_DIM \u0026amp;\u0026amp; threadIdx.x + fRow - FILTER_RADIUS \u0026gt;= 0 \u0026amp;\u0026amp; threadIdx.x + fRow - FILTER_RADIUS \u0026lt; IN_TILE_DIM) { Pvalue += F_c[fRow][fCol] * N_s[threadIdx.y + fRow][threadIdx.x + fCol]; } else { if (row - FILTER_RADIUS + fRow \u0026gt;= 0 \u0026amp;\u0026amp; row - FILTER_RADIUS + fRow \u0026lt; height \u0026amp;\u0026amp; col - FILTER_RADIUS + fCol \u0026gt;= 0 \u0026amp;\u0026amp; col - FILTER_RADIUS + fCol \u0026lt; width) { Pvalue += F_c[fRow][fCol] * N[(row - FILTER_RADIUS + fRow) * width + (col - FILTER_RADIUS + fCol)]; } } } } N[row * width + col] = Pvalue; } } Halo Cell: 实际计算区域周围添加的一圈额外的单元格。本质上是 \u0026ldquo;虚拟\u0026rdquo; 单元格，存在于不直接关注的区域之外。 Ghost Cell: 存储来自相邻 tile 的数据副本，使得 block 在无需直接访问彼此的内存的情况下访问相邻的必要数据。 ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch7/","summary":"Personal notebook 7 of Programming Massively Parallel Processors.","title":"PMPP Learning-Chapter 7 Convolution-An Introduction to Constant Memory and Caching"},{"content":"6 Performance Considerations 并行程序的执行速度根据程序的资源需求和硬件的资源约束之间的相互制约会有很大的变化。管理并行代码和硬件资源约束之间的交互对于在几乎所有并行编程模型中实现高性能非常重要。\n6.1 Memory Coalescing 影响 CUDA 内核性能最重要的因素之一是访问全局内存中的数据，有限的带宽可能成为瓶颈。CUDA 设备的全局内存是用 DRAM 实现的。数据存储在DRAM单元中，访问时间通常是纳秒级别，相对于亚纳秒级别的时钟周期来说很慢。现代 DRAM 通过并行化设计来提高数据访问速率，通常称为内存访问吞吐量 (memory access throughput).\nWhy Are DRAMs So Slow DRAM 通过一个个 CMOS 晶体管 (称为 cell) 来存储 0/1. 当给晶体管最上面的一端 (称作栅极) 加上电压或是取消电压，晶体管两端就可以流过电流。cell 中的小电容是存储信息的关键，小电容可以存储电荷，当电容存有电荷，cell 存储 1；当电容不存电荷，存储 0. 当要读取 cell 的存储值，首先打开晶体），然后根据导通后的电容是否会进行充放电信息获得存储值。如果 cell 存储 1，即电容存有电荷，那么当打开开关时电容就会放电；反之则不会。 一个 cell 只能存储 1 比特信息，为了存储大量信息，需要构建起如图所示的 cell 阵列。可以看到每行 cell 的晶体管的栅极都是连在一起的，即都连在字线 (word line) 上，这意味着给字线施加电压，字线对应的一行cell都会被打开。当一行 cell 被打开，cell 电容就会向位线 (bit line) 充放电，一行中的每个 cell 都与一条位线直接相连，读取位线的电压变化，即可知道 cell 的存储信息。\n字线：用来控制读取哪一个字，一个字由 4字节组成。之所以叫字线，是因为给这根线通电，一行 cell 都会被打开.多个 cell 组合起来就是多个字，因为这根线可以打开多个字，所以叫字线 位线：在读取信息时，每一根线上的电压波动都代表一位比特信息，所以叫做位线。 cell 的读取依靠小电容充放电，电容充放电导致位线产生电压波动，通过读取位线电压波动即可获取信息。小电容充放电所产生的电压波动是很微弱的，充放电所造成的电压波动的时间也是很短的，因此很难直接读取充放电信息，为此 cell 阵列的读取使用到了 sense amplifier，即读出放大器。读出放大器可以捕捉到微弱的电压波动，并根据电压波动的情况在本地还原出 cell 的电容电压，而且放大器内还有锁存器，可以把还原出来的电容电压值保存起来，这样一来 cell 保存的信息就从 cell 电容转移到了放大器本地。 每条位线都要接到一个放大器中。在读取 cell 行前，需要把每根位线都预充电 (precharge) 到电容电压/供电电压最大值的一半。在 DRAM 芯片中，读出放大器把 cell 阵列分成了两半，因为其采用的是差分放大器，需要同时接入两根位线。放大信号波动时需要用一个基准和待测线作比较，接到放大器上的两条位线的其中一条就作为基准。在读出数据之后，根据放大器锁存的值，把各条位线拉到供电电压或接到地，然后 cell 电容就会根据位线电压进行充电或放电，当 cell 电容充放电结束，就可以断开字线，宣告本次 DRAM 读取结束。 简单来说读取一个比特的总体流程是：获得行号，译码行号，开启单元行，放大位线电压波动并暂存数据到放大器，获得列号并根据列号选择一位进行输出，写回数据，关闭字线，重新预充电。而写一个比特的总体流程是：获得行号，译码行号，开启单元行，放大位线电压波动并暂存数据到放大器，获得列号并输入写入数据，根据列号把写入数据送到放大器并改写暂存值，写回数据，关闭字线，重新预充电。 其中花费时间最久的两项是开启单元行和放大电压波动并暂存数据。开启单元行时行地址译码器需要拉高一条字线，然后用这一条字线拉高单元行上所有晶体管的栅极电压，相当于给一个很大的电容充电，非常花费时间。放大器大部分是模拟电路，工作速度不快，因此放大电压波动并暂存数据也很花费时间。 DRAM Cell Array\n由于读取非常耗时，DRAM 每次读取数据都会存储在放大器本地缓存 (row buffer / cache line). 缓存行内的各个字在内存上是相邻的，每当读取 cell 阵列中的一个比特会把其所在缓存行的所有比特都送到输出缓存，这种读取方式叫做突发 (burst). 当 warp 中的所有线程访问连续的全局内存位置时，硬件将所有这些访问合并 (colaesce) 为对连续 DRAM 位置的访问 (即行地址)。 有各种优化策略来实现内存合并。\n重新排列线程到数据的映射。 重新排列数据本身的布局。 corner turning: 以合并的方式在全局内存和共享内存之间传输数据，并在共享内存中执行不利的访问模式。共享内存是用SRAM技术实现的，不需要合并，因此不是连续的地址访问带来的影响不大。 内存合并的主要优点是，能通过将多个内存访问合并为单个访问来减少全局内存流量。 6.2 Hiding memory latency 一个 cell 阵列一次可以提供一个比特，那么 8 个 cell 阵列就可以一次提供 8 个比特，他们共享一组行地址和列地址，被称作一个 bank. 处理器包含一个或多个通道 (channel). 每个通道都是一个带有总线的内存控制器，该总线将一组 DRAM 组连接到处理器。 如下图所示当两个 bank 连接到通道总线时，当第一个 bank 为另一个访问提供服务时，可以在第二个 bank 发起访问。一般来说，如果 cell 阵列访问延迟与数据传输时间之比为 R，则充分利用信道总线的数据传输带宽至少需要 R+1 个 bank 。更多的 bank 减少了针对同一 bank 的多个同时访问的概率，这种现象称为 bank 冲突 (bank conflict). 由于每个 bank 一次只能译码一行字线，因此这些冲突访问的单元阵列访问延迟不能再重叠。拥有更多数量的 bank 会增加这些访问分散到多个 bank 的可能性。第二个原因是每个 cell 阵列的大小限制了每个 bank 可以提供的比特数。因此第四章所说的最大化占用率还有一个额外的好处，那就是确保发出足够的内存访问请求来隐藏 DRAM 访问延迟。\nBanking Improves the Utilization of Data Transfer Bandwidth of a Channel\n分布方案存储如下图所示，通常称为交错数据分布 (interleaved data distribution). 对于一个 4*4 的矩阵，每输出矩阵的每个元素计算将对通道 0 中的两个 bank 以及通道 2 中的两个 bank 进行合并访问。\nAn Example of Interleaved Data Distribution\n6.3 Thread Coarsening 以最细粒度并行化工作的缺点在于，并行化工作需要付出代价，例如不同线程块对数据的重复加载、冗余工作、同步开销等。如果硬件最由于资源不足而顺序执行，那么这个代价是不必要的。部分序列化工作，减少为并行性付出的代价。因此可以通过为每个线程分配多个最细粒度的工作来解决，通常被称为线程粗化 (thread coarsening). 如下图所示，在之前的 tiled 矩阵乘法里，由于共享内存内容不能跨块共享，每个块必须加载矩阵 M 的 tile 副本。因此可以让块中的每个线程处理两个输出元素。这样，粗化的线程块将加载 M 的 tile 一次，并将它们用于计算为多个输出 tile.\nThread Coarsening for Tiled Matrix Multiplication\n下面的代码展示了线程粗化的矩阵乘法内核函数，在 width/TILE_WIDTH 的每次迭代中，一个线程计算原来 COARSE_FACTOR 个线程对应位置的输出。\n使用线程粗化时要注意：\n不要在不必要的时候使用，当并行化的代价可以通过粗化来降低时，粗化是有益的。 不要使用过多的粗化，以免硬件资源得不到充分利用。 避免将资源消耗增加到损害占用的程度。根据内核的不同，线程粗化可能需要每个线程使用更多的寄存器或每个线程块使用更多的共享内存。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 __global__ void CoarsingMatrixMulKernel(float* M, float* N, float* P, int width) { __shared__ float Mds[TILE_WIDTH][TILE_WIDTH]; __shared__ float Nds[TILE_WIDTH][TILE_WIDTH]; int bx = blockIdx.x; int by = blockIdx.y; int tx = threadIdx.x; int ty = threadIdx.y; // Identify the row and column of the P element to work on int row = by * TILE_WIDTH + ty; int colStart = bx * TILE_WIDTH * COARSE_FACTOR + tx; // Initialize Pvalue for all output elements float Pvalue[COARSE_FACTOR]; for (int i = 0; i \u0026lt; COARSE_FACTOR; i++) { Pvalue[i] = 0; } // Loop over the M and N tiles required to compute P element for (int ph = 0; ph \u0026lt; width/TILE_WIDTH; ph++) { // the COARSE_FACTOR tiles of N needs the same tile of M Mds[ty][tx] = M[row * width + ph * TILE_WIDTH + tx]; for (int c = 0; c \u0026lt; COARSE_FACTOR; c++) { int col = colStart + c * TILE_WIDTH; // Value to be computed in the c th tile // Collaborative loading of N tile into shared memory Nds[ty][tx] = N[(ph * TILE_WIDTH + ty) * width + col]; __syncthreads(); for (int k = 0; k \u0026lt; TILE_WIDTH; k++) { Pvalue[c] += Mds[ty][k] * Nds[k][tx]; } __syncthreads(); } for (int c = 0; c \u0026lt; COARSE_FACTOR; c++) { int col = colStart + c * TILE_WIDTH; P[row * width + col] = Pvalue[c]; } } } ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch6/","summary":"Personal notebook 6 of Programming Massively Parallel","title":"PMPP Learning-Chapter 6 Performance Considerations"},{"content":"Compute Architecture and Scheduling 本章介绍 GPU 计算架构，并说明灵活资源分配、块调度和占用的概念。然后将深入讨论线程调度、延迟容忍、控制发散和同步。\n4.1 Architecture of a modern GPU 下图展示了 CUDA GPU 架构，它被组织成一个流式多处理器 (Streaming Multiprocessors, SMs) 数组。每个 SM 都有几个处理单元，称为流处理器或 CUDA core (简称为 core)，如图中 SMs 内部的小块所示，它们共享控制逻辑和内存资源。\nSMs 还带有不同的片上存储结构，统称为内存。GPU 还带有千兆字节的片外设备内存，称为全局内存 (global memory).\n虽然旧的GPU使用 DDR DRAM，但从 NVIDIA 的 Pascal 架构开始 GPU 可能使用HBM (High-Bandwidth Memory) 或 HBM2，它们由 DRAM 模块组成，与GPU紧密集成在同一个封装中。\nArchitecture of a CUDA-capable GPU\n4.2 Block Scheduling 当调用内核时，CUDA runtime 系统启动执行内核代码的线程网格，块中的所有线程同时分配给同一个的 SM. 下图中每个 SM 分配了三个块，但是块需要占用硬件资源来执行，因此同时只能将有限数量的块分配给给定的 SM. 为了确保网格中的所有块都得到执行，runtime 系统维护一个需要执行的块列表，并在先前分配的块完成执行后再将新块分配给 SMs. 以块为基本单元将线程分配给 SMs 保证了同一块中的线程在同一SM上同时被调度。\nThread Block Assignment to SMs\n4.3 Synchronization and Transparent Scalability CUDA 允许同一块中的线程使用 barrier 同步函数 __syncthreads() 来协调其行动。下图展示了屏障同步的执行情况，箭头表示线程各自执行运行的时间。弯曲线标记了每个线程开始执行 __syncthreads() 的时间。弯曲线右侧的空白区域表示每个线程等待所有线程完成所需的时间。竖线标志着最后一个线程执行 __syncthreads() 的时间，之后所有线程都被允许继续执行 __syncthreads() 之后的代码。\n不要在分支语句中使用 __syncthreads()\n放在 if 语句中时，块中的所有线程要么全执行包含 __syncthreads() 的路径，要么都不执行。 if-else 语句中的两个分支都存在，块中的所有线程要么全执行 if 情况下的 __syncthreads() 的路径，要么全执行 else 下的路径。 A Example Execution of Barrier Synchronization\n系统需要确保所有参与 barrier 同步的线程都能访问足够资源以到达 barrier. 否则，那些到达不了线程可能会导致死锁。因此只有当 runtime 系统确保了块中所有线程有完成执行所需的所有资源时，一个块才能开始执行。 通过禁止不同块中的线程一起执行 barrier 同步，CUDA runtime 系统可以以任何顺序执行块。如下图所示，在只有少量执行资源的系统中，一次执行两个块。反之，可以同时执行多个块。这种在不同硬件上使用不同数量的执行资源执行相同的代码的能力被称为透明可扩展性 (transparent scalability)\nTransparent Scalability of CUDA Programs\n4.4 Warps and SIMD Hardware 当一个块被分配给一个 SM 时，它会被进一步划分为 32 个线程为一组的单元，称为 warp. 在 SMs 中，warp 是线程调度的单位。下图展示了一个划分的例子。\nBlocks are Partitioned into Warps for Thread Scheduling\n由多维度的线程组成的块，将被投影到线性化的行主布局中来划分。线性布局是以 (z, y, x) 坐标升序的方式排列。下图展示了一个大小为 4*4 块的线性化视图。前 4 个线程的 threadIdx.y 为 0，它们以 threadIdx.x 升序的方式排列。\nLinear Layout of 2D Threads\nSM 是单指令多数据 (SIMD) 模型，按顺序执行所有线程，warp 中的所有线程同时执行一条指令。下图展示了 SM 中的内核如何被分组为处理块，其中每 8 个内核构成一个处理块 (processing block) 并共享一个指令获取/调度单元。同一 warp 中的线程被分配到相同的处理块，该处理块获取指令并让 warp 中的所有线程对各自负责数据的部分执行该指令。这种设计允许较小比例的硬件专注于控制，而较大比例的硬件专注于提高计算吞吐量。\nProcessing Blocks Organization\n4.5 Control divergence 当同一 warp 中的线程执行不同的路径时，这些线程的行为被称作控制发散 (control divergence). 下图展示了一个 warp 在遇到分支语句时的执行方式，即通过两次 pass (执行代码的阶段) 来分别执行 then-path 和 else-path，最终实现所有线程的汇合。\nPascal 及之前架构中，warp 需要顺序执行两个 pass，一个 pass 执行完才能开始下一个 pass。 Pass 1： 线程 0-23 执行 then-path 的代码 A，线程 24-31 处于 inactive 状态。 Pass 2： 线程 24-31 执行 else-path 的代码 B，线程 0-23 处于 inactive 状态。 Pass 3： 所有线程汇合，执行后续代码 C。 Volta 及之后架构中，warp 可以同时执行两个 pass，不同的线程可以交错执行不同的代码路径。 Pass 1： 线程 0-23 开始执行 A 的第一个指令，线程 24-31 开始执行 B 的第一个指令。 Pass 2： 线程 0-23 执行 A 的第二个指令，线程 24-31 执行 B 的第二个指令。 \u0026hellip; Pass N： 线程 0-23 执行完 A 的所有指令，线程 24-31 执行完 B 的所有指令。 Pass N+1： 所有线程汇合，执行后续代码 C。 Example of a Warp Diverging at an if-else Statement\n发散也可能出现在其他控制流中。下图展示了 warp 如何执行发散 for 循环。通常来说如果判断条件基于 threadIdx 的值，那么控制语句可能会导致线程发散。由于线程总数需要是线程块大小的倍数，而数据大小可以是任意的，因此具有线程控制发散的控制流程很常见。由以上两个例子可以看出不能假设 warp 中的所有线程都具有相同的执行时间。如果 warp 中的所有线程都必须完成执行的一个阶段，然后才能继续前进，则必须使用 barrier 同步机制 (如 __syncwarp() )来确保正确性。\n控制发散对性能的影响随着被处理向量大小的增加而减小。例如对于长度为 100 的向量，4个 warp 中有 1 个将会控制发散 (25%)；对于大小为1000的矢量，32 个 warp 中只有 1 个将会控制发散 (3.125%).\nExample of a Warp Diverging at a for-loop\n4.6 Warp scheduling and latency tolerance 当将线程分配给 SMs 时，分配给 SM 的线程通常比 SM 中 core 的个数还要多，导致每个 SM 只能同时执行分配给它的所有线程的一部分。当要由 warp 执行的指令需要等待先前启动的操作的结果时，不会选择该 warp 执行。而是选择执行另一个不用等待先前指令结果的 warp。这种用其他线程的工作填充某些线程操作延迟时间的机制通常称为延迟容忍 (latency tolerance) 或者延迟隐藏 (latency hiding). 而选择准备执行的 warp 不会在执行时间线中引入任何空闲或浪费的时间的策略被称为零开销线程调度 (zero-overhead thread scheduling). 这种容忍长操作延迟的能力是 GPU 不像 CPU 那样为缓存和分支预测机制分配那么多芯片面积的主要原因，因此可以更专注于浮点数计算和内存读取。\nThreads, Context-switching, and Zero-overhead Scheduling 之前介绍过线程由程序的代码、正在执行的代码中的指令、变量的值和数据结构组成。在基于冯·诺伊曼模型的计算机中，程序的代码存储在存储器中。PC (Program Counter) 跟踪正在执行的程序指令的地址。IR (Instruction Register) 保存正在执行的指令。寄存器和内存保存变量和数据结构的值。 现代处理器的设计允许上下文切换 (Context-switching)，多个线程可以通过轮流执行的方式分时复用一个处理器。通过保存和恢复 PC 值以及寄存器和内存的内容，可以暂停线程的执行，并在稍后正确恢复线程的执行。不过保存和恢复寄存器内容可能会增加大量执行时间。 传统的 CPU 从一个线程切换到另一个线程需要将执行状态 (例如被切换线程的寄存器内容) 保存到内存中，稍后再从内存中加载，这样会产生空闲周期。GPU SMs 通过在硬件寄存器中保存指定 warp 的所有执行状态来实现零开销调度，因此不需要保存和恢复状态。 4.7 Resource partitioning and occupancy 给 SM 分配其所支持的最大 warp 数并不总是可行。分配给 SM 的 warp 数量与其支持的 warp 数量之比称为占用率 (occupancy). 例如，Ampere A100 GPU 每个 SM 最多支持 32 个 block，每个 SM 最多支持 64 个 warp (2048 个线程)，每个 block 最多支持 1024 个线程。意味着块大小可以从 641024 不等，每个 SM 分别可以有 322 个块。在这些情况下，分配给SM的线程总数为2048，这使占用率最大化。 SM 中的执行资源包括寄存器、共享内存线程块槽 (每个 SM 最大能被分配的线程块数量) 和线程槽 (每个线程块最大能被分配的线程数量)，这些资源在线程之间动态分配。资源的动态分配可能导致他们之间相互制约，使得资源利用不足。\n硬件资源支持的影响。当每个块有32个线程时。Ampere A100 GPU 会将 2048 个线程槽分配给 64 个块。然而 Volta SM 只支持 32 个线程块槽，导致占用率只有 50%. 当每个块的最大线程数不能整除块大小时。当块大小为 768，SM 将只能容纳 2 个线程块 (1536个线程)，剩下512个线程槽未使用，占用率为 75%. 寄存器资源限制对占用率的影响。Ampere A100 GPU 允许每个 SM 最多占有 65,536个寄存器。为了达到满占用率每个线程不应该使用超过 32 个寄存器。 这种限制导致资源使用的轻微增加可能导致并行性和性能的显著降低，称为 performance cliff. ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch4/","summary":"Personal notebook 3 of Programming Massively Parallel","title":"PMPP Learning-Chapter 4 Compute Architecture and Scheduling"},{"content":"5 Memory Architecture and Data Locality 之前章节所写的 CUDA 内核只能达到底层硬件峰值算里的一小部分。因为全局内存 (通常使用片外 DRAM 实现) 往往具有较长的访问延迟 (数百个时钟周期) 和有限的访问带宽。\n5.1 Importance of Memory Access Efficiency 在之前矩阵乘法的内核函数中，每次迭代里执行一次浮点乘法和一次浮点加法需要访问全局内存两次。因此，从全局内存访问的浮点操作次数 (FLOP) 与字节数 (B) 的比率为 2 FLOP-to-8 B，即 0.25FLOP/B. 计算访存比 (compute to global memory access ratio) 定义为在程序的一个区域内对全局内存访问的单位字节执行的 FLOPS 数。 计算访存比对 CUDA 内核的性能有重大影响。A100 GPU 的全局内存带宽峰值为 1555 GB/s，矩阵乘法内核计算访存比为 0.25 OP/B，因此内核可以执行的单精度 FLOPs 的吞吐量为 389 GFLOPS，仅为 A100 GPU 峰值单精度运算吞吐量 (19,500 GFLOPS) 的 2%. 我们把执行速度受内存带宽限制的程序称为内存瓶颈 (memory bound) 程序。\nRoofline Model Rooline 模型用于评估应用程序相在其所运行的硬件的限制上达到的性能。如下图所示，x 轴表示算术或计算强度 (computational intensity)，单位为 FLOP/B. y 轴表示以 GFLOPS 为单位的计算吞吐量。横线表示硬件可以提供的峰值计算吞吐量。 硬件通常关注两个指标:\n算力 π：也称为计算平台的性能上限，指的是一个计算平台倾尽全力每秒钟所能完成的浮点运算数。单位是 FLOP/s。 带宽 ß：即计算平台的带宽上限，指的是一个计算平台倾尽全力每秒所能完成的内存交换量。单位是Byte/s。 两个指标相除即可得到计算平台的计算强度上限 I_max = π / ß，它描述的是在这个计算平台上，单位内存交换最多用来进行多少次计算。 Roofline Model\n从图中可以看出算力决定“屋顶”的高度（绿色线段），带宽决定“房檐”的斜率（红色线段）。\nMemory-Bound: 当模型的计算强度 I 小于硬件的计算强度上限 I_max 时，由于此时模型位于“房檐”区间，因此模型理论性能 P 的大小完全由硬件的带宽上限 ß （房檐的斜率）以及模型自身的计算强度 I 所决定，因此这时候就称模型处于 Memory-Bound 状态。 Compute-Bound: 不管模型的计算强度 I 有多大，它的理论性能 P 最大只能等于硬件的算力 π 。当模型的计算强度 I 大于硬件的计算强度上限 I_max 时，模型在当前硬件处于 Compute-Bound 状态 为了让内核具有更高的性能，需要通过减少内核执行的全局内存访问次数来增加计算访存比。\n5.2 CUDA memory types 下图展示了 CUDA 设备的内存。全局内存和常量内存这两种类型的内存都可以被主机写入 (W) 和读取 (R) 。全局内存也可以被设备读写，而常量内存只支持设备对其读取。 另一种类型的内存是本地内存，也可以被读写。本地内存实际上放在全局内存中，具有相似的访问延迟，但它不是跨线程共享的。每个线程都有自己的全局内存部分，将其用作自己的私有本地内存，存放私有但不能在寄存器中分配的数据。 寄存器 (register) 和共享内存 (shared memory) 是片上内存。存储在这些类型内存中的变量可以以高度并行的方式以高速访问。其中每个线程只能访问自己的寄存器。\nOverview of CUDA Memory Model\n与基于冯·诺伊曼模型的计算机类比，CUDA 设备中的全局内存对应于内存框，寄存器对应于寄存器堆。与访问全局内存相比，每次访问寄存器所涉及的指令更少。当算术指令的操作数在寄存器中时，不需要额外的指令使算术逻辑单元(ALU)可以使用该操作数的值。如果操作数值在全局内存中，处理器需要执行内存加载操作让 ALU 能使用操作数。并且从寄存器堆访问所消耗的能量至少比从全局内存访问低一个数量级。\nMemory vs. Registers in a Modern Computer Based on the von Neumann Model\n下图展示了 CUDA 设备中的共享内存和寄存器。共享内存实际上是一种暂存存储器 (scratchpad memory)，作为片上内存的一部分。当处理器访问存储在共享内存中的数据时，需要执行内存加载操作。CUDA 中共享内存和寄存器之间的一个重要区别是，存储在共享内存中的变量可以被块中的所有线程访问，而寄存器数据是线程私有的。\nShared Memory vs. Registers in a CUDA Device SM\n下表给出了将程序变量声明为各种内存类型的 CUDA 语法。\n所有在内核和设备函数中声明的 automatic scalar variables 都被放入寄存器中。 Automatic array variables 存储在线程的本地内存中。如果所有访问都使用常量索引值，编译器可能决定将将其存储到寄存器中。 块中的所有线程都看到 shared variable 的相同版本。内核执行期间每个块会创建和使用一个私有版本。通常使用共享变量来保存在内核执行阶段经常使用和重用的全局内存数据部分。 Constant variables 通常用于向核函数提供输入。内核函数不能修改常量变量的值。 Global variables 通常用于将信息从一个内核调用传递到另一个内核调用。 Variable Declaration Memory Scope Lifetime Automatic variables other than arrays Register Thread Kernel Automatic array variables Local Thread Kernel __device__ __shared__ int SharedVar; Shared Block Kernel __device__ int GlobalVar; Global Grid Application __device__ __constant__ int ConstantVar; Constant Grid Application 在 CUDA 中，指针可以用来指向全局内存中的数据对象，通常有以下两种情况会使用\n对象由主机函数分配，指向对象的指针由内存分配函数 (如 cudaMalloc) 初始化，作为参数传递给内核函数。 将在全局内存中声明的变量的地址赋给指针变量。 5.3 Tiling for Reduced Memory Traffic 一种常见的策略是将数据划分为称为 tile 的子集，以便每个 tile 都适合共享内存。能进行划分的一个重要的标准是这些 tile 上的内核计算可以彼此独立地完成。 下图展示了 block(0,0) 的四个线程所完成的计算。这四个线程计算P(0,0), P(0,1), P(1,0) 和 P(1,1). 每个线程在执行过程中访问 M 的 4 个元素和 N 的 4 个元素，可以看出有明显重复的部分。将每个块需要访问的数据先加载到共享内存，这样可以避免每个线程从全局内存里加载重复的数据。全局内存流量的减少与块的维度成正比。每个块大小为 Width*Width 时，全局内存流量将减少为原来的 1/Width.\nA Small Example of Matrix Multiplication\n按 tile 进行矩阵乘法的基本思想是让线程在各自使用元素来进行内积计算之前，将 M 和 N 元素的子集加载到共享内存中。如下图所示把 M 和 N 分成大小为 2*2 的块。每个线程执行的内积计算现在被划分为几个阶段。在每个阶段，一个块中的所有线程协作将对应的 M 和 N 的 tile 加载到共享内存中。这样每个阶段关注的是输入矩阵元素的一个小子集。这种集中的访问行为称为局部性 (locality).\nTiling M and N to Utilize Shared Memory\n5.4 A Tiled Matrix Multiplication Kernel 按照上述方法编写的内核函数如下。如下图所示，x 轴方向上坐标为 bx 和 tx 的线程应该负责计算 P 中索引为 bx * tile_width + tx 元素。类似地，y 轴方向上线程要处理的 P 中索引为 by * tile_width + ty. 外循环的每次迭代对应于计算的一个阶段。两次调用 __syncthreads() 的原因不同，第一次被称为写后读 (read-after-write) 依赖关系，因为线程在尝试读取数据之前必须等待其他线程将数据写入正确的位置。第二种被称为读后写 (write-after-read) 依赖，因为线程必须等待所有需要它的线程读取数据，然后才能覆盖它。\n写后读依赖是一种真正依赖 (true dependence)，因为读线程确实需要写线程提供的数据，所以它别无选择，只能等待。读后写依赖关系是伪依赖 (false dependence) 关系，因为写线程不需要来自读线程的任何数据。这种依赖性是因为它们访问相同的内存地址，如果它们访问不同的地址，则不存在这种依赖性。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __global__ void TilingMatrixMulKernel(float* M, float* N, float* P, int width) { __shared__ float Mds[TILE_WIDTH][TILE_WIDTH]; __shared__ float Nds[TILE_WIDTH][TILE_WIDTH]; int bx = blockIdx.x; int by = blockIdx.y; int tx = threadIdx.x; int ty = threadIdx.y; // Identify the row and column of the P element to work on int Row = by * TILE_WIDTH + ty; int Col = bx * TILE_WIDTH + tx; float Pvalue = 0; // Loop over the M and N tiles required to compute the P elemrnt for (int ph = 0; ph \u0026lt; width/TILE_WIDTH; ph++) { // Collaborative loading of M and N tiles into shared memory Mds[ty][tx] = M[Row * width + ph * TILE_WIDTH + tx]; Nds[ty][tx] = N[(ph * TILE_WIDTH + ty) * width + Col]; __syncthreads(); for (int k = 0; k \u0026lt; TILE_WIDTH; k++) { Pvalue += Mds[ty][k] * Nds[k][tx]; } __syncthreads(); P[Row * width + Col] = Pvalue; } } Tiling 技术并不是 GPU 上才能实现。CPU 上的 tiling 依赖缓存来将重用的数据保留在芯片上，而 GPU 上的 tiling 则直接地使用共享内存来存储片上数据。CPU 核心通常只运行一个或两个线程，因此线程可以依赖于缓存来保存最近使用的数据。相反，GPU SM 同时运行多个线程以隐藏延迟，些线程会竞争缓存槽，使得 GPU 缓存不太可靠。\n5.5 Boundary Checks 我们需要扩展 tiling 矩阵乘法内核使其处理任意大小的矩阵。下图展示了 block(0,0) 在 phase 1 的内存访问模式。在不进行边界检查时 thead(0,1) 试图访问 M(0,3) 时实际上获得的是 M(1,0). 同样在 Block(1,1) 在 phase 0 访问时也会出现类似的问题。因此在加载所需的 M 和 N 的 tile 时边界条件为两个索引都小于 Width: Row \u0026lt; Width \u0026amp;\u0026amp; (ph * TILE_WIDT + tx) \u0026lt; Width，否则将 0.0f 存入对应位置。\nMemory Access of Block(0,0) in Phase 1\n扩展为一般的矩阵乘法内核是很容易的。将 Width 参数替换为三个无符号整数参数: m, k, n; 将用于指代 M 的行数/列数和 P 的行数/列数的 Width 替换为 m/n；将用于指代 M 的列数和 P 的行数的 Width 替换为 k. 修改后代码如下\nCalculation of the Matrix Indexes in Tiled Multiplication\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 __global__ void GEMMKernel(float* M, float* N, float* P, int m, int n, int k) { __shared__ float Mds[TILE_WIDTH][TILE_WIDTH]; __shared__ float Nds[TILE_WIDTH][TILE_WIDTH]; int bx = blockIdx.x; int by = blockIdx.y; int tx = threadIdx.x; int ty = threadIdx.y; // Identify the row and column of the P element to work on int Row = by * TILE_WIDTH + ty; int Col = bx * TILE_WIDTH + tx; float Pvalue = 0; // Loop over the M and N tiles required to compute the P element for (int ph = 0; ph \u0026lt; (k + TILE_WIDTH - 1) / TILE_WIDTH; ph++) { // Collaborative loading of M and N tiles into shared memory if (Row \u0026lt; m \u0026amp;\u0026amp; ph * TILE_WIDTH + tx \u0026lt; k) { Mds[ty][tx] = M[Row * k + ph * TILE_WIDTH + tx]; } else { Mds[ty][tx] = 0.0f; } if (ph * TILE_WIDTH + ty \u0026lt; k \u0026amp;\u0026amp; Col \u0026lt; n) { Nds[ty][tx] = N[(ph * TILE_WIDTH + ty) * n + Col]; } else { Nds[ty][tx] = 0.0f; } __syncthreads(); for (int i = 0; i \u0026lt; TILE_WIDTH; i++) { Pvalue += Mds[ty][i] * Nds[i][tx]; } __syncthreads(); } if (Row \u0026lt; m \u0026amp;\u0026amp; Col \u0026lt; n) { P[Row * n + Col] = Pvalue; } } 5.6 Impact of Memory Usage on Occupancy CUDA 设备提供有限的资源限制了可以同时在给定程序的 SM 中分配的线程数量。上面代码不支持主机代码对共享内存使用情况的任何动态调整，因为共享内存使用的大小是一个常量。 解决的方法是共享内存声明前添加一个 extern 关键字，并在声明中省略数组的大小。当调用内核时，可以根据设备查询结果动态配置每个块要使用的共享内存量，并将其作为第三个执行配置参数提供给内核调用。然后将数组中每个部分的大小作为参数传递给内核函数。\n1 2 3 4 5 6 7 8 9 size = ...; matrixMulKernel\u0026lt;\u0026lt;\u0026lt;dimGrid,dimBlock,size\u0026gt;\u0026gt;\u0026gt;(Md，Nd，Pd, Width，size/2，size/2); __global__ void matrixMulKernel(float* M, float* N,float* P,int width, unsigned Mdz_sz, unsigned Nds_sz) { extern __shared__ char float Mds_Nds[]; float *Mds = (float *) Mds_Nds; float *Nds = (float*) Mds_Nds + Mds_sz; } ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch5/","summary":"Personal notebook 5 of Programming Massively Parallel","title":"PMPP Learning-Chapter 5 Memory Architecture and Data Locality"},{"content":"3 Multidimensional Grids and Data 本章将更广泛地介绍线程是如何组织的和如何使用线程和块来处理多维数组。\n3.1 Multidimensional Grid Organization 再次强调网格中的所有线程执行相同的内核函数，它们依赖于线程索引来区分彼此，并确定各自要处理的数据的部分。这些线程被组织成两级结构: 一个网格由一个或多个块组成，每个块由一个或多个线程组成。调用内核函数时需要指定执行配置参数 gridDim 和 blockDim，gridDim 是一个三维块数组，blockDim 是一个三维线程数组。他们的类型都是 dim3，是包含三个元素 x, y 和 z 的整数向量类型，分别指定了每个维度上的块个数和线程个数。使用少于 3 个维度时可以将未使用的维度大小设置为 1。网格中的所有块都具有相同的维度和大小。一旦网格启动，网格和块的尺寸将保持不变，直到整个网格完成执行。\n当前 CUDA 系统中，每个块的总大小限制为 1024 个线程。只要线程总数不超过 1024，这些线程就可以以任何方式分布在三个维度上。\n1 function_name\u0026lt;\u0026lt;\u0026lt;gridDim, blockDim\u0026gt;\u0026gt;\u0026gt;(...); 一个例子如下，dimBlock和dimGrid是由程序员定义的主机代码变量。\n1 2 3 dim3 dimGrid(32, 1, 1); dim3 dimBlock(128, 1, 1); vecAddKernel\u0026lt;\u0026lt;\u0026lt;dimGrid, dimBlock\u0026gt;\u0026gt;\u0026gt;(...); 下图展示了 gridDim(2,2,1) 和 blockDim (4,2,2) 情况下线程组织的情况。\nA Multidimensional Example of CUDA Grid Organization\n3.2 Mapping threads to multidimensional data 选择 1D、2D 或 3D 的线程组织通常基于数据的性质。例如图像是一个二维像素数组。使用由 2D 块组成的 2D 网格可以方便地处理图像中的像素。下图展示了处理大小为 62*76 1F1F 的图片 P 的一种组织方式。假设使用 16*16 大小的块，那么在 y 方向上需要 4 个块，在 x 方向上需要 5 个块。横纵坐标的计算方式为\n1 2 row coordinate = blockIdx.y * blockDim.y + threadIdx.y col coordinate = blockIdx.x * blockDim.x + threadIdx.x 我们将按维度的降序 (z, y, x) 表示多维数据。这种顺序与 gridDim 和 blockDim 维度中数据维度的顺序相反！！！\n实际上，由于现代计算机中使用二维存储空间，C 语言中的所有多维数组都是线性化的。虽然可以使用如 Pin_d[j][i] 这样的多维数组语法访问多维数组的元素，但编译器将这些访问转换为指向数组开始元素的基指针，以及从这些多维索引计算出的一维偏移量。 至少有两种方法可以对二维数组进行线性化。将同一行/列的所有元素放置到连续的位置。然后将行/列一个接一个地放入内存空间中。这种排列称为行/列主序布局 (row/column-major layout). CUDA C 使用行主序布局。\nRow-major Layout for a 2D C Array\n下面内核代码将每个颜色像素转换为对应的灰度像素。我们计算坐标为 (row, col) 的像素对应的 1D 索引 row * width + col. 这个 1D 索引 grayOffset 就是 Pout 的像素索引，因为输出灰度图像中的每个像素都是 1字节 (unsigned char)。每个彩色像素用三个元素(r, g, b)存储，每个元素为1字节。因此 rgbOffset 给出了 Pin 数组中颜色像素的起始位置。从 Pin 数组的三个连续字节位置读取每个通道对应的值，执行灰度像素值的计算，并使用 grayOffset 将该值写入 Pout 数组。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // we have 3 channels corresponding to RGB // The input image is encoded as unsigned characters [0, 255] __global__ void colorToGreyscaleConversion(unsigned char * Pout, unsigned char * Pin, int width, int height) { int Col = threadIdx.x + blockIdx.x * blockDim.x; int Row = threadIdx.y + blockIdx.y * blockDim.y; if (Col \u0026lt; width \u0026amp;\u0026amp; Row \u0026lt; height) { // get 1D coordinate for the grayscale image int greyOffset = Row*width + Col; // one can think of the RGB image having // CHANNEL times columns than the grayscale image int rgbOffset = greyOffset*CHANNELS; unsigned char r = Pin[rgbOffset + 0]; // red value for pixel unsigned char g = Pin[rgbOffset + 1]; // green value for pixel unsigned char b = Pin[rgbOffset + 2]; // blue value for pixel // perform the rescaling and store it // We multiply by floating point constants Pout[grayOffset] = 0.21f*r + 0.71f*g + 0.07f*b; } } 3.3 Image blur: a more complex kernel 图像模糊函数将输出图像像素的值计算为相邻像素 (包括输入图像中像素) 的加权和。简便起见，我们使用相邻像素的平均值来计算结果，对应的代码如下。与 colorToGrayscaleConversion 中使用的策略类似，对每个输出像素使用 1 个线程来计算。col和 row 表示输入像素 patch 的中心像素位置。嵌套的 for 循环遍历 patch 中的所有像素。if 语句的 curRow \u0026lt; 0 和 curCol \u0026lt; 0 条件用于跳过执行超出图像范围的部分。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 __global__ void blurKernel(unsigned char *in, unsigned char *out, int width, int height) { int Col = threadIdx.x + blockIdx.x * blockDim.x; int Row = threadIdx.y + blockIdx.y * blockDim.y; if (Col \u0026lt; width \u0026amp;\u0026amp; Row \u0026lt; height) { int pixVal = 0; int pixels = 0; // Get the average of the surrounding BLUR_SIZE x BLUR_SIZE box for (int blurRow = -BLUR_SIZE; blurRow \u0026lt; BLUR_SIZE + 1; blurRow++) { for (int blurCol = -BLUR_SIZE; blurCol \u0026lt; BLUR_SIZE + 1; blurCol++) { int curRow = Row + blurRow; int curCol = Col + blurCol; // If the pixel is within the image, add its value to the sum if(curRow \u0026gt; -1 \u0026amp;\u0026amp; curRow \u0026lt; height \u0026amp;\u0026amp; curCol \u0026gt; -1 \u0026amp;\u0026amp; curCol \u0026lt; width) { pixVal += in[curRow*width + curCol]; pixels++; // Keep track of the number of pixels in the avg } } } // Write our new pixel value out out[Row*width + Col] = (unsigned char)(pixVal / pixels); } } 3.4 Matrix multiplication 矩阵乘法是 Basic Linear Algebra Subprograms (BLAS) 的重要组成部分。\nLevel 1 形如 $y = \\alpha x + y$ 的向量运算。 Level 2 形如 $y = \\alpha Ax + \\beta y$ 的矩阵-向量运算。 Level 3 形如 $y = \\alpha AB + \\beta C$ 的矩阵-矩阵运算。 为了用 CUDA 实现矩阵乘法，我们可以采取与 colorToGrayscaleConversion 相同的方法将网格中的线程映射到输出矩阵 P 的元素，即每个线程负责计算 P 中的一个元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Assuming square matrices of size Width x Width __global__ void MatrixMulKernel(float* M, float* N, float* P, int Width) { // Calculate the row index of the P element and M int Row = blockIdx.y*blockDim.y+threadIdx.y; // Calculate the column index of P and N int Col = blockIdx.x*blockDim.x+threadIdx.x; if ((Row \u0026gt;= Width) || (Col \u0026gt;= Width)) return; float Pvalue = 0; // each thread computes one element of the block sub-matrix for (int k = 0; k \u0026lt; Width; ++k) Pvalue += M[Row*Width+k]*N[k*Width+Col]; P[Row*Width+Col] = Pvalue; } Matrix Multiplication by Tiling P\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch3/","summary":"Personal notebook 3 of Programming Massively Parallel","title":"PMPP Learning-Chapter 3 Multidimensional Grids and Data"},{"content":"2 Heterogeneous Data Parallel Computing 数据并行 (Data Parallel) 是指在数据集的不同部分上执行的计算工作可以彼此独立地完成，从而可以并行执行的现象。\n2.1 Data Parallel 在图像处理中，将彩色像素转换为灰度只需要该像素的数据。模糊图像将每个像素的颜色与附近像素的颜色平均，只需要像素的小邻域的数据。即使是一个看似全局的操作，比如找到图像中所有像素的平均亮度，也可以分解成许多可以独立执行的较小的计算。这种对不同数据块的独立计算是数据并行性的基础。 为了将彩色图像转换为灰度图像，我们通过以下加权和公式计算每个像素的亮度值L. 这些逐像素计算都不依赖于彼此，都可以独立执行。显然，彩色图到灰度图的转换具有大量的数据并行性。 $L=0.21r+0.72g+0.07b$\nTask Parallelism vs. Data Parallelism 数据并行并不是并行编程中使用的唯一类型的并行。任务并行 (Task Parallelism) 在并行编程中也得到了广泛的应用。任务并行性通常通过应用程序的任务分解来暴露。例如，一个简单的应用程序可能需要做一个向量加法和一个矩阵-向量乘法。每个都是一个任务。如果两个任务可以独立完成，则存在任务并行性。I/O和数据传输也是常见的任务。 Data Parallelsim in Image2Grayscale Conversion\n2.2 CUDA C Program Structure CUDA C 用最少的新语法和库函数扩展了流行的 ANSI C 语言。CUDA C 程序的结构反映了计算机中主机 (CPU) 和一个或多个设备 (GPU) 的共存。每个 CUDA C 源文件可以同时包含主机 (host) 代码和设备 (device) 代码。 CUDA程序的执行流程如下图所示。执行从主机代码 (CPU 串行代码) 开始，当调用内核函数 (kernel function) 时，会在设备上启动大量线程1来执行内核。由内核调用启动的所有线程统称为网格 (grid)。这些线程是 CUDA 并行执行的主要载体。\nExecution of a CUDA Program\n2.3 A vector addition kernel 使用向量加法来展示 CUDA C 程序结构。下面展示了一个简单的传统 C 程序，它由一个主函数和一个向量加法函数组成。\n当需要区分主机和设备数据时，我们都会在主机使用的变量名后面加上 “_h”，而在设备使用的变量名后面加上 “_d”.\n1 2 3 4 5 6 7 8 9 10 11 12 13 // Compute vector sum h_C = h_A+h_B void vecAdd(float* h_A, float* h_B, float* h_C, int n) { for (int i = 0; i \u0026lt; n; i++) h_C[i] = h_A[i] + h_B[i]; } int main() { // Memory allocation for h_A, h_B, and h_C // I/O to read h_A and h_B, N elements each // … vecAdd(h_A, h_B, h_C, N); } 并行执行向量加法的一种直接方法是修改 vecAdd 函数并将其计算移到设备上。修改后的结构如下所示。\nStructure of the Modified VecAdd\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include \u0026lt;cuda_runtime.h\u0026gt; // … void vecAdd(float* A, float* B, float* C, int n) { int size = n* sizeof(float); float *d_A *d_B, *d_C; /* … 1. // Allocate device memory for A, B, and C // copy A and B to device memory 2. // Kernel launch code – to have the device // to perform the actual vector addition 3. // copy C from the device memory // Free device vectors */ } 2.4 Device Global Memory and Data Transfer 在当前的CUDA系统中，设备通常是带有自己的 DRAM 的硬件卡，称为 (设备)全局内存 (device global memory). 对于向量加法内核，在调用内核之前，程序员需要在设备全局内存中分配空间，并将数据从主机内存传输到设备全局内存中分配的空间。这对应于 1. 部分。类似地，在设备执行之后，程序员需要将结果数据从设备全局内存传输回主机内存，并释放设备全局内存中不再需要的已分配空间。这对应于 3. 部分。 cudaMalloc 函数可以从主机代码中调用，为对象分配一块设备全局内存。第一个参数是指针变量的地址，该变量将被设置为指向分配的对象。指针变量的地址应强制转换为 void**，这样可以允许 cudaMalloc 函数将分配内存的地址写入所提供的指针变量中，而不考虑其类型2。\n1 cudaError_t cudaMalloc(void** devPtr, size_t size); devPtr：指向指向设备内存的指针的指针。 size：要分配的内存大小（以字节为单位）。 cudaFree 函数通过释放设备内存并将其返回到可用内存池来管理设备内存资源。它只需要 A_d 的值来识别要释放的内存区域，而不需要改变 A_d 指针本身的地址。\n在主机代码中对设备全局内存指针进行解引用引用可能导致异常或其他类型的运行错误。\ncudaMemcpy 函数是 CUDA 中用于在主机内存和设备内存之间传输数据的核心函数。它允许将数据从主机内存复制到设备内存，或从设备内存复制到主机内存。\n1 cudaError_t cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind); dst：目标内存地址，可以是主机内存地址或设备内存地址。 src： 源内存地址，可以是主机内存地址或设备内存地址。 count： 要复制的数据大小（以字节为单位）。 kind： 复制方向，可以使用以下枚举值： cudaMemcpyHostToDevice：主机内存-\u0026gt;设备内存。 cudaMemcpyDeviceToHost：设备内存-\u0026gt;主机内存。 cudaMemcpyDeviceToDevice：设备内存-\u0026gt;设备内存。 cudaMemcpyHostToHost：主机内存-\u0026gt;主机内存 了解完这些后，可以更新代码的框架如下\nChecking and Handling in CUDA CUDA API 函数返回一个 cudaError_t 类型的标志，指示当它们处理请求时是否发生错误。 在 CUDA 运行时库的头文件 cuda_runtime.h 中，cudaError_t 被定义为一个 int 类型的别名\n1 typedef int cudaError_t; 一个例子如下\n1 2 3 4 5 6 7 8 // ... float *d_a; cudaError_t err = cudaMalloc(\u0026amp;d_a, 1024 * sizeof(float)); if (err != cudaSuccess) { printf(\u0026#34;cudaMalloc failed: %s\\n\u0026#34;, cudaGetErrorString(err)); return 1; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 void vecAdd(float* A, float* B, float* C, int n) { int size = n* sizeof(float); float *d_A *d_B, *d_C; cudaMalloc((void **) %d_A, size); cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice); cudaMalloc((void **) %d_B, size); cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice); cudaMalloc((void **) %d_C, size); // Kernel invocation code - to be shown later // ... cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost); // Free device memory for A, B, C cudaFree(d_A); cudaFree(d_B); cudaFree(d_C); } 2.5 Kernel functions and threading 内核函数指所有线程在并行阶段执行的代码，网格中的所有线程执行相同的内核代码。。当程序的主机代码调用内核时，CUDA runtime 系统启动一个线程网格，这些线程被组织成一个两级层次结构。每个网格都被组织为线程块 (thread block, 简称为块) 数组。网格的所有块都是相同的大小。在调用内核时，每个线程块中的线程总数由主机代码指定。 同一个内核可以在主机代码的不同部分用不同数量的线程调用。对于给定的线程网格，一个块中的线程数可以在名为 blockDim 的内置变量中获得，它是一个具有三个无符号整数字段 (x, y, z) 的结构体。 下图给出了一个示例，其中每个块由256个线程组成。每个线程都用一个箭头表示，标有线程在块中的索引号的方框。由于数据是一维向量，因此每个线程块被组织为一维线程数组。blockDim.x 的值表示每个块中的线程总数。threadaIdx 变量表示每个线程在块中的坐标。全局索引 i 的计算公式为 i = blockIdx.x * blockDim.x + threadIdx.x\n许多编程语言都有内置变量。这些变量具有特殊的含义和目的。这些变量的值通常由运行时系统预先初始化，并且在程序中通常是只读的。\nHierarchical Organization in CUDA\n向量加法的核函数定义如下。网格中的每个线程对应于原始循环的一次迭代，这被称为循环并行 (loop parallel)，意为原始顺序代码的迭代由线程并行执行。addVecKernel 中有一个 if (i \u0026lt; n) 语句，因为并非所有的向量长度都可以表示为块大小的倍数。\n1 2 3 4 5 6 __global__ void vecAddKernel(float* A, float* B, float* C, int n) { int i = blockDim.x * blockIdx.x + threadIdx.x; if(i \u0026lt; n) C[i] = A[i] + B[i]; } CUDA C 使用了三个可以在函数声明中使用的限定字。下表展示了这些关键词的意义。\n__host__ 就是在主机上执行的传统 C 函数，只能从另一个主机函数调用。 __global__ 表示被声明的函数是 CUDA C 内核函数。内核函数在设备上执行，并且可以从主机上调用。 __device__ 函数在 CUDA 设备上执行，只能从内核函数或其他设备函数调用。 可以在函数声明中同时使用 __host__ 和 __device__. 编译系统会为同一个函数生成两个版本的目标代码。\nQualifier Keyword Callable From Executed on Executed by __host__ (default) Host Host Caller host thread __global__ Host/Device Device New grid of device thread __device__ Device Device Caller device thread 2.6 Calling kernel functions 实现内核函数之后，剩下的步骤是从主机代码调用该函数来启动网格。当主机代码调用内核时，它通过执行配置参数 (execution configuration parameters) 设置网格和线程块大小配置参数在在传统的C函数参数之前由 \u0026lt;\u0026lt;\u0026lt;...\u0026gt;\u0026gt;\u0026gt; 之间给出。第一个配置参数给出网格中的块数量。第二个参数指定每个块中的线程数。\n1 2 3 4 5 6 7 int vectAdd(float* A, float* B, float* C, int n) { // d_A, d_B, d_C allocations and copies omitted // ... // Run ceil(n/256) (or by (n + 256 - 1) / 256) blocks of 256 threads each vecAddKernel\u0026lt;\u0026lt;\u0026lt;ceil(n/256.0), 256\u0026gt;\u0026gt;\u0026gt;(d_A, d_B, d_C, n); } 下面展示了 vecAdd 函数中的最终主机代码。所有的线程块操作向量的不同部分。它们可以按任意顺序执行。\n实际上，分配设备内存、从主机到设备的输入数据传输、从设备到主机的输出数据传输以及释放设备内存的开销可能会使生成的代码比原始顺序代码慢，这是因为内核完成的计算量相对于处理或传输的数据量来说很小。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void vecAdd(float* A, float* B, float* C, int n) { int size = n * sizeof(float); float *d_A *d_B, *d_C; cudaMalloc(\u0026amp;d_A, size); cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice); cudaMalloc(\u0026amp;d_B, size); cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice); cudaMalloc(\u0026amp;d_C, size); vecAddKernel\u0026lt;\u0026lt;\u0026lt;ceil(n/256.0), 256\u0026gt;\u0026gt;\u0026gt;(d_A, d_B, d_C, n); cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost); // Free device memory for A, B, C cudaFree(d_A); cudaFree(d_B); cudaFree(d_C); } 2.7 Compilation NVCC (NVIDIA C Compiler) 处理一个C处理一个CUDA C程序，使用 CUDA 关键字来分离主机代码和设备代码。\n主机代码是就是普通的ANSI C代码，使用 C/C++ 编译器进行编译，并作为传统的 CPU 进程运行。 设备代码及其相关辅助函数和数据结构的CUDA关键字，由NVCC编译成称为 PTX (Parallel Thread Execution) 文件的虚拟二进制文件, 由 NVCC runtime 组件进一步编译成目标文件，并在支持 cuda 的 GPU 设备上执行。 Overview of the Compilation Process of a CUDA C Program\n线程由程序的代码、正在执行的代码中的位置以及它的变量和数据结构的值组成。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\ncudaMalloc 与 C 语言 malloc 函数的格式不同。前者接受两个参数，指针变量其地址作为第一个参数给出。后者只接受一个参数来指定分配对象的大小，返回一个指向分配对象的指针。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch2/","summary":"Personal notebook 2 of Programming Massively Parallel","title":"PMPP Learning-Chapter 2 Heterogeneous Data Parallel"},{"content":"1 Introduction 基于单个中央处理器 (Central Processor Unit, CPU) 的微处理器外部看起来是按顺序执行指令，例如英特尔和 AMD 的 x86 处理器，随着时钟频率和硬件资源的快速增长，在20世纪80年代和90年代推动了计算机应用程序的性能快速提高和成本降低。可以给桌面应用提供 GFLOPS 级别的浮点运算，给数据中心提供 TFLOPS 级别的浮点运算。然而，由于能源消耗和散热问题，这种趋势从2003年开始放缓。这些问题限制了时钟频率的增加和保持按顺序步骤执行指令的同时在单个 CPU 上每个时钟周期内可以执行的行动。 之后几乎所有的微处理器供应商都转向了在每个芯片上使用多个物理 CPU (称为处理器核心) 来提高处理能力。在这个模型中，传统的CPU可以看作是一个单核CPU。这样就要求必须有多个指令序列并且可以同时在这些处理器核心上执行 (无论是来自相同的应用程序还是来自不同的应用程序)。为了使一个特定的应用程序受益于多个处理器核心，它的工作必须分成多个指令序列，这些指令序列可以同时在这些处理器核心上执行。这种从单个CPU按顺序执行指令到多个内核并行执行多个指令序列的转变造就了并行计算的需求。\n1.1 Heterogeneous parallel computing 半导体行业确定了设计微处理器的两条主要路线\nMulticore Trajectory: 寻求在转变到多个核时保持顺序程序的执行速度。 Many-thread Trajectory: 更多地关注并行应用程序的执行吞吐量。 自2003年以来，多线程处理器尤其是 GPU，一直在浮点计算性能上表现优异。多核和多线程之间在峰值性能上的如此大的差距促使许多应用程序开发人员将其软件的计算密集型部分转移到gpu上执行。\n64-bit double-precision 32-bit single-precision Tesla A100 GPU 9.7 TFLOPS 156 TFLOPS Intel 24-core Processor 0.33 TLOPS 0.66 TLOPS CPU 的设计为面向延迟的 (latency-oriented) 设计。针对顺序代码性能进行了优化。计算单元和操作数传输逻辑的设计是为了最小化计算的有效延迟，代价是增加芯片面积和单位功率的使用。采用复杂的分支预测逻辑和执行控制逻辑来减少条件分支指令的延迟使得每个线程的执行延迟降低。然而，低延迟计算单元、复杂的操作数传递逻辑、大缓存存储器和控制逻辑消耗了芯片面积和功率，否则可以用来提供更多的算术执行单元和内存访问通道。 GPU 的设计是面向吞吐量 (throught-put oriented)的设计。寻求在有限的芯片面积和功耗预算下最大化浮点计算和内存访问吞吐量。许多图形应用程序的速度受到数据从内存系统传输到处理器的速率的限制，必须能够将大量数据加载和存储到 DRAM 中的图形帧缓冲区。 游戏应用程序普遍接受的宽松内存模型(各种系统软件，应用程序和I/O设备期望其内存访问工作的方式)也使 GPU 更容易支持访问内存的大规模并行性。通用处理器必须满足遗留操作系统、应用程序和I/O设备的要求，这些要求对支持并行内存访问提出了更多挑战，从而使提高内存访问的吞吐量 (通常称为内存带宽 memory bandwidth) 变得更加困难。 就功耗和芯片面积而言，减少延迟比增加吞吐量要昂贵得多1。因此，GPU 的主流解决方案是针对大量线程的执行吞吐量进行优化，而不是减少单个线程的延迟。这种设计方法允许分级存储层次和计算具有较长的延迟，从而节省了芯片面积和功耗。\nCPU and GPU Design Philosophies\n1.2 Why More Speed or Parallelism 基于人工神经网络的深度学习是通过大幅提高计算吞吐量而实现的新应用。虽然自 20 世纪 70 年代以来，神经网络得到了积极的关注，但由于需要太多的标记数据和太多的计算来训练这些网络，它们在实际应用中一直效果不佳。互联网的兴起提供了大量有标签的图片，而 GPU 的兴起则带来了计算吞吐量的激增。因此，自2012年以来，基于神经网络的应用在计算机视觉和自然语言处理方面得到了快速的采用。这种采用彻底改变了计算机视觉和自然语言处理应用，并引发了自动驾驶汽车和家庭辅助设备的快速发展。\n1.3 Speeding up real applications 并行计算系统相对于串行计算系统所能实现的加速的一个重要因素是可以并行化的应用程序部分，另一个重要因素是从内存访问数据和向内存写入数据的速度有多快。下图展示了顺序和并行应用程序部分的覆盖率。顺序部分和传统的(单核)CPU覆盖部分相互重叠。以前的GPGPU技术对数据并行部分的覆盖非常有限，因为它仅限于可以表示为绘制像素的计算。障碍是指难以扩展单核cpu以覆盖更多数据并行部分的功率限制。\nCoverage of Application Portions\n1.4 Challenges in parallel programming 设计具有与顺序算法相同的算法(计算)复杂度的并行算法可能具有挑战性。 许多应用程序的执行速度受到内存访问延迟和/或吞吐量的限制。 与顺序程序相比，并行程序的执行速度通常对输入数据特征更为敏感。 有些应用程序可以并行化，而不需要跨不同线程的协作 (embarrassingly parallel)。其他应用程序需要使用同步操作 (synchronization operations) 使得线程能相互协作。 例如，可以通过将计算单元的数量翻倍来使吞吐量翻倍，但代价是芯片面积和功耗翻倍。然而，将算术延迟减少一半可能需要电流翻倍，代价是使用的芯片面积增加一倍以上，功耗变为四倍。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch1/","summary":"Personal notebook 1 of Programming Massively Parallel","title":"PMPP Learning-Chapter 1 Introduction"},{"content":"Pattern Match and Rewriting 下面代码中 MyModule 包含一个带有两个高级算子 relax.opmultiply 和 relax.op.add 的 relax 函数。我们的目标是找到这两个算子，并将其替换为对 relax.ewise_fma 算子的调用。\n1 2 3 4 5 6 7 8 9 10 @tvm.script.ir_module class MyModule: @R.function def main(x: R.Tensor((3, 4), \u0026#34;float32\u0026#34;), y: R.Tensor((3, 4), \u0026#34;float32\u0026#34;)): # type: ignore with R.dataflow(): cls = MyModule lv0 = relax.op.multiply(x, y) gv0 = relax.op.add(lv0, y) R.output(gv0) return gv0 每个 IRModule 都包含一组函数，函数体由一组称为抽象语法树（AST）的数据结构组成。 {% fold info @Abstract Syntax Tree %} 抽象语法树（Abstract Syntax Tree，AST）是一种广泛用于编程语言处理的树状数据结构。它是一种对源代码语法结构的抽象表示，去掉了编程语言的具体语法细节，但保留了代码的结构和语义信息。 AST 是一棵树状结构，其节点表示源代码中的语法结构。例如，变量声明、操作符、函数调用、控制结构（如条件语句、循环）等。每个节点包含与相应语法结构相关的信息，如操作符的类型、变量的名称、常量的值等。\n1 a = b + 1 这个代码可以转换为如下形式的 AST：\n1 2 3 4 5 Assignment ├── Identifier (a) └── BinaryOperation ├── Identifier (b) └── Constant (1) {% endfold %} 每个函数都由一个 relax.expr.Function 节点表示。\n1 2 relax_func = MyModule[\u0026#34;main\u0026#34;] type(relax_func) # \u0026lt;class \u0026#39;tvm.relax.expr.Function\u0026#39;\u0026gt; 该函数包含一系列参数\n1 print(relax_func.params) # [x, y] 该函数包含一个返回值表达式，和函数中的一组 binding blocks.\n1 2 func_body = relax_func.body print(type(func_body)) # \u0026lt;class \u0026#39;tvm.relax.expr.SeqExpr\u0026#39;\u0026gt; 函数主体 SeqExpr 包含一系列 binding.\n1 2 3 4 5 6 7 8 9 print(relax_func.body.blocks) \u0026#39;\u0026#39;\u0026#39; [x: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) y: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) with R.dataflow(): lv0: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) = R.multiply(x, y) gv0: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) = R.add(lv0, y) R.output(gv0)] \u0026#39;\u0026#39;\u0026#39; 在 DataflowBlock 中,我们可以访问各个 binding ,包括 value 和 var.\n1 2 3 4 5 6 dataflow_block = func_body.blocks[0] print(type(dataflow_block)) # \u0026lt;class \u0026#39;tvm.relax.expr.DataflowBlock\u0026#39;\u0026gt; binding = dataflow_block.bindings[0] print(type(binding)) # \u0026lt;class \u0026#39;tvm.relax.expr.VarBinding\u0026#39;\u0026gt; print(binding.var) # LHS of binding: lv0 print(binding.value) # # LHS of binding: R.multiply(x, y) Relax Function Data Structure\n改写程序可以通过递归遍历 MyModule 的 AST ，并生成转换后的 AST 来实现。但是我们可以使用额外的工具支持来简化流程。下面的代码遵循一种称为 visitor pattern 的设计模式，允许我们访问每个 AST 节点并将它们重写为转换后的版本。主要目的是将形如 a * b + c 的表达式转换为 ewise_fma(a, b, c) 的形式。\nEwiseFMARewriter 继承自 relax.PyExprMutator，这是 TVM 中的一个基类，用于遍历和修改表达式树中的节点。visit_call_ 方法被重载来处理 relax.Call 节点，被重载来处理 relax.Call 节点。\n如果当前节点不是加法操作，直接返回该节点，表示对该节点不进行任何修改。如果加法的第一个操作数不是乘法操作，或者第一个操作数的绑定值不是一个 relax.Call 节点，直接返回该加法节点。如果匹配成功，构造一个新的 ewise_fma 操作节点，将乘法的两个操作数和加法的第二个操作数作为参数传入。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 @relax.expr_functor.mutator class EwiseFMARewriter(relax.PyExprMutator): def visit_call_(self, op: relax.Call): # Reloaded call = self.visit_expr_post_order(op) add_op = tvm.ir.Op.get(\u0026#34;relax.add\u0026#34;) multiply_op = tvm.ir.Op.get(\u0026#34;relax.multiply\u0026#34;) ewise_fma_op = tvm.ir.Op.get(\u0026#34;relax.ewise_fma\u0026#34;) if call.op != add_op: return call value = self.lookup_binding(call.args[0]) if not isinstance(value, relax.Call) or value.op != multiply_op: return call fma_call = relax.Call( ewise_fma_op, [value.args[0], value.args[1], call.args[1]], None, None ) return fma_call updated_fn = EwiseFMARewriter().visit_expr(MyModule[\u0026#34;main\u0026#34;]) updated_fn.show() #----------------------------- @R.function def main(x: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;), y: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;): with R.dataflow(): lv0: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) = R.multiply(x, y) gv0: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) = R.ewise_fma(x, y, y) R.output(gv0) return gv0 使用 remove_all_unused 来删除代码中没有用到的 DataflowBlocks 和 VarBindings.\n1 2 3 4 5 6 7 8 9 relax.analysis.remove_all_unused(updated_fn).show() #------------------------------------------- @R.function def main(x: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;), y: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;): with R.dataflow(): gv0: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) = R.ewise_fma(x, y, y) R.output(gv0) return gv0 Fuse Linear and ReLU 下面在端到端模型上进行计算图的改写。采用的还是之前使用的 FashionMNIST MLP 模型。为了简化过程，直接使用高级运算符构建模型。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import pickle as pkl mlp_params = pkl.load(open(\u0026#34;fasionmnist_mlp_params.pkl\u0026#34;, \u0026#34;rb\u0026#34;)) def create_model(): bb = relax.BlockBuilder() x = relax.Var(\u0026#34;x\u0026#34;, relax.TensorStructInfo((1, 784), \u0026#34;float32\u0026#34;)) w0 = relax.const(mlp_params[\u0026#34;w0\u0026#34;], \u0026#34;float32\u0026#34;) b0 = relax.const(mlp_params[\u0026#34;b0\u0026#34;], \u0026#34;float32\u0026#34;) w1 = relax.const(mlp_params[\u0026#34;w1\u0026#34;], \u0026#34;float32\u0026#34;) b1 = relax.const(mlp_params[\u0026#34;b1\u0026#34;], \u0026#34;float32\u0026#34;) with bb.function(\u0026#34;main\u0026#34;, [x]): with bb.dataflow(): lv0 = bb.emit(relax.op.matmul(x, relax.op.permute_dims(w0))) lv1 = bb.emit(relax.op.add(lv0, b0)) lv2 = bb.emit(relax.op.nn.relu(lv1)) lv3 = bb.emit(relax.op.matmul(lv2, relax.op.permute_dims(w1))) lv4 = bb.emit(relax.op.add(lv3, b1)) gv = bb.emit_output(lv4) bb.emit_func_output(gv) return bb.get() MLPModel = create_model() MLPModel.show() #------------------------------- @I.ir_module class Module: @R.function def main(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][0], axes=None) lv1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.matmul(x, lv, out_dtype=\u0026#34;void\u0026#34;) lv2: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.add(lv1, metadata[\u0026#34;relax.expr.Constant\u0026#34;][1]) lv3: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.nn.relu(lv2) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][2], axes=None) lv5: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.matmul(lv3, lv4, out_dtype=\u0026#34;void\u0026#34;) lv6: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.add(lv5, metadata[\u0026#34;relax.expr.Constant\u0026#34;][3]) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = lv6 R.output(gv) return gv 我们的目标是对 matmul 和 add 进行算子融合。具体实现步骤与 FMA 相似：\n识别 matmul 和 add 算子。 生成另一个调用 matmul 和 add 算子的子函数。 将 matmul 和 add 替换为融合后的子函数。 下面代码定义了一个名为 DenseAddFusor 的类，用于在 TVM 的 Relax 框架中将特定的矩阵乘法和加法操作模式融合成一个高效的原语函数。\ntransform 方法遍历模块中的每个函数。如果函数已经被标记为 primitive（即已经被融合过），则跳过。对每个函数应用 visit_expr 以进行模式匹配和潜在的融合操作，然后删除未使用的变量，并更新函数。最后，返回更新后的 IRModule。 visit_call_ 方法用于访问 relax.Call 节点（表示操作符调用）。它首先递归处理子表达式，然后尝试匹配特定模式。match_call 是一个内部函数，用于检查某个节点是否是特定操作符的调用。如果当前节点不是 add 操作，或者 add 操作的第一个参数不是 matmul（矩阵乘法）操作，则直接返回当前节点，不进行修改。如果匹配成功，则提取 matmul 的两个操作数 x 和 w 以及 add 的第二个操作数 b，准备进行融合。 通过 relax.BlockBuilder定义一个名为 fused_dense_addX新的融合函数，其中 X 是一个递增的计数器。该函数接收 x、w、b 作为参数，首先进行矩阵乘法，然后将结果与 b 相加，最终输出结果。 给新生成的融合函数添加一个属性 Primitive，标记为已经融合的原语函数。通过 builder_ 更新全局模块，将融合函数添加到模块中 (GlobalVar 用于指代存储在 IRModule 中的全局函数)。返回一个新的 relax.Call 节点，该节点调用生成的融合函数，并传递原始的输入参数 x、w、b。 VisitExpr TVM 中的 VisitExpr 流程是一种递归遍历 IR 节点的机制,它是实现各种 IR 转换和优化的基础。具体流程如下:\n首先创建一个 ExprVisitor 或 ExprMutator 的子类实例,这个子类会实现各种具体的访问逻辑。 调用 visit_expr 方法,传入根 IR 节点。这个方法会触发整个遍历过程的启动。 visit_expr 方法会首先调用 visit_expr_post_order 方法,这个方法会以深度优先的方式遍历所有子节点。 对于每个子节点,visit_expr_post_order 会根据节点的具体类型,调用相应的 visit_XXX_ 方法。这些 visit_XXX_ 方法是由访问器子类实现的,包含了具体的访问逻辑。 在 visit_XXX_ 方法中,如果遇到子节点,会递归调用 visit_expr_post_order 方法继续遍历。 当遍历完整个 IR 树后,visit_expr 方法会返回最终的结果,即经过转换和修改的 IR 节点。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 @relax.expr_functor.mutator class DenseAddFusor(relax.PyExprMutator): def __init__(self, mod: IRModule) -\u0026gt; None: super().__init__(mod) self.mod_ = mod # cache pre-defined ops self.add_op = tvm.ir.Op.get(\u0026#34;relax.add\u0026#34;) self.dense_op = tvm.ir.Op.get(\u0026#34;relax.matmul\u0026#34;) self.counter = 0 def transform(self) -\u0026gt; IRModule: for global_var, func in self.mod_.functions_items(): if not isinstance(func, relax.Function): continue # avoid already fused primitive function if \u0026#34;Primitive\u0026#34; in func.attrs.keys() and func.attrs[\u0026#34;primitive\u0026#34;] != 0: continue updated_fn = self.visit_expr(func) updated_fn = relax.analysis.remove_all_unused(updated_fn) self.builder_.update_func(global_var, updated_fn) return self.builder_.get() def visit_call_(self, op: relax.Call): call = self.visit_expr_post_order(op) def match_call(node, op): if not isinstance(node, relax.Call): return False return node.op == op # pattern match dense =\u0026gt; add if not match_call(call, self.add_op): return call value = self.lookup_binding(call.args[0]) if value is None: return call if not match_call(value, self.dense_op): return call x = value.args[0] w = value.args[1] b = call.args[1] # construct a new fused primitive function param_x = relax.Var(\u0026#34;x\u0026#34;, relax.TensorStructInfo(x.struct_info.shape, x.struct_info.dtype)) param_w = relax.Var(\u0026#34;w\u0026#34;, relax.TensorStructInfo(w.struct_info.shape, w.struct_info.dtype)) param_b = relax.Var(\u0026#34;b\u0026#34;, relax.TensorStructInfo(b.struct_info.shape, b.struct_info.dtype)) bb = relax.BlockBuilder() fn_name = \u0026#34;fused_dense_add%d\u0026#34; % (self.counter) self.counter += 1 with bb.function(fn_name, [param_x, param_w, param_b]): with bb.dataflow(): lv0 = bb.emit(relax.op.matmul(param_x, param_w)) gv0 = bb.emit_output(relax.op.add(lv0, param_b)) bb.emit_func_output(gv0) # add primitive attribute to the fused functions fused_fn = bb.get()[fn_name].with_attr(\u0026#34;Primitive\u0026#34;, 1) global_var = self.builder_.add_func(fused_fn, fn_name) # construct call into the fused function return relax.Call(global_var, [x, w, b], None, None) @tvm.ir.transform.module_pass(opt_level=2, name=\u0026#34;DenseAddFuse\u0026#34;) class FuseDenseAddPass: \u0026#39;\u0026#39;\u0026#39;The wrapper for the LowerTensorIR pass.\u0026#39;\u0026#39;\u0026#39; def transform_module(self, mod, ctx): return DenseAddFusor(mod).transform() MLPFused = FuseDenseAddPass()(MLPModel) MLPFused.show() 融合后的 MLPFused 对应的 TensorIR 如下\nTVM 框架中使用 module_pass 来管理各种优化操作。这种机制允许将不同的优化操作（如图优化、代码生成、算子融合等）组织成一个流水线（pipeline），按顺序对模块进行处理。将 DenseAddFusor 封装为一个 module_pass，使得它能够轻松集成到 TVM 的 Pass 流水线中，与其他 Pass 一起工作，从而保证优化过程的整体性和一致性。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 @I.ir_module class Module: @R.function def fused_dense_add0(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), w: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;), b: R.Tensor((128,), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;): R.func_attr({\u0026#34;Primitive\u0026#34;: 1}) with R.dataflow(): lv: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.matmul(x, w, out_dtype=\u0026#34;void\u0026#34;) gv: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.add(lv, b) R.output(gv) return gv @R.function def fused_dense_add1(x: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;), w: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;), b: R.Tensor((10,), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): R.func_attr({\u0026#34;Primitive\u0026#34;: 1}) with R.dataflow(): lv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.matmul(x, w, out_dtype=\u0026#34;void\u0026#34;) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.add(lv, b) R.output(gv) return gv @R.function def main(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][0], axes=None) lv2: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = cls.fused_dense_add0(x, lv, metadata[\u0026#34;relax.expr.Constant\u0026#34;][1]) lv3: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.nn.relu(lv2) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][2], axes=None) lv6: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = cls.fused_dense_add1(lv3, lv4, metadata[\u0026#34;relax.expr.Constant\u0026#34;][3]) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = lv6 R.output(gv) return gv 上面的例子中，我们创建了两个前缀为 fuse_matmul_add 的子函数。 这些子函数包含有融合后算子的计算信息。 这种重写的替代方法是简单地为融合算子创建一个单独的原语算子（如ewise_fma）。 但是，当我们尝试融合更多算子时，可能存在指数级数量的组合。 将融合操作分组在一起的子函数为后续的 pass 保留了原始信息，进而便于分析，无需为每个融合 pattern 引入专用的高级算子。\nMap to TensorIR Calls 为了进一步进行底层优化和代码生成，我们需要将这些高级原语运算转换为相应的 TensorIR 函数。下面代码主要功能是将 Relax 表达式树中的高层次算子（ matmul、add、relu）转换为对应的 TensorIR 表示，从而使得这些算子能够映射到底层的张量操作（tensor operations）。这种转换使得编译器可以生成更接近硬件的高效代码，并为后续的代码优化和生成做好准备。\n调用 transform 方法会遍历 mod_ 中的所有函数: 对于每个函数,首先调用 visit_expr 方法,这会触发 VisitExpr 流程 visit_expr 方法会调用 visit_expr_post_order方法进行深度优先遍历 在遍历过程中对于每个 relax.Call 节点,会调用 visit_call_ 方法 visit_call_ 方法会检查 op_map 字典,如果当前操作在字典中,则调用对应的转换函数( map_dense, map_add, map_relu) 这些转换函数会使用 bb.call_te 方法,将 Relax IR 操作转换为 TensorIR 操作 在 transform 方法的最后,会调用 builder_.get() 方法,返回转换后的新 IR 模块。 最后 LowerToTensorIRPass 类将 LowerToTensorIR 转换器包装成一个可注册到 TVM 优化 pipeline 的 pass. module_pass 的 opt_level 参数决定了优化 pass 在优化 pipeline 中的执行顺序。 TVM 的优化 pipeline 是由多个 module_pass 组成的,每个 module_pass 都有一个 opt_level 属性来指定它的优化级别。\n当 TVM 进行优化时,它会按照 opt_level 从低到高的顺序依次应用各个 module_pass. opt_level=0 的 pass 会首先被执行。这些 pass 通常会执行一些基础的、必要的转换,为后续的优化奠定基础。 随后会执行 opt_level=1 的 pass,这些 pass 可能会执行一些更复杂的优化,比如循环优化、内存访问优化等。依此类推,opt_level 越高的 pass 会在优化 pipeline 的后期执行,它们执行的优化通常也越复杂和深入。\n通过合理地设置 opt_level,开发者可以控制各个优化 pass 的执行顺序,从而构建出针对性强、性能优秀的优化 pipeline 。这种灵活的优化管理机制是 TVM 的一大特点。\n对于 LowerToTensorIRPass,它的 opt_level 被设置为 0, 说明它是一个基础的 pass, 主要用于将高级的 Relax IR 操作转换为底层的 TensorIR 操作。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 @relax.expr_functor.mutator class LowerToTensorIR(relax.PyExprMutator): def __init__(self, mod: IRModule, op_map: dict) -\u0026gt; None: super().__init__(mod) self.mod_ = mod self.op_map = { tvm.ir.Op.get(k): v for k, v in op_map.items() } def visit_call_(self, op: relax.Call): call = self.visit_expr_post_order(op) if call.op in self.op_map: return self.op_map[call.op](self.builder_, call) return call def transform(self) -\u0026gt; IRModule: for global_val, func in self.mod_.functions_items(): if not isinstance(func, relax.Function): continue updated_fn = self.visit_expr(func) self.builder_.update_func(global_val, updated_fn) return self.builder_.get() def map_dense(bb, call): x, w = call.args return bb.call_te(topi.nn.matmul, x, w) def map_add(bb, call): a, b = call.args return bb.call_te(topi.add, a, b) def map_relu(bb, call): return bb.call_te(topi.nn.relu, call.args[0]) op_map = { \u0026#34;relax.matmul\u0026#34;: map_dense, \u0026#34;relax.add\u0026#34;: map_add, \u0026#34;relax.nn.relu\u0026#34;: map_relu } @tvm.ir.transform.module_pass(opt_level=0, name=\u0026#34;LowerToTensorIR\u0026#34;) class LowerToTensorIRPass: \u0026#39;\u0026#39;\u0026#39;The wrapper for the LowerTensorIR pass.\u0026#39;\u0026#39;\u0026#39; def transform_module(self, mod, ctx): return LowerToTensorIR(mod, op_map).transform() MLPModelTIR = LowerToTensorIRPass()(MLPFused) MLPModelTIR.show() 融合后的 TensorIR 如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @I.ir_module class Module: @T.prim_func(private=True) def add(lv: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), b: T.Buffer((T.int64(128),), \u0026#34;float32\u0026#34;), T_add: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for ax0, ax1 in T.grid(T.int64(1), T.int64(128)): with T.block(\u0026#34;T_add\u0026#34;): v_ax0, v_ax1 = T.axis.remap(\u0026#34;SS\u0026#34;, [ax0, ax1]) T.reads(lv[v_ax0, v_ax1], b[v_ax1]) T.writes(T_add[v_ax0, v_ax1]) T_add[v_ax0, v_ax1] = lv[v_ax0, v_ax1] + b[v_ax1] @T.prim_func(private=True) def add1(lv: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;), b: T.Buffer((T.int64(10),), \u0026#34;float32\u0026#34;), T_add: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for ax0, ax1 in T.grid(T.int64(1), T.int64(10)): with T.block(\u0026#34;T_add\u0026#34;): v_ax0, v_ax1 = T.axis.remap(\u0026#34;SS\u0026#34;, [ax0, ax1]) T.reads(lv[v_ax0, v_ax1], b[v_ax1]) T.writes(T_add[v_ax0, v_ax1]) T_add[v_ax0, v_ax1] = lv[v_ax0, v_ax1] + b[v_ax1] @T.prim_func(private=True) def matmul(x: T.Buffer((T.int64(1), T.int64(784)), \u0026#34;float32\u0026#34;), w: T.Buffer((T.int64(784), T.int64(128)), \u0026#34;float32\u0026#34;), T_matmul_NN: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;layout_free_buffers\u0026#34;: [1], \u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1, k in T.grid(T.int64(1), T.int64(128), T.int64(784)): with T.block(\u0026#34;T_matmul_NN\u0026#34;): v_i0, v_i1, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, k]) T.reads(x[v_i0, v_k], w[v_k, v_i1]) T.writes(T_matmul_NN[v_i0, v_i1]) with T.init(): T_matmul_NN[v_i0, v_i1] = T.float32(0.0) T_matmul_NN[v_i0, v_i1] = T_matmul_NN[v_i0, v_i1] + x[v_i0, v_k] * w[v_k, v_i1] @T.prim_func(private=True) def matmul1(x: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), w: T.Buffer((T.int64(128), T.int64(10)), \u0026#34;float32\u0026#34;), T_matmul_NN: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;layout_free_buffers\u0026#34;: [1], \u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1, k in T.grid(T.int64(1), T.int64(10), T.int64(128)): with T.block(\u0026#34;T_matmul_NN\u0026#34;): v_i0, v_i1, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, k]) T.reads(x[v_i0, v_k], w[v_k, v_i1]) T.writes(T_matmul_NN[v_i0, v_i1]) with T.init(): T_matmul_NN[v_i0, v_i1] = T.float32(0.0) T_matmul_NN[v_i0, v_i1] = T_matmul_NN[v_i0, v_i1] + x[v_i0, v_k] * w[v_k, v_i1] @T.prim_func(private=True) def relu(lv2: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1 in T.grid(T.int64(1), T.int64(128)): with T.block(\u0026#34;compute\u0026#34;): v_i0, v_i1 = T.axis.remap(\u0026#34;SS\u0026#34;, [i0, i1]) T.reads(lv2[v_i0, v_i1]) T.writes(compute[v_i0, v_i1]) compute[v_i0, v_i1] = T.max(lv2[v_i0, v_i1], T.float32(0.0)) @R.function def fused_dense_add0(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), w: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;), b: R.Tensor((128,), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;): R.func_attr({\u0026#34;Primitive\u0026#34;: 1}) cls = Module with R.dataflow(): lv = R.call_tir(cls.matmul, (x, w), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) gv = R.call_tir(cls.add, (lv, b), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) R.output(gv) return gv @R.function def fused_dense_add1(x: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;), w: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;), b: R.Tensor((10,), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): R.func_attr({\u0026#34;Primitive\u0026#34;: 1}) cls = Module with R.dataflow(): lv = R.call_tir(cls.matmul1, (x, w), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) gv = R.call_tir(cls.add1, (lv, b), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(gv) return gv @R.function def main(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][0], axes=None) lv2: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = cls.fused_dense_add0(x, lv, metadata[\u0026#34;relax.expr.Constant\u0026#34;][1]) lv3 = R.call_tir(cls.relu, (lv2,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][2], axes=None) lv6: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = cls.fused_dense_add1(lv3, lv4, metadata[\u0026#34;relax.expr.Constant\u0026#34;][3]) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = lv6 R.output(gv) return gv 在上面的 IRModule 中 fused_matmul_add0 和 fused_matmul_add1 仍然是 relax 函数，它们调用相应的 TensorIR matmul 和 add 函数。 我们可以将它们变成一个单一的 TensorIR 函数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 MLPModelFinal = relax.transform.FuseTIR()(MLPModelTIR) MLPModelFinal.show() #----------------------- @I.ir_module class Module: @T.prim_func(private=True) def fused_dense_add0(x: T.Buffer((T.int64(1), T.int64(784)), \u0026#34;float32\u0026#34;), w: T.Buffer((T.int64(784), T.int64(128)), \u0026#34;float32\u0026#34;), b: T.Buffer((T.int64(128),), \u0026#34;float32\u0026#34;), T_add_intermediate: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): T_matmul_NN_intermediate = T.alloc_buffer((T.int64(1), T.int64(128))) for i0, i1, k in T.grid(T.int64(1), T.int64(128), T.int64(784)): with T.block(\u0026#34;T_matmul_NN\u0026#34;): v_i0, v_i1, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, k]) T.reads(x[v_i0, v_k], w[v_k, v_i1]) T.writes(T_matmul_NN_intermediate[v_i0, v_i1]) with T.init(): T_matmul_NN_intermediate[v_i0, v_i1] = T.float32(0.0) T_matmul_NN_intermediate[v_i0, v_i1] = T_matmul_NN_intermediate[v_i0, v_i1] + x[v_i0, v_k] * w[v_k, v_i1] for ax0, ax1 in T.grid(T.int64(1), T.int64(128)): with T.block(\u0026#34;T_add\u0026#34;): v_ax0, v_ax1 = T.axis.remap(\u0026#34;SS\u0026#34;, [ax0, ax1]) T.reads(T_matmul_NN_intermediate[v_ax0, v_ax1], b[v_ax1]) T.writes(T_add_intermediate[v_ax0, v_ax1]) T_add_intermediate[v_ax0, v_ax1] = T_matmul_NN_intermediate[v_ax0, v_ax1] + b[v_ax1] @T.prim_func(private=True) def fused_dense_add1(x: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), w: T.Buffer((T.int64(128), T.int64(10)), \u0026#34;float32\u0026#34;), b: T.Buffer((T.int64(10),), \u0026#34;float32\u0026#34;), T_add_intermediate: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): T_matmul_NN_intermediate = T.alloc_buffer((T.int64(1), T.int64(10))) for i0, i1, k in T.grid(T.int64(1), T.int64(10), T.int64(128)): with T.block(\u0026#34;T_matmul_NN\u0026#34;): v_i0, v_i1, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, k]) T.reads(x[v_i0, v_k], w[v_k, v_i1]) T.writes(T_matmul_NN_intermediate[v_i0, v_i1]) with T.init(): T_matmul_NN_intermediate[v_i0, v_i1] = T.float32(0.0) T_matmul_NN_intermediate[v_i0, v_i1] = T_matmul_NN_intermediate[v_i0, v_i1] + x[v_i0, v_k] * w[v_k, v_i1] for ax0, ax1 in T.grid(T.int64(1), T.int64(10)): with T.block(\u0026#34;T_add\u0026#34;): v_ax0, v_ax1 = T.axis.remap(\u0026#34;SS\u0026#34;, [ax0, ax1]) T.reads(T_matmul_NN_intermediate[v_ax0, v_ax1], b[v_ax1]) T.writes(T_add_intermediate[v_ax0, v_ax1]) T_add_intermediate[v_ax0, v_ax1] = T_matmul_NN_intermediate[v_ax0, v_ax1] + b[v_ax1] @T.prim_func(private=True) def relu(lv2: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1 in T.grid(T.int64(1), T.int64(128)): with T.block(\u0026#34;compute\u0026#34;): v_i0, v_i1 = T.axis.remap(\u0026#34;SS\u0026#34;, [i0, i1]) T.reads(lv2[v_i0, v_i1]) T.writes(compute[v_i0, v_i1]) compute[v_i0, v_i1] = T.max(lv2[v_i0, v_i1], T.float32(0.0)) @R.function def main(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][0], axes=None) lv2 = R.call_tir(cls.fused_dense_add0, (x, lv, metadata[\u0026#34;relax.expr.Constant\u0026#34;][1]), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv3 = R.call_tir(cls.relu, (lv2,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][2], axes=None) gv = R.call_tir(cls.fused_dense_add1, (lv3, lv4, metadata[\u0026#34;relax.expr.Constant\u0026#34;][3]), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(gv) return gv ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch8/","summary":"Personal notebook 7.","title":"TVM Learning (10)-Computational Graph Optimization"},{"content":"Key Elements of Specialized Code 下面用 low-level numpy 写的 python 代码展示了一系列在专用硬件后端可能使用到的操作。\n1 2 3 4 5 6 7 8 def accel_fill_zero(C): C[:] = 0 def accel_tmm_add(C, A, B): C[:] += A @ B.T def accel_dma_copy(reg, dram): reg[:] = dram[:] 我们假设基础的运算单元可以进行 16x16的矩阵乘法 (accel_tmm_add)，接收2个寄存器里的 RHS 输入和表示累加中间结果的 LHS 输入，数据拷贝使用的是专用函数 (accel_dma_copy).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # The basis unit of computation is a 16*16*16 matrix multiplication def lnumpy_tmm(A: np.ndarray, B: np.ndarray, C: np.ndarray): # a special accumulator memory C_accumulator = np.empty((16, 16), dtype=\u0026#34;float32\u0026#34;) A_reg = np.empty((16, 16), dtype=\u0026#34;float32\u0026#34;) B_reg = np.empty((16, 16), dtype=\u0026#34;float32\u0026#34;) for i in range(64): for j in range(64): accel_fill_zero(C_accumulator) for k in range(64): accel_dma_copy(A_reg[:], A[i*16 : (i+1)*16, k*16 : (k+1)*16]) accel_dma_copy(B_reg[:], B[j*16 : (j+1)*16, k*16 : (k+1)*16]) accel_tmm_add(C_accumulator, A_reg, B_reg) accel_dma_copy(C[i*16 : (i+1)*16, j*16 : (j+1)*16], C_accumulator) A Block with Tensorized Computation 专用加速器代码的结构并非以标量计算为单位。迄今为止，我们运行的大多数 TensorIR 代码都包含一个 block，用于计算输出张量中的单个元素。许多专用加速器在张量区域内进行计算。TensorIR中的 block 可以帮助我们将这些相关计算分组。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 @tvm.script.ir_module class MatmulBlockModule: @T.prim_func def main(A: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], C: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;]) -\u0026gt; None: T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i0, j0, k0 in T.grid(64, 64, 64): with T.block(\u0026#34;tmm-16x16\u0026#34;): vi0, vj0, vk0 = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, j0, k0]) with T.init(): for i1, j1 in T.grid(16, 16): with T.block(\u0026#34;tmm_init\u0026#34;): vi1, vj1 = T.axis.remap(\u0026#34;SS\u0026#34;, [i1, j1]) C[vi0 * 16 + vi1, vj0 * 16 + vj1] = T.float32(0) for i1, j1, k1 in T.grid(16, 16, 16): with T.block(\u0026#34;tmm\u0026#34;): vi1, vj1, vk1 = T.axis.remap(\u0026#34;SSR\u0026#34;, [i1, j1, k1]) C[vi0 * 16 + vi1, vj0 * 16 + vj1] += A[vi0 * 16 + vi1, vk0 * 16 + vk1] * B[vj0 * 16 + vj1, vk0 * 16 + vk1] 调用 MatmulBlockModule.show() 后显示的 TensorIR如下\n1 2 T.reads(C[vi0 * 16 + vi1, vj0 * 16 + vj1], A[vi0 * 16 + vi1, vk0 * 16 + vk1], B[vj0 * 16 + vj1, vk0 * 16 + vk1]) T.writes(C[vi0 * 16 + vi1, vj0 * 16 + vj1]) 该代码从 A 和 B 的 16x16 区域读取数据，并写入 C 的 16x16 区域。在这种情况下，块的内容包含子区域计算的具体实现的进一步细节。我们称这种区块为张量区块，因为它们包含跨越张量子区域的计算。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, j0, k0 in T.grid(64, 64, 64): with T.block(\u0026#34;tmm-16x16\u0026#34;): vi0, vj0, vk0 = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, j0, k0]) T.reads(A[vi0 * 16:vi0 * 16 + 16, vk0 * 16:vk0 * 16 + 16], B[vj0 * 16:vj0 * 16 + 16, vk0 * 16:vk0 * 16 + 16]) T.writes(C[vi0 * 16:vi0 * 16 + 16, vj0 * 16:vj0 * 16 + 16]) with T.init(): for i1, j1 in T.grid(16, 16): with T.block(\u0026#34;tmm_init\u0026#34;): vi1, vj1 = T.axis.remap(\u0026#34;SS\u0026#34;, [i1, j1]) T.reads() T.writes(C[vi0 * 16 + vi1, vj0 * 16 + vj1]) C[vi0 * 16 + vi1, vj0 * 16 + vj1] = T.float32(0.0) for i1, j1, k1 in T.grid(16, 16, 16): with T.block(\u0026#34;tmm\u0026#34;): vi1, vj1, vk1 = T.axis.remap(\u0026#34;SSR\u0026#34;, [i1, j1, k1]) T.reads(C[vi0 * 16 + vi1, vj0 * 16 + vj1], A[vi0 * 16 + vi1, vk0 * 16 + vk1], B[vj0 * 16 + vj1, vk0 * 16 + vk1]) T.writes(C[vi0 * 16 + vi1, vj0 * 16 + vj1]) C[vi0 * 16 + vi1, vj0 * 16 + vj1] = C[vi0 * 16 + vi1, vj0 * 16 + vj1] + A[vi0 * 16 + vi1, vk0 * 16 + vk1] * B[vj0 * 16 + vj1, vk0 * 16 + vk1] Transforming Loops Around Tensorized Block 我们可以对张量计算块的循环进行变换，这些循环变换可以重新组织计算该块的迭代方式，得到不同的张量程序。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 sch = tvm.tir.Schedule(MatmulBlockModule) block_mm = sch.get_block(\u0026#34;tmm-16x16\u0026#34;) i, j, k = sch.get_loops(block_mm) i0, i1 = sch.split(i, [None, 4]) sch.reorder(i0, j, i1, k) sch.mod.show() #------------------------------------ @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0_0, j0, i0_1, k0 in T.grid(16, 64, 4, 64): with T.block(\u0026#34;tmm-16x16\u0026#34;): vi0 = T.axis.spatial(64, i0_0 * 4 + i0_1) vj0, vk0 = T.axis.remap(\u0026#34;SR\u0026#34;, [j0, k0]) T.reads(A[vi0 * 16:vi0 * 16 + 16, vk0 * 16:vk0 * 16 + 16], B[vj0 * 16:vj0 * 16 + 16, vk0 * 16:vk0 * 16 + 16]) T.writes(C[vi0 * 16:vi0 * 16 + 16, vj0 * 16:vj0 * 16 + 16]) with T.init(): for i1, j1 in T.grid(16, 16): with T.block(\u0026#34;tmm_init\u0026#34;): vi1, vj1 = T.axis.remap(\u0026#34;SS\u0026#34;, [i1, j1]) T.reads() T.writes(C[vi0 * 16 + vi1, vj0 * 16 + vj1]) C[vi0 * 16 + vi1, vj0 * 16 + vj1] = T.float32(0.0) for i1, j1, k1 in T.grid(16, 16, 16): with T.block(\u0026#34;tmm\u0026#34;): vi1, vj1, vk1 = T.axis.remap(\u0026#34;SSR\u0026#34;, [i1, j1, k1]) T.reads(C[vi0 * 16 + vi1, vj0 * 16 + vj1], A[vi0 * 16 + vi1, vk0 * 16 + vk1], B[vj0 * 16 + vj1, vk0 * 16 + vk1]) T.writes(C[vi0 * 16 + vi1, vj0 * 16 + vj1]) C[vi0 * 16 + vi1, vj0 * 16 + vj1] = C[vi0 * 16 + vi1, vj0 * 16 + vj1] + A[vi0 * 16 + vi1, vk0 * 16 + vk1] * B[vj0 * 16 + vj1, vk0 * 16 + vk1] Blockization \u0026ndash; Creating Tensorized Blocks TensorIR 提供了一种变换原语 blockize 来将循环的子区域组合在一起以形成张量化的计算 block. 例如我们可以将下面2个的 1024x1024 矩阵乘法分解成很多个 16x16 的矩阵乘法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 @tvm.script.ir_module class MatmulModule: @T.prim_func def main( A: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], C: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], ) -\u0026gt; None: T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i, j, k in T.grid(1024, 1024, 1024): with T.block(\u0026#34;matmul\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) with T.init(): C[vi, vj] = T.float32(0) C[vi, vj] += A[vi, vk] * B[vj, vk] sch = tvm.tir.Schedule(MatmulModule) i, j, k = sch.get_loops(\u0026#34;matmul\u0026#34;) i, ii = sch.split(i, factors=[None, 16]) j, ji = sch.split(j, factors=[None, 16]) k, ki = sch.split(k, factors=[None, 16]) sch.reorder(i, j, k, ii, ji, ki) sch.mod.show() #------------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i_0, j_0, k_0, i_1, j_1, k_1 in T.grid(64, 64, 64, 16, 16, 16): with T.block(\u0026#34;matmul\u0026#34;): vi = T.axis.spatial(1024, i_0 * 16 + i_1) vj = T.axis.spatial(1024, j_0 * 16 + j_1) vk = T.axis.reduce(1024, k_0 * 16 + k_1) T.reads(A[vi, vk], B[vj, vk]) T.writes(C[vi, vj]) with T.init(): C[vi, vj] = T.float32(0.0) C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk] blockize 是用来将一个或多个块(block)或一个特定循环的子树合并成一个新的块。如果 target 是一个循环的根节点,则会将该循环下的所有块合并成一个新块，如果 target 是一个块的列表,则会将这些块合并成一个新块。然后将新块返回\n参数说明 :\ntarget: 需要被合并的块或循环的根节点。可以是 LoopRV 类型(表示一个循环)或 List[BlockRV] 类型(表示多个块)。 preserve_unit_iters: 一个布尔值,表示是否保留块绑定中的单元迭代器。 限制条件 :\nblockize 要求给定的循环下只有一个块,且该块的绑定必须能够被该循环的子空间整除。 调用 blockize 后的 TensorIR 如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 block_mm = sch.blockize(ii) sch.mod.show() #------------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i_0, j_0, k_0 in T.grid(64, 64, 64): with T.block(\u0026#34;matmul_o\u0026#34;): vi_o, vj_o, vk_o = T.axis.remap(\u0026#34;SSR\u0026#34;, [i_0, j_0, k_0]) T.reads(A[vi_o * 16:vi_o * 16 + 16, vk_o * 16:vk_o * 16 + 16], B[vj_o * 16:vj_o * 16 + 16, vk_o * 16:vk_o * 16 + 16]) T.writes(C[vi_o * 16:vi_o * 16 + 16, vj_o * 16:vj_o * 16 + 16]) with T.init(): for i_1, j_1 in T.grid(16, 16): with T.block(\u0026#34;matmul_init\u0026#34;): vi_i_init, vj_i_init = T.axis.remap(\u0026#34;SS\u0026#34;, [i_1, j_1]) T.reads() T.writes(C[vi_o * 16 + vi_i_init, vj_o * 16 + vj_i_init]) C[vi_o * 16 + vi_i_init, vj_o * 16 + vj_i_init] = T.float32(0.0) for i_1, j_1, k_1 in T.grid(16, 16, 16): with T.block(\u0026#34;matmul\u0026#34;): vi_i, vj_i, vk_i = T.axis.remap(\u0026#34;SSR\u0026#34;, [i_1, j_1, k_1]) T.reads(C[vi_o * 16 + vi_i, vj_o * 16 + vj_i], A[vi_o * 16 + vi_i, vk_o * 16 + vk_i], B[vj_o * 16 + vj_i, vk_o * 16 + vk_i]) T.writes(C[vi_o * 16 + vi_i, vj_o * 16 + vj_i]) C[vi_o * 16 + vi_i, vj_o * 16 + vj_i] = C[vi_o * 16 + vi_i, vj_o * 16 + vj_i] + A[vi_o * 16 + vi_i, vk_o * 16 + vk_i] * B[vj_o * 16 + vj_i, vk_o * 16 + vk_i] Transforming TensorIR to Introduce Special Memory Scope 正如在 low-level NumPy 代码中提到的，底层 TensorIR 的一个关键要素是加速过程中使用的特殊内存范围。我们可以使用 cache_read 和 write 来创建中间内存阶段。\nstorage_scope 在这里指的是内存存储范围或存储层次。常见的存储范围包括:\nglobal: 表示数据存储在全局内存中。这是最高层次的内存范围。 shared: 表示数据存储在GPU的共享内存中。 local: 表示数据存储在CPU或GPU的寄存器中。这是最底层的内存范围。 global.A_reg 表示数据将被缓存到一个名为 A_reg 的全局内存缓存中。\nStorage Scope\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 A_reg = sch.cache_read(block_mm, 0, storage_scope=\u0026#34;global.A_reg\u0026#34;) B_reg = sch.cache_read(block_mm, 1, storage_scope=\u0026#34;global.B_reg\u0026#34;) sch.compute_at(A_reg, k) sch.compute_at(B_reg, k) write_back_block = sch.cache_write(block_mm, 0, storage_scope=\u0026#34;global.accumulator\u0026#34;) sch.reverse_compute_at(write_back_block, j) sch.mod.show() #----------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): A_global_A_reg = T.alloc_buffer((1024, 1024), scope=\u0026#34;global.A_reg\u0026#34;) B_global_B_reg = T.alloc_buffer((1024, 1024), scope=\u0026#34;global.B_reg\u0026#34;) C_global_accumulator = T.alloc_buffer((1024, 1024), scope=\u0026#34;global.accumulator\u0026#34;) for i_0, j_0 in T.grid(64, 64): for k_0 in range(64): for ax0, ax1 in T.grid(16, 16): with T.block(\u0026#34;A_global.A_reg\u0026#34;): v0 = T.axis.spatial(1024, i_0 * 16 + ax0) v1 = T.axis.spatial(1024, k_0 * 16 + ax1) T.reads(A[v0, v1]) T.writes(A_global_A_reg[v0, v1]) A_global_A_reg[v0, v1] = A[v0, v1] for ax0, ax1 in T.grid(16, 16): with T.block(\u0026#34;B_global.B_reg\u0026#34;): v0 = T.axis.spatial(1024, j_0 * 16 + ax0) v1 = T.axis.spatial(1024, k_0 * 16 + ax1) T.reads(B[v0, v1]) T.writes(B_global_B_reg[v0, v1]) B_global_B_reg[v0, v1] = B[v0, v1] with T.block(\u0026#34;matmul_o\u0026#34;): vi_o, vj_o, vk_o = T.axis.remap(\u0026#34;SSR\u0026#34;, [i_0, j_0, k_0]) T.reads(A_global_A_reg[vi_o * 16:vi_o * 16 + 16, vk_o * 16:vk_o * 16 + 16], B_global_B_reg[vj_o * 16:vj_o * 16 + 16, vk_o * 16:vk_o * 16 + 16]) T.writes(C_global_accumulator[vi_o * 16:vi_o * 16 + 16, vj_o * 16:vj_o * 16 + 16]) with T.init(): for i_1, j_1 in T.grid(16, 16): with T.block(\u0026#34;matmul_init\u0026#34;): vi_i_init, vj_i_init = T.axis.remap(\u0026#34;SS\u0026#34;, [i_1, j_1]) T.reads() T.writes(C_global_accumulator[vi_o * 16 + vi_i_init, vj_o * 16 + vj_i_init]) C_global_accumulator[vi_o * 16 + vi_i_init, vj_o * 16 + vj_i_init] = T.float32(0.0) for i_1, j_1, k_1 in T.grid(16, 16, 16): with T.block(\u0026#34;matmul\u0026#34;): vi_i, vj_i, vk_i = T.axis.remap(\u0026#34;SSR\u0026#34;, [i_1, j_1, k_1]) T.reads(C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i], A_global_A_reg[vi_o * 16 + vi_i, vk_o * 16 + vk_i], B_global_B_reg[vj_o * 16 + vj_i, vk_o * 16 + vk_i]) T.writes(C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i]) C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i] = C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i] + A_global_A_reg[vi_o * 16 + vi_i, vk_o * 16 + vk_i] * B_global_B_reg[vj_o * 16 + vj_i, vk_o * 16 + vk_i] for ax0, ax1 in T.grid(16, 16): with T.block(\u0026#34;C_global.accumulator\u0026#34;): v0 = T.axis.spatial(1024, i_0 * 16 + ax0) v1 = T.axis.spatial(1024, j_0 * 16 + ax1) T.reads(C_global_accumulator[v0, v1]) T.writes(C[v0, v1]) C[v0, v1] = C_global_accumulator[v0, v1] Tensorization 现在我们已经创建了一组映射到 TensorIR 中相应计算阶段的块。剩下的步骤是映射部分张量块，以使用映射到硬件加速指令的特定实现。这一映射过程称为张量化。为了实现张量化，我们首先注册一个 TensorIntrin，其中包含计算和实现的描述。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 @T.prim_func def tmm16_desc(a: T.handle, b: T.handle, c: T.handle) -\u0026gt; None: A = T.match_buffer(a, (16, 16), \u0026#34;float32\u0026#34;, offset_factor=16, scope=\u0026#34;global.A_reg\u0026#34;) B = T.match_buffer(b, (16, 16), \u0026#34;float32\u0026#34;, offset_factor=16, scope=\u0026#34;global.B_reg\u0026#34;) C = T.match_buffer(c, (16, 16), \u0026#34;float32\u0026#34;, offset_factor=16, scope=\u0026#34;global.accumulator\u0026#34;) with T.block(\u0026#34;root\u0026#34;): T.reads(C[0:16, 0:16], A[0:16, 0:16], B[0:16, 0:16]) T.writes(C[0:16, 0:16]) for i, j, k in T.grid(16, 16, 16): with T.block(\u0026#34;\u0026#34;): vii, vjj, vkk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) C[vii, vjj] = C[vii, vjj] + A[vii, vkk] * B[vjj, vkk] @T.prim_func def tmm16_impl(a: T.handle, b: T.handle, c: T.handle) -\u0026gt; None: A = T.match_buffer(a, (16, 16), \u0026#34;float32\u0026#34;, offset_factor=16, scope=\u0026#34;global.A_reg\u0026#34;) B = T.match_buffer(b, (16, 16), \u0026#34;float32\u0026#34;, offset_factor=16, scope=\u0026#34;global.B_reg\u0026#34;) C = T.match_buffer(c, (16, 16), \u0026#34;float32\u0026#34;, offset_factor=16, scope=\u0026#34;global.accumulator\u0026#34;) sa = T.int32(16)#T.var(\u0026#34;int32\u0026#34;) sb = T.int32(16)#T.var(\u0026#34;int32\u0026#34;) sc = T.int32(16)#T.var(\u0026#34;int32\u0026#34;) with T.block(\u0026#34;root\u0026#34;): T.reads(C[0:16, 0:16], A[0:16, 0:16], B[0:16, 0:16]) T.writes(C[0:16, 0:16]) T.evaluate( T.call_extern(\u0026#34;float32\u0026#34;, \u0026#34;tmm16\u0026#34;, C.access_ptr(\u0026#34;w\u0026#34;), A.access_ptr(\u0026#34;r\u0026#34;), B.access_ptr(\u0026#34;r\u0026#34;), sa, sb, sc) ) tvm.tir.TensorIntrin.register(\u0026#34;tmm16\u0026#34;, tmm16_desc, tmm16_impl) 首先我们用 decompose_reduction 将 C_global_accumulator 的初始化和更新部分分开成 T.block(\u0026quot;matmul_init\u0026quot;) 和 T.block(\u0026quot;matmul_o_update\u0026quot;)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 sch.decompose_reduction(block_mm, k) sch.mod.show() #--------------------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): A_global_A_reg = T.alloc_buffer((1024, 1024), scope=\u0026#34;global.A_reg\u0026#34;) B_global_B_reg = T.alloc_buffer((1024, 1024), scope=\u0026#34;global.B_reg\u0026#34;) C_global_accumulator = T.alloc_buffer((1024, 1024), scope=\u0026#34;global.accumulator\u0026#34;) for i_0, j_0 in T.grid(64, 64): with T.block(\u0026#34;matmul_o_init\u0026#34;): vi_o, vj_o = T.axis.remap(\u0026#34;SS\u0026#34;, [i_0, j_0]) T.reads() T.writes(C_global_accumulator[vi_o * 16:vi_o * 16 + 16, vj_o * 16:vj_o * 16 + 16]) for i_1, j_1 in T.grid(16, 16): with T.block(\u0026#34;matmul_init\u0026#34;): vi_i_init, vj_i_init = T.axis.remap(\u0026#34;SS\u0026#34;, [i_1, j_1]) T.reads() T.writes(C_global_accumulator[vi_o * 16 + vi_i_init, vj_o * 16 + vj_i_init]) C_global_accumulator[vi_o * 16 + vi_i_init, vj_o * 16 + vj_i_init] = T.float32(0.0) for k_0 in range(64): for ax0, ax1 in T.grid(16, 16): with T.block(\u0026#34;A_global.A_reg\u0026#34;): v0 = T.axis.spatial(1024, i_0 * 16 + ax0) v1 = T.axis.spatial(1024, k_0 * 16 + ax1) T.reads(A[v0, v1]) T.writes(A_global_A_reg[v0, v1]) A_global_A_reg[v0, v1] = A[v0, v1] for ax0, ax1 in T.grid(16, 16): with T.block(\u0026#34;B_global.B_reg\u0026#34;): v0 = T.axis.spatial(1024, j_0 * 16 + ax0) v1 = T.axis.spatial(1024, k_0 * 16 + ax1) T.reads(B[v0, v1]) T.writes(B_global_B_reg[v0, v1]) B_global_B_reg[v0, v1] = B[v0, v1] with T.block(\u0026#34;matmul_o_update\u0026#34;): vi_o, vj_o, vk_o = T.axis.remap(\u0026#34;SSR\u0026#34;, [i_0, j_0, k_0]) T.reads(C_global_accumulator[vi_o * 16:vi_o * 16 + 16, vj_o * 16:vj_o * 16 + 16], A_global_A_reg[vi_o * 16:vi_o * 16 + 16, vk_o * 16:vk_o * 16 + 16], B_global_B_reg[vj_o * 16:vj_o * 16 + 16, vk_o * 16:vk_o * 16 + 16]) T.writes(C_global_accumulator[vi_o * 16:vi_o * 16 + 16, vj_o * 16:vj_o * 16 + 16]) for i_1, j_1, k_1 in T.grid(16, 16, 16): with T.block(\u0026#34;matmul\u0026#34;): vi_i, vj_i, vk_i = T.axis.remap(\u0026#34;SSR\u0026#34;, [i_1, j_1, k_1]) T.reads(C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i], A_global_A_reg[vi_o * 16 + vi_i, vk_o * 16 + vk_i], B_global_B_reg[vj_o * 16 + vj_i, vk_o * 16 + vk_i]) T.writes(C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i]) C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i] = C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i] + A_global_A_reg[vi_o * 16 + vi_i, vk_o * 16 + vk_i] * B_global_B_reg[vj_o * 16 + vj_i, vk_o * 16 + vk_i] for ax0, ax1 in T.grid(16, 16): with T.block(\u0026#34;C_global.accumulator\u0026#34;): v0 = T.axis.spatial(1024, i_0 * 16 + ax0) v1 = T.axis.spatial(1024, j_0 * 16 + ax1) T.reads(C_global_accumulator[v0, v1]) T.writes(C[v0, v1]) C[v0, v1] = C_global_accumulator[v0, v1] 然后我们调用 tensorize，将 block_mm（对应于 matmul_o_update block ）映射到 tmm16_impl. 这里我们使用 T.call_extern 来调用环境中的外部函数。 下游编译步骤可以轻松地将实现映射到实现操作的指令。或者我们可以将 tmm16 映射到实现这种张量化计算的微内核。 以下代码显示了如何通过外部 C++ 代码执行此操作。\n具体实现步骤如下:\n定义 C++ 风格的 tmm16 函数: 这个函数实现了一个 16x16 矩阵乘法的计算逻辑。它接受三个输入张量 aa、bb 和 cc，以及对应的步长 stride_a、stride_b 和 stride_c。函数使用三重循环执行矩阵乘法的计算,将结果累加到 cc 张量中。 使用 TVM 的 clang 模块将 C++ 代码编译为 LLVM IR 代码: 首先创建一个临时目录 temp 用于存储生成的 LLVM IR 文件。然后调用 clang.create_llvm() 函数,传入 C++ 代码字符串 cc_code。create_llvm() 函数会将 C++ 代码编译为 LLVM IR 代码,并保存到 ll_path 指定的文件中。最后返回生成的 LLVM IR 代码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def tmm_kernel(): cc_code = \u0026#39;\u0026#39;\u0026#39; extern \u0026#34;C\u0026#34; int tmm16(float *cc, float *aa, float *bb, int stride_a, int stride_b, int stride_c) { for (int i = 0; i \u0026lt; 16; i++) { for (int j = 0; i \u0026lt; 16; j++) { for (int k = 0; k \u0026lt; 16; k++) { cc[i * stride_c + j] += aa[i * stride_a + k] * bb[j * stride_b + k]; } } } return 0; } \u0026#39;\u0026#39;\u0026#39; from tvm.contrib import utils, clang temp = utils.tempdir() ll_path = temp.relpath(\u0026#34;temp.ll\u0026#34;) # Create LLVM ir from c source code ll_code = clang.create_llvm(cc_code, output=ll_path) return ll_code 调用 sch.tensorize(block_mm, \u0026quot;tmm16\u0026quot;)报错，原因未知。\n1 2 3 4 5 发生异常: TVMError TVMError: invalid unordered_map\u0026lt;K, T\u0026gt; key File \u0026#34;C:\\Users\\17725\\Desktop\\Machine Learning Compilation\\chapter7.py\u0026#34;, line 186, in \u0026lt;module\u0026gt; sch.tensorize(block_mm, \u0026#34;tmm16\u0026#34;) tvm._ffi.base.TVMError: TVMError: invalid unordered_map\u0026lt;K, T\u0026gt; key ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch7/","summary":"Personal notebook 7.","title":"TVM Learning (9)-GPU and Hardware Acceleration, Part 2"},{"content":"GPU Architecture 典型的 GPU 包含一系列流多处理器 (Stream Multi-processor, SM)，每个多处理器都有许多内核 (core). GPU 具有高度并行性，可以同时执行多项任务。\nGPU Architecture\n要对 GPU 进行编程，我们需要创建一组线程块 (thread blocks)，每个 thread 映射到单个核心，而 block 映射到流式多处理器 (SM)。\nGPU Programming\n我们以两个长度为1024的向量加法 C=A+B为例，我们先把外循环 split 成两部分\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 @tvm.script.ir_module class MyModuleVecAdd: @T.prim_func def main(A: T.Buffer[(1024, ), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, ), \u0026#34;float32\u0026#34;], C: T.Buffer[(1024, ), \u0026#34;float32\u0026#34;]) -\u0026gt; None: T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i in T.grid(1024): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.remap(\u0026#34;S\u0026#34;, [i]) C[vi] = A[vi] + B[vi] sch = tvm.tir.Schedule(MyModuleVecAdd) block_C = sch.get_block(\u0026#34;C\u0026#34;) i, = sch.get_loops(block=block_C) i0, i1 = sch.split(i, [None, 128]) sch.mod.show() 得到的 TensorIR 如下\n1 2 3 4 5 6 7 8 9 10 11 12 @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024,), \u0026#34;float32\u0026#34;), B: T.Buffer((1024,), \u0026#34;float32\u0026#34;), C: T.Buffer((1024,), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i_0, i_1 in T.grid(8, 128): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(1024, i_0 * 128 + i_1) T.reads(A[vi], B[vi]) T.writes(C[vi]) C[vi] = A[vi] + B[vi] Build and Run the TensorIR Function on GPU 一个CUDA程序的计算被组织成三层次：网格（Grid）、线程块（Block）和线程（Thread）。网格是一个二维的数组，包含多个线程块。每个线程块也是一个二维的数组，包含多个线程。每个线程执行相同的代码，但是在执行时可以使用不同的数据。每个线程由两个索引进行表示 threadIdx.x和 blockIdx.x. 在实际应用中，有多维线程索引，但这里我们为了简化问题，将它们固定为一维表示。\nGPU Thread Block\nsch.bind(i0, \u0026quot;blockIdx.x\u0026quot;) 将 i0 循环绑定到 GPU 的 block 索引，以便将计算分发到不同的 GPU block 上。 sch.bind(i1, \u0026quot;threadIdx.x\u0026quot;) 将 i1 循环绑定到 GPU 的 thread 索引，以便将计算分发到每个 block 内的不同的 GPU thread 上。 可以看到循环变量变成了 T.thead_binding\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 sch.bind(i0, \u0026#34;blockIdx.x\u0026#34;) sch.bind(i1, \u0026#34;threadIdx.x\u0026#34;) sch.mod.show() #-------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024,), \u0026#34;float32\u0026#34;), B: T.Buffer((1024,), \u0026#34;float32\u0026#34;), C: T.Buffer((1024,), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i_0 in T.thread_binding(8, thread=\u0026#34;blockIdx.x\u0026#34;): for i_1 in T.thread_binding(128, thread=\u0026#34;threadIdx.x\u0026#34;): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(1024, i_0 * 128 + i_1) T.reads(A[vi], B[vi]) T.writes(C[vi]) C[vi] = A[vi] + B[vi] 然后我们可以在GPU上构建并测试程序的正确性\n1 2 3 4 5 6 7 8 9 10 rt_mod = tvm.build(sch.mod, target=\u0026#34;cuda\u0026#34;) A_np = np.random.uniform(size=(1024,)).astype(\u0026#34;float32\u0026#34;) B_np = np.random.uniform(size=(1024,)).astype(\u0026#34;float32\u0026#34;) A_nd = tvm.nd.array(A_np, tvm.cuda(0)) B_nd = tvm.nd.array(B_np, tvm.cuda(0)) C_nd = tvm.nd.array(np.zeros((1024,), dtype=\u0026#34;float32\u0026#34;), tvm.cuda(0)) rt_mod[\u0026#34;main\u0026#34;](A_nd, B_nd, C_nd) np.testing.assert_allclose(C_nd.numpy(), A_np + B_np) Window Sum Example 滑动窗口求和可以被视为权重为 [1,1,1]的卷积，对输入进行滑动并将三个相邻值相加。\nWindow Sum\n跟上一节一样我们将循环split后把外循环和内循环分别bind到block和thread上\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @tvm.script.ir_module class MyModuleWindowSum: @T.prim_func def main(A: T.Buffer[(1027, ), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, ), \u0026#34;float32\u0026#34;]) -\u0026gt; None: T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i in T.grid(1024): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.remap(\u0026#34;S\u0026#34;, [i]) B[vi] = A[vi] + A[vi + 1] + A[vi + 2] sch = tvm.tir.Schedule(MyModuleWindowSum) nthread = 128 block_C = sch.get_block(\u0026#34;C\u0026#34;) i, = sch.get_loops(block=block_C) i0, i1 = sch.split(i, [None, nthread]) sch.bind(i0, \u0026#34;blockIdx.x\u0026#34;) sch.bind(i1, \u0026#34;threadIdx.x\u0026#34;) 对应的TensorIR如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1027,), \u0026#34;float32\u0026#34;), B: T.Buffer((1024,), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i_0 in T.thread_binding(8, thread=\u0026#34;blockIdx.x\u0026#34;): for i_1 in T.thread_binding(128, thread=\u0026#34;threadIdx.x\u0026#34;): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(1024, i_0 * 128 + i_1) T.reads(A[vi:vi + 3]) T.writes(B[vi]) B[vi] = A[vi] + A[vi + 1] + A[vi + 2] Cache in Shared Memory 我们可以看到在窗口滑动的过程中有一部分数据是重复的。每个 block 包含所有线程都可以在块内访问的共享内存 (shared memory)，为了避免重复从 global memory 加载，我们可以把部分数据缓存到共享内存上\nB[vi] = A[vi] + A[vi + 1] + A[vi + 2] 这一行代码会重复读取 A 缓冲区中的数据。 sch.cache_read(block_C, read_buffer_index=0, storage_scope=\u0026quot;shared\u0026quot;) 创建了一个名为 A_shared 的共享内存缓存，用于存储 A 缓冲区中的一部分数据。 block_C 指示缓存与 C block 相关联。 read_buffer_index=0 指示缓存 A 缓冲区，因为 A 是 C block 中的第一个读取缓冲区。 storage_scope=\u0026quot;shared\u0026quot; 指示缓存使用共享内存。 sch.compute_at(A_shared, i1) 将 A_shared 的计算位置设置为 i1 循环，这意味着 A_shared 将在每个 thread 中被计算。 1 2 3 4 5 6 7 8 9 10 sch = tvm.tir.Schedule(MyModuleWindowSum) nthread = 128 block_C = sch.get_block(\u0026#34;C\u0026#34;) i, = sch.get_loops(block=block_C) i0, i1 = sch.split(i, [None, nthread]) sch.bind(i0, \u0026#34;blockIdx.x\u0026#34;) sch.bind(i1, \u0026#34;threadIdx.x\u0026#34;) A_shared = sch.cache_read(block_C, read_buffer_index=0, storage_scope=\u0026#34;shared\u0026#34;) sch.compute_at(A_shared, i1) sch.mod.show() 变换后的TensorIR如下，主要进行了\n共享内存分配： 在每个 GPU block 的共享内存中分配了一个大小为 (1027,) 的缓冲区 A_shared。\nA_shared = T.alloc_buffer((1027,), scope=\u0026#34;shared\u0026#34;) 添加了一个新的 block A_shared，循环遍历每个 thread并将 A 缓冲区中的数据缓存到 A_shared 中：\nfor i_0 in T.thread_binding(8, thread=\u0026#34;blockIdx.x\u0026#34;): for i_1 in T.thread_binding(128, thread=\u0026#34;threadIdx.x\u0026#34;): for ax0 in range(130): with T.block(\u0026#34;A_shared\u0026#34;): v0 = T.axis.spatial(1027, i_0 * 128 + ax0) T.reads(A[v0]) T.writes(A_shared[v0]) A_shared[v0] = A[v0] 码更新了 C block 中的计算，使其从 A_shared 中读取数据：\nwith T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(1024, i_0 * 128 + i_1) T.reads(A_shared[vi:vi + 3]) T.writes(B[vi]) B[vi] = A_shared[vi] + A_shared[vi + 1] + A_shared[vi + 2] rane(130) 的出现是因为需要将 A 缓冲区中的数据缓存到共享内存 A_shared 中。每个 GPU block 处理的数据范围是 128 个元素，对应于 i1 循环的范围。由于窗口求和操作需要访问 A 缓冲区中当前元素的三个相邻元素，因此每个 thread 需要访问 128 + 2 = 130 个元素。为了确保每个 thread 都能访问到所需的数据，需要将 A 缓冲区中 130 个元素缓存到 A_shared 中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1027,), \u0026#34;float32\u0026#34;), B: T.Buffer((1024,), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): A_shared = T.alloc_buffer((1027,), scope=\u0026#34;shared\u0026#34;) for i_0 in T.thread_binding(8, thread=\u0026#34;blockIdx.x\u0026#34;): for i_1 in T.thread_binding(128, thread=\u0026#34;threadIdx.x\u0026#34;): for ax0 in range(130): with T.block(\u0026#34;A_shared\u0026#34;): v0 = T.axis.spatial(1027, i_0 * 128 + ax0) T.reads(A[v0]) T.writes(A_shared[v0]) A_shared[v0] = A[v0] with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(1024, i_0 * 128 + i_1) T.reads(A_shared[vi:vi + 3]) T.writes(B[vi]) B[vi] = A_shared[vi] + A_shared[vi + 1] + A_shared[vi + 2] Get CUDA Source 我们可以检查相应的底层代码（CUDA ）\n1 2 rt_mod = tvm.build(sch.mod, target=\u0026#34;cuda\u0026#34;) print(rt_mod.imported_modules[0].get_source()) 生成的代码包含两部分：\n在主机 (CPU) 上的调用 GPU 程序的部分； 相应计算的 CUDA 内核。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #if (((__CUDACC_VER_MAJOR__ == 11) \u0026amp;\u0026amp; (__CUDACC_VER_MINOR__ \u0026gt;= 4)) || \\ (__CUDACC_VER_MAJOR__ \u0026gt; 11)) #define TVM_ENABLE_L2_PREFETCH 1 #else #define TVM_ENABLE_L2_PREFETCH 0 #endif #ifdef _WIN32 using uint = unsigned int; using uchar = unsigned char; using ushort = unsigned short; using int64_t = long long; using uint64_t = unsigned long long; #else #define uint unsigned int #define uchar unsigned char #define ushort unsigned short #define int64_t long long #define uint64_t unsigned long long #endif extern \u0026#34;C\u0026#34; __global__ void __launch_bounds__(128) main_kernel(float* __restrict__ A, float* __restrict__ B); extern \u0026#34;C\u0026#34; __global__ void __launch_bounds__(128) main_kernel(float* __restrict__ A, float* __restrict__ B) { __shared__ float A_shared[130]; for (int ax0 = 0; ax0 \u0026lt; 130; ++ax0) { A_shared[ax0] = A[((((int)blockIdx.x) * 128) + ax0)]; } __syncthreads(); B[((((int)blockIdx.x) * 128) + ((int)threadIdx.x))] = ((A_shared[((int)threadIdx.x)] + A_shared[(((int)threadIdx.x) + 1)]) + A_shared[(((int)threadIdx.x) + 2)]); } Matrix Multiplication 下面我们对原始的 1024*1024的矩阵乘法进行优化\n1 2 3 4 5 6 7 8 9 10 11 12 13 @tvm.script.ir_module class MyModuleMatmul: @T.prim_func def main(A: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], C: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;]) -\u0026gt; None: T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i, j, k in T.grid(1024, 1024, 1024): with T.block(\u0026#34;C\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) with T.init(): C[vi, vj] = 0.0 C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vk, vj] Local Blocking 下面的blocking 函数使用了一种称为 局部阻塞 的优化策略，将矩阵乘法的计算分解成更小的块，并使用共享内存缓存来提高性能。\nLocal Blocking\n将三个循环 i、j 和 k 分别拆分成多个循环，例如将 i 拆分成 i0、i1 和 i2，分别对应于 block 索引、thread 索引和局部循环索引。 k1表示矩阵计算被拆分成多少个小块，k0决定了每个线程需要进行多少次累加操作。调整循环的顺序，以便在每个 thread 中计算 k0 循环的所有迭代，从而利用共享内存缓存。 使用 cache_write 函数创建一个名为 C_local 的共享内存缓存，用于存储 C 矩阵的中间结果。 使用 reverse_compute_at 函数将 C_local 的计算位置设置为 j1 循环，以便在每个 thread 中计算 C_local 的所有迭代，从而利用共享内存缓存。 将 i0 和 j0 绑定到 GPU 的 blockIdx.y 和 blockIdx.x 线程索引，将 i1 和 j1 绑定到 GPU 的 threadIdx.y 和 threadIdx.x 线程索引。 使用 unroll 函数展开 k1 循环，以便在每个 thread 中展开计算，从而提高性能。 使用 decompose_reduction 函数分解 k0 循环，以便在每个 thread 中计算 k0 循环的所有迭代，从而利用共享内存缓存。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def blocking(sch: tvm.tir.Schedule, tile_local_y, tile_local_x, tile_block_y, tile_block_x, tile_k): block_C = sch.get_block(\u0026#34;C\u0026#34;) C_local = sch.cache_write(block_C, 0, \u0026#34;local\u0026#34;) i, j, k = sch.get_loops(block=block_C) i0, i1, i2 = sch.split(loop=i, factors=[None, tile_block_y, tile_local_y]) j0, j1, j2 = sch.split(loop=j, factors=[None, tile_block_x, tile_local_x]) k0, k1 = sch.split(loop=k, factors=[None, tile_k]) sch.unroll(k1) sch.reorder(i0, j0, i1, j1, k0, k1, i2, j2) sch.reverse_compute_at(C_local, j1) sch.bind(i0, \u0026#34;blockIdx.y\u0026#34;) sch.bind(j0, \u0026#34;blockIdx.x\u0026#34;) sch.bind(i1, \u0026#34;threadIdx.y\u0026#34;) sch.bind(j1, \u0026#34;threadIdx.x\u0026#34;) sch.decompose_reduction(block_C, k0) return sch 进行 Local Blocking 后的TensorIR如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 sch = tvm.tir.Schedule(MyModuleMatmul) sch = blocking(sch, 8, 8, 8, 8, 4) sch.mod.show() #--------------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): C_local = T.alloc_buffer((1024, 1024), scope=\u0026#34;local\u0026#34;) for i_0 in T.thread_binding(16, thread=\u0026#34;blockIdx.y\u0026#34;): for j_0 in T.thread_binding(16, thread=\u0026#34;blockIdx.x\u0026#34;): for i_1 in T.thread_binding(8, thread=\u0026#34;threadIdx.y\u0026#34;): for j_1 in T.thread_binding(8, thread=\u0026#34;threadIdx.x\u0026#34;): for i_2_init, j_2_init in T.grid(8, 8): with T.block(\u0026#34;C_init\u0026#34;): vi = T.axis.spatial(1024, i_0 * 64 + i_1 * 8 + i_2_init) vj = T.axis.spatial(1024, j_0 * 64 + j_1 * 8 + j_2_init) T.reads() T.writes(C_local[vi, vj]) C_local[vi, vj] = T.float32(0.0) for k_0 in range(256): for k_1 in T.unroll(4): for i_2, j_2 in T.grid(8, 8): with T.block(\u0026#34;C_update\u0026#34;): vi = T.axis.spatial(1024, i_0 * 64 + i_1 * 8 + i_2) vj = T.axis.spatial(1024, j_0 * 64 + j_1 * 8 + j_2) vk = T.axis.reduce(1024, k_0 * 4 + k_1) T.reads(C_local[vi, vj], A[vi, vk], B[vk, vj]) T.writes(C_local[vi, vj]) C_local[vi, vj] = C_local[vi, vj] + A[vi, vk] * B[vk, vj] for ax0, ax1 in T.grid(8, 8): with T.block(\u0026#34;C_local\u0026#34;): v0 = T.axis.spatial(1024, i_0 * 64 + i_1 * 8 + ax0) v1 = T.axis.spatial(1024, j_0 * 64 + j_1 * 8 + ax1) T.reads(C_local[v0, v1]) T.writes(C[v0, v1]) C[v0, v1] = C_local[v0, v1] Shared Memory Blocking 上面的方法没有考虑相邻 thread 位于同一个 block 中，我们可以将它们需要的数据加载到 shared memory 中。\nShared Memory Blocking\ncache_read_and_coop_fetch 函数负责将 A 和 B 矩阵中的数据加载到共享内存中。首先使用 cache_read 创建一个共享内存缓存，用于存储 A 或 B 矩阵的数据。然后使用 compute_at 将缓存的计算位置设置为 k0 循环，在每个线程中计算缓存的所有迭代。最后使用 split 和 vectorize 函数对 k0 循环进行向量化，提高加载数据的效率。\n1 2 3 4 5 6 7 8 9 def cache_read_and_coop_fetch(sch: tvm.tir.Schedule, block, nthread, read_idx, read_loc): read_cache = sch.cache_read(block=block, read_buffer_index=read_idx, storage_scope=\u0026#34;shared\u0026#34;) sch.compute_at(block=read_cache, loop=read_loc) # vertorized cooperative fetch inner0, inner1 = sch.get_loops(block=read_cache)[-2:] inner = sch.fuse(inner0, inner1) _, tx, vec = sch.split(loop=inner, factors=[None, nthread, 4]) sch.vectorize(vec) sch.bind(tx, \u0026#34;threadIdx.x\u0026#34;) 其余的操作和 Local Blocking 一致\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def blocking_with_shared(sch: tvm.tir.Schedule, tile_local_y, tile_local_x, tile_block_y, tile_block_x, tile_k): block_C = sch.get_block(\u0026#34;C\u0026#34;) C_local = sch.cache_write(block_C, 0, \u0026#34;local\u0026#34;) i, j, k = sch.get_loops(block=block_C) i0, i1, i2 = sch.split(loop=i, factors=[None, tile_block_y, tile_local_y]) j0, j1, j2 = sch.split(loop=j, factors=[None, tile_block_x, tile_local_x]) k0, k1 = sch.split(loop=k, factors=[None, tile_k]) sch.reorder(i0, j0, i1, j1, k0, k1, i2, j2) sch.reverse_compute_at(C_local, j1) sch.bind(i0, \u0026#34;blockIdx.y\u0026#34;) sch.bind(j0, \u0026#34;blockIdx.x\u0026#34;) tx = sch.fuse(i1, j1) sch.bind(tx, \u0026#34;threadIdx.x\u0026#34;) nthread = tile_block_y * tile_block_x cache_read_and_coop_fetch(sch, block_C, nthread, 0, k0) cache_read_and_coop_fetch(sch, block_C, nthread, 1, k0) sch.decompose_reduction(block_C, k0) return sch ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch6/","summary":"Personal notebook 6.","title":"TVM Learning (8)-GPU and Hardware Acceleration, Part 1"},{"content":"Model Preparation 我们采用Pytorch框架先定一个模型，该模型接受一批图像为输入，然后对它们依次作用卷积层，激活层，池化层和全连接层，得到分类结果。并从训练好的模型里加载权重，输入图像来自FashionMNIST数据集，shape为(1, 28, 28)，我们设置batch size=4.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # Load the weight map from file. weight_map = pkl.load(open(\u0026#34;fasionmnist_mlp_assignment_params.pkl\u0026#34;, \u0026#34;rb\u0026#34;)) class_names = [\u0026#39;T-shirt/top\u0026#39;, \u0026#39;Trouser\u0026#39;, \u0026#39;Pullover\u0026#39;, \u0026#39;Dress\u0026#39;, \u0026#39;Coat\u0026#39;, \u0026#39;Sandal\u0026#39;, \u0026#39;Shirt\u0026#39;, \u0026#39;Sneaker\u0026#39;, \u0026#39;Bag\u0026#39;, \u0026#39;Ankle boot\u0026#39;] def pytorch_model(): list = [] list.append(nn.Conv2d(in_channels=1, out_channels=32, kernel_size=(3, 3), bias=True)) list.append(nn.ReLU()) list.append(nn.MaxPool2d(kernel_size=(2, 2))) list.append(nn.Flatten()) list.append(nn.Linear(in_features=5408, out_features=100, bias=True)) list.append(nn.ReLU()) list.append(nn.Linear(in_features=100, out_features=10, bias=True)) list.append(nn.Softmax(dim=1)) model = nn.Sequential(*list).cuda() name_map = { \u0026#34;0.weight\u0026#34;: \u0026#34;conv2d_weight\u0026#34;, \u0026#34;0.bias\u0026#34;: \u0026#34;conv2d_bias\u0026#34;, \u0026#34;4.weight\u0026#34;: \u0026#34;linear0_weight\u0026#34;, \u0026#34;4.bias\u0026#34;: \u0026#34;linear0_bias\u0026#34;, \u0026#34;6.weight\u0026#34;: \u0026#34;linear1_weight\u0026#34;, \u0026#34;6.bias\u0026#34;: \u0026#34;linear1_bias\u0026#34;, } for name, param in model.named_parameters(): param.data = torch.from_numpy(weight_map[name_map[name]]).cuda() return model Ingest Model From Pytorch 之前我们都是手写T.prim_func来实现神经网络的每一层，这样很容易出错并且不易于调试。TVM提供了 relax.BlockBuilder类可以从头开始一步步构造端到端模型，其中有一个名为 emit_te的API，它可以将一个张量表达式的算子描述转变成一个对应TensorIR函数的 call_tir操作。\n在下面的代码中，为了构建一个执行单个ReLU算子的Relax函数，在 emit_te_example中我们首先定义了一个 BlockBuilder实例 bb。同样定义了一个 128x128大小的张量变量 x，它将作为ReLU操作的输入（同时也是Relax函数的输入）。\n在这之后，我们用 with bb.function(name, [*input]) API构建一个以 x为输入的Relax函数 main。然后我们构建一个dataflow block。在这个dataflow block里，我们首先用 emit_te生成一个调用ReLU算子的 call_tir。 emit_te会在IRModule中生成一个名字为 relu的TensorIR函数，然后在dataflow block中生成 call_tir(relu, (x,), (128, 128), dtype=\u0026quot;float32\u0026quot;)操作。call_tir之后是函数返回。在这一构造之后，BlockBuilder实例 bb包含构建完的IRModule，可以通过 bb.get()得到。\nemit_te 的作用是将一个 TVM 张量表达式（TE）函数转换为 Relax 中的调用节点（Call Node）。它允许你在 Relax 中使用 TE 函数来进行计算，并生成相应的 TVM Script 代码。该函数首先将 Relax 表达式的参数转换为 TE 张量。然后，它调用 TE 函数，并将转换后的 TE 张量作为参数传递给它。TE 函数执行计算并返回一个 TE 张量或 TE 张量列表。该函数将返回的 TE 张量转换为 Relax 中的 Call Node. 最后，它使用 self.emit 方法将调用节点添加到 Relax BlockBuilder 中，并返回一个新的 Relax 变量，该变量绑定到 Call Node.\n函数参数：\nfunc: 一个可调用对象，它代表一个 TE 函数，该函数接受 Relax 张量作为参数，并返回一个 TE 张量或 TE 张量列表。 *args: func输入的位置参数 (relax Tensor)。 **kwargs: func输入的的关键字参数 (relax Tensor)。 name_hint: 可选参数，用于指定生成的 PrimFunc 的名称。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def relu(A): B = te.compute(shape=(128, 128), fcompute=lambda i, j: te.max(A[i, j], 0), name=\u0026#34;B\u0026#34;) return B def emit_te_example(): # relax.BlockBuilder can construct e2e models # step by step in an IRModule that starts empty. bb =relax.BlockBuilder() # relax.DynTensorType is the type assigned to tensors with a known dtype and unknown shape. x = relax.Var(\u0026#34;x\u0026#34;, relax.TensorStructInfo((128, 128), \u0026#34;float32\u0026#34;)) with bb.function(\u0026#34;main\u0026#34;, [x]): # construct a Relax function main with x as input with bb.dataflow(): # Emit a call node according to the te function # which should return a te tensor or a list of te tensors. lv0 = bb.emit_te(relu, x) gv = bb.emit_output(lv0) # mark the dataflow output bb.emit_func_output(gv) # mark the function output return bb.get() # return the constructed IRModule 可以看到通过BlockBuilder生成的IRModule包含了ReLU的TensorIR实现和一个含有调用ReLU实现的 call_tir的Relax函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @I.ir_module class Module: @T.prim_func(private=True) def relu(x: T.Buffer((T.int64(128), T.int64(128)), \u0026#34;float32\u0026#34;), B: T.Buffer((T.int64(128), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i, j in T.grid(T.int64(128), T.int64(128)): with T.block(\u0026#34;B\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(x[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = T.max(x[v_i, v_j], T.float32(0.0)) @R.function def main(x: R.Tensor((128, 128), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((128, 128), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv = R.call_tir(cls.relu, (x,), out_sinfo=R.Tensor((128, 128), dtype=\u0026#34;float32\u0026#34;)) gv: R.Tensor((128, 128), dtype=\u0026#34;float32\u0026#34;) = lv R.output(gv) return gv Construct IRModule Equals to Pytorch 我们可以用 BlockBuilder和 emit_te来创建一个和之前定义的PyTorch模型等价的IRModule。首先我们要实现这些算子的张量表达式运算函数。\n在加上bias的时候要和reduction操作分开进行，即不能在一个te.compute里面进行 te.sum+bias[...]的操作，否则会报错\n1 2 3 4 TVMError Traceback (most recent call last): File \u0026#34;D:\\Work\\tvm\\tvm0.18\\tvm\\src\\te\\operation\\compute_op.cc\u0026#34;, line 566 InternalError: Check failed: (0 == level_) is false: Reductions are only allowed at the top level of compute. Please create another tensor for further composition. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def my_conv2d(X, K, B): # No padding, stride = 1 N, CI, H, W = X.shape CO, _, KH, KW = K.shape k = te.reduce_axis((0, CI), name=\u0026#34;k\u0026#34;) r = te.reduce_axis((0, KH), name=\u0026#34;r\u0026#34;) s = te.reduce_axis((0, KW), name=\u0026#34;s\u0026#34;) OH = (H - KH) + 1 OW = (W - KW) + 1 conv2d_te = te.compute(shape=(N, CO, OH, OW), fcompute=lambda n, co, oh, ow: te.sum( X[n, k, oh + r, ow + s] * K[co, k, r, s], axis=[k, r, s]), name=\u0026#34;conv2d\u0026#34;) out = te.compute(shape=(N, CO, OH, OW), fcompute=lambda n, co, oh, ow: conv2d_te[n, co, oh, ow] + B[0, co, 0, 0]) return out def my_relu(X): return te.compute(shape=X.shape, fcompute=lambda *i: te.max(X(*i), 0)) def my_maxpool2d(X, S): N, C, H, W = X.shape i = te.reduce_axis((0, S), name=\u0026#34;i\u0026#34;) j = te.reduce_axis((0, S), name=\u0026#34;j\u0026#34;) maxpool2d_te = te.compute(shape=(N, C, H//2, W//2), fcompute=lambda n, co, oh, ow: te.max( X[n, co, oh*S+i, ow*S+j], axis=[i, j]), name=\u0026#34;maxpool2d\u0026#34;) return maxpool2d_te def my_flatten(X): N, C, H, W = X.shape flatten_te = te.compute(shape=(N, C*H*W), fcompute=lambda n, i: X[n, i//(H*W), i//(W)%(H), i%(W)]) return flatten_te def my_linear(X, W, B=None): FO, FI = W.shape N, _ = X.shape fi = te.reduce_axis((0, FI), name=\u0026#34;FI\u0026#34;) linear_te = te.compute(shape=(N, FO), fcompute=lambda i, j: te.sum( X[i, fi] * W[j, fi], axis=fi)) if B is not None: out = te.compute(shape=(N, FO), fcompute=lambda i, j: B[0, j] + linear_te[i, j]) else: out = linear_te return out def my_softmax(X): N, C = X.shape c = te.reduce_axis((0, C), name=\u0026#34;c\u0026#34;) max_val = te.compute(shape=(N, ), fcompute=lambda i: te.max(X[i, c], axis=c)) exp_te = te.compute(shape=(N, C), fcompute=lambda i, j: te.exp(X[i, j] - max_val[i])) sum_exp_te = te.compute(shape=(N, ), fcompute=lambda i: te.sum(exp_te[i, c], axis=c)) softmax_te = te.compute(shape=(N, C), fcompute=lambda i, j: exp_te[i, j] / sum_exp_te[i]) return softmax_te 然后我们就可以利用 BlockBuilder构建IRModule\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def create_model_via_emit_te(): batch_size = 4 input_shape = (batch_size, 1, 28, 28) # BCHW bb = relax.BlockBuilder() x = relax.Var(\u0026#34;x\u0026#34;, relax.TensorStructInfo(input_shape, \u0026#34;float32\u0026#34;)) conv2d_weight = relax.const(weight_map[\u0026#34;conv2d_weight\u0026#34;], \u0026#34;float32\u0026#34;) conv2d_bias = relax.const(weight_map[\u0026#34;conv2d_bias\u0026#34;].reshape(1, 32, 1, 1), \u0026#34;float32\u0026#34;) linear0_weight = relax.const(weight_map[\u0026#34;linear0_weight\u0026#34;], \u0026#34;float32\u0026#34;) linear0_bias = relax.const(weight_map[\u0026#34;linear0_bias\u0026#34;].reshape(1, 100), \u0026#34;float32\u0026#34;) linear1_weight = relax.const(weight_map[\u0026#34;linear1_weight\u0026#34;], \u0026#34;float32\u0026#34;) linear1_bias = relax.const(weight_map[\u0026#34;linear1_bias\u0026#34;].reshape(1, 10), \u0026#34;float32\u0026#34;) # Build the model using BlockBuilder with bb.function(\u0026#34;main\u0026#34;, [x]): with bb.dataflow(): gv_conv = bb.emit_te(my_conv2d, x, conv2d_weight, conv2d_bias) gv_relu1 = bb.emit_te(my_relu, gv_conv) gv_pool = bb.emit_te(my_maxpool2d, gv_relu1, 2) gv_flatten = bb.emit_te(my_flatten, gv_pool) gv_dense1 = bb.emit_te(my_linear, gv_flatten, linear0_weight, linear0_bias) gv_relu2 = bb.emit_te(my_relu, gv_dense1) gv_dense2 = bb.emit_te(my_linear, gv_relu2, linear1_weight, linear1_bias) gv_softmax = bb.emit_te(my_softmax, gv_dense2) out = bb.emit_output(gv_softmax) bb.emit_func_output(out) return bb.get() 得到的IRModule的TensorIR如下\n1 2 3 4 5 mod = create_model_via_emit_te() exec = relax.build(mod, \u0026#34;llvm\u0026#34;) dev = tvm.cpu() vm = relax.VirtualMachine(exec, dev) print(mod.script()) mod.script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 @I.ir_module class Module: @T.prim_func(private=True) def my_conv2d(x: T.Buffer((T.int64(4), T.int64(1), T.int64(28), T.int64(28)), \u0026#34;float32\u0026#34;), B: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), \u0026#34;float32\u0026#34;), C: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(32), T.int64(26), T.int64(26)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): conv2d = T.alloc_buffer((T.int64(4), T.int64(32), T.int64(26), T.int64(26))) for n, co, oh, ow, k, r, s in T.grid(T.int64(4), T.int64(32), T.int64(26), T.int64(26), T.int64(1), T.int64(3), T.int64(3)): with T.block(\u0026#34;conv2d\u0026#34;): v_n, v_co, v_oh, v_ow, v_k, v_r, v_s = T.axis.remap(\u0026#34;SSSSRRR\u0026#34;, [n, co, oh, ow, k, r, s]) T.reads(x[v_n, v_k, v_oh + v_r, v_ow + v_s], B[v_co, v_k, v_r, v_s]) T.writes(conv2d[v_n, v_co, v_oh, v_ow]) with T.init(): conv2d[v_n, v_co, v_oh, v_ow] = T.float32(0.0) conv2d[v_n, v_co, v_oh, v_ow] = conv2d[v_n, v_co, v_oh, v_ow] + x[v_n, v_k, v_oh + v_r, v_ow + v_s] * B[v_co, v_k, v_r, v_s] for n, co, oh, ow in T.grid(T.int64(4), T.int64(32), T.int64(26), T.int64(26)): with T.block(\u0026#34;compute\u0026#34;): v_n, v_co, v_oh, v_ow = T.axis.remap(\u0026#34;SSSS\u0026#34;, [n, co, oh, ow]) T.reads(conv2d[v_n, v_co, v_oh, v_ow], C[T.int64(0), v_co, T.int64(0), T.int64(0)]) T.writes(compute[v_n, v_co, v_oh, v_ow]) compute[v_n, v_co, v_oh, v_ow] = conv2d[v_n, v_co, v_oh, v_ow] + C[T.int64(0), v_co, T.int64(0), T.int64(0)] @T.prim_func(private=True) def my_flatten(lv2: T.Buffer((T.int64(4), T.int64(32), T.int64(13), T.int64(13)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(5408)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for n, i in T.grid(T.int64(4), T.int64(5408)): with T.block(\u0026#34;compute\u0026#34;): v_n, v_i = T.axis.remap(\u0026#34;SS\u0026#34;, [n, i]) T.reads(lv2[v_n, v_i // T.int64(169), v_i % T.int64(169) // T.int64(13), v_i % T.int64(13)]) T.writes(compute[v_n, v_i]) compute[v_n, v_i] = lv2[v_n, v_i // T.int64(169), v_i % T.int64(169) // T.int64(13), v_i % T.int64(13)] @T.prim_func(private=True) def my_linear(lv3: T.Buffer((T.int64(4), T.int64(5408)), \u0026#34;float32\u0026#34;), B: T.Buffer((T.int64(100), T.int64(5408)), \u0026#34;float32\u0026#34;), C: T.Buffer((T.int64(1), T.int64(100)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(100)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): compute_1 = T.alloc_buffer((T.int64(4), T.int64(100))) for i, j, FI in T.grid(T.int64(4), T.int64(100), T.int64(5408)): with T.block(\u0026#34;compute\u0026#34;): v_i, v_j, v_FI = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, FI]) T.reads(lv3[v_i, v_FI], B[v_j, v_FI]) T.writes(compute_1[v_i, v_j]) with T.init(): compute_1[v_i, v_j] = T.float32(0.0) compute_1[v_i, v_j] = compute_1[v_i, v_j] + lv3[v_i, v_FI] * B[v_j, v_FI] for i, j in T.grid(T.int64(4), T.int64(100)): with T.block(\u0026#34;compute_1\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(C[T.int64(0), v_j], compute_1[v_i, v_j]) T.writes(compute[v_i, v_j]) compute[v_i, v_j] = C[T.int64(0), v_j] + compute_1[v_i, v_j] @T.prim_func(private=True) def my_linear1(lv5: T.Buffer((T.int64(4), T.int64(100)), \u0026#34;float32\u0026#34;), B: T.Buffer((T.int64(10), T.int64(100)), \u0026#34;float32\u0026#34;), C: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(10)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): compute_1 = T.alloc_buffer((T.int64(4), T.int64(10))) for i, j, FI in T.grid(T.int64(4), T.int64(10), T.int64(100)): with T.block(\u0026#34;compute\u0026#34;): v_i, v_j, v_FI = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, FI]) T.reads(lv5[v_i, v_FI], B[v_j, v_FI]) T.writes(compute_1[v_i, v_j]) with T.init(): compute_1[v_i, v_j] = T.float32(0.0) compute_1[v_i, v_j] = compute_1[v_i, v_j] + lv5[v_i, v_FI] * B[v_j, v_FI] for i, j in T.grid(T.int64(4), T.int64(10)): with T.block(\u0026#34;compute_1\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(C[T.int64(0), v_j], compute_1[v_i, v_j]) T.writes(compute[v_i, v_j]) compute[v_i, v_j] = C[T.int64(0), v_j] + compute_1[v_i, v_j] @T.prim_func(private=True) def my_maxpool2d(lv1: T.Buffer((T.int64(4), T.int64(32), T.int64(26), T.int64(26)), \u0026#34;float32\u0026#34;), maxpool2d: T.Buffer((T.int64(4), T.int64(32), T.int64(13), T.int64(13)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for n, co, oh, ow, i, j in T.grid(T.int64(4), T.int64(32), T.int64(13), T.int64(13), T.int64(2), T.int64(2)): with T.block(\u0026#34;maxpool2d\u0026#34;): v_n, v_co, v_oh, v_ow, v_i, v_j = T.axis.remap(\u0026#34;SSSSRR\u0026#34;, [n, co, oh, ow, i, j]) T.reads(lv1[v_n, v_co, v_oh * T.int64(2) + v_i, v_ow * T.int64(2) + v_j]) T.writes(maxpool2d[v_n, v_co, v_oh, v_ow]) with T.init(): maxpool2d[v_n, v_co, v_oh, v_ow] = T.float32(-340282346638528859811704183484516925440.0) maxpool2d[v_n, v_co, v_oh, v_ow] = T.max(maxpool2d[v_n, v_co, v_oh, v_ow], lv1[v_n, v_co, v_oh * T.int64(2) + v_i, v_ow * T.int64(2) + v_j]) @T.prim_func(private=True) def my_relu(lv: T.Buffer((T.int64(4), T.int64(32), T.int64(26), T.int64(26)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(32), T.int64(26), T.int64(26)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1, i2, i3 in T.grid(T.int64(4), T.int64(32), T.int64(26), T.int64(26)): with T.block(\u0026#34;compute\u0026#34;): v_i0, v_i1, v_i2, v_i3 = T.axis.remap(\u0026#34;SSSS\u0026#34;, [i0, i1, i2, i3]) T.reads(lv[v_i0, v_i1, v_i2, v_i3]) T.writes(compute[v_i0, v_i1, v_i2, v_i3]) compute[v_i0, v_i1, v_i2, v_i3] = T.max(lv[v_i0, v_i1, v_i2, v_i3], T.float32(0.0)) @T.prim_func(private=True) def my_relu1(lv4: T.Buffer((T.int64(4), T.int64(100)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(100)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1 in T.grid(T.int64(4), T.int64(100)): with T.block(\u0026#34;compute\u0026#34;): v_i0, v_i1 = T.axis.remap(\u0026#34;SS\u0026#34;, [i0, i1]) T.reads(lv4[v_i0, v_i1]) T.writes(compute[v_i0, v_i1]) compute[v_i0, v_i1] = T.max(lv4[v_i0, v_i1], T.float32(0.0)) @T.prim_func(private=True) def my_softmax(lv6: T.Buffer((T.int64(4), T.int64(10)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(10)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): compute_1 = T.alloc_buffer((T.int64(4),)) compute_2 = T.alloc_buffer((T.int64(4), T.int64(10))) compute_3 = T.alloc_buffer((T.int64(4),)) for i, c in T.grid(T.int64(4), T.int64(10)): with T.block(\u0026#34;compute\u0026#34;): v_i, v_c = T.axis.remap(\u0026#34;SR\u0026#34;, [i, c]) T.reads(lv6[v_i, v_c]) T.writes(compute_1[v_i]) with T.init(): compute_1[v_i] = T.float32(-340282346638528859811704183484516925440.0) compute_1[v_i] = T.max(compute_1[v_i], lv6[v_i, v_c]) for i, j in T.grid(T.int64(4), T.int64(10)): with T.block(\u0026#34;compute_1\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(lv6[v_i, v_j], compute_1[v_i]) T.writes(compute_2[v_i, v_j]) compute_2[v_i, v_j] = T.exp(lv6[v_i, v_j] - compute_1[v_i]) for i, c in T.grid(T.int64(4), T.int64(10)): with T.block(\u0026#34;compute_2\u0026#34;): v_i, v_c = T.axis.remap(\u0026#34;SR\u0026#34;, [i, c]) T.reads(compute_2[v_i, v_c]) T.writes(compute_3[v_i]) with T.init(): compute_3[v_i] = T.float32(0.0) compute_3[v_i] = compute_3[v_i] + compute_2[v_i, v_c] for i, j in T.grid(T.int64(4), T.int64(10)): with T.block(\u0026#34;compute_3\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(compute_2[v_i, v_j], compute_3[v_i]) T.writes(compute[v_i, v_j]) compute[v_i, v_j] = compute_2[v_i, v_j] / compute_3[v_i] @R.function def main(x: R.Tensor((4, 1, 28, 28), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((4, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv = R.call_tir(cls.my_conv2d, (x, metadata[\u0026#34;relax.expr.Constant\u0026#34;][0], metadata[\u0026#34;relax.expr.Constant\u0026#34;][1]), out_sinfo=R.Tensor((4, 32, 26, 26), dtype=\u0026#34;float32\u0026#34;)) lv1 = R.call_tir(cls.my_relu, (lv,), out_sinfo=R.Tensor((4, 32, 26, 26), dtype=\u0026#34;float32\u0026#34;)) lv2 = R.call_tir(cls.my_maxpool2d, (lv1,), out_sinfo=R.Tensor((4, 32, 13, 13), dtype=\u0026#34;float32\u0026#34;)) lv3 = R.call_tir(cls.my_flatten, (lv2,), out_sinfo=R.Tensor((4, 5408), dtype=\u0026#34;float32\u0026#34;)) lv4 = R.call_tir(cls.my_linear, (lv3, metadata[\u0026#34;relax.expr.Constant\u0026#34;][2], metadata[\u0026#34;relax.expr.Constant\u0026#34;][3]), out_sinfo=R.Tensor((4, 100), dtype=\u0026#34;float32\u0026#34;)) lv5 = R.call_tir(cls.my_relu1, (lv4,), out_sinfo=R.Tensor((4, 100), dtype=\u0026#34;float32\u0026#34;)) lv6 = R.call_tir(cls.my_linear1, (lv5, metadata[\u0026#34;relax.expr.Constant\u0026#34;][4], metadata[\u0026#34;relax.expr.Constant\u0026#34;][5]), out_sinfo=R.Tensor((4, 10), dtype=\u0026#34;float32\u0026#34;)) lv7 = R.call_tir(cls.my_softmax, (lv6,), out_sinfo=R.Tensor((4, 10), dtype=\u0026#34;float32\u0026#34;)) gv: R.Tensor((4, 10), dtype=\u0026#34;float32\u0026#34;) = lv7 R.output(gv) return gv 我们可以与Pytorch模型的执行结果进行比较来验证正确性。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def build_mod(mod): exec = relax.vm.build(mod, \u0026#34;llvm\u0026#34;) dev = tvm.cpu() vm = relax.VirtualMachine(exec, dev) return vm def check_equivalence(mod, torch_model, test_loader): torch_model.eval() with torch.no_grad(): rt_mod = build_mod(mod) for data, label in test_loader: data, label = data.cpu(), label.cpu() output_from_pytorch = torch_model(data).numpy() output_from_relax = rt_mod[\u0026#34;main\u0026#34;](tvm.nd.array(data, tvm.cpu())).numpy() tvm.testing.assert_allclose(output_from_pytorch, output_from_relax, rtol=1e-4) test_data = torchvision.datasets.FashionMNIST( \u0026#34;./data\u0026#34;, download=True, train=False, transform=transforms.Compose([transforms.ToTensor()]) ) test_loader = torch.utils.data.DataLoader(test_data, batch_size=batch_size, shuffle=False) mod = create_model_via_emit_te() torch_model = pytorch_model() check_equivalence(mod, torch_model, test_loader) ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch5/","summary":"Personal notebook 5.","title":"TVM Learning (6)-Exercise of End to End Model Execution"},{"content":"Transform a Primitive Tensor Function 之前已经讲过如何通过 tir.Schedule对T.prim_func进行变换，仍以矩阵乘法为例\n1 2 3 4 5 6 7 8 9 10 11 12 13 @tvm.script.ir_module class MyModule: @T.prim_func def main(A: T.Buffer((128, 128), \u0026#34;float32\u0026#34;), # type: ignore B: T.Buffer((128, 128), \u0026#34;float32\u0026#34;), # type: ignore C: T.Buffer((128, 128), \u0026#34;float32\u0026#34;)): # type: ignore T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i, j, k in T.grid(128, 128, 128): with T.block(\u0026#34;C\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) with T.init(): C[vi, vj] = 0.0 C[vi, vj] += A[vi, vk] * B[vk, vj] 对其进行 split, reorder和 decompose_reduction变换得到的TensorIR如下。\n通过以上变换后，矩阵乘法的执行时间减少是由于：\n循环拆分 (sch.split) ： 将 j循环拆分成了两个循环：j_0和 j_1，其中 j_1的因子为4（内层循环）。 提高数据的局部性，因为较小的数据块会在更短的时间内被频繁访问，从而更好地利用缓存。 循环重排 (sch.reorder) ： 将循环的顺序调整为 i, j_0, k, j_1，意味着外层循环先遍历 i和 j_0，内层循环再遍历 k和 j_1。 优先考虑了数据在寄存器或缓存中的重用，尤其是在内层循环操作期间 A矩阵中的元素。 分解归约 (sch.decompose_reduction) ： 将对 k的归约操作分解为初始化阶段和更新阶段，有助于将计算的两个阶段（即设置初始值和实际归约）分开。 提高并行化的机会，并且允许更好地利用向量化指令或其他硬件优化。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def schedule_mm(sch: tvm.tir.Schedule, jfactor=4): block_C = sch.get_block(\u0026#34;C\u0026#34;, \u0026#34;main\u0026#34;) i, j, k = sch.get_loops(block=block_C) j_0, j_1 = sch.split(loop=j, factors=[None, jfactor]) sch.reorder(i, j_0, k, j_1) sch.decompose_reduction(block_C, k) return sch sch = tvm.tir.Schedule(MyModule) sch = schedule_mm(sch) sch.mod.show() #----------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((128, 128), \u0026#34;float32\u0026#34;), B: T.Buffer((128, 128), \u0026#34;float32\u0026#34;), C: T.Buffer((128, 128), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i, j_0 in T.grid(128, 32): for j_1_init in range(4): with T.block(\u0026#34;C_init\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j_0 * 4 + j_1_init) T.reads() T.writes(C[vi, vj]) C[vi, vj] = T.float32(0.0) for k, j_1 in T.grid(128, 4): with T.block(\u0026#34;C_update\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j_0 * 4 + j_1) vk = T.axis.reduce(128, k) T.reads(C[vi, vj], A[vi, vk], B[vk, vj]) T.writes(C[vi, vj]) C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vk, vj] 我们可以比较变换前后的计算用时\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 a_np = np.random.rand(128, 128).astype(dtype) b_np = np.random.rand(128, 128).astype(dtype) c_mm = a_np @ b_np a_nd = tvm.nd.array(a_np) b_nd = tvm.nd.array(b_np) c_nd = tvm.nd.empty((128, 128), dtype=\u0026#34;float32\u0026#34;) # Before transformation lib = tvm.build(MyModule, target= \u0026#34;llvm\u0026#34;) f_timer_before = lib.time_evaluator(\u0026#34;main\u0026#34;, tvm.cpu()) print(\u0026#34;Time cost of MyModule: %.3f ms\u0026#34; % (f_timer_before(a_nd, b_nd, c_nd).mean * 1000)) #Time cost of MyModule: 1.365 ms # After transformation lib = tvm.build(sch.mod, target=\u0026#34;llvm\u0026#34;) f_timer_after = lib.time_evaluator(\u0026#34;main\u0026#34;, tvm.cpu()) print(\u0026#34;Time cost of MyModule=\u0026gt;schedule_mm: %.3f ms\u0026#34; % (f_timer_after(a_nd, b_nd, c_nd).mean * 1000)) # Time cost of MyModule=\u0026gt;schedule_mm: 1.041 ms Transformation Trace 除了 sch.mod字段，tir.Schedule还提供了一个跟踪字段 sch.trace，用于显示变换IRModule的步骤。\n1 2 3 4 5 6 7 8 print(sch.trace) #------------------------------------------- def apply_trace(sch: tir.Schedule) -\u0026gt; None: b0 = sch.get_block(name=\u0026#34;C\u0026#34;, func_name=\u0026#34;main\u0026#34;) l1, l2, l3 = sch.get_loops(block=b0) l4, l5 = sch.split(loop=l2, factors=[None, 4], preserve_unit_iters=True, disable_predication=False) sch.reorder(l1, l4, l3, l5) b6 = sch.decompose_reduction(block=b0, loop=l3) Stochastic Schedule Transformation 在之前的变换中，我们都是指定这些函数的输入参数。实际情况下，我们需要引入随机性，根据不同变换的输入参数得出的执行时间来选择性能最好的一个。\nsample_perfect_tile函数可以计算任务中的特定循环采样最优的切分策略。\n输入参数：\nloop：要切分的循环。 n：要切分成几份。 max_innermost_factor：允许在最内层循环中采样的最大切分大小。此参数有助于控制平铺的粒度。 decision：一个可选的整数列表，表示预先确定的切分决策。如果提供，函数将使用此决策而不是采样。 下面函数 stochastic_schedule_mm和 schedule_mm唯一的区别是指定 j_factors采用的是随机的策略。\n1 2 3 4 5 6 7 8 def stochastic_schedule_mm(sch: tvm.tir.Schedule): block_C = sch.get_block(\u0026#34;C\u0026#34;, \u0026#34;main\u0026#34;) i, j, k = sch.get_loops(block=block_C) j_factors = sch.sample_perfect_tile(loop=j, n=2) # tvm.tir.expr.Var j_0, j_1 = sch.split(loop=j, factors=j_factors) sch.reorder(i, j_0, k, j_1) sch.decompose_reduction(block_C, k) return sch 可以发现，它是对原来的确定性变换的泛化版本，只是多了两个元素：\n来自 sample_perfect_tile 的随机变量，以及我们在示例中没有涉及的其他采样操作。 根据随机变量采取行动的 schedule操作。 j_factors 中的元素不是整数。相它们是符号变量，指的是正在采样的随机变量。我们可以将这些变量传递给转换 API，以指定factors. 调用 stochastic_schedule_mm后的trace如下\n1 2 3 4 5 6 7 8 9 10 11 12 sch = tvm.tir.Schedule(MyModule) sch = stochastic_schedule_mm(sch) print(sch.trace) #------------------------------------------------------ def apply_trace(sch: tir.Schedule) -\u0026gt; None: b0 = sch.get_block(name=\u0026#34;C\u0026#34;, func_name=\u0026#34;main\u0026#34;) l1, l2, l3 = sch.get_loops(block=b0) v4, v5 = sch.sample_perfect_tile(loop=l2, n=2, max_innermost_factor=16, decision=[64, 2]) l6, l7 = sch.split(loop=l2, factors=[v4, v5], preserve_unit_iters=True, disable_predication=False) sch.reorder(l1, l6, l3, l7) b8 = sch.decompose_reduction(block=b0, loop=l3) Search Over Stochastic Transformations stochastic_schedule_mm实际上会根据每个采样步骤的实际决定，创建一个程序的搜索空间。\nTransformation Search Space\n我们需要一种搜索算法能找到性能最好的变换。下面的函数使用最直接的搜索算法\u0026ndash;随机搜索。它尝试重复运行 stochastic_schedule_mm，得到一个转换后的IR module，运行benchmark，然后将性能最好的IR module记录下来。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def random_search(mod: tvm.IRModule, num_trails=5): best_result = None best_sch = False for i in range(num_trails): sch = stochastic_schedule_mm(tvm.tir.Schedule(mod)) lib = tvm.build(sch.mod, target=\u0026#34;llvm\u0026#34;) f_timer_after = lib.time_evaluator(\u0026#34;main\u0026#34;, tvm.cpu()) result = f_timer_after(a_nd, b_nd, c_nd).mean print(\u0026#34;=====Attempt %d, time-cost: %.3f ms====\u0026#34; % (i, result * 1000)) print(sch.trace) # book keep the best result so far if best_result is None or result \u0026lt; best_result: best_result = result best_sch = sch return best_sch 实际情况下会使用更高级的算法。还需要提供额外的工具，例如在远程设备上进行基准测试等。TVM 的 meta_schedule API 提供了这些功能。\nmeta_schedule是一个命名空间，用于支持在可能的变换空间中进行搜索。\n跨多个进程的并行基准测试。 使用 cost model，避免每次都进行基准测试。 在 trace 上进行进化搜索，而不是每次都随机取样。 tune_tir API 仍使用随机变换来指定好程序的搜索空间并在搜索空间内找到优化的方案。\n1 2 3 4 5 6 7 8 9 10 11 12 database = ms.tune_tir( mod=MyModule, target=\u0026#34;llvm --num-cores=1\u0026#34;, max_trials_global=64, num_trials_per_iter=64, space=ms.space_generator.ScheduleFn(stochastic_schedule_mm), work_dir=\u0026#34;./tune_tmp\u0026#34;, task_name=\u0026#34;main\u0026#34; ) sch_tuned = ms.tir_integration.compile_tir(database, MyModule, target=\u0026#34;llvm --num-cores=1\u0026#34;) print(sch_tuned.trace) clang error on Windows 不知道为何Windows上运行clang会出错\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 LocalRunner: An exception occurred Traceback (most recent call last): File \u0026#34;D:\\Work\\Anaconda\\envs\\tvm-build\\lib\\site-packages\\tvm-0.18.dev0-py3.9-win-amd64.egg\\tvm\\exec\\popen_worker.py\u0026#34;, line 87, in main result = fn(*args, **kwargs) File \u0026#34;D:\\Work\\Anaconda\\envs\\tvm-build\\lib\\site-packages\\tvm-0.18.dev0-py3.9-win-amd64.egg\\tvm\\meta_schedule\\runner\\local_runner.py\u0026#34;, line 148, in _worker_func rt_mod = tvm.runtime.load_module(artifact_path) File \u0026#34;D:\\Work\\Anaconda\\envs\\tvm-build\\lib\\site-packages\\tvm-0.18.dev0-py3.9-win-amd64.egg\\tvm\\runtime\\module.py\u0026#34;, line 696, in load_module _cc.create_shared(path + \u0026#34;.so\u0026#34;, files) File \u0026#34;D:\\Work\\Anaconda\\envs\\tvm-build\\lib\\site-packages\\tvm-0.18.dev0-py3.9-win-amd64.egg\\tvm\\contrib\\cc.py\u0026#34;, line 96, in create_shared _windows_compile(output, objects, options, cwd, ccache_env) File \u0026#34;D:\\Work\\Anaconda\\envs\\tvm-build\\lib\\site-packages\\tvm-0.18.dev0-py3.9-win-amd64.egg\\tvm\\contrib\\cc.py\u0026#34;, line 415, in _windows_compile raise RuntimeError(msg) RuntimeError: Compilation error: clang -O2 -shared -o C:\\Users\\17725\\AppData\\Local\\Temp\\tmp96lbzaxg\\tvm_tmp_mod.tar.so C:\\Users\\17725\\AppData\\Local\\Temp\\tmp96lbzaxg\\tvm_tmp_mod\\lib0.o ld.lld: error: undefined symbol: _fltused \u0026gt;\u0026gt;\u0026gt; referenced by C:\\Users\\17725\\AppData\\Local\\Temp\\tmp96lbzaxg\\tvm_tmp_mod\\lib0.o clang: error: linker command failed with exit code 1 (use -v to see invocation) ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch4/","summary":"Personal notebook 4.","title":"TVM Learning (5)-Automatic Program Optimization"},{"content":"E2E Model Integration 我们以下图中的 MLP 网络为例，这是一个两层全连接网络，并且省略了最后的 Softmax 层。\nMLP Model\n利用高级Numpy的实现如下\n1 2 3 4 5 def numpy_mlp(data, w0, b0, w1, b1): lv0 = data @ w0.T + b0 lv1 = np.maximum(lv0, 0) lv2 = lv1 @ w1.T + b1 return lv2 为了方便说明底层计算过程，用 Low-level Numpy 进行重写后如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def lnumpy_linear0(X: np.ndarray, W: np.ndarray, B: np.ndarray, Z: np.ndarray): Y = np.empty((1, 128), dtype=\u0026#34;float32\u0026#34;) for i in range(1): for j in range(128): for k in range(784): if k == 0: Y[i, j] = 0 Y[i, j] = Y[i, j] + X[i, k] * W[j, k] for i in range(1): for j in range(128): Z[i, j] = Y[i, j] + B[j] def lnumpy_relu0(X: np.ndarray, Y: np.ndarray): for i in range(1): for j in range(128): Y[i, j] = np.maximum(X[i, j], 0) def lnumpy_linear1(X: np.ndarray, W: np.ndarray, B: np.ndarray, Z: np.ndarray): Y = np.empty((1, 10), dtype=\u0026#34;float32\u0026#34;) for i in range(1): for j in range(10): for k in range(128): if k == 0: Y[i, j] = 0 Y[i, j] = Y[i, j] + X[i, k] * W[j, k] for i in range(1): for j in range(10): Z[i, j] = Y[i, j] + B[j] def lnumpy_mlp(data, w0, b0, w1, b1): lv0 = np.empty((1, 128), dtype=\u0026#34;float32\u0026#34;) lnumpy_linear0(data, w0, b0, lv0) lv1 = np.empty((1, 128), dtype=\u0026#34;float32\u0026#34;) lnumpy_relu0(lv0, lv1) out = np.empty((1, 10), dtype=\u0026#34;float32\u0026#34;) lnumpy_linear1(lv1, w1, b1, out) return out Constructing an E2E IRModule in TVMScript 同样可以用 TVMScript 构建这个网络的 IRModule，只不过这次除了要用 Primitive Tensor Function (@T.prim_function) 还要用 Relax Function (@R.function) 来抽象神经网络的计算过程。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 @tvm.script.ir_module class MyModule: @T.prim_func def relu0(X: T.Buffer((1, 128), \u0026#34;float32\u0026#34;), Y: T.Buffer((1, 128), \u0026#34;float32\u0026#34;)): # function attr dict T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;relu0\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i, j in T.grid(1, 128): with T.block(\u0026#34;Y\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) Y[vi, vj] = T.max(X[vi, vj], T.float32(0)) @T.prim_func def linear0(X: T.Buffer((1, 784), \u0026#34;float32\u0026#34;), W: T.Buffer((128, 784), \u0026#34;float32\u0026#34;), B: T.Buffer((128,), \u0026#34;float32\u0026#34;), Z: T.Buffer((1, 128), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;linear0\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) Y = T.alloc_buffer((1, 128), \u0026#34;float32\u0026#34;) for i, j, k in T.grid(1, 128, 784): with T.block(\u0026#34;Y\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) with T.init(): Y[vi, vj] = T.float32(0) Y[vi, vj] = Y[vi, vj] + X[vi, vk] * W[vj, vk] for i, j in T.grid(1, 128): with T.block(\u0026#34;Z\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) Z[vi, vj] = Y[vi, vj] + B[vj] @T.prim_func def linear1(X: T.Buffer((1, 128), \u0026#34;float32\u0026#34;), W: T.Buffer((10, 128), \u0026#34;float32\u0026#34;), B: T.Buffer((10,), \u0026#34;float32\u0026#34;), Z: T.Buffer((1, 10), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;linear1\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) Y = T.alloc_buffer((1, 10), \u0026#34;float32\u0026#34;) for i, j, k in T.grid(1, 10, 128): with T.block(\u0026#34;Y\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) with T.init(): Y[vi, vj] = T.float32(0) Y[vi, vj] = Y[vi, vj] + X[vi, vk] * W[vj, vk] for i, j in T.grid(1, 10): with T.block(\u0026#34;Z\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) Z[vi, vj] = Y[vi, vj] + B[vj] @R.function def main(x: R.Tensor((1, 784), \u0026#34;float32\u0026#34;), w0: R.Tensor((128, 784), \u0026#34;float32\u0026#34;), b0: R.Tensor((128,), \u0026#34;float32\u0026#34;), w1: R.Tensor((10, 128), \u0026#34;float32\u0026#34;), b1: R.Tensor((10,), \u0026#34;float32\u0026#34;)): with R.dataflow(): cls = MyModule lv0 = R.call_tir(cls.linear0, (x, w0, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv1 = R.call_tir(cls.relu0, (lv0,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) out = R.call_tir(cls.linear1, (lv1, w1, b1), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(out) return out Computational Graph View 该网络的计算图如下，计算图通常具有以下性质：\n框的每个输入边对应于操作的输入； 每个出边对应于操作的输出； 可以任意调整操作的顺序，只要保证边的拓扑排序（Topological Order）没有改变。 Topological Order 拓扑排序是针对有向无环图 (DAG) 的一种排序算法，它将图中的节点排成一个线性序列，满足以下条件：\n对于图中的任意一条边 (u, v)，节点 u 在排序中都出现在节点 v 之前。 Example DAG\n进行拓扑排序较常用的方法：\n从 DAG 图中选择一个 没有前驱（即入度为0）的顶点并输出。 从图中删除该顶点和所有以它为起点的有向边。 重复 1 和 2 直到当前的 DAG 图为空或 当前图中不存在无前驱的顶点为止 。后一种情况说明有向图中必然存在环。 Topological Sort Algorithm\nComputational Graph View\nR.call_tir R.call_tir 正如名字一样调用一个 T.prim_func 并返回计算结果。它的行为用Numpy表示如下，先根据 shape和 dtype开辟输出数据的内存空间，然后调用函数，最后返回输出结果。R.call_tir函数的输入是这种形式的原因是 T.prim_func函数的输入需要我们先为输出结果开辟内存，称为 目标传递 (destination passing) 。\n1 2 3 4 def lnumpy_call_tir(prim_func, inputs, shape, dtype): res = np.empty(shape, dtype=dtype) prim_func(*inputs, res) return res 为了让程序执行具有计算图的性质，我们采用这种方式进行调用\n1 2 3 4 5 def lnumpy_mlp_with_call_tir(data, w0, b0, w1, b1): lv0 = lnumpy_call_tir(lnumpy_linear0, (data, w0, b0), (1, 128), dtype=\u0026#34;float32\u0026#34;) lv1 = lnumpy_call_tir(lnumpy_relu0, (lv0, ), (1, 128), dtype=\u0026#34;float32\u0026#34;) out = lnumpy_call_tir(lnumpy_linear1, (lv1, w1, b1), (1, 10), dtype=\u0026#34;float32\u0026#34;) return out Dataflow Block 理想情况下，计算图中的操作应为 side-effect free，即一个函数只从其输入中读取并通过其输出返回结果，不会改变程序的其他部分（例如递增全局计数器）。如果要引入包含 side-effect 的操作，就需要定义多个dataflow block，在他们之外或者之间进行操作。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @R.function def main(x: Tensor((1, 784), \u0026#34;float32\u0026#34;), w0: Tensor((128, 784), \u0026#34;float32\u0026#34;), b0: Tensor((128,), \u0026#34;float32\u0026#34;), w1: Tensor((10, 128), \u0026#34;float32\u0026#34;), b1: Tensor((10,), \u0026#34;float32\u0026#34;)): with R.dataflow(): lv0 = R.call_tir(cls.linear0, (x, w0, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) gv0 = R.call_tir(cls.relu0, (lv0,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) R.output(gv0) gv1 = R.alloc_tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) # side-effect operation with R.dataflow(): out = R.call_tir(cls.linear1, (gv0, gv1, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) R.output(out) return out Build and Run the Model 该网络对应的TensorIR如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 @I.ir_module class Module: @T.prim_func def linear0( X: T.Buffer((1, 784), \u0026#34;float32\u0026#34;), W: T.Buffer((128, 784), \u0026#34;float32\u0026#34;), B: T.Buffer((128,), \u0026#34;float32\u0026#34;), Z: T.Buffer((1, 128), \u0026#34;float32\u0026#34;), ): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;linear0\u0026#34;, \u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): Y = T.alloc_buffer((1, 128)) for i, j, k in T.grid(1, 128, 784): with T.block(\u0026#34;Y\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) T.reads(X[vi, vk], W[vj, vk]) T.writes(Y[vi, vj]) with T.init(): Y[vi, vj] = T.float32(0) Y[vi, vj] = Y[vi, vj] + X[vi, vk] * W[vj, vk] for i, j in T.grid(1, 128): with T.block(\u0026#34;Z\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(Y[vi, vj], B[vj]) T.writes(Z[vi, vj]) Z[vi, vj] = Y[vi, vj] + B[vj] @T.prim_func def linear1( X: T.Buffer((1, 128), \u0026#34;float32\u0026#34;), W: T.Buffer((10, 128), \u0026#34;float32\u0026#34;), B: T.Buffer((10,), \u0026#34;float32\u0026#34;), Z: T.Buffer((1, 10), \u0026#34;float32\u0026#34;), ): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;linear1\u0026#34;, \u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): Y = T.alloc_buffer((1, 10)) for i, j, k in T.grid(1, 10, 128): with T.block(\u0026#34;Y\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) T.reads(X[vi, vk], W[vj, vk]) T.writes(Y[vi, vj]) with T.init(): Y[vi, vj] = T.float32(0) Y[vi, vj] = Y[vi, vj] + X[vi, vk] * W[vj, vk] for i, j in T.grid(1, 10): with T.block(\u0026#34;Z\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(Y[vi, vj], B[vj]) T.writes(Z[vi, vj]) Z[vi, vj] = Y[vi, vj] + B[vj] @T.prim_func def relu0(X: T.Buffer((1, 128), \u0026#34;float32\u0026#34;), Y: T.Buffer((1, 128), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;relu0\u0026#34;, \u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i, j in T.grid(1, 128): with T.block(\u0026#34;Y\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(X[vi, vj]) T.writes(Y[vi, vj]) Y[vi, vj] = T.max(X[vi, vj], T.float32(0)) @R.function def main( x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), w0: R.Tensor((128, 784), dtype=\u0026#34;float32\u0026#34;), b0: R.Tensor((128,), dtype=\u0026#34;float32\u0026#34;), w1: R.Tensor((10, 128), dtype=\u0026#34;float32\u0026#34;), b1: R.Tensor((10,), dtype=\u0026#34;float32\u0026#34;), ) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv0 = R.call_tir(cls.linear0, (x, w0, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv1 = R.call_tir(cls.relu0, (lv0,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) out = R.call_tir(cls.linear1, (lv1, w1, b1), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(out) return out 我们可以通过下面方式来构造 virtual machine. relax.build返回一个 tvm.relax.Executable对象，然后就可以在指定的硬件上创建virtual machine 来执行计算图。\n1 2 3 4 5 6 7 8 ex = relax.build(MyModule, target=\u0026#34;llvm\u0026#34;) vm = relax.VirtualMachine(ex, tvm.cpu()) nd_res = vm[\u0026#34;main\u0026#34;](data_nd, nd_params[\u0026#34;w0\u0026#34;], nd_params[\u0026#34;b0\u0026#34;], nd_params[\u0026#34;w1\u0026#34;], nd_params[\u0026#34;b1\u0026#34;]) Integrate Existing Libraries in the Environment 除了用 T.prim_func构造RelaxIR，我们也可以从现有的深度学习库的函数来构造。\n这是通过 R.call_dps_packed来完成的，它用于调用一个目标传递风格 (Destination-Passing Style) 的打包函数 (Packed Function)，并返回输出结果。\n目标传递风格 (Destination-Passing Style): 目标传递风格是一种函数调用方式，其中函数的输出参数作为函数参数传递给函数。 打包函数 (Packed Function): 打包函数是一种函数，其输入参数和输出参数都被打包成一个结构体。 纯函数 (Pure Function): 纯函数是指不产生副作用的函数，即函数的执行结果只依赖于输入参数，并且不会修改任何全局状态。\n示例：\n1 R.call_dps_packed(\u0026#34;env.linear\u0026#34;, (x, w0, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) 函数参数：\nfunc: 可以是字符串或表达式，表示目标传递风格的函数。如果 func 是字符串，它将被转换为 ExternFunc 对象。 args: 表达式，表示输入参数。如果 args 是单个表达式，它将被包装成一个 RxTuple 对象。 out_sinfo: 可以是 TensorStructInfo 对象或 TensorStructInfo 对象列表，表示 call_dps_packed 函数输出的结构信息。每个 TensorStructInfo 对象表示一个返回的张量的结构信息。 函数返回值：\nret: Call 对象，表示 call_dps_packed 操作符的调用节点。 Registering Runtime Function 为了能够执行调用外部函数的代码，我们需要注册相应的函数。下面这段代码注册了两个自定义函数，分别用于实现线性层和 ReLU 激活函数。\n@tvm.register_func(\u0026quot;env.linear\u0026quot;, override=True): 使用 @tvm.register_func 装饰器将 torch_linear 函数注册为名为 \u0026quot;env.linear\u0026quot; 的 TVM 函数。 override=True 表示如果已经存在同名函数，则覆盖它。 torch_linear(x: tvm.nd.NDArray, w: tvm.nd.NDArray, b: tvm.nd.NDArray, out: tvm.nd.NDArray): 该函数接受四个参数： x: 输入张量。 w: 权重张量。 b: 偏置张量。 out: 输出张量。 函数内部： 使用 torch.from_dlpack 将 TVM 的 NDArray 对象转换为 PyTorch 的 Tensor 对象。 使用 PyTorch 的 torch.mm 函数进行矩阵乘法，将 x 和 w 的转置相乘，并将结果写入 out。 使用 PyTorch 的 torch.add 函数将 b 加到 out 上。 @tvm.register_func(\u0026quot;env.relu\u0026quot;, override=True): 使用 @tvm.register_func 装饰器将 lnumpy_relu 函数注册为名为 \u0026quot;env.relu\u0026quot; 的 TVM 函数。 override=True 表示如果已经存在同名函数，则覆盖它。 lnumpy_relu(x: tvm.nd.NDArray, out: tvm.nd.NDArray): 该函数接受两个参数： x: 输入张量。 out: 输出张量。 函数内部： 使用 torch.from_dlpack 将 TVM 的 NDArray 对象转换为 PyTorch 的 Tensor 对象。 使用 PyTorch 的 torch.maximum 函数计算 x 和 0 之间的最大值，并将结果写入 out。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @tvm.register_func(\u0026#34;env.linear\u0026#34;, override=True) def torch_linear(x: tvm.nd.NDArray, w: tvm.nd.NDArray, b: tvm.nd.NDArray, out: tvm.nd.NDArray): x_torch = torch.from_dlpack(x) w_torch = torch.from_dlpack(w) b_torch = torch.from_dlpack(b) out_torch = torch.from_dlpack(out) torch.mm(x_torch, w_torch.T, out=out_torch) torch.add(out_torch, b_torch, out=out_torch) @tvm.register_func(\u0026#34;env.relu\u0026#34;, override=True) def lnumpy_relu(x: tvm.nd.NDArray, out: tvm.nd.NDArray): x_torch = torch.from_dlpack(x) out_torch = torch.from_dlpack(out) torch.maximum(x_torch, torch.Tensor([0.0]), out=out_torch) 然后我们就可以创建IRModule并通过上一节所说方法去 build and run.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @tvm.script.ir_module class MyModuleWithExternCall: @R.function def main(x: R.Tensor((1, 784), \u0026#34;float32\u0026#34;), w0: R.Tensor((128, 784), \u0026#34;float32\u0026#34;), b0: R.Tensor((128,), \u0026#34;float32\u0026#34;), w1: R.Tensor((10, 128), \u0026#34;float32\u0026#34;), b1: R.Tensor((10,), \u0026#34;float32\u0026#34;)): # block 0 with R.dataflow(): lv0 = R.call_dps_packed(\u0026#34;env.linear\u0026#34;, (x, w0, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv1 = R.call_dps_packed(\u0026#34;env.relu\u0026#34;, (lv0,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) out = R.call_dps_packed(\u0026#34;env.linear\u0026#34;, (lv1, w1, b1), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(out) return out ex = relax.build(MyModuleWithExternCall, target=\u0026#34;llvm\u0026#34;) vm = relax.VirtualMachine(ex, tvm.cpu()) Mixing TensorIR Code and Libraries 我们可以混合使用T.prim_func和 注册的 runtime 函数来创建 RelaxIR. 以下代码展示了一个例子，其中 linear0 仍在 TensorIR 中实现，而其他函数则被重定向到库函数中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 @tvm.script.ir_module class MyModuleMixture: @T.prim_func def linear0(X: T.Buffer((1, 784), \u0026#34;float32\u0026#34;), W: T.Buffer((128, 784), \u0026#34;float32\u0026#34;), B: T.Buffer((128,), \u0026#34;float32\u0026#34;), Z: T.Buffer((1, 128), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;linear0\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) Y = T.alloc_buffer((1, 128), \u0026#34;float32\u0026#34;) for i, j, k in T.grid(1, 128, 784): with T.block(\u0026#34;Y\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) with T.init(): Y[vi, vj] = T.float32(0) Y[vi, vj] = Y[vi, vj] + X[vi, vk] * W[vj, vk] for i, j in T.grid(1, 128): with T.block(\u0026#34;Z\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) Z[vi, vj] = Y[vi, vj] + B[vj] @R.function def main(x: R.Tensor((1, 784), \u0026#34;float32\u0026#34;), w0: R.Tensor((128, 784), \u0026#34;float32\u0026#34;), b0: R.Tensor((128,), \u0026#34;float32\u0026#34;), w1: R.Tensor((10, 128), \u0026#34;float32\u0026#34;), b1: R.Tensor((10,), \u0026#34;float32\u0026#34;)): with R.dataflow(): cls = MyModuleMixture lv0 = R.call_tir(cls.linear0, (x, w0, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv1 = R.call_dps_packed(\u0026#34;env.relu\u0026#34;, (lv0,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) out = R.call_dps_packed(\u0026#34;env.linear\u0026#34;, (lv1, w1, b1), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(out) return out Bind Parameters to IRModule 之前都是通过显示传递参数给 vm[\u0026quot;main\u0026quot;]函数来调用，我们也可以将参数当作常熟与IRModule进行绑定。\nmetadata[\u0026quot;relax.expr.Constant\u0026quot;]对应的是存储常量的隐式字典（虽然没有显示在脚本中，但仍是 IRModule 的一部分）。构建了转换后的 IRModule，现在只需输入数据就可以调用函数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 MyModuleWithParams = relax.transform.BindParams(\u0026#34;main\u0026#34;, nd_params)(MyModuleMixture) MyModuleWithParams.show() #------------------------------------- @I.ir_module class Module: @T.prim_func def linear0(X: T.Buffer((1, 784), \u0026#34;float32\u0026#34;), W: T.Buffer((128, 784), \u0026#34;float32\u0026#34;), B: T.Buffer((128,), \u0026#34;float32\u0026#34;), Z: T.Buffer((1, 128), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): Y = T.alloc_buffer((1, 128)) for i, j, k in T.grid(1, 128, 784): with T.block(\u0026#34;Y\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) T.reads(X[vi, vk], W[vj, vk]) T.writes(Y[vi, vj]) with T.init(): Y[vi, vj] = T.float32(0.0) Y[vi, vj] = Y[vi, vj] + X[vi, vk] * W[vj, vk] for i, j in T.grid(1, 128): with T.block(\u0026#34;Z\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(Y[vi, vj], B[vj]) T.writes(Z[vi, vj]) Z[vi, vj] = Y[vi, vj] + B[vj] @R.function def main(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv0 = R.call_tir(cls.linear0, (x, metadata[\u0026#34;relax.expr.Constant\u0026#34;][0], metadata[\u0026#34;relax.expr.Constant\u0026#34;][1]), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv1 = R.call_dps_packed(\u0026#34;env.relu\u0026#34;, (lv0,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) out = R.call_dps_packed(\u0026#34;env.linear\u0026#34;, (lv1, metadata[\u0026#34;relax.expr.Constant\u0026#34;][2], metadata[\u0026#34;relax.expr.Constant\u0026#34;][3]), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(out) return out ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch3/","summary":"Personal notebook 3.","title":"TVM Learning (4)-End to End Model Execution"},{"content":"LoopRV \u0026amp; BlockRV Object Schedule要操作的对象主要就是LoopRV和BlockRV，对应于我们TVMScript中的循环变量和计算块部分。下面代码为在 TVM 中注册 LoopRV 的自定义对象类型的过程，并通过 FFI（Foreign Function Interface）机制将 C++ 中的函数暴露给 Python.\n注册过程解析：\n定义类: 首先，定义一个名为 LoopRV 的类，它继承自 tvm.Object 类。这个类表示一个与循环相关的随机变量。 使用 @_register_object 装饰器: LoopRV 类使用 @_register_object(\u0026quot;tir.LoopRV\u0026quot;) 装饰器进行注册。这个装饰器会调用 register_object 函数，将 LoopRV 类注册到 TVM 的对象系统中，并使用类型键 \u0026ldquo;tir.LoopRV\u0026rdquo; 来标识它。 FFI 初始化: tvm._ffi._init_api(\u0026quot;tir.schedule\u0026quot;, __name__) 这行代码使用 _init_api 函数初始化 FFI，将 C++ 中的 \u0026ldquo;tir.schedule\u0026rdquo; 模块的函数暴露给 Python。 _init_api 和 _init_api_prefix 函数: _init_api 函数用于初始化 FFI，它会调用 _init_api_prefix 函数来处理具体的函数注册过程。 函数注册: _init_api_prefix 函数会遍历所有 C++ 中的全局函数，找到以 \u0026ldquo;tir.schedule\u0026rdquo; 开头的函数，并将其注册到 Python 中。 @_register_object(\u0026#34;tir.LoopRV\u0026#34;) class LoopRV(Object): \u0026#34;\u0026#34;\u0026#34;A random variable that refers to a loop\u0026#34;\u0026#34;\u0026#34; def __init__(self) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;Construct a new LoopRV.\u0026#34;\u0026#34;\u0026#34; self.__init_handle_by_constructor__( _ffi_api.LoopRV # type: ignore # pylint: disable=no-member ) \u0026#34;\u0026#34;\u0026#34;FFI APIs for tvm.tir.schedule\u0026#34;\u0026#34;\u0026#34; import tvm._ffi tvm._ffi._init_api(\u0026#34;tir.schedule\u0026#34;, __name__) # pylint: disable=protected-access _register_object def register_object(type_key=None): def register(cls): \u0026#34;\u0026#34;\u0026#34;internal register function\u0026#34;\u0026#34;\u0026#34; if hasattr(cls, \u0026#34;_type_index\u0026#34;): tindex = cls._type_index else: tidx = ctypes.c_uint() if not _RUNTIME_ONLY: check_call(_LIB.TVMObjectTypeKey2Index(c_str(object_name), ctypes.byref(tidx))) else: # directly skip unknown objects during runtime. ret = _LIB.TVMObjectTypeKey2Index(c_str(object_name), ctypes.byref(tidx)) if ret != 0: return cls tindex = tidx.value _register_object(tindex, cls) return cls if isinstance(type_key, str): return register return register(type_key) 装饰器功能:\n注册对象类型: 装饰器 register_object 的主要作用是将一个类注册到 TVM 的对象系统中，以便 TVM 能够识别和使用该类。 类型键: 装饰器接受一个可选参数 type_key，用于指定该对象的类型键。类型键是一个字符串，用于唯一标识该对象类型。如果 type_key 未指定，则使用类的名称作为类型键。 内部注册函数: 装饰器内部定义了一个名为 register 的函数，该函数负责实际的注册操作。 注册过程: 获取类型索引: register 函数首先获取该类型的索引，如果该类型已经注册，则直接获取已有的索引；否则，调用 TVM 的 C API 函数 TVMObjectTypeKey2Index 获取新的索引。 注册对象: register 函数使用 _register_object 函数将类型索引和类对象注册到 TVM 的对象系统中。 BlockRV类的定义同理。\n@_register_object(\u0026#34;tir.BlockRV\u0026#34;) class BlockRV(Object): \u0026#34;\u0026#34;\u0026#34;A random variable that refers to a block\u0026#34;\u0026#34;\u0026#34; def __init__(self) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;Construct a new BlockRV.\u0026#34;\u0026#34;\u0026#34; self.__init_handle_by_constructor__( _ffi_api.BlockRV # type: ignore # pylint: disable=no-member ) Schedule Primitive Schedule是一组改变了计算的顺序，但保留了计算的语义的变换。它的构造函数需要一个 IRModule实例作为参数。我们以下面的矩阵的 element-wise乘法为例来介绍以下可能的变换。\nimport tvm from tvm import te import numpy as np # Declare some variables for use later n = te.var(\u0026#34;n\u0026#34;) m = te.var(\u0026#34;m\u0026#34;) # Declare a matrix element-wise multiply A = te.placeholder((m, n), name=\u0026#34;A\u0026#34;) B = te.placeholder((m, n), name=\u0026#34;B\u0026#34;) C = te.compute((m, n), lambda i, j: A[i, j] * B[i, j], name=\u0026#34;C\u0026#34;) print(type(A)) s = te.create_schedule([C.op]) # lower 将计算从定义转换成可以调用的IRModule tvm.lower(s, [A, B, C], simple_mode=True).show() tvm.lower tvm.lower 函数是 TVM 中用于将计算图（Compute Graph）降低（lower）到更低级别的表示形式，例如 Relay IR 或 TensorIR ，该函数会返回一个IRModule.\n参数解释:\ninp: 输入参数，可以是以下三种类型之一：tvm.te.schedule.Schedule 对象：表示计算图的调度信息。\ntvm.tir.PrimFunc 对象：表示 TensorIR 的主函数。\nIRModule 对象：表示一个包含多个函数的模块。\nargs: 可选参数，表示输入张量的列表，仅在 inp 是 tvm.te.schedule.Schedule 对象时使用。\nname: 可选参数，表示生成的函数的名称，默认为 \u0026ldquo;main\u0026rdquo;。\nbinds: 可选参数，表示一个字典，用于指定输入张量的绑定，仅在 inp 是 tvm.te.schedule.Schedule 对象时使用。\nsimple_mode: 可选参数，表示是否使用简化的模式，默认为 False。\n上述代码生成的TensorIR如下\n# from tvm.script import ir as I # from tvm.script import tir as T @I.ir_module class Module: @T.prim_func def main(A: T.handle, B: T.handle, C: T.handle): T.func_attr({\u0026#34;from_legacy_te_schedule\u0026#34;: T.bool(True), \u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A_1 = T.match_buffer(A, (m, n), strides=(\u0026#34;stride\u0026#34;, \u0026#34;stride\u0026#34;), buffer_type=\u0026#34;auto\u0026#34;) B_1 = T.match_buffer(B, (m, n), strides=(\u0026#34;stride\u0026#34;, \u0026#34;stride\u0026#34;), buffer_type=\u0026#34;auto\u0026#34;) C_1 = T.match_buffer(C, (m, n), strides=(\u0026#34;stride\u0026#34;, \u0026#34;stride\u0026#34;), buffer_type=\u0026#34;auto\u0026#34;) for i, j in T.grid(m, n): C_2 = T.Buffer((C_1.strides[0] * m,), data=C_1.data, buffer_type=\u0026#34;auto\u0026#34;) A_2 = T.Buffer((A_1.strides[0] * m,), data=A_1.data, buffer_type=\u0026#34;auto\u0026#34;) B_2 = T.Buffer((B_1.strides[0] * m,), data=B_1.data, buffer_type=\u0026#34;auto\u0026#34;) C_2[i * C_1.strides[0] + j * C_1.strides[1]] = A_2[i * A_1.strides[0] + j * A_1.strides[1]] * B_2[i * B_1.strides[0] + j * B_1.strides[1]] Merge Fuse fuse 方法用于将一组连续的循环合并成一个循环。合并后的循环将包含所有原始循环的迭代空间。\n限制条件:\n循环不能包含任何注解或线程绑定，例如 @T.pragma 或 @T.thread_binding 循环必须是连续的，也就是说，每个循环的父循环必须是前一个循环。 循环的起始值必须为 0 每个循环的域不能依赖于其他要合并的循环。 参数:\nloops: 一个循环列表，表示要合并的循环。 preserve_unit_iters: 一个布尔值，表示是否保留单位迭代的循环。默认值为 True，表示保留单位迭代的循环。 返回值:\nfused_loop: 一个新的循环对象，表示合并后的循环。 以 B[i, j]=A[i, j]*2为例，fuse 前对应的TensorIR\nA = te.placeholder((m, n), name=\u0026#34;A\u0026#34;) B = te.compute((m, n), lambda i, j: A[i, j] * 2, name=\u0026#34;B\u0026#34;) func = te.create_prim_func([A, B]) func = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) ir_module = IRModule({\u0026#34;main\u0026#34;: func}) ir_module.show() #----------TensorIR Before Fuse-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) B = T.match_buffer(var_B, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i, j in T.grid(m, n): with T.block(\u0026#34;B\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) fuse 后对应的TensorIR如下\nsch = tvm.tir.Schedule(ir_module) block_B = sch.get_block(\u0026#34;B\u0026#34;) i, j= sch.get_loops(block_B) sch.fuse(i, j) sch.mod.show() #----------TensorIR After Fuse-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) B = T.match_buffer(var_B, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i_j_fused in range(m * n): with T.block(\u0026#34;B\u0026#34;): v_i = T.axis.spatial(m, i_j_fused % (n * m) // n) v_j = T.axis.spatial(n, i_j_fused % n) T.reads(A[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) Split split 方法将一个循环拆分成多个连续的循环，每个循环的迭代次数由 factors 参数指定。\n限制条件:\n要拆分的循环不能有任何注解 (annotation) 或线程绑定 (thread binding). 要拆分的循环必须从 0 开始迭代。 在 factors 列表中，最多只能有一个元素为 None，表示该元素的迭代次数将自动推断。 参数:\nloop: 要拆分的循环对象。 factors: 一个列表，表示拆分后的每个循环的迭代次数。列表中的元素可以是整数、表达式或 None。如果列表中包含 None，则该元素的迭代次数将自动推断。 preserve_unit_iters: 一个布尔值，表示是否保留单位迭代器。如果设置为 True，则会保留单位迭代器，否则会将单位迭代器合并到其他循环中。 disable_predication: 一个布尔值，表示是否禁用谓词 (predicate). 如果设置为 True，则不会创建谓词来保护循环。 以 B[i]=A[i]*2为例，split前对应的TensorIR\nA = te.placeholder((m, ), name=\u0026#34;A\u0026#34;) B = te.compute((m, ), lambda i: A[i] * 2, name=\u0026#34;B\u0026#34;) s = te.create_schedule(B.op) func = te.create_prim_func([A, B]) func = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) ir_module = IRModule({\u0026#34;main\u0026#34;: func}) ir_module.show() #----------TensorIR Before Split-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m = T.int32() A = T.match_buffer(var_A, (m,)) B = T.match_buffer(var_B, (m,)) # with T.block(\u0026#34;root\u0026#34;): for i in range(m): with T.block(\u0026#34;B\u0026#34;): v_i = T.axis.spatial(m, i) T.reads(A[v_i]) T.writes(B[v_i]) B[v_i] = A[v_i] * T.float32(2.0) split 后对应的TensorIR如下\nsch = tvm.tir.Schedule(ir_module) block_b = sch.get_block(\u0026#34;B\u0026#34;) i, = sch.get_loops(block_b) sch.split(i, factors=[None, 32]) sch.mod.show() #----------TensorIR After Split-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m = T.int32() A = T.match_buffer(var_A, (m,)) B = T.match_buffer(var_B, (m,)) # with T.block(\u0026#34;root\u0026#34;): for i_0, i_1 in T.grid((m + 31) // 32, 32): with T.block(\u0026#34;B\u0026#34;): v_i = T.axis.spatial(m, i_0 * 32 + i_1) T.where(i_0 * 32 + i_1 \u0026lt; m) T.reads(A[v_i]) T.writes(B[v_i]) B[v_i] = A[v_i] * T.float32(2.0) Loop Partition loop_partition 方法用于将一个循环分割成多个连续的循环\n限制条件:\n循环不能有注解或线程绑定。 factors 列表中最多只能有一个元素为 None 不支持循环的值未知的情况。 参数:\nloop: 要分割的循环。 factors: 分割因子列表。 preserve_unit_iters: 是否保留单位迭代的循环，默认值为 True。 仍以 B[i, j]=A[i, j]*2为例，loop_partition前对应的TensorIR\nm = 128 n = 128 A = te.placeholder((m, n), name=\u0026#34;A\u0026#34;) B = te.compute((m, n), lambda i, j: A[i, j] * 2, name=\u0026#34;B\u0026#34;) func = te.create_prim_func([A, B]) func = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) ir_module = IRModule({\u0026#34;main\u0026#34;: func}) ir_module.show() #----------TensorIR Before Loop Partition-------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((128,), \u0026#34;float32\u0026#34;), B: T.Buffer((128,), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i in range(128): with T.block(\u0026#34;B\u0026#34;): v_i = T.axis.spatial(128, i) T.reads(A[v_i]) T.writes(B[v_i]) B[v_i] = A[v_i] * T.float32(2.0) 我们指定 factors=[2,64]，相当于把整个循环在2和64处分成3份，loop_partition后对应的TensorIR如下。在使用 loop_partition 后，会创建多个嵌套的块，例如 root、B_i_common 以及每个分割后的循环对应的块，前两个块中会执行一个空的 T.reads 和 T.writes 操作。\nsch = tvm.tir.Schedule(ir_module) block_B = sch.get_block(\u0026#34;B\u0026#34;) [i] = sch.get_loops(block_B) # return a list of LoopRV sch.loop_partition(i, [2, 64]) sch.mod.show() #----------TensorIR After Loop Partition-------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((128,), \u0026#34;float32\u0026#34;), B: T.Buffer((128,), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) with T.block(\u0026#34;root\u0026#34;): T.reads() T.writes() with T.block(\u0026#34;B_i_common\u0026#34;): T.reads() T.writes() with T.block(\u0026#34;B_i0_partition\u0026#34;): T.reads() T.writes() for i0 in range(2): with T.block(\u0026#34;B_i0\u0026#34;): v_i = T.axis.spatial(2, i0) T.reads(A[0:2]) T.writes(B[0:2]) B[v_i] = A[v_i] * T.float32(2.0) with T.block(\u0026#34;B_i1_partition\u0026#34;): T.reads() T.writes() for i1 in range(2, 66): with T.block(\u0026#34;B_i1\u0026#34;): v_i = T.axis.spatial((2, 66), i1) T.reads(A[2:66]) T.writes(B[2:66]) B[v_i] = A[v_i] * T.float32(2.0) with T.block(\u0026#34;B_i2_partition\u0026#34;): T.reads() T.writes() for i2 in range(66, 128): with T.block(\u0026#34;B_i2\u0026#34;): v_i = T.axis.spatial((66, 128), i2) T.reads(A[66:128]) T.writes(B[66:128]) B[v_i] = A[v_i] * T.float32(2.0) Reorder reorder 方法用于重新排列循环的执行顺序。\n限制条件:\n所有循环必须属于同一个循环链，这意味着它们可以按照祖先-后代关系排序，并且它们之间只有单分支循环（即没有 if 语句）。 外层循环的范围不能依赖于内层循环。 每个循环嵌套下的块绑定必须是仿射的，并且块变量必须都为数据并行或归约。 ordered_loops 中不能包含重复的循环。 参数:\nordered_loops: 一个或多个循环列表，表示新的循环执行顺序。 reorder_block_iter_var 方法的功能与reorder相同，只不过它接收的参数为\nblock: 待进行变换的BlockRV对象 new_order: 整数列表，代表该block新的迭代顺序 前面章节已给出很多例子，这里不再赘述。\nParallel parallel方法将一个循环 loopRV 标记为并行执行，即循环的迭代可以同时在多个线程或处理器上执行，从而提高计算效率。\n限制条件:\n为了确保并行化操作的正确性和有效性，该函数需要满足以下条件：\n循环所在的块必须具有阶段流水线属性。这意味着该块中的计算可以被分解成多个阶段，每个阶段可以独立执行。 循环下的所有块必须是完整块或归约块，并且具有仿射绑定。 对于循环下的每个块，循环只能包含在数据并行块迭代的绑定中。 参数:\nloop: 要并行化的循环。 以下面的矩阵的 element-wise乘法为例，parallel前对应的TensorIR为\nA = te.placeholder((m, n), name=\u0026#34;A\u0026#34;) B = te.placeholder((m, n), name=\u0026#34;B\u0026#34;) C = te.compute((m, n), lambda i, j: A[i, j] * B[i, j], name=\u0026#34;C\u0026#34;) func = te.create_prim_func([A, B, C]) func = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) ir_module = IRModule({\u0026#34;main\u0026#34;: func}) ir_module.show() #----------TensorIR Before Parallel-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) B = T.match_buffer(var_B, (m, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i, j in T.grid(m, n): with T.block(\u0026#34;C\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j], B[v_i, v_j]) T.writes(C[v_i, v_j]) C[v_i, v_j] = A[v_i, v_j] * B[v_i, v_j] 对外循环进行parallel，可以看到 T.parallel取代了之前的 T.grid，它会将所有迭代分配到多个线程或处理器上同时执行。\nsch = tvm.tir.Schedule(ir_module) block_c = sch.get_block(\u0026#34;C\u0026#34;) i, j = sch.get_loops(block_c) sch.parallel(i) sch.mod.show() #----------TensorIR After Parallel-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) B = T.match_buffer(var_B, (m, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i, j in T.grid(m, n): with T.block(\u0026#34;C\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j], B[v_i, v_j]) T.writes(C[v_i, v_j]) C[v_i, v_j] = A[v_i, v_j] * B[v_i, v_j] Vectorize vectorize方法将一个循环 loop 标记为向量化执行，这意味着循环的迭代可以被分组为向量，然后在单个指令中执行，从而提高计算效率。\n限制条件:\n循环所在的块必须具有阶段流水线属性，即该块中的计算可以被分解成多个阶段，每个阶段可以独立执行。 循环下的所有块必须是完整块或归约块，并且具有仿射绑定。 对于循环下的每个块，循环只能包含在数据并行块迭代的绑定中。 参数:\nloop: 要向量化的循环。 仍以 B[i, j]=A[i, j]*2为例，loop_partition前对应的TensorIR与 Loop Partition 中的相同。\nVectorize 是一种重要的优化技术，它利用现代处理器中的 SIMD (Single Instruction, Multiple Data)指令，将多个数据同时进行计算，从而提升计算效率。SIMD 指令使用向量寄存器来存储和操作多个数据。向量寄存器的长度通常是 128 位或 256 位，可以存储多个数据。例如，一个 SIMD 指令可以同时对 4 个浮点数进行加法运算。将循环向量化意味着将循环的迭代分组为向量，然后使用 SIMD 指令对这些向量进行操作。T.vectorized 在 TVM 中用来标记一个循环已经被向量化了。\nsch = tvm.tir.Schedule(ir_module) block_b = sch.get_block(\u0026#34;B\u0026#34;) i, j = sch.get_loops(block_b) sch.vectorize(j) sch.mod.show() #----------TensorIR After Vectorize-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) B = T.match_buffer(var_B, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i in range(m): for j in T.vectorized(n): with T.block(\u0026#34;B\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) Unroll unroll 函数接收一个 LoopRV (循环表示变量) 作为输入，作用是将一个循环展开。它本质上是将循环体复制多次，并将循环计数器替换为具体的数值。有以下几个优点\n减少循环控制指令的执行次数，从而提高效率。 将循环体中的数据访问集中在一起，从而提高数据局部性，进而提高缓存命中率。 增加指令级并行性，从而提高程序执行速度。 sch = tvm.tir.Schedule(ir_module) block_b = sch.get_block(\u0026#34;B\u0026#34;) i, j = sch.get_loops(block_b) sch.unroll(i) sch.mod.show() #----------TensorIR After Vectorize-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) B = T.match_buffer(var_B, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i in T.unroll(m): for j in range(n): with T.block(\u0026#34;B\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) (Reverse) Compute at compute_at方法的作用是将一个生产者块（producer block）移动到一个特定循环（loop）的内部，并重新生成由该生产者块引起的循环，以确保生产者块生成的缓冲区区域能够覆盖其消费者块在该循环下所使用的区域。reverse_compute_at则是移动消费者块（consumer block）\n生产者块（producer block）： 生成数据（通常是缓冲区）的代码块。 消费者块（consumer block）： 使用生产者块生成的数据的代码块。 限制条件：\nblock 和 loop 必须在同一个作用域内。 不能将 block移动到它自身所在的循环的祖先循环中。 作用域块必须具有阶段-流水线属性。 作用域块的子树必须满足紧凑数据流条件，即子树中的所有块必须是完整块或归约块。 块不是作用域块的输出块，即块写入的缓冲区在作用域块下分配。 块的所有消费者都在给定的循环下。 我们以 C[i,j]=A[i,j] * 2 + 1为例，compute_at前对应的TesnsorIR如下\nWarning\n我们在创建 prim_func时的输入只使用了 A, C，否则B就不会是作为中间变量的 T.alloc_buffer，调用 compute_at会因为违反第五条报错。\nA = te.placeholder((m, n), name=\u0026#34;A\u0026#34;) B = te.compute((m, n), lambda i, j: A[i, j] * 2, name=\u0026#34;B\u0026#34;) C = te.compute((m, n), lambda i, j: B[i, j] + 1, name=\u0026#34;C\u0026#34;) func = te.create_prim_func([A, C]) fuc = func.with_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;}) ir_module = IRModule({\u0026#34;main\u0026#34;: func}) ir_module.show() #----------TensorIR Before Compute_at-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): B = T.alloc_buffer((m, n)) for i, j in T.grid(m, n): with T.block(\u0026#34;B\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) for i, j in T.grid(m, n): with T.block(\u0026#34;C\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(B[v_i, v_j]) T.writes(C[v_i, v_j]) C[v_i, v_j] = B[v_i, v_j] + T.float32(1.0) 在调用 compute_at之后块B的计算被移动到块C的循环i之下，相当于调用 reverse_compute_at将块C的计算移动到块B的循环i之下，对应的TesnorIR如下\nsch = tvm.tir.Schedule(ir_module) block = sch.get_block(\u0026#34;B\u0026#34;) loop, _ = sch.get_loops(sch.get_block(\u0026#34;C\u0026#34;)) sch.compute_at(block, loop, preserve_unit_loops=False) \u0026#39;\u0026#39;\u0026#39; same way block = sch.get_block(\u0026#34;C\u0026#34;) loop, _ = sch.get_loops(sch.get_block(\u0026#34;B\u0026#34;)) sch.reverse_compute_at(block, loop, preserve_unit_loops=False) \u0026#39;\u0026#39;\u0026#39; sch.mod.show() #----------TensorIR After Compute_at-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): B = T.alloc_buffer((m, n)) for i in range(m): for ax0 in range(n): with T.block(\u0026#34;B\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, ax0]) T.reads(A[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) for j in range(n): with T.block(\u0026#34;C\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(B[v_i, v_j]) T.writes(C[v_i, v_j]) C[v_i, v_j] = B[v_i, v_j] + T.float32(1.0) (Reverse) Compute Inline compute_inline 方法用于将一个块（block）内联到其消费者（consumer）中。简单来说就是将一个块的计算逻辑直接嵌入到使用它结果的块中，从而消除中间块，简化计算流程。reverse_compute_inline则是用于将一个块（block）内联到其生产者（producer）中。\n限制条件：\n要内联的块必须是一个完整的非根块（root 块），并且它必须只产生一个缓冲区。 要内联的块不能是其作用域内的唯一叶节点。 要内联的块的代码体必须是一个缓冲区存储语句，例如 A[i, j, k, ...] = ...。该语句的左侧索引必须是不同的原子变量，并且语句中不能包含其他变量。 以上一节的 C[i,j]=A[i,j] * 2 + 1为例，对应的TensorIR已给出。在执行Compute_inline之后块B的计算逻辑直接嵌入到块C中。\nsch = tvm.tir.Schedule(ir_module) block = sch.get_block(\u0026#34;B\u0026#34;) # same: sch.reverse_compute_inline(sch.get_block(\u0026#34;C\u0026#34;)) sch.compute_inline(block) sch.mod.show() #----------TensorIR After Compute_inline-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i, j in T.grid(m, n): with T.block(\u0026#34;C\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j]) T.writes(C[v_i, v_j]) C[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) + T.float32(1.0) Decompose Reduction decompose_reduction 函数用于将一个归约块（reduction block）分解成两个独立的块初始化块（init block）和更新块（update block）\nNote\n初始化块（init block）： 从归约块的初始化语句（init statement）转换而来。 更新块（update block）： 原始的归约块，但去掉了初始化语句。 限制条件：\n要分解的块必须是一个归约块。 指定的循环必须是归约块的祖先循环。 指定的循环不能低于与归约块变量相关的所有循环。 以矩阵乘法 C = A @ B为例，decompose_reduction前的TensorIR为\nl = te.var(\u0026#34;l\u0026#34;) A = te.placeholder((m, l), name=\u0026#34;A\u0026#34;) B = te.placeholder((l, n), name=\u0026#34;B\u0026#34;) k = te.reduce_axis((0, l), name=\u0026#34;l\u0026#34;) C = te.compute((m, n), lambda i, j: te.sum(A[i, k] * B[k, j], axis=k), name=\u0026#34;C\u0026#34;) #----------TensorIR Before Decompose Reduction-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, l = T.int32(), T.int32() A = T.match_buffer(var_A, (m, l)) n = T.int32() B = T.match_buffer(var_B, (l, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i, j, l_1 in T.grid(m, n, l): with T.block(\u0026#34;C\u0026#34;): v_i, v_j, v_l = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, l_1]) T.reads(A[v_i, v_l], B[v_l, v_j]) T.writes(C[v_i, v_j]) with T.init(): C[v_i, v_j] = T.float32(0.0) C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_l] * B[v_l, v_j] 调用 decompose_reduction 方法后将块 C 分解成一个初始化块和一个更新块，并将初始化块插入到 i 循环之前，对应的TensorIR如下\nsch = tvm.tir.Schedule(ir_module) block_c = sch.get_block(\u0026#34;C\u0026#34;) i, j, k = sch.get_loops(block_c) sch.decompose_reduction(block_c, i) sch.mod.show() #----------TensorIR After Decompose Reduction-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, l = T.int32(), T.int32() A = T.match_buffer(var_A, (m, l)) n = T.int32() B = T.match_buffer(var_B, (l, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i_init, j_init in T.grid(m, n): with T.block(\u0026#34;C_init\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i_init, j_init]) T.reads() T.writes(C[v_i, v_j]) C[v_i, v_j] = T.float32(0.0) for i, j, l_1 in T.grid(m, n, l): with T.block(\u0026#34;C_update\u0026#34;): v_i, v_j, v_l = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, l_1]) T.reads(C[v_i, v_j], A[v_i, v_l], B[v_l, v_j]) T.writes(C[v_i, v_j]) ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tcm-ch10/","summary":"Personal notebook 3.","title":"TVM Learning (3)-Schedule Analysis"},{"content":"Primitive Tensor Function 机器学习编译的过程可以被看作张量函数之间的变换。一个典型的机器学习模型的执行包含许多步将输入张量之间转化为最终预测的计算步骤，其中的每一步都被称为元张量函数 (Primitive Tensor Function) Primitive Tensor Function\n通常来说，一个典型的元张量函数实现的抽象包含了以下成分：存储数据的多维数组，驱动张量计算的循环嵌套以及计算部分本身的语句。下图以上一篇中的向量加法为例子进行了分解。 Tensor Function Elements\n我们称这类抽象为张量程序抽象(Tensor Program Abstraction). 张量程序抽象的一个重要性质是，他们能够被一系列有效的程序变换所改变。例如，我们能够通过一组变换操作（如循环拆分、并行和向量化）将下图左侧的一个初始循环程序变换为右侧的程序。 Tensor Function Transforms\nLearning one Tensor Program Abstraction \u0026ndash; TensorIR 我们对于神经网络的一个基本的 Linear+ReLU 层可以用以下的数学公式表示\n$Y_{ij} = \\sum_k A_{ik} B_{kj}$ $C_{ij} = \\mathbb{ReLU}(Y_{ij}) = \\mathbb{max}(Y_{ij}, 0)$ 其Numpy实现如下，下面的代码直接调用了Numpy的高级API，看起来非常简洁。\n1 2 3 4 5 dtype = \u0026#34;float32\u0026#34; a_np = np.random.rand(128, 128).astype(dtype) b_np = np.random.rand(128, 128).astype(dtype) # a @ b is equivalent to np.matmul(a, b) c_mm_relu = np.maximum(a_np @ b_np, 0) 我们可以将上述程序改写成Low-level Numpy，意味着对于复杂的计算我们使用循环进行表示，并且写出开辟数组空间的过程。\n1 2 3 4 5 6 7 8 9 10 11 def lnumpy_mm_relu(A: np.ndarray, B: np.ndarray, C: np.ndarray): Y = np.empty((128, 128), dtype=\u0026#34;float32\u0026#34;) for i in range(128): for j in range(128): for k in range(128): if k == 0: Y[i, j] = 0 Y[i, j] = Y[i, j] + A[i, k] * B[k, j] for i in range(128): for j in range(128): C[i, j] = max(Y[i, j], 0) 该函数执行以下操作：\n矩阵乘法： 将两个矩阵 A 和 B 相乘，并将结果存储在 Y 中。 ReLU 激活： 将 ReLU 激活函数应用于 Y 的元素，并将结果存储在 C 中。 可以用以下代码来检查上述实现的正确性：\n1 2 3 c_np = np.empty((128, 128), dtype=dtype) lnumpy_mm_relu(a_np, b_np, c_np) np.testing.assert_allclose(c_mm_relu, c_np, rtol=1e-5) 示例 numpy 代码包含了实际过程中实现这些计算时可能会用到的所有元素，用Numpy函数内部工作机制 (Under the Hood) 实现了MM-ReLU。\n开辟多维数组空间。 循环遍历数组的维度。 计算在循环内执行。 我们也可以用上一节的TensorIR来实现，TVMScript 是嵌入在 Python AST 中的领域特定语言的 Dialect, 它本质上是 Python 的一个子集，但添加了一些特定于 TVM 的扩展，例如用于描述计算图的特殊语法和语义。\nDialect 通常指一种语言的变体或子集，它与原始语言共享大部分语法和语义，但也有一些独特的特征。 抽象语法树 (AST) 是源代码的树状表示形式。它将代码的结构以一种层次化的方式呈现，每个节点代表代码中的一个语法元素，例如变量、运算符、函数调用等。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @tvm.script.ir_module class MyModule: @T.prim_func def mm_relu(A: T.Buffer[(128, 128), \u0026#34;float32\u0026#34;], B: T.Buffer[(128, 128), \u0026#34;float32\u0026#34;], C: T.Buffer[(128, 128), \u0026#34;float32\u0026#34;]): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;mm_relu\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) Y = T.alloc_buffer((128, 128), dtype=\u0026#34;float32\u0026#34;) for i, j, k in T.grid(128, 128, 128): with T.block(\u0026#34;Y\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j) vk = T.axis.reduce(128, k) with T.init(): Y[vi, vj] = T.float32(0) Y[vi, vj] = Y[vi, vj] + A[vi, vk] * B[vk, vj] for i, j in T.grid(128, 128): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j) C[vi, vj] = T.max(Y[vi, vj], T.float32(0)) 上述 TensorIR 程序的一个示例实例涵盖了大部分内容，包括\n参数和中间临时内存中的缓冲区声明。 For 循环迭代。 Block 和 Block Axis属性。 Transformation TVM 的 tvm.tir.Schedule 提供了一系列用于调度和优化计算图的变换函数。这些函数允许用户灵活地调整计算顺序、内存访问模式和并行化策略，以提高模型的性能。\n我们可以用以下函数获得计算块和其对应的循环\n1 2 block_Y = sch.get_block(\u0026#34;Y\u0026#34;, func_name=\u0026#34;mm_relu\u0026#34;) i, j, k = sch.get_loops(block_Y) 我们可以使用 split函数将一个循环拆成多个循环，用 reorder函数交换循环的顺序，用 reverse_compute_at 函数移动计算块所在的循环，用 decompose_reduction函数将初始化和归约操作分开。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 j0, j1 = sch.split(j, factors=[None, 4]) sch.reorder(j0, k, j1) block_C = sch.get_block(\u0026#34;C\u0026#34;, \u0026#34;mm_relu\u0026#34;) sch.reverse_compute_at(block_C, j0) block_Y = sch.get_block(\u0026#34;Y\u0026#34;, \u0026#34;mm_relu\u0026#34;) sch.decompose_reduction(block_Y, k) sch.mod.show() # Output @tvm.script.ir_module class Module: @T.prim_func def mm_relu(A: T.Buffer[(128, 128), \u0026#34;float32\u0026#34;], B: T.Buffer[(128, 128), \u0026#34;float32\u0026#34;], C: T.Buffer[(128, 128), \u0026#34;float32\u0026#34;]) -\u0026gt; None: # function attr dict T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;mm_relu\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) # body # with T.block(\u0026#34;root\u0026#34;) Y = T.alloc_buffer([128, 128], dtype=\u0026#34;float32\u0026#34;) for i, j_0 in T.grid(128, 32): for j_1_init in T.serial(4): with T.block(\u0026#34;Y_init\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j_0 * 4 + j_1_init) T.reads() T.writes(Y[vi, vj]) Y[vi, vj] = T.float32(0) for k, j_1 in T.grid(128, 4): with T.block(\u0026#34;Y_update\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j_0 * 4 + j_1) vk = T.axis.reduce(128, k) T.reads(Y[vi, vj], A[vi, vk], B[vk, vj]) T.writes(Y[vi, vj]) Y[vi, vj] = Y[vi, vj] + A[vi, vk] * B[vk, vj] for ax0 in T.serial(4): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j_0 * 4 + ax0) T.reads(Y[vi, vj]) T.writes(C[vi, vj]) C[vi, vj] = T.max(Y[vi, vj], T.float32(0)) 对应的 Low-level Numpy 函数如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def lnumpy_mm_relu_v3(A: np.ndarray, B: np.ndarray, C: np.ndarray): Y = np.empty((128, 128), dtype=\u0026#34;float32\u0026#34;) for i in range(128): for j0 in range(32): # Y_init for j1 in range(4): j = j0 * 4 + j1 Y[i, j] = 0 # Y_update for k in range(128): for j1 in range(4): j = j0 * 4 + j1 Y[i, j] = Y[i, j] + A[i, k] * B[k, j] # C for j1 in range(4): j = j0 * 4 + j1 C[i, j] = max(Y[i, j], 0) Why Do Loop Influence the Exec Time CPU Architecture CPU 带有多级缓存，需要先将数据提取到缓存中，然后 CPU 才能访问它。而且访问已经在缓存中的数据要快得多。CPU 采用的一种策略是获取彼此更接近的数据。 当我们读取内存中的一个元素时，它会尝试将附近的元素（Cache Line）获取到缓存中，当读取下一个元素时它已经在缓存中。 因此，具有连续内存访问的代码通常比随机访问内存不同部分的代码更快。\nLoop Order j1 这一迭代产生了对 B 元素的连续访问。具体来说，它意味着在 j1=0 和 j1=1 时我们读取的值彼此相邻。这可以让我们拥有更好的缓存访问行为。此外，我们使 C 的计算更接近 Y，从而实现更好的缓存行为。\nWays to Create and Interact with TensorIR Create TensorIR via TVMScript 创建 TensorIR 函数的第一种方法是直接在 TVMScript 中编写函数，它也是一种在变换过程中检查张量函数的有用方法。我们可以打印出 TVMScript，进行一些手动编辑，然后将其反馈给 MLC 流程以调试和尝试可能的（手动）变换，然后将变换后的程序重新应用到 MLC 流程中。\nGenerate TensorIR code using Tensor Expression 张量表达式 (TE) 是一种特定领域的语言，它通过 API 之类的表达式描述一系列计算。MM-ReLU 可以通过以下程序完成\n1 2 3 4 5 6 from tvm import te A = te.placeholder((128, 128), \u0026#34;float32\u0026#34;, name=\u0026#34;A\u0026#34;) B = te.placeholder((128, 128), \u0026#34;float32\u0026#34;, name=\u0026#34;B\u0026#34;) k = te.reduce_axis((0, 128), \u0026#34;k\u0026#34;) Y = te.compute((128, 128), lambda i, j: te.sum(A[i, k] * B[k, j], axis=k), name=\u0026#34;Y\u0026#34;) C = te.compute((128, 128), lambda i, j: te.max(Y[i, j], 0), name=\u0026#34;C\u0026#34;) ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch2/","summary":"Personal notebook 2.","title":"TVM Learning (2)-Tensor Program Abstraction Case"},{"content":"My notebook of MLC: https://mlc.ai/summer22-zh\nConstructing Tensor Program by TVMScript 在机器学习编译 (Machine Learning Compilation) 中，Tensor Program 指的是一种表示机器学习模型计算过程的程序，它以张量 (Tensor) 为基本数据单元，并使用张量操作来描述模型的计算步骤。\nVector-Add Example 下面这段代码使用 TVM 的 script 模块定义了一个名为 MyModule 的模块，其中包含一个名为 main 的计算函数。\n该函数实现了简单的向量加法 (vector add) 操作, 两个输入向量 A 和 B 相加，并将结果存储到输出向量 C 中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import tvm from tvm.ir.module import IRModule from tvm.script import tir as T import numpy as np @tvm.script.ir_module class MyModule: @T.prim_func def main(A: T.Buffer[128, \u0026#34;float32\u0026#34;], B: T.Buffer[128, \u0026#34;float32\u0026#34;], C: T.Buffer[128, \u0026#34;float32\u0026#34;]): # extra annotations for the function T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i in range(128): with T.block(\u0026#34;C\u0026#34;): # declare a data parallel iterator on spatial domain vi = T.axis.spatial(128, i) C[vi] = A[vi] + B[vi] 1. 模块定义:\n1 2 3 @tvm.script.ir_module class MyModule: # ... @tvm.script.ir_module: 用于将 MyModule 类定义为一个 TVM 的 IRModule 对象。IRModule 是 TVM 中用于表示计算图 (Computation Graph) 的标准数据结构。 class MyModule:: 定义一个名为 MyModule 的类，该类将包含计算函数。 Decorator 在 Python 中，装饰器 (Decorator) 是一种特殊的函数，它可以用来修改其他函数的行为，而无需直接修改被装饰的函数代码。\n1 2 3 4 5 6 7 8 9 10 11 12 def decorator_function(func): def wrapper(*args, **kwargs): # 在调用被装饰的函数之前执行的操作 result = func(*args, **kwargs) # 在调用被装饰的函数之后执行的操作 return result return wrapper @decorator_function def my_function(x, y): # 被装饰的函数 return x + y decorator_function: 装饰器函数，它接收被装饰的函数作为参数，并返回一个包装函数。 wrapper: 包装函数，它在调用被装饰的函数之前和之后执行一些操作。 @decorator_function: 装饰器语法，将 decorator_function 应用到 my_function 上。 装饰器的工作原理:\n当 Python 遇到 @decorator_function 语法时，它会将 my_function 作为参数传递给 decorator_function。 decorator_function 执行，并返回一个包装函数 wrapper。 wrapper 函数将替换 my_function 的原始定义。 当调用 my_function 时，实际上是在调用 wrapper 函数。 2. 计算函数定义:\n1 2 3 4 5 @T.prim_func def main(A: T.Buffer[128, \u0026#34;float32\u0026#34;], B: T.Buffer[128, \u0026#34;float32\u0026#34;], C: T.Buffer[128, \u0026#34;float32\u0026#34;]): # ... @T.prim_func: 这是一个装饰器，用于将 main 函数定义为一个 TVM 的 prim_func 对象。prim_func 是 TVM 中用于表示底层计算函数的标准数据结构。 def main(...): 定义一个名为 main 的函数，该函数接受三个参数： A: 一个长度为 128 的 float32 类型 Buffer，表示第一个输入向量。 B: 一个长度为 128 的 float32 类型 Buffer，表示第二个输入向量。 C: 一个长度为 128 的 float32 类型 Buffer，用于存储计算结果。 3. 函数属性:\n1 T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) T.func_attr({\u0026quot;global_symbol\u0026quot;: \u0026quot;main\u0026quot;, \u0026quot;tir.noalias\u0026quot;: True})： 设置函数的属性。 global_symbol: 设置函数的全局符号名称为 main。 tir.noalias: 设置函数的别名属性为 True，表示函数不会修改输入缓冲区。 4. 计算循环:\n1 2 3 for i inrange(128): with T.block(\u0026#34;C\u0026#34;): # ... T.block 将计算图分解成多个独立的计算块，每个块对应一个特定的计算任务，可以包含多个迭代器，这些迭代器共同定义了计算块的计算范围。\nfor i in range(128): 定义一个循环，迭代 128 次，用于处理每个向量元素。 with T.block(\u0026quot;C\u0026quot;): 定义一个名为 C 的计算块，该块包含循环的计算逻辑。 5. 迭代器定义:\n1 vi = T.axis.spatial(128, i) vi = T.axis.spatial(128, i): 定义一个名为 vi 的空间迭代器，它遍历 128 个元素，每个元素的索引由 i 确定。 一般来说，空间迭代器的访问顺序对最后结果不产生影响。\n6. 计算操作:\n1 C[vi] = A[vi] + B[vi] C[vi] = A[vi] + B[vi]： 将 A 和 B 中对应元素相加，并将结果存储到 C 中。 我们可以通过 MyModule.show() 来显示构建的IRModule.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @tvm.script.ir_module class Module: @T.prim_func def main(A: T.Buffer[128, \u0026#34;float32\u0026#34;], B: T.Buffer[128, \u0026#34;float32\u0026#34;], C: T.Buffer[128, \u0026#34;float32\u0026#34;]) -\u0026gt; None: # function attr dict T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) # body # with T.block(\u0026#34;root\u0026#34;) for i in T.serial(128): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(128, i) T.reads(A[vi], B[vi]) T.writes(C[vi]) C[vi] = A[vi] + B[vi] Build and Run 我们可以通过 tvm.build函数将一个IRModule转变成可以运行的函数，通过定义的函数名可以获取想要的函数。然后我们可以定义三个 NDArray 数组来调用函数。\n1 2 3 4 5 6 rt_mod = tvm.build(MyModule, target=\u0026#34;llvm\u0026#34;) func = rt_mod[\u0026#34;main\u0026#34;] a = tvm.nd.array(np.arange(128, dtype=\u0026#34;float32\u0026#34;)) b = tvm.nd.array(np.ones(128, dtype=\u0026#34;float32\u0026#34;)) c = tvm.nd.empty((128,), dtype=\u0026#34;float32\u0026#34;) func(a, b, c) tvm.build 函数的参数:\nfunc: 要编译的计算图，可以是 tvm.script.ir_module 对象、tvm.relay.Function 对象或其他支持的计算图类型。 target: 目标平台，例如，llvm -mcpu=core-avx2、cuda、opencl 等。 name: 编译后的模块名称。 Transform the Tensor Program 在 TVM 中，tvm.tir.Schedule 是一个用于对计算图进行手动优化的工具。它允许对计算图中的循环、块和操作进行重排序、融合、并行化等操作，以提高计算效率。\n下面这段代码做了以下优化：\n循环切分: 将循环 i 切分成三个循环，可以更好地利用内存局部性，例如，将 i_1 和 i_2 的大小设置为 4，可以将数据加载到缓存中，减少内存访问次数。 循环重排序: 按照 i_0、i_2 和 i_1 这个顺序执行。 并行化: 将 i_0 并行化，可以利用多核 CPU 或 GPU 的计算能力，提高计算速度 1 2 3 4 5 6 7 8 9 10 11 sch = tvm.tir.Schedule(MyModule) # Get block by its name block_c = sch.get_block(\u0026#34;C\u0026#34;) # Get loops surronding the block (i,) = sch.get_loops(block_c) # Tile the loop nesting. i_0, i_1, i_2 = sch.split(i, factors=[None, 4, 4]) # Reorder the loop. sch.reorder(i_0, i_2, i_1) sch.parallel(i_0) sch.mod.show() 优化后的计算图如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @tvm.script.ir_module class Module: @T.prim_func def main(A: T.Buffer[128, \u0026#34;float32\u0026#34;], B: T.Buffer[128, \u0026#34;float32\u0026#34;], C: T.Buffer[128, \u0026#34;float32\u0026#34;]) -\u0026gt; None: # function attr dict T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) # body # with T.block(\u0026#34;root\u0026#34;) for i_0 in T.parallel(8): for i_2, i_1 in T.grid(4, 4): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(128, i_0 * 16 + i_1 * 4 + i_2) T.reads(A[vi], B[vi]) T.writes(C[vi]) C[vi] = A[vi] + B[vi] Constructing Tensor Program by Tensor Expression Tensor Expression 指的是一种用于描述张量计算的数学表达式。\nConstruct Vector-Add by TE 我们可以通过以下方式来创建和 上一节 一样的IRModule.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # namespace for tensor expression utility from tvm import te # declare the computation using the expression API A = te.placeholder((128, ), name=\u0026#34;A\u0026#34;) B = te.placeholder((128, ), name=\u0026#34;B\u0026#34;) C = te.compute((128,), lambda i: A[i] + B[i], name=\u0026#34;C\u0026#34;) # create a function with the specified list of arguments. func = te.create_prim_func([A, B, C]) # mark that the function name is main func = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) ir_mod_from_te = IRModule({\u0026#34;main\u0026#34;: func}) ir_mod_from_te.show() 定义张量:\nA = te.placeholder((128,), name=\u0026#34;A\u0026#34;) B = te.placeholder((128,), name=\u0026#34;B\u0026#34;) 这两行代码定义了两个名为 A 和 B 的张量，它们都是一维张量，大小为 128。te.placeholder 函数用于创建占位符张量，它代表输入数据。\n定义计算:\nC = te.compute((128,), lambda i: A[i] + B[i], name=\u0026#34;C\u0026#34;) 这行代码定义了一个名为 C 的张量，它表示 A 和 B 的元素相加的结果。te.compute 函数用于定义张量计算，它接受两个参数：\n第一个参数 shape是张量的形状，这里为 (128,)。 第二个参 fcompute数是一个 lambda 函数，它定义了每个元素的计算方式，这里为 A[i] + B[i]，表示 C 的第 i 个元素等于 A 的第 i 个元素加上 B 的第 i 个元素。 创建 PrimFunc:\nfunc = te.create_prim_func([A, B, C]) 这行代码使用 te.create_prim_func 函数创建了一个 PrimFunc 对象，它代表一个 TVM 的基本计算函数。te.create_prim_func 函数接受一个参数，即函数的输入参数列表，这里为 [A, B, C]\n设置函数名称:\nfunc = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) 这行代码将函数的名称设置为 main，with_attr 函数用于设置函数的属性。\n创建 IRModule:\nir_mod_from_te = IRModule({\u0026#34;main\u0026#34;: func}) 这行代码创建了一个 IRModule 对象，它包含了 func 函数，并将该函数存储在 IRModule 的 main 字段中。\nTransforming a matrix multiplication program 下面代码展示了两个 $1024 \\times 1024$ 矩阵相乘的IRModule创建流程。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 M = 1024 K = 1024 N = 1024 # The default tensor type in tvm dtype = \u0026#34;float32\u0026#34; target = \u0026#34;llvm\u0026#34; dev = tvm.device(target, 0) # Algorithm k = te.reduce_axis((0, K), \u0026#34;k\u0026#34;) A = te.placeholder((M, K), name=\u0026#34;A\u0026#34;) B = te.placeholder((K, N), name=\u0026#34;B\u0026#34;) C = te.compute((M, N), lambda m, n: te.sum(A[m, k] * B[k, n], axis=k), name=\u0026#34;C\u0026#34;) # Default schedule func = te.create_prim_func([A, B, C]) func = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) ir_module = IRModule({\u0026#34;main\u0026#34;: func}) ir_module.show() func = tvm.build(ir_module, target=\u0026#34;llvm\u0026#34;) # The module for CPU backends. a = tvm.nd.array(np.random.rand(M, K).astype(dtype), dev) b = tvm.nd.array(np.random.rand(K, N).astype(dtype), dev) c = tvm.nd.array(np.zeros((M, N), dtype=dtype), dev) func(a, b, c) # Create evaluation function evaluator = func.time_evaluator(func.entry_name, dev, number=1) print(\u0026#34;Baseline: %f\u0026#34; % evaluator(a, b, c).mean) time_evaluator 是 IRModule 用于评估计算图执行时间的方法。它可以帮助测量不同硬件平台上不同计算图的性能，并进行优化。\ntime evaluator 1 IRModule.time_evaluator(func, args, number=1, repeat=1, min_repeat_ms=0, f_type=0) 参数解释:\nfunc: 要评估的计算图函数。 args: 计算图函数的输入参数，可以是张量或其他数据结构。 number: 每次运行计算图的次数，默认值为 1。 repeat: 重复运行计算图的次数，默认值为 1。 min_repeat_ms: 最小运行时间，单位为毫秒。如果计算图运行时间小于 min_repeat_ms，则会继续运行直到达到 min_repeat_ms。默认值为 0。 f_type: 运行模式，可以是 0（默认值）、1 或 2。 0：正常运行模式。 1：仅执行编译，不运行计算图。 2：仅执行运行，不编译计算图。 func.time_evaluator 的返回值:\nfunc.time_evaluator 返回一个函数，该函数可以用来执行评估并返回一个包含性能指标的字典。\n性能指标:\nmean: 平均运行时间，单位为毫秒。 median: 中位数运行时间，单位为毫秒。 min: 最小运行时间，单位为毫秒。 max: 最大运行时间，单位为毫秒。 std: 标准差，单位为毫秒。 代码的大部分流程相同，我们来看计算部分。\n定义约简轴 (Reduce axis):\nk = te.reduce_axis((0, K), \u0026#34;k\u0026#34;) 这行代码定义了一个名为 k 的约简轴，表示在矩阵乘法操作中进行求和的维度，范围为 (0, K)\n定义输入矩阵 (Placeholders):\nA = te.placeholder((M, K), name=\u0026#34;A\u0026#34;)\rB = te.placeholder((K, N), name=\u0026#34;B\u0026#34;) 这两行代码定义了两个名为 A 和 B 的输入矩阵，它们分别代表矩阵乘法的两个输入矩阵。A 的形状为 (M, K)，B 的形状为 (K, N)\n定义输出矩阵 (Compute):\nC = te.compute((M, N), lambda m, n: te.sum(A[m, k] * B[k, n], axis=k), name=\u0026#34;C\u0026#34;) 这行代码定义了一个名为 C 的输出矩阵，它表示矩阵乘法的结果。C 的形状为 (M, N)，采用 te.sum计算结果。\nte.sum 1 te.sum(expr, axis=None, keepdims=False, where=None) 参数解释:\nexpr: 要进行求和的表达式，可以是张量、标量或其他表达式。 axis: 要进行求和的轴，可以是整数、元组或列表。如果 axis 为 None，则对所有轴进行求和。 keepdims: 布尔值，表示是否保留求和后的维度。如果为 True，则保留求和后的维度，并将其大小设置为 1。如果为 False，则删除求和后的维度。 where: 布尔值张量，表示要进行求和的元素。如果 where 为 None，则对所有元素进行求和。 创建的IRModule如下所示。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @tvm.script.ir_module class Module: @T.prim_func def main(A: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], C: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;]) -\u0026gt; None: # function attr dict T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) # body # with T.block(\u0026#34;root\u0026#34;) for i0, i1, i2 in T.grid(1024, 1024, 1024): with T.block(\u0026#34;C\u0026#34;): m, n, k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, i2]) T.reads(A[m, k], B[k, n]) T.writes(C[m, n]) with T.init(): C[m, n] = T.float32(0) C[m, n] = C[m, n] + A[m, k] * B[k, n] 我们可以将循环拆分成外层循环和内层循环可以提高数据局部性。内层循环访问的数据更接近，可以有效利用缓存。下面代码的 block_size 参数控制了内层循环的大小，选择合适的块大小可以最大程度地利用缓存。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 sch = tvm.tir.Schedule(ir_module) block_c = sch.get_block(\u0026#34;C\u0026#34;) # Get loops surronding the block (y, x, k) = sch.get_loops(block_c) block_size = 32 yo, yi = sch.split(y, [None, block_size]) xo, xi = sch.split(x, [None, block_size]) sch.reorder(yo, xo, k, yi, xi) sch.mod.show() func = tvm.build(sch.mod, target=\u0026#34;llvm\u0026#34;) # The module for CPU backends. c = tvm.nd.array(np.zeros((M, N), dtype=dtype), dev) func(a, b, c) evaluator = func.time_evaluator(func.entry_name, dev, number=1) print(\u0026#34;after transformation: %f\u0026#34; % evaluator(a, b, c).mean) 创建的IRModule如下所示。实际中我们会测试很多不同 block_size对应的执行时间来选择最合适的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @tvm.script.ir_module class Module: @T.prim_func def main(A: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], C: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;]) -\u0026gt; None: # function attr dict T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) # body # with T.block(\u0026#34;root\u0026#34;) for i0_0, i1_0, i2, i0_1, i1_1 in T.grid(32, 32, 1024, 32, 32): with T.block(\u0026#34;C\u0026#34;): m = T.axis.spatial(1024, i0_0 * 32 + i0_1) n = T.axis.spatial(1024, i1_0 * 32 + i1_1) k = T.axis.reduce(1024, i2) T.reads(A[m, k], B[k, n]) T.writes(C[m, n]) with T.init(): C[m, n] = T.float32(0) C[m, n] = C[m, n] + A[m, k] * B[k, n] ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch1/","summary":"Personal notebook 1.","title":"TVM Learning (1)-Tensor Program Abstraction in Action"},{"content":"IRModule: The key concept in TVM Unity IRModule 是张量函数的集合，代表我们需要在模型中执行的计算子集。例如，在 MLC-LLM 中，它可以是一个 Transformer 模块。 机器学习编译框架中的 IRModule 就像深度学习框架中的张量，是一切的基础。在整个编译流程中，模型将以 IRModule 的形式导入，然后以 IRModule 到 IRModule 的方式进行转换和优化，然后我们就可以在任何支持的平台上将 IRModule 转化为可运行的模块。IRModule 可以用 python 方式访问，例如，我们可以用 python AST 的形式显示它，以便检查、调整和调试。unity 的主要设计目标之一是实现单一抽象，将所有主要元素封装在同一模块中。这样，我们就能在此基础上进行有机的增量转换。\nTVM Unity.png\nTVMScript 是 IRModule 的 python AST 格式，用于在整套转换过程中检查 IRModules 并与之交互。与 IRModule 的交互都可以使用 TVMScript 在 python 中进行。用户将 TVMScript 解析为 IRModule 内部结构，使用 python API 操作 IRModule，并将 IRModule 打印为 TVMScript 格式。\nTVMScript Examples 用 Pytorch 框架实现矩阵乘法一般调用 torch.matmul 或者使用 @ 算子。\n1 2 3 4 5 6 7 8 9 10 import torch a = torch.randn((3, 4)) b = torch.randn((4, 5)) print(torch.matmul(a, b)) \u0026#39;\u0026#39;\u0026#39; tensor([[ 2.5387, 2.2756, -2.2032, 2.5928, -3.6539], [ 2.0151, 0.0628, -0.8041, -1.6947, 0.2884], [-0.8118, -0.0453, 0.0742, -1.2028, 1.3722]]) \u0026#39;\u0026#39;\u0026#39; 在 Relax 中可以用 IRModule 实现相同的功能。\n1 2 3 4 5 6 7 8 9 10 11 from tvm.script import ir as I from tvm.script import relax as R @I.ir_module class Module: @R.function def main(A: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;), B: R.Tensor((4, 5), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((3, 5), dtype=\u0026#34;float32\u0026#34;): with R.dataflow(): lv: R.Tensor((3, 5), dtype=\u0026#34;float32\u0026#34;) = R.matmul(A, B, out_dtype=\u0026#34;void\u0026#34;) R.output(lv) return lv 通过上述 TVMScript 创建的 IRModule 是一个完全图级别的抽象，只包含一个 R.function (Relax 函数： IRModule 中计算图的表示形式) 上述示例包含 Relax 函数中的两个重要概念：高级 Relax 算子和数据流块。\nRelax 函数包含高级 Relax 算子 R.matmul，它描述计算图中的节点，不包含其底层实现的信息。一个高级 Relax 算子可以映射到不同的底层实现，TVM Unity 的编译流程会生成性能良好的实现。 R.dataflow() 是数据流块的一个重要作用域注解。具体来说，在数据流块内，所有操作都必须是 side-effect free. 而在数据流块之外，操作可能包含副作用。 A more complex TVMScript example: 2-layer MLP 下面我们以一个更复杂的两层 MLP 为例，模型结构如下。\n2-layer MLP\n其对应的 Pytoch 实现如下\n1 2 3 4 5 6 7 8 9 10 11 class MLP(torch.nn.Module): def __init__(self, *args, **kwargs) -\u0026gt; None: super(MLP, self).__init__(*args, **kwargs) self.linear1 = torch.nn.Linear(784, 128) self.linear2 = torch.nn.Linear(128, 10) def forward(self, x): x = self.linear1(x) x = torch.nn.functional.relu(x) x = self.linear2(x) return x 对应的 IRModule 的 TVMScript 表示如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @I.ir_module class Module: @R.function def main(inp_0: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), weight1: R.Tensor((128, 784), dtype=\u0026#34;float32\u0026#34;), bias1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;), weight2: R.Tensor((10, 128), dtype=\u0026#34;float32\u0026#34;), bias2: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(weight1, axes=None) lv_1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.matmul(inp_0, lv, out_dtype=\u0026#34;void\u0026#34;) lv1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.add(lv_1, bias1) lv2: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.nn.relu(lv1) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(weight2, axes=None) lv3: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.matmul(lv2, lv4, out_dtype=\u0026#34;void\u0026#34;) lv4_1: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.add(lv3, bias2) R.output(lv4_1) return lv4_1 上述 Relax 函数只包含高级 Relax 算子。在 pytorch 中，torch.nn.Linear 计算 $y = xW^T + b$ 在 relax 中，转置由 permute_dims 实现，其次是 矩阵乘法和加法分别由 R.matmul 和 R.add 实现。\nCompilation Flow in TVM Unity 将模型导入 IRModule. 对于静态模型，我们可以使用 pytorch dynamo 将 pytorch 程序跟踪为 fx 图，然后转换为 IRModule。然而，LLM 通常是动态的，因为序列长度和 kv cache 长度都是可变的。在这种情况下，我们需要直接在 IRModule 中建立模型。第一步可以抽象为 LLM -\u0026gt; IRModule 转换。 优化模型。与传统编译器一样，我们可以在 IRModule 上应用 pass (IRModule 到 IRModule 的变换，改变计算但保留了原始 IRModule 的语义)。在这一步中，我们的目标是加速模型计算。在消费类设备上以适当速度运行 LLM 的大多数关键技术，如量化、算子融合和张量函数调度，都是在这一步实现的。 在设备上部署 IRModule。对于每个 IRM 模块，我们都能将其转化为可运行模块，并在 tvm 运行时支持的任何平台上运行。IRModule 上的每个函数都将成为环境中的本地可运行函数。 以下是 2 层 MLP 模型的编译流程\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from tvm import relax import tvm from tvm.ir.module import IRModule mod = MLPModule def optimize_and_deploy(mod: IRModule): # step 2. Optimization # Use default graph optimization pipeline mod = relax.pipeline.get_pipeline()(mod) # Use default tensor function scheduling with tvm.target.Target(\u0026#34;cuda\u0026#34;): mod = tvm.tir.transform.DefaultGPUSchedule()(mod) # Step 3. Deploy to GPU ex = relax.build(mod, \u0026#34;cuda\u0026#34;) vm = relax.VirtualMachine(ex, tvm.cuda()) # test correctness import numpy as np input_np = np.random.rand(1, 784).astype(\u0026#34;float32\u0026#34;) weight1_np = np.random.rand(128, 784).astype(\u0026#34;float32\u0026#34;) bias1_np = np.random.rand(1, 128).astype(\u0026#34;float32\u0026#34;) weight2_np = np.random.rand(10, 128).astype(\u0026#34;float32\u0026#34;) bias2_np = np.random.rand(1, 10).astype(\u0026#34;float32\u0026#34;) tvm_nd_arrays = [tvm.nd.array(np_array, device=tvm.cuda()) for np_array in [input_np, weight1_np, bias1_np, weight2_np, bias2_np]] # call into the runnable function converted from IRModule nd_res = vm[\u0026#34;main\u0026#34;](*tvm_nd_arrays) numpy_res = (input_np @ weight1_np.T + bias1_np) @ weight2_np.T + bias2_np np.testing.assert_allclose(numpy_res, nd_res.numpy(), rtol=1e-5) optimize_and_deploy(mod) Build IRModule in Pytorch Style 构建 IRModule 最直接的方法是手动编写 TVMScript。这种方法适用于小型模型，但 LLM 的 IRModule 非常庞大和复杂，手工编写并不现实。TVM Unity 提供了另一个类 nn.Module，可以像 pytorch 模块一样轻松构建 IRModule. 用 Pytorch 手动编写的一个 Linear 层如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 class TorchLinear(torch.nn.Module): def __init__(self, in_features, out_features, bias=True): super().__init__() self.in_features = in_features self.out_features = out_features self.weight = torch.nn.Parameter(torch.randn(out_features, in_features)) if bias: self.bias = torch.nn.Parameter(torch.randn(out_features)) else: bias = None def forward(self, x): return x @ self.weight.T + self.bias 在 Relax 中的实现如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from tvm.relax.testing import nn class RelaxLinear(nn.Module): def __init__(self, in_features, out_features, dtype: str, bias=True) -\u0026gt; None: super(RelaxLinear, self).__init__() self.in_features = in_features self.out_features = out_features self.weight = nn.Parameter((out_features, in_features), dtype, name=\u0026#34;linear_weight\u0026#34;) if bias: self.bias = nn.Parameter((1, out_features), dtype, name=\u0026#34;linear_bias\u0026#34;) else: self.bias = None def forward(self, x: relax.Expr) -\u0026gt; relax.Var: return nn.emit(relax.op.linear(x, self.weight, self.bias)) 与 Pytorch 的结构非常相似，只是前向函数实际上并不执行计算。它使用作为输入传递的占位符跟踪算子的计算图。 nn.emit(relax.op.linear(input, self.weight, self.bias)) 表示在构建的 IRModule 中添加高级 linear 算子。 通过堆叠 1 个线性层、1 个 relu 层和 1 个线性层，就可以构建例子中的 MLP.\n1 2 3 4 5 6 7 8 9 10 11 class RelaxMLP(nn.Module): def __init__(self, in_features, hidden_dims, out_features, dtype=\u0026#34;float32\u0026#34;) -\u0026gt; None: super(RelaxMLP, self).__init__() self.linear1 = RelaxLinear(in_features, hidden_dims, dtype) self.lienar2 = RelaxLinear(hidden_dims, out_features, dtype) def forward(self, x: relax.Expr) -\u0026gt; relax.Var: hidden = self.linear1(x) hidden = nn.emit(relax.op.nn.relu(hidden)) out = self.lienar2(hidden) return out 直接调用 nn.Module 的前向函数就可以代替原先在 with bb.dataflow(): 下的操作，将 nn.Module 构建成 IRModule 的步骤如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def build_relax(mod: nn.Module): # relax.BlockBuilder can construct end-to-end models step by step in an IRModule that starts empty bb = relax.BlockBuilder() # relax nn.Module model = mod(784, 128, 10) # create a function called \u0026#34;main\u0026#34; in the IRModule with bb.function(\u0026#34;main\u0026#34;): # define input placeholder to the relax nn.Module input = nn.Placeholder((1, 784), dtype=\u0026#34;float32\u0026#34;, name=\u0026#34;input\u0026#34;) # build dataflow block with bb.dataflow(): # call forward function logits = model(input) # The params of the constructed IRModule params = [input] + model.parameters() # return value of the dataflow block gv = bb.emit_output(logits) # return value and params of the Relax function bb.emit_func_output(gv, params) return bb.get() build_relax(RelaxMLP).show() #------------------------------ @I.ir_module class Module: @R.function def main(input: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), linear_weight: R.Tensor((128, 784), dtype=\u0026#34;float32\u0026#34;), linear_bias: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;), linear_weight_1: R.Tensor((10, 128), dtype=\u0026#34;float32\u0026#34;), linear_bias_1: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(linear_weight, axes=None) lv1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.matmul(input, lv, out_dtype=\u0026#34;void\u0026#34;) lv2: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.add(lv1, linear_bias) lv3: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.nn.relu(lv2) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(linear_weight_1, axes=None) lv5: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.matmul(lv3, lv4, out_dtype=\u0026#34;void\u0026#34;) lv6: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.add(lv5, linear_bias_1) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = lv6 R.output(gv) return gv Custom Operator Support 在某些情况下，我们要表示的模型包含一些自定义运算符，而这些运算符没有被提供的 Relax 运算符覆盖（如 LLaMA 中的 Rotary Embedding），或者我们要进行底层优化以加速单个内核。下面介绍如何在 IRModule 中编写自定义算子。\nTensorIR: Low-level tensor function TVM Unity 在 IRModule TensorIR 中提供了底层张量函数的表示方法，用户可以在其中定义自定义操作符并执行细粒度调度。 下面对比了一个矩阵乘法生成的 TVMScript TensorIR 代码和 low-level Pytorch 代码。@T.prim_func装饰器表示下面的函数是一个原始的张量函数，包含运算符实现的底层细节。\nDestination Passing T.prim_func 采用 destination-passing 约定，即在函数外部明确分配输入和输出空间，并将其作为参数传入。destination-passing 约定可以对内存分配进行精细调度，例如合并两个实时间隔不相交的变量的内存分配，这是在内存有限的设备上运行大型模型的关键。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from tvm.script import tir as T @T.prim_func def matmul(rxplaceholder: T.Buffer((T.int64(1), T.int64(784)), \u0026#34;float32\u0026#34;), rxplaceholder_1: T.Buffer((T.int64(784), T.int64(128)), \u0026#34;float32\u0026#34;), matmul: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: True}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1, k in T.grid(T.int64(1), T.int64(128), T.int64(784)): with T.block(\u0026#34;matmul\u0026#34;): v_i0, v_i1, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, k]) T.reads(rxplaceholder[v_i0, v_k], rxplaceholder_1[v_k, v_i1]) T.writes(matmul[v_i0, v_i1]) with T.init(): matmul[v_i0, v_i1] = T.float32(0) matmul[v_i0, v_i1] = matmul[v_i0, v_i1] + rxplaceholder[v_i0, v_k] * rxplaceholder_1[v_k, v_i1] def torch_matmul(X: torch.Tensor, W: torch.Tensor): Y = torch.zeros(1, 128, dtype=\u0026#34;float32\u0026#34;) for i in range(1): for j in range(128): for k in range(784): Y[i, j] = Y[i, j] + X[i, k] * W[k, j] return Y Interaction between Relax function and TensorIR 为了支持 T.prim_func（底层部分）和 R.function（高层部分）之间的交互，TVM 引入了 call_tir, Relax 中的一个特殊运算符，用于描述计算图中的节点及其张量函数的实现。 torch_call_tir 是一个参考实现，用来说明 call_tir 的含义。实际上，可以有不同的底层方法来优化执行。例如，我们可能会选择提前分配所有输出内存，然后再运行执行。\n1 2 3 4 def torch_call_tir(prim_func, inputs, out_sinfo): res = torch.zeros(*out_sinfo.shape, dtype=out_sinfo.dtype) prim_func(*inputs, res) return res 下面是 2 层 MLP 的 IRModule，我们使用 call_tir 和张量原语函数 matmul 来替换 Relax 运算符 R.matmul\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 @I.ir_module class Module: @T.prim_func def tir_matmul(rxplaceholder: T.Buffer((T.int64(1), T.int64(784)), \u0026#34;float32\u0026#34;), rxplaceholder_1: T.Buffer((T.int64(784), T.int64(128)), \u0026#34;float32\u0026#34;), matmul: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: True}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1, k in T.grid(T.int64(1), T.int64(128), T.int64(784)): with T.block(\u0026#34;matmul\u0026#34;): v_i0, v_i1, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, k]) T.reads(rxplaceholder[v_i0, v_k], rxplaceholder_1[v_k, v_i1]) T.writes(matmul[v_i0, v_i1]) with T.init(): matmul[v_i0, v_i1] = T.float32(0) matmul[v_i0, v_i1] = matmul[v_i0, v_i1] + rxplaceholder[v_i0, v_k] * rxplaceholder_1[v_k, v_i1] @R.function def main(inp_0: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), weight1: R.Tensor((128, 784), dtype=\u0026#34;float32\u0026#34;), bias1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;), weight2: R.Tensor((10, 128), dtype=\u0026#34;float32\u0026#34;), bias2: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(weight1, axes=None) lv1 = R.call_tir(cls.tir_matmul, [inp_0, lv], out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv2: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.add(lv1, bias1) lv3: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.nn.relu(lv2) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(weight2, axes=None) lv5: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.matmul(lv3, lv4, out_dtype=\u0026#34;float32\u0026#34;) lv6: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.add(lv5, bias2) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = lv6 R.output(gv) return gv Implement Custom TensorIR Function nn.Module 不仅支持高级 Relax 运算符，还支持自定义 TensorIR 函数。 要构建 TensorIR 函数并在 Relax 图中调用它，我们需要使用 nn.emit_te(f_te_expr,*args)。\nf_te_expr 是一个返回张量表达式（Tensor Expression，TE）的函数，是描述张量计算的 DSL. args 是 f_te_expr 的参数。 创建 TE 表达式的方法如下\n1 te.compute(out_shape, f_compute) 它描述如下的计算模式 itertools.product 在 Python 的 itertools 模块中，product 函数用于生成可迭代对象的笛卡尔积。\nproduct 函数接受一个或多个可迭代对象作为参数，并返回一个迭代器，该迭代器生成所有可能的组合，其中每个组合包含来自每个输入可迭代对象的单个元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import itertools letters = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;] numbers = [1, 2, 3] for item in itertools.product(letters, numbers): print(item) # output： # (\u0026#39;a\u0026#39;, 1) # (\u0026#39;a\u0026#39;, 2) # (\u0026#39;a\u0026#39;, 3) # (\u0026#39;b\u0026#39;, 1) # (\u0026#39;b\u0026#39;, 2) # (\u0026#39;b\u0026#39;, 3) product 函数还支持重复元素，可以使用 repeat 参数指定每个可迭代对象需要重复的次数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 letters = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;] for item in itertools.product(letters, repeat=3): print(item) # output： # (\u0026#39;a\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;a\u0026#39;) # (\u0026#39;a\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;) # (\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;a\u0026#39;) # (\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;) # (\u0026#39;b\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;a\u0026#39;) # (\u0026#39;b\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;) # (\u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;a\u0026#39;) # (\u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;) product 应用场景\n组合生成: 生成所有可能的组合，例如密码生成、彩票号码生成等。 多维数组遍历: 遍历多维数组的所有元素。 测试用例生成: 生成测试用例，覆盖所有可能的输入组合。 1 2 3 4 from itertools import product for indices in product(range(s) for s in out_shape): out_tensor[*indices] = f_compute(*indices) 用 emit_te 实现 Linear 层来构建 IRModule 的代码如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 from tvm import te class RelaxLinearWithEmitTE(nn.Module): def __init__(self, in_features, out_features, dtype=\u0026#34;float32\u0026#34;, bias=True) -\u0026gt; None: super(RelaxLinearWithEmitTE, self).__init__() self.in_features = in_features self.out_features = out_features self.weight = nn.Parameter((out_features, in_features), dtype, name=\u0026#34;linear_weight\u0026#34;) if bias: self.bias = nn.Parameter((1, out_features), dtype, name=\u0026#34;linear_bias\u0026#34;) else: self.bias = None def forward(self, x: relax.Expr) -\u0026gt; relax.Var: def my_linear(x, w, b=None): out_sinfo = x.shape[:-1] + [self.out_features,] k = te.reduce_axis((0, self.out_features), name=\u0026#34;k\u0026#34;) out = te.compute(out_sinfo, fcompute=lambda i, j: te.sum(x[i, k] * w[j, k], axis=k), name=\u0026#34;matmul\u0026#34;) if b is not None: return out else: return te.compute(out_sinfo, fcompute=lambda i, j: out[i, j] + b[0, j], name=\u0026#34;add_bias\u0026#34;) return nn.emit_te(my_linear, x, self.weight, self.bias) class RelaxMLPwithEmitTE(nn.Module): def __init__(self, in_features, hidden_num, out_features, dtype=\u0026#34;float32\u0026#34;): self.linear1 = RelaxLinearWithEmitTE(in_features, hidden_num, dtype=dtype) self.linear2 = RelaxLinearWithEmitTE(hidden_num, out_features, dtype=dtype) def forward(self, input: relax.Expr) -\u0026gt; relax.Var: hidden = self.linear1(input) hidden = nn.emit(relax.op.nn.relu(hidden)) out = self.linear2(hidden) return out build_relax(RelaxMLPwithEmitTE).show() #---------------------------------------------------- @I.ir_module class Module: @T.prim_func(private=True) def my_linear(input: T.Buffer((T.int64(1), T.int64(784)), \u0026#34;float32\u0026#34;), linear_weight: T.Buffer((T.int64(128), T.int64(784)), \u0026#34;float32\u0026#34;), linear_bias: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), matmul: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i, j, k in T.grid(T.int64(1), T.int64(128), T.int64(128)): with T.block(\u0026#34;matmul\u0026#34;): v_i, v_j, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) T.reads(input[v_i, v_k], linear_weight[v_j, v_k]) T.writes(matmul[v_i, v_j]) with T.init(): matmul[v_i, v_j] = T.float32(0.0) matmul[v_i, v_j] = matmul[v_i, v_j] + input[v_i, v_k] * linear_weight[v_j, v_k] @T.prim_func(private=True) def my_linear1(lv1: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), linear_weight: T.Buffer((T.int64(10), T.int64(128)), \u0026#34;float32\u0026#34;), linear_bias: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;), matmul: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i, j, k in T.grid(T.int64(1), T.int64(10), T.int64(10)): with T.block(\u0026#34;matmul\u0026#34;): v_i, v_j, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) T.reads(lv1[v_i, v_k], linear_weight[v_j, v_k]) T.writes(matmul[v_i, v_j]) with T.init(): matmul[v_i, v_j] = T.float32(0.0) matmul[v_i, v_j] = matmul[v_i, v_j] + lv1[v_i, v_k] * linear_weight[v_j, v_k] @R.function def main(input: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), linear_weight: R.Tensor((128, 784), dtype=\u0026#34;float32\u0026#34;), linear_bias: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;), linear_weight_1: R.Tensor((10, 128), dtype=\u0026#34;float32\u0026#34;), linear_bias_1: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv = R.call_tir(cls.my_linear, (input, linear_weight, linear_bias), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.nn.relu(lv) lv2 = R.call_tir(cls.my_linear1, (lv1, linear_weight_1, linear_bias_1), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = lv2 R.output(gv) return gv ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch9/","summary":"Add Model Architeture in MLC LLM","title":"TVM Learning (11)-Add Model Architeture in MLC LLM"},{"content":"Hello, I am WITHER.\n🔬 Research Interests Training and Inference Acceleration LLM Reasoning High Performance Computing 🧑‍🎓 Education 2019.09 - 2023.06: Bachelor of Communication Engineering, China University of Geoscience, Wuhan, China. 2023.09 - Now: Shanghai Jiao Tong University, Shanghai, China. 💻 Work Experience 2024.06 - Present: Full-time Intern, Shanghai AI Laboratory, Shanghai, China. Research on inference acceleration and graph optimization of Large Language Models. Research on knowlege injection and reasoning of Large Language Models. 🎉 Achievements 📰 Publications 🤪 Hobbies 🧙 Animations, Comics and Games ","permalink":"http://localhost:1313/about_me/","summary":"\u003cp\u003eHello, I am WITHER.\u003c/p\u003e\n\u003ch2 id=\"-research-interests\"\u003e🔬 Research Interests\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eTraining and Inference Acceleration\u003c/li\u003e\n\u003cli\u003eLLM Reasoning\u003c/li\u003e\n\u003cli\u003eHigh Performance Computing\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-education\"\u003e🧑‍🎓 Education\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e2019.09 - 2023.06\u003c/strong\u003e: Bachelor of Communication Engineering, China University of Geoscience, Wuhan, China.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2023.09 - Now\u003c/strong\u003e: Shanghai Jiao Tong University, Shanghai, China.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-work-experience\"\u003e💻 Work Experience\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e2024.06 - Present\u003c/strong\u003e: Full-time Intern, Shanghai AI Laboratory, Shanghai, China.\n\u003cul\u003e\n\u003cli\u003eResearch on inference acceleration and graph optimization of Large Language Models.\u003c/li\u003e\n\u003cli\u003eResearch on knowlege injection and reasoning of Large Language Models.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-achievements\"\u003e🎉 Achievements\u003c/h2\u003e\n\u003ch2 id=\"-publications\"\u003e📰 Publications\u003c/h2\u003e\n\u003ch2 id=\"-hobbies\"\u003e🤪 Hobbies\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e🧙 Animations, Comics and Games\u003c/li\u003e\n\u003c/ul\u003e","title":"About Me"},{"content":"Basic Transformer Block 符号含义表示如下\nSymbol Description Symbol Description a 注意力头数 n 并行度大小 b batchsize s 序列长度 h 隐藏层维度 v 词汇表大小 L tranformer layer 层数数 基本 transformer block 结构如下，输入是形状为 (b, s, h) 的三维张量，其中 b 为 batchsize. 每个变压器层由一个具有注意头的自注意块组成，随后是一个具有两层的 MLP，第一层将隐藏维度增加到 4h，然第二层将其减少到 h. 每个变压器层的输入和输出具有相同的形状.\nBasic Transformer Architecture Self-attention Block\nModel Parameters QKVO Linear 的权重形状均为 h*h, 偏置形状均为 h*1；MLP 两个 Linear 的权重形分别为 h*4h 和 4h*h，偏置形状分别为 4h*1 和 h*1. 因此每个模型的参数量为 (12hh+13h)L，占用大小还要 x2.\nNote\n在传统的 LLM 中最后还需要经过 logits layer，将隐藏层维度 h 转换成词汇表大小 v，参数量还要加上 hv.\nFLOPs Calculation 对于浮点数计算量 (FLOPs)，只考虑占主要部分的通用矩阵乘法 (GEMMs). 对于 Attention 部分，QKV Linear 的计算量为 6bshh，attention matrix (Q@K.T) 的计算量为 2bssh, attention@V 的计算量为 2bssh, O Linear 的计算量为 2bshh. MLP 的两个线性层的每一个计算量都为 8shh. 相加后得到正向传播中总计算量为 (24bshh + 4bssh)L bytes.\nNote\n在传统的 LLM 中最后还需要经过 logits layer，将隐藏层维度 h 转换成词汇表大小 v，其计算量为 2bshv.\n反向传播因为要计算输入和权重的梯度，其计算量为正向传播的两倍，因此整个模型的计算量为 72BLshh(1+s/(6h)).\nActivation Memory 激活的定义为在前向传播中产生并且需要在反向传播中进行梯度计算的张量，即不包括模型参数和优化器状态。并且不考虑相对非常小的激活。例如 LayerNorm 层的输入还需要张量每个通道的均值和方差 (大小均为 bs)，由于 h 大小通常超过 1k，因此只考虑输入张量所占激活的大小 bsh，忽略掉 2bs. 假设数据格式为 fp16/bf16，即每个数据占用 2 bytes 的存储空间，需要特殊处理的是 dropout 层的 mak，每个元素均为 unsigned int，只占用 1 byte.\nAttention 部分激活占用如下 (共计 11bsh + 5bssa)\nQKV Linear: 三个线性层需要的输入相同，占用 2bsh bytes. Q@K.T: 需要存储 Q 和 K，占用 4bsh bytes. Softmax: 需要存储大小为 2bssa bytes 的输入 Softmax droppot: 需要存储一个大小为 bssa bytes 的 mask. attention@V: 需要存储 dropout 的输出和 V，分别占用 2bssa 和 2bsh bytes. O Linear: 需要存储注意力的输出，占用 2bsh bytes. O dropout 需要存储一个大小为 bsh bytes 的 mask; MLP (共计 18bsh): 第一层和第二层的输入分别占用 2bsh 和 8bsh bytes. GeLU 层需要第二层的输入用于反向传播，占用大小为 8bsh bytes. dropout 需要一个大小为 bsh bytes 的 mask.\nLayerNorm (共计 4bsh): 需要存储该层的输入，占用 2bsh bytes. 一共有两个 LayerNorm.\n加起来就可以得到每个 transformer block 需要激活大小为 bsh(34+5sa/h) bytes.\nTensor Parallelsim Megatron 张量并行 的思想是将输入进行连续的两个矩阵乘法的第一个按列切分成 t 份，第二个按行切分成 t 份. 在 Transformer block 中体现为利用多头注意力本身的并行性将 Attention 计算中的 QKV 按列进行切分，O Linear 的权重按行进行切分；MLP 中第一个线性层的权重按列进行切分，第二个权重按行进行切分。\n在这种并行方式下，前向传播和反向传播均需要进行 2 次 All-Reduce 通信，由于每次 All-Reduce 通信可以看作 Reduce-Scatter + All-Gather, 因此每次每个设备的通信量为 8αbsh bytes，其中 α=(n-1)/n.\n对于激活，2*LayerNorm, QKV Linear 的输入, O dropout mask，MLP 第一层的输入和 MLP dropout 不会被切分，因此每个设备每个 block 要占用的激活为 bsh(10+24/n+5as/(hn))\n2D Tensor Parallelsim\n2D张量并行将激活第一个矩阵的列切分成 m*n 份，第二个权重 (权重形状为 he) 的行被切分成 m 份，列被切分成 n 份。以下图为例，Rank0-Rank2为通信组 x，Rank0-Rank1为 通信组 y. 第一个矩阵经过一次通信组 y 的 AllGather 后与本设备第二个矩阵进行矩阵乘积，得到的部分和经过一次通信组 x 间的ReduceScatter，计算出正确结果。第一次 AllGather 通信每个设备通信的大小为 bsh(n-1)/(mn). 第二次 ReduceScatter 通信每个设备通信的大小为 bse(m-1)/n.\nMegatron Sequence Parallelsim Megatron 张量并行中 LayerNorm 以及 O Linear 和 MLP 之后的 dropouts 在每个设备中都有一个副本。这些模块不需要大量的计算，但需要占用 10bsh bytes 大小的激活内存。Megatron-SP 沿着序列维度划分这些模块来减少激活内存，但需要配合 TP 一起使用，本质上是将 TP 中的 All-Reduce 拆成了在 TP 前进行 All-Gather 和在 TP 后进行 Reduce-Scatter. 但除去第一个 LayerNorm 外的每一个模块的激活都得到了切分。Megatron-SP 这里选择每个设备存储自己的部分并在反向传播中插入一次额外的 All-Gather 通信。因此通信量为 10bsh, 每个设备每个 block 需要占用的激活为 bsh/n*(34+5as/h)\nTransformer layer with Megatron-SP\nPipeline Parallelsim 流水线张量并行仅仅将 L 个 Transformer block 平均分到 p 个设备上，并没有划分激活所要占用的内存。在考虑 1F1B 策略下 batchsize 进一步被划分成 p 个 micro batch. 第一个 stage 必须存储 p 个 micro batch 的激活。每个 stage 包含 L/p 层，所以无论流水线并行大小 p 如何，第一个 stage 必须存储 p × L/p = L 层的激活值。在 Megatron-LM 中的 interleaving schedule 需要存储 L(1 + (p−1)/(pm)) 层的激活，其中 m 是 interleaving 的数量。\nNote\n在使用 output-tensor-deallocation 优化 (输出传到下一个 stage 后就释放) 的情况下，可以为为每个设备节省 bshr 内存，其中 r 是每个设备正在运行的 micro batch 的数量，在第一个 stage r=p 时达到峰值。\nDeepseed-Ulysses Sequence Parallel DS-SP 也是利用多头注意力的并行性，首先将输入按序列维度切分到每个设备上，每个设备占有的输入形状为 b*(s/n)*h. 在计算 Attention 之前对 QKV 进行 All-to-All 通信变成按隐藏层维度切分 ((a 要能整除 n))，通信量为 6αbsh/n bytes. 计算完 score@v 之后再进行一次 All-to-All 通信，通信量为 2αbsh/n bytes，总计通信量为 8αbsh/n bytes. 激活占用上 Attention 中 Softmax 及其 dropout mask 和 attention 没有被切分，激活占用量为 bsh(34/n+5sa/h). 因此，它不适合 GQA 和 MQA 情况, GQA 的并行度被限制在了组数，MQA 则完全没法使用。而且由于张量并行也需要在 a 维度上进行划分，SP-Ulysses 和 TP 是冲突的。\nRing-Attention Sequence Parallel Ring-SP 实际上为环状的 FlashAttention，将输入沿着序列维度切分到每个设备上，在 Attention 计算过程中每个设备向相邻设备通信 KV 并更新自己的 Softmax 矩阵，通信量为 4bsh bytes. 激活占用和 DS-SP 一样为 bsh(34/n+5sa/h).\nUnified Sequence Parallel USP 将 SP 进程组分割成两个正交的进程组：SP-Ring 进程组和 SP-Ulysses 进程组。可以将其视为一个 2D mesh ，每一列上运行 SP-Ring，每一行上运行 SP-Ulysses. 具体方法为 QKV 的切分 和 All-to-All 和 DS-Ulysses 相同，然后采用 Ring-Attention 的方式进行计算。如果遇到使用 casual mask 的情况需要加上 balance load 策略，把序列长度分为 2*(ring_degree) 大小，按照 0-\u0026gt;1-\u0026gt;\u0026hellip;-\u0026gt;(ring_degree-1)-\u0026gt;(ring_degree-1)-\u0026gt;\u0026hellip;-\u0026gt;0 的顺序进行分配。USP 消除了 SP-ulysses的头数限制。并且 USP可以通过调整 SP-Ulysses 进程组数目来更好的适应不同带宽的网络结构，可以让 All-to-All 操作在高带宽中运行，而异步 P2P 通信在低带宽部分运行。\nComparsion of Different Parallelsim in Training Communication (FWD+BWD)\rSplit Dim\rMemory\rParam\rCost\rAct\rCost\rP/G\rOS\rAct\rDS-SP\rAllReduce\r12O(h²)\r8*All2All\r(8/N)O(bsh)\ra/s\rP+G\r6P\rA/N\rRing-SP\rAllReduce\r12O(h²)\rP2P\r4O(bsh)\rL/L\rP+G\r6P\rA/N\rDP\rAllReduce\r12O(h²)\r0\r0\rb/b\rP+G\r6P\rA/N\rZeRO1\rAllGather + ReduceScatter\r12O(h²)\r0\r0\ra/s\rP+G\r6P/N A/N\rUSP + ZeRO1\rAllGather + ReduceScatter\r12O(h²)\rP2P + 8*All2All\r≤ 4O(bsh)\ra/s\rP+G\r6P/N\rA/N\rUSP + ZeRO2\rAllGather + ReduceScatter\r12O(h²)\rP2P + 8*All2All\r≤ 4O(bsh)\ra/s\rP+(G/N)\r6P/N\rA/N\rUSP + ZeRO3\r2*AllGather + ReduceScatter\r18O(h²)\rP2P + 8*All2All\r≤ 4O(bsh)\ra/s\r(P+G)/N\r6P/N\rA/N\rTP\r0\r0\r4*AllReduce\r8O(bsh)\ra/h\r(P+G)/N\r6P/N\rαA\rMegatron-SP\r0\r0\r6*AllGather + 4*ReduceScatter\r10O(bsh)\ra/h\r(P+G)/N\r6P/N\rA/N\rAnalysis All2All 通信使得 DS-SP 的通信开销大于 DP. 使用 Ring-SP 时，尽管异步的 P2P 通信是可以重叠的，理想的性能也是只与 DP 相同。因此只有当批 batchsize 不足以进行切分时才考虑使用 SP. Megatron-SP 通信量高于 DS-SP 和 Ring-SP. SP-Ring 对于 KV 的通信可以与计算重叠。Megatron-SP 的通信量不会随着并行度的增加而减少，而 DS-SP 可以做到。 DS-SP 和 Ring-SP 具有较低的激活通信成本，但需要同步梯度和参数。不过参数通信量相对于激活通信量较小，可以通过计算进行重叠。GQA/MQA 也可以降低它俩的通信成本，而 Megatron-SP 不受影响。 相同配置下使用 USP+Zero3 来代替 Megatron-SP 并不会增加可训练序列的长度。但与 Megatron-SP 相比，USP 能在通过提高并行度来增加可以训练的序列长度。 Megatron-SP 并行维度受限于注意力头数目。USP 可以通过提高 Ring-SP 的并行度来扩展，以在大规模配置下训练更大模型。 Sora Inference Modeling Analysis Process 我们需要准备模型的输入：\n隐空间采样的噪声 z，形状与想生成的视频时常和分辨率相关。生成 1s 的视频为 25.5 frames，经过 VAE Encoder 后输出的通道数为 4，帧数会被压缩到 num_frame*5//17，分辨率的长宽分别被压缩到原来的 1/8. 因此 z 的形状应该为 (B, 4, num_frame*5//17, img_size[0]//8, img_size[1]//8). 输入的 prompt 会经过 DeepFloyd/t5-v1_1-xxl 编码，该编码器最大的 token 数为 300，编码维度为 4096，文本长度不足时会填充到 300. 因此编码后的 prompt 的形状为 (B, 1, 300, 4096). 当前去噪的时间步 t，形状为 (B, ) 生成视频的 fps，形状为 (1, ) 还需要准备相关的模型配置，包括 mesh 形状，sub_mesh 的形状，并行策略以及 stage_ids. 如果需要将模型的 transformer block 切分成多段，则需要配置 sub_mesh 和 stage_ids.\nmesh_shape: (num_x, num_y) submesh_shape: [(num_x, num_y, loc_x, loc_y), ] stage_ids: [(submesh0_start, submesh0_end), ] strategy: 并行策略 然后初始化模型，Sora 的整体结构如下 我们初始化一个 Pipeline(包含整个流程的函数)，它会有一个或多个 Stage 用于保存模型的不同层，与 stage_ids 中对应。我们将模型分解成 Embedding_blocks(PatchEmbed3D, TimestepEmbedder, SizeEmbedder, Captionembedder, t_block), STDiT3_blocks 和 T2IFinalLayer. 将这个分解函数作为 Pipeline 的 sharding_func.\nOpen-Sora\nInit Pipeline 我们需要根据配置以及 PipePatch 并行度和 SP 并行度初始化 Pipeline. 这其中会根据 stage_ids 分配每个 Stage 保存模型的哪些层以及对应的 submesh 大小。\ndef construct_stages(self, submeshes: List[Tuple], stages_ids: List[Tuple]): # construct layers for each stage first_part, module_list, last_part = self.parse_func(self.model) modules = list() num = len(stages_ids) for idx in range(num): submesh = submeshes[idx] stage_id = stages_ids[idx] # get stage layers from user config stage ids in module list layers = list(module_list[stage_id[0]: stage_id[1] + 1]) if idx == 0 and first_part is not None: # concat module first part(if exists) bef module list to stage_0 layers = first_part + layers if idx == num - 1 and last_part is not None: # concat module last part(if exists) aft module list to last stage layers.extend(last_part) modules.append(layers) # deepcopy module for xla device tracing use stage_module = [copy.deepcopy(layer) for layer in layers] self.stages.append( Stage(idx, stage_module, submesh, self, )) return modules Write Sharding Function 要根据选择的不同的并行策略对每个 Stage 的模型权重，输入，输出进行切分。这里同样我们单独处理 Embedding_blocks, STDiT3_blocks 和 T2IFinalLayer. 让 stage0 包括对 Embedding_blocks 的处理，stage(N-1) 包括对 T2IFinalLayer 的处理。需要注意的是 DS-ulysses 我们需要对 Q@K.T 的结果 和 S@V 的结果也进行切分 SPMD 才会插入正确的 All2All，因此这部分只能放在网络的 forward 里面进行。\ndef shard_sora_one_stage(modules, shard_strategy, mesh): total_len = len(modules) # first 5 modules are embedding layers for i in range(0, 5): shard_sora_embedding(modules[i], shard_strategy, mesh) for i in range(5, total_len - 2): shard_sora_block(modules[i][0], shard_strategy, mesh) # shard spatial shard_sora_block(modules[i][1], shard_strategy, mesh) # shard temporal shard_sora_final(modules[-1], shard_strategy, mesh) def shard_sora_first_stage(modules, shard_strategy, mesh): for i in range(0, 5): shard_sora_embedding(modules[i], shard_strategy, mesh) for i in range(5, len(modules)): shard_sora_block(modules[i][0], shard_strategy, mesh) # shard spatial shard_sora_block(modules[i][1], shard_strategy, mesh) # shard temporal def shard_sora_stage(modules, shard_strategy, mesh): for module in modules: shard_sora_block(module[0], shard_strategy, mesh) # shard spatial shard_sora_block(module[1], shard_strategy, mesh) # shard temporal def shard_sora_last_stage(modules, shard_strategy, mesh): total_len = len(modules) for i in range(0, total_len - 2): shard_sora_block(modules[i][0], shard_strategy, mesh) # shard spatial shard_sora_block(modules[i][1], shard_strategy, mesh) # shard temporal # skip norm layer mark sharding shard_sora_final(modules[total_len - 1], shard_strategy, mesh) Construct Pipeline 然后为了处理多 stage 的情况，我们需要保存每个 stage 的输入和输出的形状。这一步相当于放到 cuda 上重走一遍整个模型的 forward，记录下每一层输入和输出的形状，保存为 json 一遍。实际上对于每个固定生成大小的视频进行一次就行，下次直接读取这个文件。因为现在都采用 xformers.ops.memory_efficient_attention，需要输入张量在 cuda 上，我们需要手动在模型的 forward 函数中写一个 navie 的 attention 计算流程好让 torch_xla 能对张量进行跟踪。\nTrace mhlo Graph 根据上一步得到的每个 Stage 的输入形状，创建输入张量，放入 xla_device 上，执行 forward. 最后导出输出的 mhlo 计算图。这里需要注意第一个 stage 包含多个非连续的模块，因此需要单独处理，最后一个 stage 最后一层的输入与其他 block 不同，因此也要单独处理。\ndef trace_stage_mhlo_graph(self, check_res=False): \u0026#34;\u0026#34;\u0026#34; trace stage nn modules to mhlo graph \u0026#34;\u0026#34;\u0026#34; # (NOTE): construct xla mesh before trace tensors generate, # i.e., before any xla device call to avoid xla computation client construct xla_mesh = None if self.shard_func is not None: xla_mesh = self._construct_stage_xla_mesh() # create mesh from submesh info # Create xla device trace tensors, move module to xla device if self.stage_id == 0: self.trace_tensors = self._generate_trace_tensors() else: z = self.parent_pipeline.stages[self.stage_id -1].outputs y = self.parent_pipeline.stages[0].y_embedded.to(\u0026#39;cpu\u0026#39;).to(xm.xla_device()) t_mlp = self.parent_pipeline.stages[0].t_mlp.to(\u0026#39;cpu\u0026#39;).to(xm.xla_device()) self.trace_tensors = [z, y, t_mlp] for module in self.modules: if isinstance(module, tuple): for mod in module: mod.to(\u0026#39;cpu\u0026#39;).to(xm.xla_device()) # first load to cpu else: module.to(\u0026#39;cpu\u0026#39;).to(xm.xla_device()) # get pipeline exec mode assert self.parent_pipeline is not None exec_mode = self.parent_pipeline.exec_mode # load lora cofifg lora_config = self.parent_pipeline.lora_config print(\u0026#34;Enter trace mhlo graph for stage: \u0026#34;, self.stage_id) # Trigger shard func to mark sharding the model if self.shard_func is not None: self.shard_func(self.modules, self.shard_strategy, xla_mesh) if exec_mode == EXEC_MODE.INFER: # set stage name \u0026amp; dump file path self._set_stage_name_dump_file( exec_mode, \u0026#34;fw\u0026#34;) num_sampling_steps = 30 num_timesteps = 1000 timesteps = [(1.0 - i / num_sampling_steps) * num_timesteps for i in range(num_sampling_steps)] # FIXME: 原先是为每个stage单独生成trace_tensor, 现在要把上一个的结果传给下一个 stage #for i in range(30): start = sum(self.parent_pipeline.pipeline_patches_height_list[:self.stage_id - 1]) if self.stage_id != 0 else 0 end = start + self.parent_pipeline.pipeline_patches_height_list[self.stage_id] if self.stage_id == 0: outputs = self._forward([self.trace_tensors[0][...,start:end,:]] + self.trace_tensors[1:], xla_mesh) # outputs is a list else: outputs = self._forward(self.trace_tensors, xla_mesh) if check_res: # check xla results compared to gpu results check_result_error(self.outputs, outputs) else: # use torch xla _get_xla_tensors_hlo interface # to eliminate redundant live tensors as ret values os.environ[\u0026#34;XLA_DUMP_POST_OPTIMIZATIONS\u0026#34;] = \u0026#34;true\u0026#34; torch_xla._XLAC._get_xla_tensors_hlo(outputs) Analyze mhlo Graph 接下来我们要遍历上一步得出的 mhlo 图。\nOpView 从根节点的 ir 开始遍历上一步导出的整个计算图。根据传入 ir 的类型定义调用对应的 visit 函数读取其属性进行操作。主要通过 rsqrt 的位置来划分一个 Transformer block 中第几个 dot 和 dot_general 对应的是什么操作。对于 Sora 来说划分情况如下。这里需要注意的是 mhlo 图记录的是拓扑排序的顺序，不是程序顺序执行的顺序，因此第一个 block 会掺杂着 Embedding_blocks 的一些 dot 操作。因此我们从第二个 block 的第一个 rsqrt 位置开始统计。\ndef collect_rms_ops(self): rms_collector = RMSCollector() rms_collector.visit(self.root_op) self.rms_locs = rms_collector.rms_locs # construct attention block \u0026amp; ffn block ranges # exclude the rsqrt in T2IFinalLayer att_rm_locs = self.rms_locs if len(self.rms_locs) % 2 == 0 else self.rms_locs[:-1] for i in range(8, len(att_rm_locs), 4): # a block has 4 rsqrt, start from 2nd block to avoid embedding self.spt_qkv_ranges.append((att_rm_locs[i+0], att_rm_locs[i+1])) self.spt_attn_ranges.append((att_rm_locs[i+2], att_rm_locs[i+3])) self.cro_attn_ranges.append((att_rm_locs[i+2], att_rm_locs[i+3])) for i in range(8, len(att_rm_locs), 4): # ORG: range(8, len(att_rm_locs), 4): start = self.rms_locs[i+3] if i+4 \u0026gt;= len(self.rms_locs): end = None else: end = self.rms_locs[i+4] self.ffn_ranges.append((start, end)) module operator RMSNorm(x) Self Attention dot(x, qkvLinear.weight) RMSNorm(q) RMSNorm(k) dot_general(q, k) dot_general(s, v) dot(attn, oLinear.weight) Cross Attention dot(x, qLinear.weight) dot(y, kvLinear.weight) dot_general(q, k) dot_general(s, v) dot(attn, oLinear.weight) RMSNorm(x) Feed Forward Network dot(x, upLinear.weight) dot(x, downLinear.weight) def visit_dot(self, node): dot_lineno = _parse_loc_lineno(node) if self.block_cnt \u0026lt; len(self.spt_attn_ranges): spt_att_range = self.spt_attn_ranges[self.block_cnt] cro_att_range = self.cro_attn_ranges[self.block_cnt] spt_qkv_range = self.spt_qkv_ranges[self.block_cnt] ffn_range = self.ffn_ranges[self.block_cnt] # lie in RMS ops closed attention block if dot_lineno \u0026gt; spt_att_range[0] and dot_lineno \u0026lt; spt_att_range[1]: #import pdb;pdb.set_trace() self.att_block_dots.append(node) self.spt_dot_cnt += 1 elif dot_lineno \u0026gt; cro_att_range[0] and dot_lineno \u0026lt; cro_att_range[1]: self.att_block_dots.append(node) self.cro_att_dot_cnt += 1 # lie ffn block if dot_lineno \u0026gt; spt_qkv_range[0] and dot_lineno \u0026lt; spt_qkv_range[1]: self.spt_qkv_cnt += 1 self.ffn_block_dots.append(node) # pixart pass elif dot_lineno \u0026gt; ffn_range[0]: if ffn_range[1] is not None: if dot_lineno \u0026lt; ffn_range[1]: self.ffn_block_dots.append(node) self.ffn_dot_cnt += 1 else: if self.ffn_dot_cnt \u0026lt; 2: self.ffn_block_dots.append(node) self.ffn_dot_cnt += 1 # Traversal of one block if self.spt_qkv_cnt == 1 and self.spt_att_dot_cnt == 4 and \\ self.spt_dot_cnt == 4 and self.ffn_dot_cnt == 2: self.attention_blocks.append(self.att_block_dots) self.ffn_blocks.append(self.ffn_block_dots) self.block_cnt += 1 # reset each block level counters self.spt_qkv_cnt = 0 self.spt_att_dot_cnt = 0 self.spt_dot_cnt = 0 self.ffn_dot_cnt = 0 self.att_block_dots = [] self.ffn_block_dots = [] self.generic_visit(node) 保存好一个 Transformer block 中每个 dot 或 dotgeneral 对应的是什么操作后，我们便可以访问这个 ir. 这里需要注意只要两个相乘的矩阵有一个是二维张量 (比如线性层的权重)，mhlo 都会将另一个 reshape 成二维张量。dot 算子 (jaxlib.mlir.dialects._mhlo_ops_gen.DotOp) 两个操作数都是二维的张量，qkvLinear 对应的是第一个 dot 操作。左操作数的 shape 为 (BST,3C). 当两个相乘的矩阵都是 3 维及以上张量的时候就会生成 dot_general 该算子的两个相乘的矩阵都会被 reshape 成三维张量。Self-Attention 的第一个 dot_general 左操作数的 shape 为 (BTN_A,S,C). 这样我们就可以得到 BT=(BST)/S, N_A=(BTN_A)/(BT). 同样我们可以得到 OLinear, FFN 中 upLinear 和 downLinear 权重的形状. 以及 Cross-Attention 模块的对应信息。由于之前遍历是从第二个 block 开始的，因此总层数要 ＋1. 最后将得到的参数打包成一个字典返回。\nCommunication View 我们以同样的方式定义各种集合通信算子的 visit 函数用于评估该算子的通信量，遍历到对应的 ir 后调用它。\nAllReduce 将所有的数据通过规约操作集成到各个设备中。\nAllReduce\n在 Ring-AllReduce 的 ReduceScatter 步骤中，每个进程发送 M 个元素 N-1 次，总共为 M(N-1). 在 AllGather 步骤中，每个进程发送它计算的块的结果。这是额外的 M 个元素发送了 N-1 次。总的通信量加起来是 2M(N-1).\nRing-AllReduce\nAll-Gather 示意图如下，每个设备开始拥有初始的一部分数据，通信后每个设备都有一份完整的数据。总的通信量为 M(N-1).\nAllGather\nAll2All 示意图如下，每个设备把自己的第 i 块数据发送给第 i 个设备。\nAll2All\n基于 Bruck 算法的 All2All 流程如下\n局部循环移位 (Local Shift of Data-Blocks) 每个进程将其本地的数据块重新排列，进行初始的循环移位。对于进程 p 和数据块索引 i: R[i]=S[(p+i)%P]. 其中 S[i] 是进程本地初始的数据，R[i] 是移位后的数据。 全局通信 (Global Communication) 一共进行 log(P) 次通信。 每一步中每个进程将一部分数据发送给相邻的进程，并接收相邻进程发送的数据。若数据块索引 i 用 radix-2 表示的第 k 位为 1，则数据块会被发送到目标进程。 对于进程 p: 发送数据到进程 ((p + 2^k) % P)，接收来自进程 ((p - 2^k) % P) 的数据。 每次发送后，进程将接收到的数据更新到其本地数据中。 局部逆向移位 (Local Inverse Shift of Data-Blocks) 在完成所有全局通信之后，每个进程执行逆向移位，以恢复数据块的正确顺序。对于每个数据块索引 i: R[i]=R[(p−i+P)%P] 在进程是 2 次幂的情况下每个设备每次要通信 M*P/2大小的数据，总共为 MPlog(P)/2.\nExample of the Bruck Algorithm with 4 Processes\nTFLOPS View 计算量主要分成两种，element-wise 的操作计算量为元素个数。两个形状分别为 mxk 和 kxn 的矩阵相乘计算量为 2mkn. 被计入 element-wise 操作的算子有 add, subtract, multiply, divide, rsqrt, negate, exponential. 被计入矩阵乘法的算子有 dot, dot_general.\nPerformance Analysis 我们根据提取出的 Transformer block 的信息送入性能分析器进行分析. tx8 的配置如下\nParameter Value TILE_NUM 16 SRAM (MB) 3 NOC BW (GB/s) 128 DRAM BW (GB/s) 100 DRAM LATENCY (us) 0.1 GEMM (TFLOPS) 8 VECTOR (TOPS) 0.0625 HOP LATENCY (us) 0.01 根据提取出的信息构建的 STDiT 的 spt_blk, tmp_blk, cross_blk 的参数字典如下.\nspatial_config = {\u0026#34;B\u0026#34;: self.config[\u0026#34;B_spt\u0026#34;], \u0026#34;S_Q\u0026#34;: self.config[\u0026#34;S_Q_spt\u0026#34;], \u0026#34;S_KV\u0026#34;: self.config[\u0026#34;S_KV_spt\u0026#34;], \u0026#34;D_QKV\u0026#34;: self.config[\u0026#34;D_QKV\u0026#34;], \u0026#34;H_QKV\u0026#34;: self.config[\u0026#34;H_QKV\u0026#34;], \u0026#34;N_A\u0026#34;: self.config[\u0026#34;N_A\u0026#34;], \u0026#34;H_A\u0026#34;: self.config[\u0026#34;H_A\u0026#34;], \u0026#34;D_O\u0026#34;: self.config[\u0026#34;D_O_spt\u0026#34;], \u0026#34;H_O\u0026#34;: self.config[\u0026#34;H_O_spt\u0026#34;] } temporal_config = {\u0026#34;B\u0026#34;: self.config[\u0026#34;B_tmp\u0026#34;], \u0026#34;S_Q\u0026#34;: self.config[\u0026#34;S_Q_tmp\u0026#34;], \u0026#34;S_KV\u0026#34;: self.config[\u0026#34;S_KV_tmp\u0026#34;], \u0026#34;D_QKV\u0026#34;: self.config[\u0026#34;D_QKV\u0026#34;], \u0026#34;H_QKV\u0026#34;: self.config[\u0026#34;H_QKV\u0026#34;], \u0026#34;N_A\u0026#34;: self.config[\u0026#34;N_A\u0026#34;], \u0026#34;H_A\u0026#34;: self.config[\u0026#34;H_A\u0026#34;], \u0026#34;D_O\u0026#34;: self.config[\u0026#34;D_O_tmp\u0026#34;], \u0026#34;H_O\u0026#34;: self.config[\u0026#34;H_O_tmp\u0026#34;] } cross_config = {\u0026#34;B\u0026#34;: self.config[\u0026#34;B_cro\u0026#34;], \u0026#34;S_Q\u0026#34;: self.config[\u0026#34;S_Q_cro\u0026#34;], \u0026#34;S_KV\u0026#34;: self.config[\u0026#34;S_KV_cro\u0026#34;], \u0026#34;D_QKV\u0026#34;: self.config[\u0026#34;D_QKV\u0026#34;], \u0026#34;H_QKV\u0026#34;: self.config[\u0026#34;H_QKV\u0026#34;],\u0026#34;N_A\u0026#34;: self.config[\u0026#34;N_A\u0026#34;], \u0026#34;H_A\u0026#34;: self.config[\u0026#34;H_A\u0026#34;], \u0026#34;D_O\u0026#34;: self.config[\u0026#34;D_O_cro\u0026#34;], \u0026#34;H_O\u0026#34;: self.config[\u0026#34;H_O_cro\u0026#34;], \u0026#34;D_FU\u0026#34;: self.config[\u0026#34;D_FU\u0026#34;], \u0026#34;H_FU\u0026#34;: self.config[\u0026#34;H_FU\u0026#34;], \u0026#34;D_FD\u0026#34;: self.config[\u0026#34;D_FD\u0026#34;], \u0026#34;H_FD\u0026#34;: self.config[\u0026#34;H_FD\u0026#34;]} 根据这些参数再构建每个层的输入输出形状，计算类型和计算量，以 Gate_ResAdd 为例:\nGB = 2**30 class Gate_ResAdd(): \u0026#39;\u0026#39;\u0026#39; Construct each op after MHSA on the config file \u0026#39;\u0026#39;\u0026#39; def __init__(self, config: dict, name: str) -\u0026gt; None: self.config = config self.name = name # {name:{type:\u0026#34;\u0026#34;, size:\u0026#34;\u0026#34;, ishape:[], wshape:[]/None, oshape:[]}} self.ops = {} self.construct_model() def construct_model(self): GB = 2**30 ResAdd_input_shape = [self.config[\u0026#39;B\u0026#39;], self.config[\u0026#39;S_Q\u0026#39;], self.config[\u0026#39;D_O\u0026#39;]] ResAdd_weight_shape = [1, self.config[\u0026#39;D_O\u0026#39;]] ResAdd_output_shape = ResAdd_input_shape ResAdd_compute = 2*ResAdd_input_shape[0]*ResAdd_input_shape[1]*ResAdd_input_shape[2]/GB self.ops[self.name+\u0026#34;_\u0026#34;+\u0026#34;ResAdd\u0026#34;] = {\u0026#34;name\u0026#34;:\u0026#34;ResAdd\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Vector\u0026#34;, \u0026#34;ishape\u0026#34;: ResAdd_input_shape, \u0026#34;wshape\u0026#34;: ResAdd_weight_shape, \u0026#34;oshape\u0026#34;: ResAdd_output_shape, \u0026#34;compute\u0026#34;: ResAdd_compute} 就像这样构建整个 Transformer block 的所有操作\nclass STDIT2_block(): def __init__(self, config) -\u0026gt; None: self.config = config # {name:{type:\u0026#34;\u0026#34;, size:\u0026#34;\u0026#34;, ishape:[], wshape:[]/None, oshape:[]}} self.ops = {} self.construct_model() def construct_model(self): spatial_config = {\u0026#34;B\u0026#34;: self.config[\u0026#34;B_spt\u0026#34;], \u0026#34;S_Q\u0026#34;: self.config[\u0026#34;S_Q_spt\u0026#34;], \u0026#34;S_KV\u0026#34;: self.config[\u0026#34;S_KV_spt\u0026#34;], \u0026#34;D_QKV\u0026#34;: self.config[\u0026#34;D_QKV\u0026#34;], \u0026#34;H_QKV\u0026#34;: self.config[\u0026#34;H_QKV\u0026#34;], \u0026#34;N_A\u0026#34;: self.config[\u0026#34;N_A\u0026#34;], \u0026#34;H_A\u0026#34;: self.config[\u0026#34;H_A\u0026#34;], \u0026#34;D_O\u0026#34;: self.config[\u0026#34;D_O_spt\u0026#34;], \u0026#34;H_O\u0026#34;: self.config[\u0026#34;H_O_spt\u0026#34;] } temporal_config = {\u0026#34;B\u0026#34;: self.config[\u0026#34;B_tmp\u0026#34;], \u0026#34;S_Q\u0026#34;: self.config[\u0026#34;S_Q_tmp\u0026#34;], \u0026#34;S_KV\u0026#34;: self.config[\u0026#34;S_KV_tmp\u0026#34;], \u0026#34;D_QKV\u0026#34;: self.config[\u0026#34;D_QKV\u0026#34;], \u0026#34;H_QKV\u0026#34;: self.config[\u0026#34;H_QKV\u0026#34;], \u0026#34;N_A\u0026#34;: self.config[\u0026#34;N_A\u0026#34;], \u0026#34;H_A\u0026#34;: self.config[\u0026#34;H_A\u0026#34;], \u0026#34;D_O\u0026#34;: self.config[\u0026#34;D_O_tmp\u0026#34;], \u0026#34;H_O\u0026#34;: self.config[\u0026#34;H_O_tmp\u0026#34;] } cross_config = {\u0026#34;B\u0026#34;: self.config[\u0026#34;B_cro\u0026#34;], \u0026#34;S_Q\u0026#34;: self.config[\u0026#34;S_Q_cro\u0026#34;], \u0026#34;S_KV\u0026#34;: self.config[\u0026#34;S_KV_cro\u0026#34;], \u0026#34;D_QKV\u0026#34;: self.config[\u0026#34;D_QKV\u0026#34;], \u0026#34;H_QKV\u0026#34;: self.config[\u0026#34;H_QKV\u0026#34;],\u0026#34;N_A\u0026#34;: self.config[\u0026#34;N_A\u0026#34;], \u0026#34;H_A\u0026#34;: self.config[\u0026#34;H_A\u0026#34;], \u0026#34;D_O\u0026#34;: self.config[\u0026#34;D_O_cro\u0026#34;], \u0026#34;H_O\u0026#34;: self.config[\u0026#34;H_O_cro\u0026#34;], \u0026#34;D_FU\u0026#34;: self.config[\u0026#34;D_FU\u0026#34;], \u0026#34;H_FU\u0026#34;: self.config[\u0026#34;H_FU\u0026#34;], \u0026#34;D_FD\u0026#34;: self.config[\u0026#34;D_FD\u0026#34;], \u0026#34;H_FD\u0026#34;: self.config[\u0026#34;H_FD\u0026#34;]} self.spatial_modulate = Modulate(spatial_config, name=\u0026#34;spatial\u0026#34;) self.spatial_block = MHSA_block(spatial_config, name=\u0026#34;spatial\u0026#34;) self.spatial_gate_resadd = Gate_ResAdd(spatial_config, name=\u0026#34;spatial\u0026#34;) self.temporal_modulate = Modulate(temporal_config, name=\u0026#34;temporal\u0026#34;) self.temporal_block = MHSA_block(temporal_config, name=\u0026#34;temporal\u0026#34;) self.temporal_gate_resadd = Gate_ResAdd(temporal_config, name=\u0026#34;temporal\u0026#34;) self.cross_block = MHSA_block(cross_config, name=\u0026#34;cross\u0026#34;) self.cross_gate_resadd = Gate_ResAdd(cross_config, name=\u0026#34;cross\u0026#34;) self.mlp_modulate = Modulate(cross_config, name=\u0026#34;mlp\u0026#34;) self.ffn_block = FFN_block(cross_config) self.mlp_gate_resadd = Gate_ResAdd(cross_config, name=\u0026#34;mlp\u0026#34;) op_list = [self.spatial_modulate.ops, self.spatial_block.ops, self.spatial_gate_resadd.ops, self.temporal_modulate.ops, self.temporal_block.ops, self.temporal_gate_resadd.ops, self.cross_block.ops, self.cross_gate_resadd.ops, self.mlp_modulate.ops, self.ffn_block.ops, self.mlp_gate_resadd.ops] for op_dict in op_list: self.ops.update(op_dict) print(self.ops.keys()) 然后就可以将构建好的 ops 放入 mapper 进行分析。刚才那些操作会被分成 3 类 vector_mapper, gemm_auto_opt_mapper 和 flashatten_mapper. 我们根据操作的类型送入对应的 mapper 进行分析，具体如下\ndef STDIT2_mapper(model, arch, QKV_fusion=True, preset=True, details=True): config = model.config Layers = config[\u0026#39;L\u0026#39;] spatial_config = {\u0026#39;B\u0026#39;: config[\u0026#39;B_spt\u0026#39;], \u0026#39;S_Q\u0026#39;: config[\u0026#39;S_Q_spt\u0026#39;], \u0026#39;S_KV\u0026#39;: config[\u0026#39;S_KV_spt\u0026#39;], \u0026#39;H_A\u0026#39;: config[\u0026#39;H_A\u0026#39;], \u0026#39;N_A\u0026#39;: config[\u0026#39;N_A\u0026#39;], \u0026#39;Q\u0026#39;: config[\u0026#39;Q\u0026#39;]} temporal_config = {\u0026#39;B\u0026#39;: config[\u0026#39;B_tmp\u0026#39;], \u0026#39;S_Q\u0026#39;: config[\u0026#39;S_Q_tmp\u0026#39;], \u0026#39;S_KV\u0026#39;: config[\u0026#39;S_KV_tmp\u0026#39;], \u0026#39;H_A\u0026#39;: config[\u0026#39;H_A\u0026#39;], \u0026#39;N_A\u0026#39;: config[\u0026#39;N_A\u0026#39;], \u0026#39;Q\u0026#39;: config[\u0026#39;Q\u0026#39;]} cross_config = {\u0026#39;B\u0026#39;: config[\u0026#39;B_cro\u0026#39;], \u0026#39;S_Q\u0026#39;: config[\u0026#39;S_Q_cro\u0026#39;], \u0026#39;S_KV\u0026#39;: config[\u0026#39;S_KV_cro\u0026#39;], \u0026#39;H_A\u0026#39;: config[\u0026#39;H_A\u0026#39;], \u0026#39;N_A\u0026#39;: config[\u0026#39;N_A\u0026#39;], \u0026#39;Q\u0026#39;: config[\u0026#39;Q\u0026#39;]} ops = model.ops mapping_result = {} \u0026#39;\u0026#39;\u0026#39;========================= == Spatial Branch Mapping == =========================\u0026#39;\u0026#39;\u0026#39; TmTn = [256, 32] if preset else None mapping_result[\u0026#39;spatial_Modulate\u0026#39;] = vector_mapper(ops[\u0026#39;spatial_Modulate\u0026#39;],arch,splits=None,details=details) mapping_result[\u0026#39;spatial_RMSNorm\u0026#39;]= vector_mapper(ops[\u0026#39;spatial_RMSNorm\u0026#39;],arch,splits=None,details=details) mapping_result[\u0026#39;spatial_Q_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;spatial_Q_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;spatial_K_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;spatial_K_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;spatial_V_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;spatial_V_proj\u0026#39;], arch, TmTn=TmTn, details=details) Tx_Ty = [256, 256] if preset else None mapping_result[\u0026#39;spatial_Flashatten\u0026#39;] = flashatten_mapper(spatial_config, arch, Tx_Ty=Tx_Ty, details=details, Head_fused=True) # FIXME mapping_result[\u0026#39;spatial_ResAdd\u0026#39;]=vector_mapper(ops[\u0026#39;spatial_ResAdd\u0026#39;],arch,splits=None,details=details) \u0026#39;\u0026#39;\u0026#39;========================== == Temporal Branch Mapping == ==========================\u0026#39;\u0026#39;\u0026#39; mapping_result[\u0026#39;temporal_Modulate\u0026#39;] = vector_mapper(ops[\u0026#39;temporal_Modulate\u0026#39;],arch,splits=None,details=details) # 切分 30 份也无法满足SRAM要求 mapping_result[\u0026#39;temporal_RMSNorm\u0026#39;]= vector_mapper(ops[\u0026#39;temporal_RMSNorm\u0026#39;],arch,splits=None,details=details) mapping_result[\u0026#39;temporal_Q_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;temporal_Q_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;temporal_K_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;temporal_K_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;temporal_V_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;temporal_V_proj\u0026#39;], arch, TmTn=TmTn, details=details) Tx_Ty = [256, 256] if preset else None mapping_result[\u0026#39;temporal_Flashatten\u0026#39;] = flashatten_mapper(temporal_config, arch, Tx_Ty=Tx_Ty, details=details, Head_fused=True) # FIXME mapping_result[\u0026#39;temporal_ResAdd\u0026#39;]=vector_mapper(ops[\u0026#39;temporal_ResAdd\u0026#39;],arch,splits=None,details=details) \u0026#39;\u0026#39;\u0026#39;==================================== == Cross Branch Mapping 2x per block == ====================================\u0026#39;\u0026#39;\u0026#39; #mapping_result[\u0026#39;spatial_RMSNorm\u0026#39;]= vector_mapper(ops[\u0026#39;spatial_RMSNorm\u0026#39;],arch,splits=None,details=details) mapping_result[\u0026#39;cross_Q_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;cross_Q_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;cross_Q_proj_2\u0026#39;] = mapping_result[\u0026#39;cross_Q_proj\u0026#39;] mapping_result[\u0026#39;cross_K_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;cross_K_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;cross_K_proj_2\u0026#39;] = mapping_result[\u0026#39;cross_K_proj\u0026#39;] mapping_result[\u0026#39;cross_V_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;cross_V_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;cross_V_proj_2\u0026#39;] = mapping_result[\u0026#39;cross_V_proj\u0026#39;] Tx_Ty = [256, 256] if preset else None mapping_result[\u0026#39;cross_Flashatten\u0026#39;] = flashatten_mapper(cross_config, arch, Tx_Ty=Tx_Ty, details=details, Head_fused=True) # FIXME mapping_result[\u0026#39;cross_Flashatten_2\u0026#39;] = mapping_result[\u0026#39;cross_Flashatten\u0026#39;] mapping_result[\u0026#39;cross_ResAdd\u0026#39;] = vector_mapper(ops[\u0026#39;cross_ResAdd\u0026#39;],arch,splits=None,details=details) # HACK: Gate_ResAdd *2 了, cross 无gate 这里无 _2 \u0026#39;\u0026#39;\u0026#39;==================================== == Feed Forward Network 2x per block == ====================================\u0026#39;\u0026#39;\u0026#39; mapping_result[\u0026#39;mlp_Modulate\u0026#39;] = vector_mapper(ops[\u0026#39;mlp_Modulate\u0026#39;],arch,splits=None,details=details) mapping_result[\u0026#39;mlp_Modulate_2\u0026#39;] = mapping_result[\u0026#39;mlp_Modulate\u0026#39;] mapping_result[\u0026#39;FFNup\u0026amp;SiLU\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;FFNup\u0026#39;],arch,TmTn=TmTn,fusion_op2=ops[\u0026#39;SiLU\u0026#39;],details=details) mapping_result[\u0026#39;FFNup\u0026amp;SiLU_2\u0026#39;] = mapping_result[\u0026#39;FFNup\u0026amp;SiLU\u0026#39;] # mapping_result[\u0026#39;FFNgate\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;FFNgate\u0026#39;], arch, TmTn=TmTn, details=details) # mapping_result[\u0026#39;Hadamard\u0026#39;] = vector_mapper(ops[\u0026#39;Hadamard\u0026#39;], arch, splits=None) TmTn = [4, 128] if preset else None mapping_result[\u0026#39;FFNdown\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;FFNdown\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;FFNdown_2\u0026#39;] = mapping_result[\u0026#39;FFNdown\u0026#39;] mapping_result[\u0026#39;mlp_ResAdd\u0026#39;] = vector_mapper(ops[\u0026#39;mlp_ResAdd\u0026#39;], arch, splits=None, details=details) mapping_result[\u0026#39;mlp_ResAdd_2\u0026#39;] = mapping_result[\u0026#39;mlp_ResAdd\u0026#39;] mapper 会遍历所有可能的切分策略放入 tx8 执行并选择最好的那一个。对于 vector 类型的算子只会沿着 sequence 维度切分；对于 GEMM 算子则会沿着 m, k, n 维度都进行切分；对于 flash-attention 的切分则与原算法相同，外循环遍历 K, V 的每一块，内循环遍历 Q 的每一块。这样就可以得到每个 tx8 上最优的切分方式对应的通信用时，计算用时和利用率。再用之前统计出的每个 die 上通信量除以 die2die 带宽得到通信用时，由此得到总的推理用时。\n","permalink":"http://localhost:1313/blogs/comparsion-of-parallelsim-metods-in-vit/","summary":"Paper reading of","title":"Comparsion of Parallelsim Metods in ViT"},{"content":" luminolt\u0026#39;s Page Cryptography Learner Jonathan523\u0026#39;s Page 每一个不曾起舞的日子, 都是对生命的辜负 ","permalink":"http://localhost:1313/friends/","summary":"\u003cp\u003e\u003ca target=\"_blank\" href=https://luminolt.cn/ title=luminolt\u0026#39;s\u0026#32;Page class=\"friendurl\"\u003e\n  \u003cdiv class=\"frienddiv\"\u003e\n    \u003cdiv class=\"frienddivleft\"\u003e\n      \u003cimg class=\"myfriend\" src=https://luminolt.cn/author/chenghao-chen/avatar_hu15811225952467136947.jpg /\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"frienddivright\"\u003e\n      \u003cdiv class=\"friendname\"\u003eluminolt\u0026#39;s Page\u003c/div\u003e\n      \u003cdiv class=\"friendinfo\"\u003eCryptography Learner\u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/a\u003e\n\u003ca target=\"_blank\" href=https://www.cestlavie.moe/ title=Jonathan523\u0026#39;s\u0026#32;Page class=\"friendurl\"\u003e\n  \u003cdiv class=\"frienddiv\"\u003e\n    \u003cdiv class=\"frienddivleft\"\u003e\n      \u003cimg class=\"myfriend\" src=/imgs/people/Jonathan523.png /\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"frienddivright\"\u003e\n      \u003cdiv class=\"friendname\"\u003eJonathan523\u0026#39;s Page\u003c/div\u003e\n      \u003cdiv class=\"friendinfo\"\u003e每一个不曾起舞的日子, 都是对生命的辜负\u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/a\u003e\u003c/p\u003e","title":"Friends"},{"content":"Origin of Transformer Transformer 由谷歌研于 2017 年在一篇名为 Attention is All You Need 的论文中提出。与 RNN 的输入仅为一个 token 不同，Transformer 一次性可以输入一整个完整的序列。总体结构如下图所示，包含一个 Encoder 和一个 Decoder.\nTransformers Architecture\nEmbedding Embedding 是一种将离散的、稀疏的输入 (如词语、字符、类别标签\u0026hellip;) 转换为连续的、密集的向量表示的技术，核心是通过一个映射函数将离散的输入符号 (如单词) 映射到一个低维向量空间中。假设我们有一个包含 V 个单词的 Vocabulary，维度为 d，那么 Embedding Matrix 将是一个大小为 V×d 的矩阵，其中每一行是一个单词的向量表示。通过嵌入层，输入的词索引 (通常是整数) 就会被映射到该矩阵的对应行，从而得到词的向量表示。常见的预训练词嵌入方法包括：\nWord2Vec：通过上下文预测词语的方式学习词向量。 GloVe：通过统计词共现信息来学习词向量。 FastText：考虑了子词信息的词嵌入方法，能更好地处理词形变化。 在 PyTorch 和 TensorFlow 等框架中，通常有专门的 Embedding 层，Hugging Face 也有 tokenizer 将句子划分成单词并转换成对应的索引：\nPositional Encoding Positional Encoding 作用是为输入的序列中的每个元素提供位置信息。由于 Transformer 架构并没有使用递归或卷积结构，本身无法捕捉输入序列中元素的相对位置关系，因此需要通过位置编码来显式地引入这些位置信息。\nNote\nTransformer 的主要优势是通过 Self-Attention 并行处理序列中的每个元素，但是这也意味着它没有自带顺序感知能力，它并不会自动知道一个单词是在句子的开头还是结尾，因此需要额外的机制来编码每个元素在序列中的位置。\n位置编码 通过将每个单词的位置信息 (即它在序列中的位置) 编码为一个向量，并将该向量添加到单词的嵌入表示中，从而让模型能够感知每个元素的相对或绝对位置。\n经典的 Transformer 位置编码使用 正弦和余弦函数的组合，为每个位置生成的向量在不同维度上具有不同的周期性，这能够捕捉到不同级别的相对位置关系。假设输入的序列中有 N 个单词，每个单词的嵌入维度为 d，那么 Positional Encodin(PE) 的计算公式如下:\n$$\r\\begin{aligned}\r\u0026PE_{(pos,2i)}=\\sin\\left(\\frac{pos}{10000^{\\frac{2i}d}}\\right)\\\\\r\u0026PE_{(pos,2i+1)}=\\cos\\left(\\frac{pos}{10000^{\\frac{2i}d}}\\right)\r\\end{aligned}\r$$其中：\npos 是单词在序列中的位置索引 (位置从 0 开始). i 是位置编码的维度索引，表示该位置编码向量中的第 i 个元素。 d 是 Embedding 的维度 这些位置编码与单词的词嵌入 (Word Embedding) 相加，最终形成输入模型的向量表示。\n(Masked) Multi-Head Attention Multi-Head Attention (MHA) 的目的是通过并行地计算多个注意力头 (Attention Head)，从多个子空间中学习输入序列的不同表示。经过 Word Embedding 后的输入 X 形状为 Nxd. 计算步骤如下\n通过学习的变换矩阵将 X 映射到查询 (Q)、键 (K) 和值 (V) 空间。 $$\r\\begin{aligned}\u0026Q=XW^{Q}\\\\\u0026K=XW^{K}\\\\\u0026V=XW^{V}\\end{aligned}\r$$ 其中 $W^{Q},W^{K}\\in\\mathbb{R}d_{model}\\times d_{k},W^{Q},W^{V}\\in\\mathbb{R}d_{model}\\times d_{v}$\n根据 QKV 计算 Attention 每个查询向量会与所有键向量进行相似度计算 (一般采用 scaled inner product)，从而获得权重，然后利用这些权重对所有值向量进行加权求和。\n$$\r\\mathrm{Attention}(Q,K,V)=\\mathrm{softmax}\\left(\\frac{QK^T}{\\sqrt{d_k}}\\right)V\r$$\n在多头注意力中，为了增加模型的表达能力，通常将 Q、K 和 V 通过多个不同的线性变换矩阵进行多次计算，得到多个注意力头 (Attention Heads). 每个头的计算是独立的，但它们的结果会在最后进行拼接并经过线性变换。最终的 Multi-Head Attention 公式为：\n$$\r\\text{MultiHead}(Q,K,V)=\\text{Concat}(head_1,head_2,\\ldots,head_h)W^O\r$$\n每个头 $head_i$ 计算公式为\n$$\r\\text{MultiHead}(Q,K,V)=\\text{Concat}(head_1,head_2,\\ldots,head_h)W^O\r$$\n这里的 $W^{Q}_{i},W^{K}_{i},W^{V}_{i}$ 是为每个头学习到的不同权重矩阵，$W^O$ 是输出的线性变换矩阵。\nMulti-Head Attention\nDecoder 中的 Masked MHA 确保模型只能在解码序列的当前位置及其之前的位置上操作，而不能 “看到” 将要生成的未来信息。与标准的 MHA 相同，注意力分数 $\\mathrm{Attention Scores}=\\frac{QK^T}{\\sqrt{d_k}}$ 是通过 Q 和 K 的点积计算得到的。计算完成后我们给其加上一个下三角元素 (包含主对角线) 为 0，上三角元素为 —∞ 的 mask，这样未来的信息经过 Softmax 后的权重为 0，被完全屏蔽。\nGrouped Query Attention（GQA）\u0026amp; Multi-query Attention (MQA) GQA 将多个 Q 分成若干组，每一组共享相同的权重矩阵。这使得每组查询可以共同处理同一个 K 和 V，降低了计算量和内存需求。在 MHA 中，所有的头共享相同的输入 X，但使用不同的投影矩阵来生成 K 和 V. GQA 中 K 和 V 通常是对输入 X 进行一次性线性变换，并在所有同一分组中的 Q 共享。MQA 更为极端，所有的 Q 共享一个 K 和 V.\nOverview of MHA, GQA \u0026amp; MQA\nMulti-Head Cross Attention Multi-Head Cross Attention 是 Transformer Decoder 中的一个核心组件。与 Self-Attention 不同，Cross Attention 负责将解码器的隐藏状态与编码器的输出上下文信息进行交互，允许解码器的每一个解码时间步的状态 查看整个编码器的输出。每个解码的时间步 t，Decoder 的隐藏状态作为 Q，Encoder 的输出作为 K 和 V，计算过程与 标准的 Self-Attention 相同。\nEvolution Tree of Transformer 后续的研究逐渐把 Encoder 和 Decoder 分离开来，形成 Encoder-Only 和 Decoder-Only 的模型。如下图所示\nTransformer Evolution Tree\nFeed Forward Network FFN 是一个两层的前馈全连接网络，中间有一个非线性激活函数。第一层全连接将 $d_model$ 映射到 $4d_model$ ，经过非线性激活函数后，第二层全连接再重新映射回 $d_model$.\nDecoder-Only Transformer Decoder-Only 删除了原先 Transformer Encoder 的部分以及 Encoder 和 Decoder 进行 Cross Attention 的部分。它具有三个必要的特征:\n在给定编码器输入作为上下文的情况下基于迄今为止生成的 token 自动回归预测下一个。 在评估对输入序列的 Q 时看不到未来值。这就是为什么仅解码器的模型通常被称为 Casual Language Model (CLM). 训练模型以在给定当前输入序列的情况下预测下一个 token. 这种训练方法与回归相结合，允许模型自回归生成任意长 (最高达输入序列的最大长度) 的序列。 Decoder-only (left) and Encoder-only (right) Transformer Architectures\nLLaMA Transformer Architecture LLaMA Transformer 结构如下，主要有以下变化\n使用 RoPE (Rotary Position Embedding) 替代传统的位置编码。 RMSNorm 替代 LayerNorm 引入 Gated Linear Unit (GLU) Rotary Position Embedding 传统的 Transformer 模型使用可学习的绝对位置编码 (如 sinusoidal position embedding)，但 RoPE 采用了旋转矩阵的思想，将位置编码与输入的 token 表示直接结合，而不依赖于额外的可学习参数。\n输入向量的旋转角度为 $\\theta(p,i)=p\\cdot10000^{-2i/d}$. p 表示位置索引，i 表示维度索引，d 为向量的总维度。对于输入的 token 向量 x 中的每一对偶数和奇数维度 $(x_{2i},x_{2i+1})$，旋转操作可以用 2D 旋转矩阵表示为\n$$\\begin{bmatrix}x_{2i}^{\\prime}\\\\x_{2i+1}^{\\prime}\\end{bmatrix}=\\begin{bmatrix}\\cos(\\theta)\u0026-\\sin(\\theta)\\\\\\sin(\\theta)\u0026\\cos(\\theta)\\end{bmatrix}\\cdot\\begin{bmatrix}x_{2i}\\\\x_{2i+1}\\end{bmatrix}$$\n对于输入的 token 向量 $\\mathbf{x}\\left[x_{0},x_{1},x_{2},x_{3},\\cdots,x_{d-1}\\right]$, RoPE 将其两两一组配对，每一组都会与位置相关的旋转角度 θ 对应地应用旋转操作。这个过程的本质是对输入 token 的表示做了旋转变换，使得这些特征不仅依赖于输入的特征，还隐含了该 token 在序列中的位置。\nRoPE\nRMSNorm RMSNorm 相对于 LayerNorm 去掉了均值计算，仅基于输入的均方根进行归一化 $\\mathrm{RMSNorm}(\\mathbf{x})=\\frac{\\mathbf{x}}{\\mathrm{RMS}(\\mathbf{x})+\\epsilon}\\cdot\\gamma$\n其中\n$\\mathrm{RMS}(\\mathbf{x})=\\sqrt{\\frac1d\\sum_{i=1}^dx_i^2}$ 为输入的均方根。 $\\gamma{:}$ 为可学习的缩放参数。 $\\epsilon{:}$ 为防止除以 0 的小数。 SiLU SiLU (Sigmoid Linear Unit) 是一种激活函数，也称为 Swish，其定义为输入 x 和 Sigmoid 函数输出的乘积。其定义为 $$\\mathrm{SiLU}(x)=x\\cdot\\sigma(x)$$ 其中 $\\sigma(x)=\\frac1{1+e^{-x}}$\nSiLU\n","permalink":"http://localhost:1313/blogs/transformerfamily/","summary":"Introduction of Transformer Family","title":"Transformer Family"},{"content":"ZeRO Zero 用于优化内存，极大地提高了训练速度，同时增加了可以训练的模型大小。ZeRO 消除了数据和模型并行训练中的内存冗余，同时保持了低通信量和高计算粒度，能够以持续的高效率按设备数量等比例扩展可训练模型的大小。\nIntroduction ZeRO 首先总结了下当前并行方法存在的问题\nBasic DP: 没有减少每个设备的内存，在 32GB 内存的 GPU 上训练超过 1.4B 参数的模型便会 OOM. Model Parallelsim (MP): 切分了每一层的计算和激活到每个设备上，但引入了大量的通信 (前向和反向都需要 2xAll-Reduce)，因此扩展性差，通常只在一个节点内的高带宽连接的 GPU 中进行。在 DGX-2 节点训练 40B 参数的模型每个 V100 GPU 仅能达到硬件峰值的 5% 算力 (5T flops). 模型状态通常占据了训练时的大部分内存，但 DP 在所有数据并行进程中保存一份模型状态，导致冗余内存消耗；而 MP 对这些状态进行切分以获得高内存效率，但通常会导致过于细粒度的计算和昂贵的通信，扩展效率较低。此外，这些方法都静态地维护整个训练过程所需的整个模型状态。\nZeRO-DP 通过在数据并行过程中划分模型状态 (参数、梯度和优化器状态) 消除了数据并行过程中的内存冗余。\n结论：如下图所示 ZeRO-DP 有三个主要的优化阶段，它们对应于优化器状态、梯度和参数的划分。 对于使用 FP16 的模型，内存占用包括参数 (FP16)、梯度 (FP16)、Adam 优化器状态 (动量 (FP32)，方差 (FP32) 以及更新后的参数 (FP32), 因此 K=12).\n优化器状态划分 (Pos) —— 内存减少 4 倍，需要对梯度进行 reduce-scatter，用各自的优化器状态更新梯度后进行 All-gather 使所有设备都有最新的梯度，通信量与数据并行性相同 (对 Loss 进行一次 All-reduce). 添加梯度划分 (Pos+g) \u0026ndash; 内存减少 8 倍，每个设备需要将自己的梯度 scatter 到负责更新那部分参数的设备上，然后使用 Gather 将其他设备更新后的模型参数同步到自己上面，通信量与数据并行性相同。 添加参数划分 (Pos+g+p) \u0026ndash; 内存减少与数据并行度 Nd 呈线性关系。通信量增加了50%，因为在前向/反向传播中需要每个设备需要额外广播自己存储的模型参数 2*(N-1)/N*P，反向传播时需要对发送梯度到对应的设备上 (N-1)/N*P. Memory Savings and Communication Volume for the 3-stage of ZeRO\n激活、临时缓冲区和不可用的内存片段会成为次要内存瓶颈。作者开发了 ZeRO-R 优化了这三个因素分别消耗的剩余内存。\n对于激活 (在前向传播中存储，反向传播中使用)，仅仅使用激活检查点是不够的。ZeRO-R 通过激活划分识别和删除现有 MP 方法中重复存储的激活，并且在适当时候将激活存储在 CPU 中。 ZeRO-R 定义了适当大小的临时缓冲区，以实现内存和计算效率的平衡。 由于不同张量的寿命存在差异，ZeRO-R 根据张量的不同生命周期主动管理内存，防止内存碎片。 在某些情况下，MP 仍可以和 ZeRO 一起使用：i）当与 ZeRO-R 一起使用时，MP 可以减少超大模型的激活内存占用。ii）对于较小模型，当单独使用 DP 的 batchsize 太大而无法实现良好的收敛时，MP 也可以带来好处。\nWhere Did All the Memory Go? 在模型训练期间，大部分内存被模型状态消耗 (优化器状态、梯度和参数). 除了这些模型状态之外，剩余的内存被激活、临时缓冲区和碎片内存所消耗，称之为剩余状态。\nModel States: Optimizer States, Gradients and Parameters Adam 优化器需要存储两个优化器状态：时间平均动量和梯度方差来计算更新后的参数。此外，还需要有足够的内存来存储梯度和权重本身。\n混合精度训练 (Mixed-Precision Training) 中参数和激活以 fp16 格式存储并且在前向和反向传播中也使用 fp16 格式的权重和激活。Adam 优化器存储 fp32 格式的参数副本、动量和方差以保证更新的精度。\n假设模型参数量为 ψ，模型参数需要占用 2ψ 字节的内存，反向传播中产生的 fp16 梯度需要占用 2ψ 字节的内存。Adam 优化器存储 fp32 格式的参数副本、动量和方差每个都需要占用 4ψ 字节的内存。因此训练时总共需要 16ψ 字节的内存，为存储模型参数的 8x.\nResidual Memory Consumption 在训练过程中，激活会占用大量的内存。基于 transformer 的模型的激活内存占用与层数×隐藏维度×序列长度×批大小成正比。对于类似 GPT-2的结构，总激活约为 12×隐藏亮度×批大小×序列长度×变层数 (QKV(h*3h) + O(h*h) + MLP(h*4h+4h*h)=12h*h，没有考虑 mask). 激活重计算可以以 33% 的额外计算开销 (之前是一次前向，一次反向，反向因为需要对输入和参数都进行求导所以计算量是前向的两倍，现在多了一次前向) 换取接近原先激活大小平方级别的内存占用。\n对于大型模型，用于存储中间结果的临时缓冲区会消耗大量内存。对梯度进行 All-Reduce 或梯度归一化计算等操作倾向于在操作之前将所有梯度融合到单个扁平缓冲区中，以提高吞吐量。\n碎片化内存会导致即使有足够的内存但没有足够大的连续块进行分配时的 OOM，作者观察到极端情况下在有 30% 剩余内存时也会产生 OOM.\nZeRO: Insight and Overview ZeRO有两组优化：ZeRO-DP 旨在减少模型状态的内存占用；ZeRO-R 旨在减少剩余内存消耗。\nZeRO-DP 基于三个关键见解：\nDP 比 MP 具有更好的扩展效率，因为 MP 减少了计算的粒度，同时也增加了通信开销。 DP 内存效率低下，因为模型状态被在所有数据并行进程中都存有一份。 DP 和 MP 都保留了整个训练过程中所需的所有模型状态，但并非所有状态在整个训练期间都需要。 ZeRO-DP 划分模型状态，并使用动态通信调度利用模型状态的内在的暂时性，同时最小化通信量。\nZeRO-R 基于两个关键见解：\nMP 对模型状态进行切分，但通常需要重复存储激活。 对于GPT-2或更大的模型，算术强度 (每次迭代计算量与激活检查点数量的比值) 非常大 (≥10K)，并且随着隐藏维数的增加而线性增加，即使在带宽较低的情况下，也可以隐藏激活检查点的数据移动成本。 ZeRO 通过跨 GPU 划分激活检查点来消除 MP 中的内存冗余，并根据需要使用 All-Gather 来重建；使用恒定大小的缓冲区来避免临时缓冲区随着模型大小的增加而爆炸；通过将激活检查点和梯度移动到预分配的连续内存缓冲区来执行动态内存碎片整理。\nDeep Dive into ZeRO-DP 下表显示了逐渐切分 (1) 优化器状态、(2) 梯度和 (3) 参数冗余后的内存占用。称为ZeRO-DP的三个优化阶段：Pos， Pg和Pp，将在下面详细说明。\nDP\r7.5B Model (GB)\r128B Model (GB)\r1T Model (GB)\rPos\rPos+g\rPos+g+p\rPos\rPos+g\rPos+g+p\rPos\rPos+g\rPos+g+p\r1\r120\r120\r120\r2048\r2048\r2048\r16000\r16000\r16000\r4\r52.5\r41.3\r30\r896\r704\r512\r7000\r5500\r4000\r16\r35.6\r21.6\r7.5\r608\r368\r128\r4750\r2875\r1000\r64\r31.4\r16.6\r1.88\r536\r284\r32\r4187\r2218\r250\r256\r30.4\r15.4\r0.47\r518\r263\r8\r4046\r2054\r62.5\r1024\r30.1\r15.1\r0.12\r513\r257\r2\r4011\r2013\r15.6\rPos: Optimizer State Partitioning 设 DP 并行度为 Nd, 每个数据并行进程只需要存储和更新总优化器状态的 1/Nd，然后只更新参数的 1/Nd. 在每个训练步骤结束时，在数据并行进程中执行一次 All-Gather，以获得所有数据并行过程中完全更新的参数。这使得每个设备上保存模型状态需要的内存从 4ψ+Kψ 变成 4ψ+Kψ/Nd，当使用 Adam 优化器 (K=12) 并且 Nd 很大时，内存需求可以降低接近 4x.\nPg: Gradient Partitioning 由于每个数据并行进程只用更新自己被分配的参数，因此他也只需要那部分参数 reduce 后的梯度。只在负责更新相应参数的数据并行过程中进行 reduce. 完成后它们的内存可以被释放。这使得了梯度所需的内存占用从 2Ψ 字节减少到 2Ψ/Nd. 更新后的参数再被 scatter 到其他进程。\n通常为了效率，将需要 reduce 的梯度按照参数的分区划分成多个 buckets，每个 bucket 对应特定的一组参数，对每个 bucket 进行整体 reduce 操作，而不是对单个梯度进行操作。进一步划分梯度后，每个设备上保存模型状态需要的内存进一步减少到 2ψ+(K+2)ψ/Nd\n蓝色箭头串起来的白色长方形代表的是 Transformer Block，蓝色的第一行代表 FP16 参数；橙色的第二行代表 FP16 梯度，反向传播时将用于更新参数；绿色的行代表优化器状态 (FP32 的梯度，动量，方差，以及更新后的参数)，其中在计算完 FP16 梯度以后不再需要保存 FP32 参数。同时也需要 buffer 来保存部分 transformer block 的输出激活。\nPp: Parameter Partitioning 更进一步我们可以将模型参数也进行划分，当设备所没有的参数需要进行向前和向后传播时，通过广播从其他的的数据并行进程接收。通过前面的分析可知这使得通信量变为原来的 1.5x， 但使得所有的模型参数都被划分到每个设备上，只需要 (4+K)/Nd 字节的内存。\nExecution Steps of ZeRO3 Overview of Memory Consumption\n每个 GPU 只需要保存自己部分的 Pos+g+p. 前向传播时保存对应模型参数的 GPU 需要把参数广播到其他 GPU 中，其他 GPU 用自己部分的数据完成前向传播后就可以删除这部分参数 (最后一部分除外). (N-1)/N*P\nBroadcast of Model Parameters\n前向传播完成后，第一次反向传播可以利用最后一次正向传播已经广播了的模型参数，每个 GPU 计算自己部分的梯度，然后 Reduce 到存储对应模型参数的 GPU 中。之后和前向传播一样，每个 GPU 都需要广播自己的参数，然后其他 GPU 用自己的数据完成梯度计算以后 Reduce 到自己的梯度。(N-1)/N*P + 1/N*G*(N-1)\nGradient Accumulation\n反向传播结束以后，每个 GPU 使用优化器更新自己的 FP32 模型参数后转换成 FP16 格式。\nUpdate Parameters Locally\nDeep Dive into ZeRO-R Pa: Partitioned Activation Checkpointing 一旦计算了模型的一层的前向传播，输入激活将在所有模型并行过程中进行划分，直到在反向传播期间再次需要输入激活。此时，ZeRO 使用一个 All-Gather 操作来重新实现激活的复制副本。称这个优化为 Pa. 将 Pa 与激活检查点结合，只存储分区的激活检查点，这样使得激活占用空间的减少与 MP 并行度成正比。\nCB: Constant Size Buffers 通信的效率不仅仅与数据量相关，还受到固定启动开销和带宽利用率的影响。较大的输入更容易充分利用硬件的带宽和优化机制，因而能显著提高 All-Reduce 操作的效率。因此经常将需要进行通信的数据合并到一个缓冲器。然而，合并缓冲区的内存开销与模型大小成正比，模型过大时容易 OOM. 为了解决这个问题，当模型很大时，简单地使用一个性能高效的固定大小的合并缓冲区。\nMD: Memory Defragmentation 前向传播中只需要保存检查点的激活而丢弃其他激活会产生碎片化内存。同样的反向传播中只需要保存参数的梯度而丢弃激活的梯度也会产生碎片化内存。内存碎片导致两个问题: (1) 即使有足够的可用内存，由于缺乏连续内存导致 OOM. (2) 由于内存分配器花费大量时间搜索连续内存块以满足内存请求而导致效率低下。ZeRO 通过为激活检查点和梯度预分配连续内存块，并在它们产生时将它们复制到预分配的内存中，从而实时地进行内存碎片整理。\nCommunication Analysis of ZeRO-DP 使用 Pos 和 Pg 时，ZeRO-DP 不会产生额外的通信，同时可以减少高达 8 倍的内存。使用 Pos+g+p 时，ZeRO-DP 最多会产生 1.5 倍的通信，同时减少内存占用为原来的 1/Nd.\n在数据并行训练过程中，在计算下一步的更新之前，在反向传播结束时对所有数据并行进程的梯度使用 All-Reduce 进行平均，因此通信量为 2ψ. 使用 Pos+g 时每个设备需要将自己的梯度 scatter 到负责更新那部分参数的设备上，然后使用 Gather 将其他设备更新后的模型参数同步到自己上面，总通信量仍为 2ψ，与数据并行相同。使用 Pos+g+p 时负责该分区的数据并行进程将权重 brocast 给所有数据并行进程 (前向反向各一次)，最后仍需要 Gather 其他进程上更新好的参数，因此总通信量为 3ψ.\nCommunication Analysis of ZeRO-R 在使用激活检查点的 Megatron-LM 中，每个 transformer block 在前向传播中执行 2 次大小为 批大小×序列长度×隐藏维度的 All-Reduce 操作，反向传播中执行 2 次同样大小的 All-Reduce 操作，同时激活重计算也需要 2 次同样大小的 All-Reduce 操作。因此每个块的总通信量为 12×序列长度×隐藏维度。\n当使用 ZeRO-R 划分激活检查点时，在对每个激活检查点上的反向传播进行前向重新计算之前，需要进行额外的一次 All-Gather 操作。因此，Pa的总通信开销相对于原先 MP 通信量增加了 1/12，但是使得激活内存占用减小到原来的 1/MP_degree.\n如果使用了 Pa+cpu，则分区激活检查点将被存储到 CPU，对激活内存需求减少到几乎为零，而代价是与 Pa 相比，需要从 CPU 和内存之间的数据移动增加了 2 倍。\nZeRO-Offload ZeRO-Offload 通过将数据和计算下放到 CPU 来实现大型模型训练。为了保持计算效率，它尽可能减少数据在 GPU 和 CPU 之间的移动，同时最大限度地减少 CPU 的计算时间，并最大限度地节省 GPU 上的内存。\nIntroduction PP, MP 和 ZeRO 等并行技术都需要有足够的 GPU 设备，使得它们的内存之和能够容纳训练所需的模型状态的存储。目前基于注意力的大模型训练的主要内存瓶颈是模型状态，而不是激活。现有的异构训练在两个主要方面受到限制：(i) 几乎所有的训练都利用 CPU 内存，而不是 CPU算力。(ii) 它们主要是为单个 GPU 设计和评估的。\nZeRO-Offload 为了提高计算效率采取的设计原则有三条：(i) 它需要的 CPU 计算量与 GPU 相比减少了几个数量级。(ii) 它最小化了 CPU 和 GPU 之间的通信量，防止了通信成为瓶颈。(iii) 可以证明在实现最小通信量的同时最大限度地节省了 GPU 的内存。\nZeRO-Offload 将梯度，优化器状态和优化器计算卸载到 CPU，而将参数和前向和反向计算保留在 GPU上。这样 CPU 上的计算量为 O(M)，而 GPU 上的计算量则为 O(MB)，其中 M 和 B 分别为模型大小和 batchsize. 因为 CPU 只处理模型参数的更新，而不参与与 batch size 相关的梯度求平均的操作。在大多数情况下，batchsize 较大，因此 CPU 计算不是瓶颈。但是对于较小的 batchsize，CPU 计算可能会成为瓶颈。\nUnique Optimal Offload Strategy 为了确定最佳的卸载策略，ZeRO-Offload 将 DL 训练建模为如下图所示的数据流，并有效地在 CPU 和 GPU 设备之间进行划分。GPU 和 CPU 之间的卸载策略可以使用该图的二分图来表示，这样一个分区中的计算节点将在拥有该分区的设备上执行，分区中的数据节点也存储在拥有该分区的设备上。\nThe Dataflow of Fully Connected Neural Networks\n由于 CPU 的算力远远低于 GPU，所以前向传播和反向传播 (它们的计算复杂度都是 O(MB)) 必须在 GPU上完成，而其余复杂度为 O(M) 的计算 (如归一化计算、权重更新等) 会被卸载到 CPU 上。\nCPU 内存带宽 (100xGB) 至少比 CPU 和 GPU 之间的 PCIe 带宽 (10xGB) 快一个数量级，而 GPU 内存带宽比 CPU 内存带宽 (TB) 快另一个数量级。数据流中的每个节点都是环的一部分。因此，对该图进行任何划分都需要切割至少两条边，每条边的权值至少为 2M，从而总通信量至少 4M (通过仅卸载部分模型状态，可以进一步减少通信量). 因此，为了实现最小的通信量，所有卸载策略必须使得关于 fp32 模型状态操作的生产者和消费者相同。fp16 参数节点必须和 FWD-BWD 节点在一个子图中，因为这两个节点之间的边权值是 4M.\n下表显示了最小化通信量情况下的所有有效分区策略所节省的内存。通过将 fp16 梯度和 Update Super 节点放到 CPU 可以实现 8x 的最大内存节省。\nFWD-BWD p16 g16 Update Memory Reduction gpu gpu gpu gpu 16M 1x (baseline) gpu gpu cpu gpu 14M 1.14x gpu gpu cpu cpu 4M 4x gpu cpu cpu cpu 2M 8x 综上所述 ZeRO-Offload 在 CPU 上存储所有 fp32 模型状态以及 fp16 梯度，并且还在 CPU 上计算更新后的参数。fp16 的参数保存在 GPU 上，前向和反向计算也在GPU上完成。\nZeRO-Offload Schedule 在训练过程中，首先通过前向传播计算损失。由于 fp16 参数已经存放在GPU上，因此这部分计算不需要与 CPU 通信。在损失的反向传播过程中，不同设备计算不同参数的梯度。ZeRO-Offload 可以在计算完每个参数后，将这些梯度单独或分组传输到 CPU 内存中。由于梯度是逐层传输的，因此 GPU 上只需要很小的缓冲区来存放每一层的梯度。在反向传播之后，ZeRO-Offload 直接在 CPU 上更新 fp32 参数和优化器状态），并将更新后的 fp32 参数从 CPU 内存复制到 GPU 内存上的 fp16 参数。\nZeRO-Offload Training Process on a Single GPU\n在卸载之前进行如上一节所述的划分的主要好处是，对于具有超过 1 个 GPU 的系统，每个数据并行进程只负责更新参数的一个子集。所有数据并行进程的 GPU 到 CPU 的通信量总和保持不变，CPU 资源可以并行使用，共同计算单个权重更新。ZeRO-Offload 在不同 GPU 之间划分梯度和优化器状态，每个 GPU 将其拥有的部分卸载到 CPU 内存中，并在整个训练过程中将其一直保存在那里。在反向传播过程中，在 GPU上使用 reduce-scatter 计算普遍复核一遍梯度，每个 GPU 只将属于其那一部分的平均梯度卸载到 CPU 内存中。然后优化器状态将由每个数据并行进程直接在 CPU 上并行更新。更新后，参数被移回 GPU，然后在 GPU 上执行类似于 ZeRO-2 的 All-Gather 操作来获取所有更新后的参数。\nZeRO-Offload Data Placement with Multiple GPUs\nOptimized CPU Execution 作者使用高性能计算技术实现了一个加速版的 CPU Adam 优化器 开发了一个一步延迟参数更新计划，将 CPU 参数更新计算与 GPU 上的前向和反向计算重叠，隐藏了 CPU 执行时间。 Implementing the CPU Optimizer 作者使用三级并行性来提高 CPU 优化器的性能。\nSIMD 矢量指令，充分利用 CPU 架构的硬件并行性。 循环展开，一种提高指令级并行性的有效技术，能更好地利用内存带宽。 OMP 多线程，可以有效地并行利用 CPU 上的多个内核和线程。 算法的输入为 β₁(动量系数), β₂(RMSProp 的平方梯度衰减系数), α(学习率)，以及梯度，动量，方差和 fp32 参数作为输入。我们还使用了一些特定于实现的参数，如 simd_width 和 unroll_width. Adam 优化器分别发送更新的方差、动量和参数的 fp16 和 fp32 格式到 GPU 和 CPU. 首先将数据读入矢量寄存器。然后，主循环中使用 Fused Multiplication Add 矢量操作。其他操作，如乘法、除法和平方根，也在矢量模式下运行。为了获得最佳性能，使用 AVX512 simd 指令集和基于自动调优结果的 unroll_width=8. 除了 CPU-Adam 优化器之外，还以分块的方式实现了 CPU 到 GPU 的 fp16 参数复制。通过并行化 Adam 计算并将参数复制到 GPU 来重叠 CPU 和 GPU 的执行。当在 CPU 上处理当前数据块的 Adam 计算时，将先前处理过的数据块的参数写回 GPU.\nCPU-ADAM Optimizer\nOne-Step Delayed Parameter Update 下图展示了 Delayed Parameter Update(DPU) 的 ZeRO-Offload 训练的工作流程。\n前 N−1 步不使用 DPU 进行训练，避免在梯度变化迅速的早期阶段破坏训练的稳定性。 在第 N 步中，从 GPU 获取梯度，但跳过 CPU 优化步骤，也不更新 GPU 上的 fp16 参数。 在第 N+1 步中，我们使用第 N 步的梯度计算 CPU 上的参数更新，同时使用第 N-1 步更新的参数并行计算 GPU 上的前向和反向。 Delayed Parameter Update During the Training Process\nZeRO-Infinity ZeRO-Infinity 是一种新的异构系统技术，它利用 GPU, CPU 和 NVMe 内存，在有限的资源上实现前所未有的模型扩展，并且不需要模型代码重构。\n目前大型模型训练技术中最先进的是三维并行 (3D parallelism)，它将模型（张量切片）和流水线并行与数据并行相结合。但是 GPU 内存跟不上模型大小的增长。\nZeRO-Infinity 的优势如下\n通过同时利用 CPU 和 NVMe 内存，在有限的 GPU 资源上支持大模型训练。 引入了一种称为 memory-centric tiling 的 GPU 内存优化技术，以应对 GPU 内存无法一次放下的超大 block 情况。 引入了一种称作 bandwidth-centric partitioning 的数据分区策略，用于利用所有设备上的内存带宽，并将其与重叠通信与计算的技术结合。 MEMORY REQUIREMENTS Memory for Model States: 基于 Transformer 的模型中的参数总数主要取决于隐藏维度 (hd) 和 Transformer 层数 (nl). Transformer block 中的几乎所有参数都来自四个线性层，大小分别为：QKV_Linear(nd,3nd), O_Linear(hd, hd),MLP(hd, 4hd)+(4hd, hd). 因此一个 Transformer block 的参数量约为 12 x nl x (hd)²，因此占用的内存大小为 192 x nl x (hd)² 字节。\nMemory for Residual States: 剩余状态主要由激活内存组成，它取决于模型架构、批处理大小 (bsz) 和序列长度 (seq). 存储激活检查点所需的内存估计为 2×bsz×seq×hd×nl/ci，其中 ci(checkpoint interval) 是两个激活检查点之间的 Transformer block 的数量。\nModel State Working Memory (MSWM) 是在所有模型状态被卸载到 CPU 或 NVMe 之后，在模型中最大的单个算子上执行前向或反向传播所需的最小 GPU 内存。对于基于 Transformer 的模型，最大的算子是将隐藏维度从 hd 转换为 4hd 的线性层，因此 fp32 格式下需要 4xhdx4hd 字节的内存。\nActivation Working Memory (AWM): 是在执行实际的反向传播之前重新计算激活所需的内存，即两个连续激活检查点之间的激活大小 bsz × seq × ci × (16 × hd + 2 × attn_heads × seq) 字节。\nBANDWIDTH REQUIREMENTS 假设没有任何计算和通信重叠的工作负载执行，我们可以使用峰值计算吞吐量 (peaktp)，数据移动带宽 (bw) 及其算术强度 (ait) 来估计训练效率。需要注意 peaktp 不是理论上的硬件峰值，而是在没有任何通信瓶颈的情况下可以达到的峰值。\n算术强度 (AIT) 是总计算量与计算所需数据量之比。它描述了每次数据移动的计算量。\ncompute_time = total_computation / peaktp ait = total_computation / total_data_movement communication_time = total_data_movement / bw = total_computation / (ait × bw) efficiency = compute_time / (compute_time + communication_time) = ait x bw / (ait x bw + peaktp) Quantifying AIT in DL training Transformer block 中一次前向传播中的计算量可以近似为输入乘以参数大小 2 × bsz × seq × params. 反向传播则为其 2 倍。如果使用激活检查点则还需要一次额外的前向传播，因此每次迭代的总计算量为 computation_per_iter = 2 × 4 × bsz × seq × parameters = 2 × 4 × 12 × bsz × seq × nl × (hd)²\nAIT w.r.t. Parameters and Gradients: 前向和反向过程中模型参数必须从存储位置位置加载到 GPU 寄存器各次。在使用激活检查点的情况下，还需要加载一次，以便在反向传播期间重新计算。此外，梯度必须从 GPU 寄存器存储到其最终位置至少一次。因此总共要移动模型参数 4 次，总计 2 x 4 x parameters 字节。因此关于参数和梯度的计算强度为 seq x bsz.\nAIT w.r.t. Optimizer States: 优化器状态必须至少读取和写入一次。所以总的数据移动是 2 × optimizer_states，总计 2 × 16 × parameters 字节。因此关于优化器状态的计算强度为 seq x bsz / 4.\nAIT w.r.t. Activation Checkpoints: 前向传播时必须将激活检查点保存到它们的最终位置，然后在反向传播期间加载激活检查点。因此总数据移动量为 4 × nl/ci × hd × seq × bsz 字节。因此关于激活检查点的计算强度为 24 × hd × ci.\nBandwidth Requirements 通过前面的分析可知模型状态的计算强度仅取决于批大小和序列长度，激活检查点的计算强度仅取决于存储间隔和模型的隐藏维度大小。下图 a 说明当传输参数和梯度的带宽超过 70 GB/s 时，即使是最小的批处理大小，也可以实现超过 50% 的效率。图 b 说明，传输优化器状态需要近 4 倍的带宽才能达到 50% 的效率。并且优化器状态更新需要等待所有前向和反向传播结束，不能与计算重叠。图 c 说明，启用激活检查点后，即使隐藏大小为2K，2 GB/s 的带宽也能够保持 50% 以上的效率。\nImpact of Bandwidth on Efficiency with 70 TFlops of single GPU Peak Throughput\nZERO-INFINITY DESIGN OVERVIEW GPU 集群采用异构内存存储，除了 GPU 内存还拥有 CPU 内存以及比 GPU 内存大 50x, 比 CPU 内存大近 20x 的大规模 NVMe 存储。下图为 ZeRO-Infinity 架构，描述了第一层的反向传递的通信。将划分后的参数从慢速内存移动到 GPU，然后 All-Gather 以形成完整的层。在计算梯度之后，参数被聚合和重新划分，然后卸载到慢速内存中。层用下标表示，DP rank 用上标表示。\nA Snapshot of ZeRO-Infinity Training a Model with 2 Layers on 4 DP Ranks\nEfficiency w.r.t Parameter and Gradients: 现有的异构解决方案 (例如 ZeRO-Offload) 要求先将参数从 CPU 移动到拥有这些参数的 GPU，然后再进行广播。这种方式需要在每个 GPU 上使用足够大的 batchsize，以确保通信能被计算掩盖。但这带来了两个问题：\n对于超大规模模型，激活的内存占用会过大，甚至超过 CPU 的内存容量。 当扩展到数百甚至上千个 GPU 时，为了实现有效的收敛，实际的 batchsize 会变得过大。 Efficiency w.r.t Optimizer States: 与在前向和反向传播期间参数和梯度的产生有先后顺序不同，优化器状态可以同时更新。ZeRO-Infinity 建立在 ZeRO-3 之上，因此在将优化器状态卸载到 CPU 内存时，它还可以利用所有的 GPU 和 CPU 内存带宽以及所有 CPU 算力用于优化器状态更新。然而，使用 NVMe 卸载，需要将数据从 NVMe 传入到 CPU 内存中，再从 CPU 内存返回。由于 CPU 内存有限，必须将数据分块从 NVMe 加载到 CPU 内存，进行计算后再写回 NVMe.\nEfficiency w.r.t Activations: 在一台 DGX-2 节点上，每个 GPU 可以通过 PCIe 接口以大约 3 GB/s 的速度并行读写数据到 CPU 内存。这使得在隐藏层大小为 8K 或更大时，可以将激活检查点卸载到 CPU 内存的同时保持超过 80% 的效率。\nEFFICIENCY OPTIMIZATIONS Bandwidth-Centric Partitioning 在 ZeRO-3 和 ZeRO-Offload 中每层的参数为单个数据并行进程拥有，在需要时将它们广播给其他进程，ZeRO-Infinity 在所有数据并行进程中划分单个参数，并在需要参数时使用 All-Gather. 相较于广播只用到了单个 PCIe 链路将参数从存储位置加载到 GPU，All-Gather 同时使用所有的 PCIe 链路，每条链路传输 1/dp 的参数。\nOverlap Centric Design 访问 NVMe 内存需要三个步骤：(i) 从 NVMe 读取数据到CPU内存 (nc-transfer). (ii) 将数据从 CPU 内存复制到 GPU 内存 (cg-transfer). (iii) 执行 All-Gather 以在所有 GPU 上获得完整参数 (gg-transfer).\nZeRO-Infinity 的通信重叠有两个组件\n一个 dynamic prefetcher，在每次迭代期间，跟踪其在算子序列中的位置，并预取未来算子所需的参数。在执行第 i 个操作符之前，prefetcher 可以分别对第 i+3，第 i+2 和第 i+1 个算子所需的参数调用 nc, cg 和 gg-transfer. 一个通信和卸载重叠机制，用于并行执行梯度所需的数据移动和反向计算。将第 i+1 个算子中参数梯度的 Reduce-Scatter 与第 i 个算子的计算重叠，同时将第 i+2 个算子 Reduce-Scatter 划分的梯度传输给 CPU 或 NVMe. ","permalink":"http://localhost:1313/blogs/zero/","summary":"Paper reading of ZeRO.","title":"ZeRO, ZeRO-Offload, ZeRO-Infinity"},{"content":"Parse Config Arguments 会从命令行参数中获取有关 Model, Runtime, Parallel Processing \u0026amp; Input 有关的信息。前三者被包含在 engine_config 中，而最后者则被包含在 input_config 中。在 create_config() 函数中，会初始化 _WORLD 全局变量，它是一个 GroupCoordinator 实例。很明显它只有一个包含所有的设备进程组。 GroupCoordinator GroupCoordinator 类是一个 PyTorch 的进程组封装器，主要用于管理一组进程之间的通信。它可以根据不同的通信后端（如 NCCL、Gloo、MPI 等）来协调进程之间的操作。包含以下信息\nrank: 当前进程的全局索引（全局唯一）。 ranks: 组内所有进程的全局索引列表。 world_size: 组的大小，即进程的数量 len(ranks) local_rank: 当前进程在本地节点中的索引。 rank_in_group: 当前进程在组内的索引。 cpu_group: 用于 CPU 通信的进程组。 device_group: 用于设备（如 GPU）通信的进程组。 1 2 3 4 5 6 if we have a group of size 4 across two nodes: Process | Node | Rank | Local Rank | Rank in Group 0 | 0 | 0 | 0 | 0 1 | 0 | 1 | 1 | 1 2 | 1 | 2 | 0 | 2 3 | 1 | 3 | 1 | 3 __init__ 方法接收以下参数：\ngroup_ranks: 一个包含多个进程索引列表的列表，每个子列表表示一个进程组。 local_rank: 当前进程的本地索引。 torch_distributed_backend: 指定用于通信的后端类型 (如 \u0026ldquo;gloo\u0026rdquo; 或 \u0026ldquo;nccl\u0026rdquo;). 初始化过程：\n使用 torch.distributed.get_rank() 获取当前进程的全局索引。 遍历传入的 group_ranks 列表，为每个子列表创建一个新的设备组和 CPU 组。 如果当前进程的索引在当前子列表中，则设置该进程的组内信息 (包括 ranks、world_size 和 rank_in_group). 确保 CPU 组和设备组都已成功创建。 根据是否可用 CUDA 设置当前设备为 GPU 或 CPU. 1 2 3 4 5 6 def main(): parser = FlexibleArgumentParser(description=\u0026#34;xFuser Arguments\u0026#34;) args = xFuserArgs.add_cli_args(parser).parse_args() # Add Command Line Interface (CLI) arguments engine_args = xFuserArgs.from_cli_args(args) # Extract CLI args and pass them to xFuserArgs Constructor engine_config, input_config = engine_args.create_config() # Init _WORLD. engine_config: model, run_time \u0026amp; parallel infos, input_config: input shape, prompt \u0026amp; sampler infos local_rank = get_world_group().local_rank 关于可以支持的并行策略如下，包括 Data Parallel, Sequence Parallel, Pipefusion Parallel \u0026amp; Tensor Parallel.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Parallel Processing Options: --use_cfg_parallel Use split batch in classifier_free_guidance. cfg_degree will be 2 if set --data_parallel_degree DATA_PARALLEL_DEGREE Data parallel degree. --ulysses_degree ULYSSES_DEGREE Ulysses sequence parallel degree. Used in attention layer. --ring_degree RING_DEGREE Ring sequence parallel degree. Used in attention layer. --pipefusion_parallel_degree PIPEFUSION_PARALLEL_DEGREE Pipefusion parallel degree. Indicates the number of pipeline stages. --num_pipeline_patch NUM_PIPELINE_PATCH Number of patches the feature map should be segmented in pipefusion parallel. --attn_layer_num_for_pp [ATTN_LAYER_NUM_FOR_PP ...] List representing the number of layers per stage of the pipeline in pipefusion parallel --tensor_parallel_degree TENSOR_PARALLEL_DEGREE Tensor parallel degree. --split_scheme SPLIT_SCHEME Split scheme for tensor parallel. 从 CLI 解析的参数后会在 create_config() 中组成如下的 ParallelConfig.\nDataParallelConfig: 总的并行度为 dp_degree * cfg_degree. dp_degree: 相当于对 batch 维度进行切分， cfg_degree: Class-free Guidance(cfg) 用于控制无条件的图片生成 (若使用相当于 batchsize *= 2). SequenceParallelConfig: 总的并行度为 sp_degree = ulysses_degree * ring_degree ulysses_degree: 用于控制 DeepSeed-Ulesses 的序列并行度。 ring_degree: 用于控制计算 Ring Attention 时对 Q K V 沿着 Sequence 维度的切分块数。 TensorParallelConfig: 总的并行度为 tp_degree. tp_degree: 用于控制 2D Tensor Parallel 的并行度。 split_scheme: 用于控制张量切分方式. PipeFusionParallelConfig: 总的并行度为 pp_degree=num_pipeline_patch. pp_degree: 用于控制 PipeFusion 中模型 Transoformer Blocks 的切分个数。 num_pipeline_patch: 用于控制对 latent feature map 的切分块数. attn_layer_num_for_pp: 是一个 list，表示 pp_degree 里每个 stage 的 Transformer 层数。 Warning\n关于 PipeFusion，原文说切分的 patch 数和 pipeline 大小可以不同，但这里要求 len(attn_layer_num_for_pp)=pp_degree\nInfo\n设备数必须等于 dp_degree * cfg_degree * sp_degree * tp_degree * num_pipeline_patch，并且 pp_degree 必须小于等于设备数。 ulysses_degree 必须要大于且能被 attention 的头数整除。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 parallel_config = ParallelConfig( dp_config=DataParallelConfig( dp_degree=self.data_parallel_degree, use_cfg_parallel=self.use_cfg_parallel, ), sp_config=SequenceParallelConfig( ulysses_degree=self.ulysses_degree, ring_degree=self.ring_degree, ), tp_config=TensorParallelConfig( tp_degree=self.tensor_parallel_degree, split_scheme=self.split_scheme, ), pp_config=PipeFusionParallelConfig( pp_degree=self.pipefusion_parallel_degree, num_pipeline_patch=self.num_pipeline_patch, attn_layer_num_for_pp=self.attn_layer_num_for_pp, ), ) Construct Pipeline 解析完配置参数并构建了 engine_config 后，下一步是构建模型的 pipeline.\n1 2 3 4 5 6 pipe = xFuserPixArtAlphaPipeline.from_pretrained( # First construct a PixArtAlphaPipeline, then pass it and engine_config to xFuserPipelineBaseWrapper pretrained_model_name_or_path=engine_config.model_config.model, engine_config=engine_config, torch_dtype=torch.float16, ).to(f\u0026#34;cuda:{local_rank}\u0026#34;) pipe.prepare_run(input_config) xFuserPixArtAlphaPipeline 继承自 xFuserPipelineBaseWrapper，_init_runtime_state 函数经过一番调用后会使用 initialize_model_parallel 初始化 _RUNTIME 有关模型参数的部分和模型并行的全局变量 _DP, _CFG, _PP, _SP, _TP，它是一个 DiTRuntimeState (继承 RuntimeState) 实例，记录了每个 Group 包含的设备索引，除此之外还包括 PipeFusionParallel 中有关 patch 索引的参数 (在稍后 pipeline 执行的时候计算).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class xFuserPipelineBaseWrapper(xFuserBaseWrapper, metaclass=ABCMeta): def __init__( self, pipeline: DiffusionPipeline, engine_config: EngineConfig, ): self.module: DiffusionPipeline self._init_runtime_state(pipeline=pipeline, engine_config=engine_config) # backbone transformer = getattr(pipeline, \u0026#34;transformer\u0026#34;, None) unet = getattr(pipeline, \u0026#34;unet\u0026#34;, None) # vae vae = getattr(pipeline, \u0026#34;vae\u0026#34;, None) # scheduler scheduler = getattr(pipeline, \u0026#34;scheduler\u0026#34;, None) if transformer is not None: pipeline.transformer = self._convert_transformer_backbone(transformer) elif unet is not None: pipeline.unet = self._convert_unet_backbone(unet) if scheduler is not None: pipeline.scheduler = self._convert_scheduler(scheduler) super().__init__(module=pipeline) def _convert_transformer_backbone( self, transformer: nn.Module, ): #... logger.info(\u0026#34;Transformer backbone found, paralleling transformer...\u0026#34;) wrapper = **xFuserTransformerWrappersRegister.get_wrapper(transformer)** transformer = wrapper(transformer=transformer) return transformer initialize_model_parallel 该函数中会初始化一个 RankGenerator，它接收每个并行方法的设备组大小和并行度大小顺序。其主要的方法是通过 generate_masked_orthogonal_rank_groups 函数确定每个并行组由包含哪些设备，先把并行方法按照并行度从小到大排列成 tp-sp-pp-cfg-dp. 再根据要生成的并行组产生对应的 mask. 即如果要生成 pp 组对应的 rank，那么 mask = [0, 0, 1, 0, 0]\n该函数首先会生成需要生成的并行组的大小组成的 masked_shape 和不需要生成的 unmasked_shape. 首先要用 prefix_product 计算 global_stride，即每个并行度的设备组包含几个设备。再根据 mask 取出对应的 mask_stride 和 unmaskd_stride. group_size = mask_stride[-1] 即为最大并行度的组包含的设备数。num_of_group = num_of_device / mask_stride[-1] 即为要生成几个并行度最大的组。先遍历要生成的每个设备组，并用 decompose 函数确定该设备组在不需要并行维度上的索引；再遍历该组中的每个设备的 lock rank，确定该设备在需要并行维度上的索引，最后用 inner_product 确定该设备的 global rank.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def generate_masked_orthogonal_rank_groups( world_size: int, parallel_size: List[int], mask: List[bool] ) -\u0026gt; List[List[int]]: def prefix_product(a: List[int], init=1) -\u0026gt; List[int]: # Exclusive r = [init] for v in a: init = init * v r.append(init) return r def inner_product(a: List[int], b: List[int]) -\u0026gt; int: return sum([x * y for x, y in zip(a, b)]) def decompose(index, shape, stride=None): # index: 第几个并行组 # shape: 并行组大小的 list \u0026#34;\u0026#34;\u0026#34; This function solve the math problem below: There is an equation: index = sum(idx[i] * stride[i]) And given the value of index, stride. Return the idx. This function will used to get the pp/dp/pp_rank from group_index and rank_in_group. \u0026#34;\u0026#34;\u0026#34; if stride is None: stride = prefix_product(shape) idx = [(index // d) % s for s, d in zip(shape, stride)] # 计算在每个并行维度上的索引 # stride is a prefix_product result. And the value of stride[-1] # is not used. assert ( sum([x * y for x, y in zip(idx, stride[:-1])]) == index ), \u0026#34;idx {} with shape {} mismatch the return idx {}\u0026#34;.format(index, shape, idx) return idx masked_shape = [s for s, m in zip(parallel_size, mask) if m] # 需要采取并行的维度 unmasked_shape = [s for s, m in zip(parallel_size, mask) if not m] # 不需要的 global_stride = prefix_product(parallel_size) # exclusive 前缀积 表示大的并行维度包括几个设备 masked_stride = [d for d, m in zip(global_stride, mask) if m] unmasked_stride = [d for d, m in zip(global_stride, mask) if not m] group_size = prefix_product(masked_shape)[-1] # 最大的一个并行维度包括几个设备 num_of_group = world_size // group_size # 分成几个大组 ranks = [] for group_index in range(num_of_group): # 遍历每个设备组 # get indices from unmaksed for group_index. decomposed_group_idx = decompose(group_index, unmasked_shape) # 得到在不需要采取并行的维度上的索引 rank = [] for rank_in_group in range(group_size): # 遍历该组中的每个设备 local rank # get indices from masked for rank_in_group. decomposed_rank_idx = decompose(rank_in_group, masked_shape) # 得到最大并行组的每个设备在采取并行的维度上的索引 rank.append( // 相加得到全局rank inner_product(decomposed_rank_idx, masked_stride) + inner_product(decomposed_group_idx, unmasked_stride) ) ranks.append(rank) return ranks Hybrid Parallelsim Design xDiT支持四种并行方式：PipeFusion、Sequence、Data 和 CFG Parallel。其中，Data 和 CFG Parallel在图像间并行相对简单，而 PipeFusion和 Sequence 在图像内部的不同 Patch 间并行则较为复杂。能\nPipeFusion 利用 Input Tempor Redundancy特点，使用过时的 KV（Stale KV）进行 Attention 计算，这使得 PipeFusion 无法像大型语言模型那样轻松地实现并行策略的混合。使用标准的序列并行接口，如RingAttention、Ulysses或 USP，无法满足 SP 与PipeFusion混合并行的需求。\n我们对这个问题具体说明，下图展示了pipe_degree=4，sp_degree=2的混合并行方法。设置 num_pipeline_patch=4，图片切分为 M=num_pipeline_patch*sp_degree=8 个 Patch，分别是 P0~P7.\nStandard SP Attention 的输入Q，K，V 和输出 O 都是沿着序列维度切分，且切分方式一致。如果不同 rank 的输入 patch 没有重叠，每个 micro step 计算出 fresh KV 更新的位置在不同 rank 间也没有重叠。如下图所示，standard SP 的 KV Buffer 中黄色部分是 SP0 rank=0 拥有的 fresh KV，绿色部分是 SP1 rank=1 拥有的fresh KV，二者并不相同。在这个 diffusion step 内，device=0 无法拿到 P1,3,5,7 的 fresh KV 进行计算，但是 PipeFusion 则需要在下一个 diffusion step 中，拥有上一个diffusion step 全部的 KV. standard SP 只拥有 1/sp_degree 的 fresh kv buffer，因此无法获得混合并行推理正确的结果。\nxDiT专门定制了序列并行的实现方式，以适应这种混合并行的需求。xDiT使用 xFuserLongContextAttention 把SP的中间结果存在 KV Buffer 内。效果如下图，每个 micro-step SP 执行完毕后，SP Group 内不同 rank 设备的 fresh KV是 replicate 的。这样一个 diffusion step 后，SP Group 所有设备的 KV Buffer 都更新成最新，供下一个 Diffusion Step 使用。\nNote\n假设一共有 16 个 GPU，索引表示为 g0 \u0026hellip; g15，并行方法和并行度设置如下\ndp_degree (2) * cfg_degree (2) * pp_degree (2) * sp_degree (2) = 16.\n那么一共会创建 2 data parallel-groups, 8 CFG groups, 8 pipeline-parallel groups \u0026amp; 8 sequence-parallel groups:\n2 data-parallel groups: [g0, g1, g2, g3, g4, g5, g6, g7], [g8, g9, g10, g11, g12, g13, g14, g15] 8 CFG-parallel groups: [g0, g4], [g1, g5], [g2, g6], [g3, g7], [g8, g12], [g9, g13], [g10, g14], [g11, g15] 8 pipeline-parallel groups: [g0, g2], [g4, g6], [g8, g10], [g12, g14], [g1, g3], [g5, g7], [g9, g11], [g13, g15] 8 sequence-parallel groups: [g0, g1], [g2, g3], [g4, g5], [g6, g7], [g8, g9], [g10, g11], [g12, g13], [g14, g15] Convert Model _split_transformer_blocks 会对 transformer block 进行分配，如果 parallel_config 指定了 attn_layer_num_for_pp，即存有每个 pipeFusion 的设备被分配的 transformer block 数量的列表，按其进行分配；否则平均分。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def _split_transformer_blocks(self, transformer: nn.Module,): # omit # transformer layer split attn_layer_num_for_pp = ( # 获取每个 pipeFusion 的设备被分配的 transformer block 数量 get_runtime_state().parallel_config.pp_config.attn_layer_num_for_pp ) pp_rank = get_pipeline_parallel_rank() pp_world_size = get_pipeline_parallel_world_size() if attn_layer_num_for_pp is not None: if is_pipeline_first_stage(): transformer.transformer_blocks = transformer.transformer_blocks[ : attn_layer_num_for_pp[0]] else: transformer.transformer_blocks = transformer.transformer_blocks[sum(attn_layer_num_for_pp[: pp_rank - 1]) : sum(attn_layer_num_for_pp[:pp_rank])] else: # 没有指定则平均分 num_blocks_per_stage = (len(transformer.transformer_blocks) + pp_world_size - 1) // pp_world_size start_idx = pp_rank * num_blocks_per_stage end_idx = min((pp_rank + 1) * num_blocks_per_stage, len(transformer.transformer_blocks),) transformer.transformer_blocks = transformer.transformer_blocks[start_idx:end_idx] # position embedding if not is_pipeline_first_stage(): transformer.pos_embed = None if not is_pipeline_last_stage(): transformer.norm_out = None transformer.proj_out = None return transformer 同时也会 convert 原先的 transformer backbone 为 xFuserPixArtTransformer2DWrapper，具体表现为只有 pipeline 的第一阶段进行 position embedding，最后一阶段进行 unpatchify 变为原来的图像形状。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 @xFuserTransformerWrappersRegister.register(PixArtTransformer2DModel) class xFuserPixArtTransformer2DWrapper(xFuserTransformerBaseWrapper): def __init__( self, transformer: PixArtTransformer2DModel, ): super().__init__( transformer=transformer, submodule_classes_to_wrap=[nn.Conv2d, PatchEmbed], submodule_name_to_wrap=[\u0026#34;attn1\u0026#34;], ) @xFuserBaseWrapper.forward_check_condition def forward( self, hidden_states: torch.Tensor, encoder_hidden_states: Optional[torch.Tensor] = None, timestep: Optional[torch.LongTensor] = None, added_cond_kwargs: Dict[str, torch.Tensor] = None, cross_attention_kwargs: Dict[str, Any] = None, attention_mask: Optional[torch.Tensor] = None, encoder_attention_mask: Optional[torch.Tensor] = None, return_dict: bool = True, ): \u0026#39;\u0026#39;\u0026#39; ...... \u0026#39;\u0026#39;\u0026#39; height, width = self._get_patch_height_width() # * only pp rank 0 needs pos_embed (patchify) if is_pipeline_first_stage(): hidden_states = self.pos_embed(hidden_states) \u0026#39;\u0026#39;\u0026#39; ...... \u0026#39;\u0026#39;\u0026#39; if is_pipeline_last_stage(): \u0026#39;\u0026#39;\u0026#39; ...... \u0026#39;\u0026#39;\u0026#39; else: output = hidden_states if not return_dict: return (output,) return Transformer2DModelOutput(sample=output) Pipeline Execution 在进行 warm up 后便会进行模型推理和采样器的去噪过程。模型推理通过调用 pipeline 的 __call__ 方法实现。在原先 diffusers 包中的 PixaeArtAlphaPipeline 基础上做了一些修改。我们直接看修改的部分。\nget_runtime_state() 返回 _RUNTIME ，再调用 set_input_parameters 方法，设置输入参数和计算 PipeFusionParallel 中有关 patch 索引的参数。\n1 2 3 4 5 6 get_runtime_state().set_input_parameters( height=height, width=width, batch_size=batch_size, num_inference_steps=num_inference_steps, ) 该函数会计算\npipeline parallel 中每个 patch 的高度，必须是 patch_size * num_sp_patches 的整数倍。 将每个流水线阶段的 patch 高度均匀地分配给 num_sp_patches 个序列并行设备，计算每个设备的 patch 高度和起始索引。 然后会对 prompt 嵌入后的正样本和负样本在 cfg parallel 组中的设备进行分割, rank 0 负样本，rank 1 正样本。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 if do_classifier_free_guidance: (prompt_embeds, prompt_attention_mask,) = self._process_cfg_split_batch(negative_prompt_embeds, prompt_embeds, negative_prompt_attention_mask, prompt_attention_mask,) def _process_cfg_split_batch(self, concat_group_0_negative: torch.Tensor, concat_group_0: torch.Tensor, concat_group_1_negative: torch.Tensor, concat_group_1: torch.Tensor,): if get_classifier_free_guidance_world_size() == 1: concat_group_0 = torch.cat([concat_group_0_negative, concat_group_0], dim=0) concat_group_1 = torch.cat([concat_group_1_negative, concat_group_1], dim=0) elif get_classifier_free_guidance_rank() == 0: concat_group_0 = concat_group_0_negative concat_group_1 = concat_group_1_negative elif get_classifier_free_guidance_rank() == 1: concat_group_0 = concat_group_0 concat_group_1 = concat_group_1 else: raise ValueError(\u0026#34;Invalid classifier free guidance rank\u0026#34;) return concat_group_0, concat_group_1 Async Pipeline Initialize Pipeline 首先会初始化 pipeline，rank 0 会接收 warmup 阶段的 latents 然后沿着 H 维度进行分块，rank -1 也会沿着 H 维度进行分块。然后为每个 patch 创建接收的任务，注意 rank 0 第一次是从 warmup 阶段接收 latents，所以他的需要接收的 timestep 少一个。 patch_latents 表示当前设备正在处理的 patch 数据，它会在流水线的每一阶段进行处理和传递。last_patch_latents 只在流水线的最后阶段设备中使用，用来存储每个 patch 的最终计算结果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 if len(timesteps) == 0: return latents num_pipeline_patch = get_runtime_state().num_pipeline_patch num_pipeline_warmup_steps = get_runtime_state().runtime_config.warmup_steps patch_latents = self._init_async_pipeline( num_timesteps=len(timesteps), latents=latents, num_pipeline_warmup_steps=num_pipeline_warmup_steps, ) last_patch_latents = ( # 每个 pipeline group 最后的设备接收所有的 patch [None for _ in range(num_pipeline_patch)] if (is_pipeline_last_stage()) else None ) def _init_async_pipeline( self, num_timesteps: int, latents: torch.Tensor, num_pipeline_warmup_steps: int, ): get_runtime_state().set_patched_mode(patch_mode=True) if is_pipeline_first_stage(): # get latents computed in warmup stage # ignore latents after the last timestep latents = (get_pp_group().pipeline_recv() if num_pipeline_warmup_steps \u0026gt; 0 else latents) patch_latents = list(latents.split(get_runtime_state().pp_patches_height, dim=2)) elif is_pipeline_last_stage(): patch_latents = list(latents.split(get_runtime_state().pp_patches_height, dim=2)) else: patch_latents = [None for _ in range(get_runtime_state().num_pipeline_patch)] recv_timesteps = (num_timesteps - 1 if is_pipeline_first_stage() else num_timesteps) # construct receive tasks for each patch for _ in range(recv_timesteps): for patch_idx in range(get_runtime_state().num_pipeline_patch): get_pp_group().add_pipeline_recv_task(patch_idx) return patch_latents Iterate Over Timesteps 对于每个 timestep（即每个去噪步骤），会对每个 patch 执行：\n如果当前设备是流水线的最后一阶段 (is_pipeline_last_stage())，将当前 patch 的数据保存到 last_patch_latents 中。 如果不是第一阶段的第一个时间步 (i == 0)，调用 recv_next() 来异步接收来自上一设备的 patch 数据（非阻塞操作，通过 irecv 完成）。 对每个 patch 执行模型的前向传播 _backbone_forward，根据当前时间步 t 进行推理和计算。 如果当前设备是最后一阶段，调用 _scheduler_step 来根据噪声进行去噪，并将数据发送给下一个设备 pipeline_isend。 对于非最后阶段的设备，继续将当前 patch 的计算结果发送到下一设备。 get_pp_group().pipeline_isend 用于将当前 patch 发送到下一个设备，使用的是 torch.distributed.isend，这是非阻塞发送。 get_pp_group().recv_next 会准备好接收来自上一个设备的数据，recv_buffer 用来存放接收到的数据。irecv 实现非阻塞接收，可以在等待数据的同时进行其他操作。\nWarning\nscheduler_step 只对单独的 patch 进行，原因未知。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 first_async_recv = True for i, t in enumerate(timesteps): for patch_idx in range(num_pipeline_patch): if is_pipeline_last_stage(): last_patch_latents[patch_idx] = patch_latents[patch_idx] if is_pipeline_first_stage() and i == 0: pass else: if first_async_recv: get_pp_group().recv_next() first_async_recv = False patch_latents[patch_idx] = get_pp_group().get_pipeline_recv_data( idx=patch_idx ) patch_latents[patch_idx] = self._backbone_forward( latents=patch_latents[patch_idx], prompt_embeds=prompt_embeds, prompt_attention_mask=prompt_attention_mask, added_cond_kwargs=added_cond_kwargs, t=t, guidance_scale=guidance_scale, ) if is_pipeline_last_stage(): patch_latents[patch_idx] = self._scheduler_step( patch_latents[patch_idx], # pred noise last_patch_latents[patch_idx], # last timestep noise t, extra_step_kwargs, ) if i != len(timesteps) - 1: get_pp_group().pipeline_isend( patch_latents[patch_idx], segment_idx=patch_idx ) else: get_pp_group().pipeline_isend( patch_latents[patch_idx], segment_idx=patch_idx ) if is_pipeline_first_stage() and i == 0: pass else: if i == len(timesteps) - 1 and patch_idx == num_pipeline_patch - 1: pass else: get_pp_group().recv_next() get_runtime_state().next_patch() # switch to next: (self.pipeline_patch_idx + 1) % self.num_pipeline_patch if i == len(timesteps) - 1 or ( (i + num_pipeline_warmup_steps + 1) \u0026gt; num_warmup_steps and (i + num_pipeline_warmup_steps + 1) % self.scheduler.order == 0 ): progress_bar.update() assert callback is None, \u0026#34;callback not supported in async \u0026#34; \u0026#34;pipeline\u0026#34; if ( callback is not None and i + num_pipeline_warmup_steps % callback_steps == 0 ): step_idx = (i + num_pipeline_warmup_steps) // getattr( self.scheduler, \u0026#34;order\u0026#34;, 1 ) callback(step_idx, t, patch_latents[patch_idx]) Construct Final Latents timestep 遍历完成后，仍然有最后的操作要进行，这些操作的主要目的是将流水线并行中各个 patch 的结果拼接起来，形成完整的输出结果。尤其是对于最后一个设备，还需要处理 序列并行（sequence parallelism） 的合并操作。通过 all_gather 操作将每个设备上处理的 patch 结果收集起来，然后从每个设备的 sp_latents_list 中，提取出对应于 pp_patch_idx 的 patch 数据并将它们拼接起来。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 latents = None if is_pipeline_last_stage(): latents = torch.cat(patch_latents, dim=2) if get_sequence_parallel_world_size() \u0026gt; 1: sp_degree = get_sequence_parallel_world_size() sp_latents_list = get_sp_group().all_gather( latents, separate_tensors=True ) latents_list = [] for pp_patch_idx in range(get_runtime_state().num_pipeline_patch): latents_list += [ sp_latents_list[sp_patch_idx][ ..., get_runtime_state().pp_patches_start_idx_local[pp_patch_idx] : get_runtime_state().pp_patches_start_idx_local[pp_patch_idx + 1], :, ] for sp_patch_idx in range(sp_degree) ] latents = torch.cat(latents_list, dim=-2) return latents Decode Latents 为了避免 VAE 中的 Decoder 在对 8192px 分辨率图像进行 conv2D 的过程中出现 OOM 的问题， xDiT 使用了序列并行和 patch 并行的 PatchConv2d 和 PatchGroupNorm 来替换掉原有 Decoder 中的 UpDecoderBlock2D 对应的层。\nPatchGroupNorm PatchGroupNorm 在 H 维度上划分为多个 patch，每个设备求自己所负责的部分和。 GroupNorm Principles 假设输入张量 x 的形状为 [N, C, H, W]，其中 N 表示批量大小（Batch Size），C 表示通道数（Channels），H 和 W 分别表示高度和宽度。在 GN 中，通道数 C 被划分为 G 组，每个组包含 C/G 个通道。计算每个组内即 [C/G, H, W] 维度上的均值和方差。特别的 G=1 时，GN 退化为 BN。G=C 时，GN 退化为 LN。 获取高度信息 1 2 3 4 5 6 7 class PatchGroupNorm(nn.Module): \u0026#39;\u0026#39;\u0026#39; def __init__(self, ...)\u0026#39;\u0026#39;\u0026#39; def forward(self, x: Tensor) -\u0026gt; Tensor: height = torch.tensor(x.shape[-2], dtype=torch.int64, device=x.device) dist.all_reduce(height) # 收集所有进程的高度并汇总。最终每个进程的 height 都将表示全局的高度和。 计算每个组的通道数量以及每个进程内的元素数量 1 2 3 channels_per_group = x.shape[1] // self.num_groups # 每个组的通道数量 nelements_rank = channels_per_group * x.shape[-2] * x.shape[-1] # 当前进程负责的每个组中的元素总 nelements = channels_per_group * height * x.shape[-1] # 所有进程的每个组中的元素总数 计算每个组的均值 1 2 3 4 5 x = x.view(x.shape[0], self.num_groups, -1, x.shape[-2], x.shape[-1]) # [batch_size, num_groups, channels_per_group, height, width] group_sum = x.mean(dim=(2,3,4), dtype=torch.float32) # 对每个组的所有元素 (channels_per_group, height, width) 求平均 group_sum = group_sum * nelements_rank # 加权后的局部和 = 局部均值 * 当前进程的元素数量 dist.all_reduce(group_sum) # 收集并汇总所有进程的局部和，得到全局和 E = (group_sum / nelements)[:, :, None, None, None].to(x.dtype) # 计算全局的均值 E 计算每个组的方差 1 2 3 4 5 6 # 和计算均值同样的操作 group_var_sum = torch.empty((x.shape[0], self.num_groups), dtype=torch.float32, device=x.device) torch.var(x, dim=(2,3,4), out=group_var_sum) group_var_sum = group_var_sum * nelements_rank dist.all_reduce(group_var_sum) var = (group_var_sum / nelements)[:, :, None, None, None].to(x.dtype) 归一化并缩放 $y = \\frac{x - \\mathrm{E}[x]}{ \\sqrt{\\mathrm{Var}[x] + \\epsilon}} * \\gamma + \\beta$ 1 2 3 x = (x - E) / torch.sqrt(var + self.eps) x = x * self.weight[:, :, None, None, None] + self.bias[:, :, None, None, None] return x PatchConv2d PatchConv2d 将潜在空间中的特征映射分割成多个 patch，跨不同设备进行序列并行 VAE 解码。这种技术将中间激活所需的峰值内存减少到 1/N，其中 N 是所使用的设备数量。对于 VAE 中的卷积算子，需要对如下图所示的 halo 区域数据进行通信。\nPatch VAE Conv\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class PatchConv2d(nn.Conv2d): def __init__( self, in_channels: int, out_channels: int, kernel_size: _size_2_t, stride: _size_2_t = 1, padding: Union[str, _size_2_t] = 0, dilation: _size_2_t = 1, groups: int = 1, bias: bool = True, padding_mode: str = \u0026#39;zeros\u0026#39;, # TODO: refine this type device=None, dtype=None, block_size: Union[int, Tuple[int, int]] = 0 ) -\u0026gt; None: if isinstance(dilation, int): assert dilation == 1, \u0026#34;dilation is not supported in PatchConv2d\u0026#34; else: for i in dilation: assert i == 1, \u0026#34;dilation is not supported in PatchConv2d\u0026#34; self.block_size = block_size super().__init__( in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias, padding_mode, device, dtype) _conv_forward 函数是 PatchConv2d 类的核心，它负责在输入张量上执行卷积操作，特别是在分布式计算场景下处理跨进程的输入切分、halo 区域的传递和计算。以下是使用的辅助函数的简要功能说明\n_get_world_size_and_rank ：获取当前分布式环境中的进程总数 world_size 和当前进程的编号 rank _calc_patch_height_index：根据每个进程的输入高度，计算所有进程的起始和结束高度索引。 _calc_halo_width_in_h_dim：计算当前进程在 h 维度上所需的上方和下方的 halo 区域宽度。 _calc_bottom_halo_width：计算当前进程从下方相邻进程需要接收的 halo 区域的宽度。 _calc_top_halo_width：计算当前进程从上方相邻进程需要接收的 halo 区域的宽度。 _adjust_padding_for_patch：根据当前进程的 rank 和总进程数调整输入数据的填充方式，防止边界重复计算。 获取输入信息以及通信组信息 1 2 3 4 5 6 7 8 9 10 11 12 def _conv_forward(self, input: Tensor, weight: Tensor, bias: Optional[Tensor]): bs, channels, h, w = input.shape world_size, rank = self._get_world_size_and_rank() if (world_size == 1): # 处理非分布式情况 if self.padding_mode != \u0026#39;zeros\u0026#39;: return F.conv2d(F.pad(input, self._reversed_padding_repeated_twice, mode=self.padding_mode), weight, bias, self.stride, _pair(0), self.dilation, self.groups) return F.conv2d(input, weight, bias, self.stride, self.padding, self.dilation, self.groups) 获取输入的元数据 1 2 3 4 patch_height_list = [torch.zeros(1, dtype=torch.int64, device=f\u0026#34;cuda:{rank}\u0026#34;) for _ in range(dist.get_world_size())] dist.all_gather(patch_height_list, torch.tensor([h], dtype=torch.int64, device=f\u0026#34;cuda:{rank}\u0026#34;)) # 收集所有进程的输入高度 patch_height_index = self._calc_patch_height_index(patch_height_list) # 计算每个进程块的起始高度和结束高度的索引 halo_width = self._calc_halo_width_in_h_dim(rank, patch_height_index, self.kernel_size[0], self.padding[0], self.stride[0]) # 计算当前进程块的上下 halo 区域的宽度 计算相邻进程的 halo 区域 (也就是自己需要接发送的部分) 通过计算前一个进程的 bottom_halo_width 和后一个进程的 top_halo_width 得出自己需要发送的部分\n1 2 3 4 5 6 7 prev_bottom_halo_width: int = 0 next_top_halo_width: int = 0 if rank != 0: prev_bottom_halo_width = self._calc_bottom_halo_width(rank - 1, patch_height_index, self.kernel_size[0], self.padding[0], self.stride[0]) if rank != world_size - 1: next_top_halo_width = self._calc_top_halo_width(rank + 1, patch_height_index, self.kernel_size[0], self.padding[0], self.stride[0]) next_top_halo_width = max(0, next_top_halo_width) 进行 halo 区域的发送与接收 异步发送，同步接收\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 to_next = None to_prev = None top_halo_recv = None bottom_halo_recv = None if next_top_halo_width \u0026gt; 0: bottom_halo_send = input[:, :, -next_top_halo_width:, :].contiguous() to_next = dist.isend(bottom_halo_send, rank + 1) if halo_width[0] \u0026gt; 0: # not rank 0 top_halo_recv = torch.empty([bs, channels, halo_width[0], w], dtype=input.dtype, device=f\u0026#34;cuda:{rank}\u0026#34;) dist.recv(top_halo_recv, rank - 1) if prev_bottom_halo_width \u0026gt; 0: # not rank N-1 top_halo_send = input[:, :, :prev_bottom_halo_width, :].contiguous() to_prev = dist.isend(top_halo_send, rank - 1) if halo_width[1] \u0026gt; 0: bottom_halo_recv = torch.empty([bs, channels, halo_width[1], w], dtype=input.dtype, device=f\u0026#34;cuda:{rank}\u0026#34;) dist.recv(bottom_halo_recv, rank + 1) 拼接 halo 区域 1 2 3 4 5 6 7 if halo_width[0] \u0026lt; 0: # Remove redundancy at the top of the input input = input[:, :, -halo_width[0]:, :] if top_halo_recv is not None: # concat the halo region to the input tensor input = torch.cat([top_halo_recv, input], dim=-2) if bottom_halo_recv is not None: input = torch.cat([input, bottom_halo_recv], dim=-2) 等待发送完成再开始计算 1 2 3 4 if to_next is not None: to_next.wait() if to_prev is not None: to_prev.wait() 进行卷积和后处理 为了减少 memory spike 一次计算 block_size*block_size 的区域，并将结果拼接起来\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 padding = self._adjust_padding_for_patch(self._reversed_padding_repeated_twice, rank=rank, world_size=world_size) if self.block_size == 0 or (h \u0026lt;= self.block_size and w \u0026lt;= self.block_size): if self.padding_mode != \u0026#39;zeros\u0026#39;: conv_res = F.conv2d(F.pad(input, padding, mode=self.padding_mode), weight, bias, self.stride, _pair(0), self.dilation, self.groups) else: conv_res = F.conv2d(input, weight, bias, self.stride, self.padding, self.dilation, self.groups) return conv_res else: if self.padding_mode != \u0026#34;zeros\u0026#34;: input = F.pad(input, padding, mode=self.padding_mode) elif self.padding != 0: input = F.pad(input, padding, mode=\u0026#34;constant\u0026#34;) _, _, h, w = input.shape num_chunks_in_h = (h + self.block_size - 1) // self.block_size # h 维度的 block 数量 num_chunks_in_w = (w + self.block_size - 1) // self.block_size # w ... unit_chunk_size_h = h // num_chunks_in_h unit_chunk_size_w = w // num_chunks_in_w outputs = [] for idx_h in range(num_chunks_in_h): inner_output = [] for idx_w in range(num_chunks_in_w): start_w = idx_w * unit_chunk_size_w start_h = idx_h * unit_chunk_size_h end_w = (idx_w + 1) * unit_chunk_size_w end_h = (idx_h + 1) * unit_chunk_size_h # 计算每个块的开始和结束索引，调整块的边界 # ... # 对当前块执行卷积操作 inner_output.append( F.conv2d( input[:, :, start_h:end_h, start_w:end_w], weight, bias, self.stride, 0, self.dilation, self.groups, ) ) outputs.append(torch.cat(inner_output, dim=-1)) return torch.cat(outputs, dim=-2) ","permalink":"http://localhost:1313/blogs/xdit/","summary":"This is a brief introduction to the xDiT Principle.","title":"xDiT Principle"},{"content":"Basic 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from vllm import LLM, SamplingParams # Sample prompts. prompts = [ \u0026#34;Hello, my name is\u0026#34;, \u0026#34;The president of the United States is\u0026#34;, \u0026#34;The capital of France is\u0026#34;, \u0026#34;The future of AI is\u0026#34;, ] # Create a sampling params object. sampling_params = SamplingParams(temperature=0.8, top_p=0.95) # Create an LLM. llm = LLM(model=\u0026#34;facebook/opt-125m\u0026#34;) # Generate texts from the prompts. The output is a list of RequestOutput objects # that contain the prompt, generated text, and other information. outputs = llm.generate(prompts, sampling_params) # Print the outputs. for output in outputs: prompt = output.prompt generated_text = output.outputs[0].text print(f\u0026#34;Prompt: {prompt!r}, Generated text: {generated_text!r}\u0026#34;) Architecture VLLM Architecture Overview\nLLM: 最上层的类，构造函数中会根据传入的参数构建 EngineArgs 然后创建 LLMEngine 对象。 LLMEngine: 包含一些组件 InputPreprocessor, ExecutorBase 负责模型推理的最上层的类 ExecutorBase 会初始化 N 个 WorkerWrapperBase (包装实际的 worker，类比成 GPU) Worker: 在 GPU 上执行 (一部分) 模型推理。每个 worker 与一个 GPU 相关联，负责维护 KV Cache 并在 GPU 上执行模型推理。在分布式推理的情况下，每个 worker 被分配模型的一部分。 ModelRunner: 执行模型推理并负责采样新 token. CacheEngine: 负责初始化和管理 GPU 和 CPU KV Cache. 还提供了对 KV Cache 进行操作的方法。通过 initialize_cache() 初始化。 Scheduler: 负责推理时候对请求的调度。组件包括一个 BlockSpaceManager (KV Cache blocks 管理的核心类) 以及三个队列 waiting, running \u0026amp; swapped. LLMEngine Initialization InputPreprocessor: 主要是在 add_request() 方法中将输入的 prompt 放入 tokenizer 进行处理。 InputRegistry: 根据目标模型对 InputPreprocessor 之后的数据进行处理。 Init Executor 1 2 3 4 5 6 7 8 9 class DistributedExecutorBase(ExecutorBase): \u0026#34;\u0026#34;\u0026#34;Abstract superclass of distributed executor implementations.\u0026#34;\u0026#34;\u0026#34; def __init__(self, *args, **kwargs): # This is non-None when the execute model loop is running # in the parallel workers. It\u0026#39;s a coroutine in the AsyncLLMEngine case. self.parallel_worker_tasks: Optional[Union[Any, Awaitable[Any]]] = None super().__init__(*args, **kwargs) ExecutorBase 的构造函数中会调用 self._init_executor() 对应到具体子类的函数。如果采用 TP 或 PP 的话 对应到的是 RayDistributedExecutor，否则对应到的是 UniProcExecutor. 下面以后者为例。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class UniProcExecutor(ExecutorBase): uses_ray: bool = False def _init_executor(self) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;Initialize the worker and load the model. \u0026#34;\u0026#34;\u0026#34; self.driver_worker = WorkerWrapperBase(vllm_config=self.vllm_config, rpc_rank=0) distributed_init_method = get_distributed_init_method( get_ip(), get_open_port()) local_rank = 0 # set local rank as the device index if specified device_info = self.vllm_config.device_config.device.__str__().split( \u0026#34;:\u0026#34;) if len(device_info) \u0026gt; 1: local_rank = int(device_info[1]) rank = 0 kwargs = dict( vllm_config=self.vllm_config, local_rank=local_rank, rank=rank, distributed_init_method=distributed_init_method, is_driver_worker=(not self.parallel_config) or (rank % self.parallel_config.tensor_parallel_size == 0), ) self.collective_rpc(\u0026#34;init_worker\u0026#34;, args=([kwargs], )) self.collective_rpc(\u0026#34;init_device\u0026#34;) self.collective_rpc(\u0026#34;load_model\u0026#34;) def collective_rpc(self, method: Union[str, Callable], timeout: Optional[float] = None, args: Tuple = (), kwargs: Optional[Dict] = None) -\u0026gt; List[Any]: if kwargs is None: kwargs = {} answer = run_method(self.driver_worker, method, args, kwargs) # 初始化 Worker return [answer] Executor: 初始化具体的继承自 ExecutorBase 的对象，该对象的初始化过程中会调用 init_worker() 初始化 Worker (被 WorkerWrapperBase 包装)，调用 init_device() 初始化设备，和调用具体 Worker 对象的 model_runner 的 load_model() 将模型加载到设备上。 Worker: 构造函数中会初始化 GPUModelRunnerBase 对象，确定计算 attention 使用的 backend 还有 CUDAGraphRunner 用于将模型的计算过程记录为一个静态图，在后续的推理中，通过直接 replay 这个静态图来避免动态调度和重复的内核启动开销。 initialize_kv_caches LLMEngine 构造函数在初始化 ExecutorBase 后会调用 initialize_kv_caches() 来初始化 Worker 中的 KV Cache，流程如下:\n该函数会首先通过 Worker.determine_num_available_blocks() 确定 GPU 和 CPU 可用的 block 数量。后者在 memory_profiling 上下文中进行 profile_run() 模拟模型在最大负载 (max_num_batched_tokens 和 max_num_seqs) 下执行一次推理。测量内存使用并分解为权重、激活张量和非 PyTorch 部分。留给 KV Cache 的内存大小为 total_mem * max_utilization - weight_mem - act_mem - nontorch_mem. 再除以每一个 block 能存储的的 KV Cache 大小 cache_size = Cache_config.block_size * num_attention_layers * 2*num_heads*head_size 即可得到最多能分配多少个 GPU block. 而 CPU block 数量由预设的 swap_size // cache_size 所确定。 确定了 GPU 和 CPU 的 block 数量后会调用 Worker.initialize_cache() 方法，里面首先会调用 Worker._init_cache_engine() 根据传入的 GPU block 个数初始化 CacheEngine (初始化 attn_backend，调用 CacheEngine._allocate_kv_cache() 为模型的每一层 transformer 开辟 CPU 和 GPU 的 KV Cache 内存)，然后会调用 bind_kv_cache() 将 GPU KV Cache Tensor 绑定到对应的模型的注意力层，它筛选需要 KV Cache 的注意力层，按层索引排序并去重后为每个设备绑定对应的 Tensor. 预热之后进行 capture_model 记录计算图。 Init Scheduler 构造函数中会初始化 BlockSpaceManager. 首先会创建一个 CpuGpuBlockAllocator，为 CPU 和 GPU 块维护单独的内存池，并允许在这些内存池中分配、释放、分叉和交换块。它会为 CPU 和 GPU 中的 blocks 分别创建一个 BlockAlloctor. 还会初始化一个空的 Dict[SeqId, BlockTable]， 表示对应 seq 的 KV Cache 所使用的物理内存块。还会初始化一些调度时所需要的数据，后文再谈。\n还会初始化 waiting(包含新的或 preempted prefill 请求), running \u0026amp; swapped(被换出的 decoding 请求), 它们是 Deque[SequenceGroup]，其中 SequenceGroup(SG) 是一组由同一个 prompt 生成的 Sequences 和对应的采样参数。\nSequenceGroupOutputProcessor: 抽象基类借接口，会分为 SingleStepOutputProcessor (支持 beam seaching) 和 MultiStepOutputProcessor (支持 speculatice decoding) LLM Generate _validate_and_add_requests 里面会调用 _add_request() 给 prompt 分配 reqest_id 后会调用 LLMEngine.add_request() 将其添加到请求池中，并将在调用 LLMEngine.step() 时由调度器处理。确切的调度策略由调度程序确定。主要就是进行 tokenize，然后打包成 SG 后加入 waiting.\n__run_engine 调用 generate 时首先会将 prompt 包装成 SG，它是包含某个 prompt 生成的所有 Sequence，以及一些其他在调度时需要的信息的结构。Scheduler 里面包含三个 Deque[SequenceGroup]: waiting, running \u0026amp; swapped. generate() \u0026ndash;\u0026gt; _run_engine() \u0026ndash;\u0026gt; step() \u0026ndash;\u0026gt; Scheduler.schedule() \u0026ndash;\u0026gt; Scheduler._schedule() Scheduler 的一些操作与 BlockManager 息息相关，我们在下面先简要说明逻辑，有关其具体结构和操作流程在后文中解释。\nstep 执行一次 decoding 迭代并返回新生成的结果。 Overview of the step function 主要流程如下\n调度要在下一次迭代中执行的 seq 和要交换入/出/复制的令牌块。根据调度策略，Sequences 可能被抢占/重新排序。 调用分布式执行器来执行模型。 处理模型输出。主要包括： decoding 相关输出，使用 _beam_search 与否的模型输出更新调度 seq 组和释放已完成的 seq 组。 读取上一次调度的元数据和输出 如果没有剩余步骤且，调用 Scheduler.schedule() 执行新调度，生成 seq 组元数据、调度输出和异步标志。 获取并重置已完成请求 ID，清理内存 如果不允许异步且有输出队列，处理模型输出。 从 Cache 获取上一次迭代的 sampled_token_ids，构造 ExecuteModelRequest 后调用 Executor.execute_model() (最后是由 ModelRunner) 执行模型推理，获取输出。 _schedule_prefill() 检查 budget 是否耗尽 取出队列head 部的 SequenceGroup (prefill 阶段 SequenceGroup 只有一个初始 prompt Sequence) 计算 uncached 和 cached 的新 token 数 调用 BlockSpaceManager.can_allocate() 检查是否能分配足够内存。 若能满足 budget，从 waiting 中移除 SequenceGroup. 调用 _allocate_and_set_running() 分配内存并设置为 RUNNING 状态。 _schedule_running() 取出队列head 部 SequenceGroup 并计算其包含 seq 的 #uncached_token. 这里不需要 #cached_token 因为若使用 chunked prefill，该信息已经在第一次 prefill 时使用，如果不使用那么他就是进行 decoding 的 seq ，不需要用到这个信息。 从 running 移除该 SequenceGroup. 循环调用 Scheduler._can_append_slots() 检查是否有足够的空间存储该 SequenceGroup 的 KV Cache，若不能，进入抢占逻辑 从 budget 中减去当前 SequenceGroup 的 token 和 seq 数 若 running 有其他 SequenceGroup，抢占最低优先级（队列尾部）的，若该 SequenceGroup 只有一个正在运行的 Sequence 则抢占模式为 RECOMPUTE 加入到 preempted，否则为 SWAP 加入到 swapped_out. 分配 slot 并更新 blocks_to_copy，根据该 Sequence 处于 decoding(生成 1 个 token 的 KV Cache ) 或者 prefill(生成 #uncached_token 的 KV Cache) 加入到 prefill_seq_group 或者 decode_seq_groups，并更新 budget. 返回 decode_seq_groups：存储 decoding SequenceGroup. prefill_seq_groups：存储分块 prefill SequenceGroup. preempted：被抢占需重新计算的 SequenceGroup. swapped_out：被交换到 CPU 的 SequenceGroup. keys_to_swap_out 和 keys_to_copy：内存块交换和复制的映射 _schedule_swapepd() 循环遍历 swapped 队列，取出队列head 部的 SequenceGroup，调用 BlockManager.can_swap_in() (实际上是 SWAPPED 状态的 can_swap) 获取 SequenceGroup 中处于 SWAPPED 的 Sequence 个数和 token 个数，是否满足预算。 调用 _swap_in(实际上是 BlockManager.swap_in()) 执行交换，更新 blocks_to_swap_in，将 Sequence 状态由 SWAPPED 变为 RUNNING. 调用 _append_slots 给被换入的 Sequence 分配 block. 根据 SequenceGroup 的状态添加到不同队列。 返回blocks_to_swap_in：记录需要从 CPU 交换到 GPU 的块映射。blocks_to_copy：记录需要复制的块映射（例如写时复制）。decode_seq_groups 和 prefill_seq_groups：分别存储 decoding 和 prefill SequenceGroup. infeasible_seq_groups：存储无法调度的 SequenceGroup. swapped_queue：引用交换队列。leftover_swapped：暂存无法立即调度的 SequenceGroup. _schedule_chunked_prefill() 主要思想是: 1.安排尽可能多的 decoding 请求。2.调度未完成的 prefill 请求。3.调度交换请求。4.安排新的 prefill 请求。\n初始化 budget，限制最大批处理 token 数和 seq 数。 从 running 和 waiting 生成 PartialPrefillMetadata prefills: running 和 waiting 中未完成 prefill 的 #SequenceGroup. long_prefills: running 中需要进行 prefill 的 token 数很多的 #SequenceGroup. waiting_long_prefills: waiting 中需要进行且能进行的 (未超过 ScheduleConfig 限制) prefill 的 token 数很多的 #SequenceGroup. 调用 _schedule_running. 在 running 调度返回中无无抢占或交换时(说明有足够空间) 执行 _schedule_swapped 调用 _schedule_prefills. 更新 waiting，添加 running 调度中返回的被抢占的 seq running_scheduled.preempted. 按优先级更新 running. swapped_in.decode_seq_groups：交换回来的 decoding 请求。 swapped_in.prefill_seq_groups：交换回来的 prefill 请求。 running_scheduled.decode_seq_groups：运行中的 decoding 请求。 running_scheduled.prefill_seq_groups（按完成顺序）：未完成的分块 prefill 。使用 _order_finishing_prefills_first 确保即将完成的 prefill 优先，便于下一轮转为 decoding. prefills.seq_groups：新 prefill 请求。 将运行队列中交换出去的 running_scheduled.swapped_out 添加到 swapped. 按顺序组合所有调度的 SequenceGroup: prefill 优先（满足注意力机制假设），decoding 次之。 调整 lookahead_slots 数量。若所有被调度的均为 prefill 且未启用多步调度，设置 num_lookahead_slots = 0(避免推测 decoding 路径). 否则，使用 running 计算的 lookaheadh slots 数量。 _schedule_default 尽可能多地批处理 prefill 请求，然后调度 decoding 请求. 在 GPU 内存压力下，需要 preempt 或 swap out 运行中的 decoding 请求。\nswapped 为空则进行 _schedule_prefills. 如果没有调度任何 prefill 请求，调用 _schedule_running. 如果 running 调度结果中没有发生抢占或换出时 (否则说明资源不够)，执行 _schedule_swapped. 更新 waiting, running \u0026amp; swapped 三个队列。 After schedule 调度结果返回后，\n遍历调度结果中的 SequenceGroup 遍历该 SequenceGroup 中状态为 RUNNING 的 Sequence. 获取其数据，对应的 BlockID 列表，并更新其访问时间。若使用 prefix_caching, 则调用 BlockManager.get_common_computed_block_ids() 获取共享的已计算的部分的 BlockID 列表。 如果该 SequenceGroup 处于 prefill 阶段，则判断这次调度后是否能完成 prefill. 构造返回结果，标记所有调度 SequenceGroup 的 blocks 为已计算。 BlockSpaceManager 用于将 SequenceGroup 操作映射到其包含的对应组件的操作。\nCpuGpuBlockAlloctor: 根据是否采用 prefix caching 分别为 CPU 和 GPU 初始化一个 Alloctor PrefixCachingBlockAlloctor: 基于哈希值维护 block 的Cache)重用具有相同哈希值的 block，以避免冗余的内存分配。 Dict[PrefixHash, BlockId] 将用于 prefix caching blocks 的哈希值与其 BlockID 对应。 Dict[BlockId, BlockTracker] 为每个物理 block 初始化一个 BlockTracker. NaiveBlockAllocator 用于分配不作为 prefix caching 的 blocks. 有一个 RefCounter 表示某个物理 block 被多少逻辑 block 指向。 Evictor 采用 LRU 策略驱逐已经Cache) blocks. CopyOnWriterTracker 用于将原先的 block ID 映射到目的 block ID. Dict[SeqId, BlockTable]: BlockTable 用于将单个 seq 的 KV Cache 映射到物理内存分配。会在调用 _allocate_sequence() 时被初始化。包含一个 BlockList (block 列表和一个表示对应 ID 的 int 列表) 和 BlockpaceManager 的 BlockAllocator. ComputedBlocksTracker: 维护一个 Dict[SeqId, List[int]] ( seq id到 seq 块哈希列表的映射)。Cache)个 seq 的完整块 (块全部被占满) 的哈希值。当一个 seq 进行 decoding 时，也相应更新 seq 的哈希值。还有一个 Dict[int, int] ( seq id到已计算 token 数的映射) can_allocate 在 _schedule_prefills 中被调用。\n1 2 3 def can_allocate(self, seq_group: SequenceGroup, num_lookahead_slots: int = 0) -\u0026gt; AllocStatus: 取出该 SequenceGroup 中处于 WAITING 状态的第一个 Sequence (i.e. prompt). 调用 BlockTable.get_num_required_blocks() 计算存储 token 和 lookahead slots 所需的最小 block 数 (假设无 prefix caching), i.e. cdiv(len(token_ids) + num_lookahead_slots, block_size). 调用 BlockAlloctor.get_num_free_blocks() 获取 GPU 上空闲的 block 数 (非 prefix_caching 中的空闲个数 + 可以被驱逐的个数). 返回分配状态 NEVER: #total - #required \u0026lt; #watermark OK: #free - #required \u0026gt;= #watermark LATER: #free - #required \u0026lt; #watermark allocate 1 def allocate(self, seq_group: SequenceGroup) -\u0026gt; None: 在 _schedule_prefills 中步骤 4 中调用的 _allocate_and_set_running 内部被调用。\n取出该 SequenceGroup 中处于 WAITING 状态的第一个 Sequence (i.e. prompt). 调用 BlockManager._allocate_sequence() 创建一个 BlockTable，在获取 token_ids 列表后调用 BlockTable.allocate() 为该 Sequence 分配 blocks. 将 token_ids 按 _block_size 大小进行分块。最后一块可能不能占满一个 block. 对于能够占满一个 block 的 token_ids 分块，调用 BlockAlloctor.allocate_immutable_block(). 该函数优先从Cache)查找是否已有相同内容的块，若有则直接复用该块并增加其引用计数；否则调用 BlockAlloctor.allocate_mutable_blocks() 分配一个新的 block，并将 token_ids 添加到该 block 中. 该函数会尝试从非 prefix caching blocks 中分配一个 block_id，若没找到则会驱逐一个。 对于最后一个可能被没占满的 block 调用 BlockAlloctor.allocate_mutable_blocks(). can_append_slots 1 2 def can_append_slots(self, seq_group: SequenceGroup, num_lookahead_slots: int) -\u0026gt; bool: 确定 GPU KV Cache 中是否有足够的空间来继续生成指定的 SequenceGroup. 上层接口为 Scheduler._can_append_slots()，在 _schedule_running 中步骤 2 中确定是否需要进行抢占时被调用。\n遍历该 Sequence Group 中处于 RUNNING 状态的 Sequence 对应的 BlockTable 调用 BlockTable.get_unseen_token_ids() 获取该 Sequence 还未被Cache) token 部分。 调用 BlockTable.get_num_blocks_touched_by_append_slots() 获取Cache)余部分和 lookahead 部分需要几个 block. 调用 BlockAlloctor.get_num_free_blocks() 获取 GPU 上空闲的 block 数. 需要个数小于空闲个数返回 True. append_slots 1 2 3 4 5 def append_slots( self, seq: Sequence, num_lookahead_slots: int, ) -\u0026gt; List[Tuple[int, int]]: 上层接口为 Scheduler._append_slots(). 在 _schedule_running 中检查到有空间添加，_schedule_swapped 中有 budget 进行换入，_schedule_prefills 中允许进行 chunked prefill 时被调用。\n调用 BlockTable.append_token_ids(). 该方法将 tokens 添加到 BlockTable 中的现有 block 中。会调用 BlockTable.ensure_num_empty_slots()， 它查看当前能够容纳多少个 token. 如果没有足够的空间，则使用 BlockAlloctor.allocate_mutable_block() 方法分配新 block. 调用 BlockAllocator.clear_copy_on_writes() 返回一个映射源 block ID 到当前 COW 的目标 block ID 的元组的列表. _can_swap 1 2 3 4 5 def _can_swap(self, seq_group: SequenceGroup, device: Device, status: SequenceStatus, num_lookahead_slots: int = 0) -\u0026gt; AllocStatus: 根据 status 区分上层接口: RUNNING/SWAPPED 表示需要把该 SequenceGroup 处于 RUNNING/SWAPPED 状态的 Sequence 对应的 blocks 从 GPU/CPU 换到 CPU/GPU.\n获取 SequenceGroup 中符合指定状态的 seq Sequence，然后根据 SeqID 获取对应的 BlockTable. 调用 BlockTable.get_num_blocks_touched_by_append_slots() 计算添加未存储 token 加上 lookahead_slots 所需的 block 数量。 调用 BlockAlloctor.get_num_full_blocks_touched() 获取当前有被使用的 block 数量。 如果总块数小于被使用的加上需要的 block 数量 返回 Never. 如果空闲块减去 被使用的加上需要的 block 数量后仍大于等于 watermark_blocks，返回 OK. 否则为 LATER. swap_in 调用的是 self.block_allocator.swap(blocks=blocks, src_device=Device.CPU, dst_device=Device.GPU)，即 blocks 从原设备的换出，换入到目的设备。 进一步则是 BlockAlloctor.swap_in()，该函数遍历传入的 blocks，若已经被占满调用 BlockAlloctor.allocate_immutable_block(). 否则调用 BlockAlloctor.allocate_mutable_blocks() 分配一个新的 block 后将原 block的 token 数据追加到新 block.\nswap_out 同上，最终调用的是 BlockAlloctor.swap_out(). 该函数对传入的每个 block 调用 _free_block_id，逐个处理释放逻辑。若 block 有哈希值，refcount -1，若减去后为 0 则将 block 信息添加到 evictor 中，从跟踪系统中移除，然后设置 BlockId 为 None. 否则就直接设置为 None. 若无哈希值则释放 BlockId，减去对应的 refcount，但保留 block 对象本身.\nAttention XFormersImpl 中使用了 vllm 自己写的 PagedAttention kernel.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class XFormersImpl(AttentionImpl[XFormersMetadata]): def __init__( self, num_heads: int, head_size: int, scale: float, num_kv_heads: int, alibi_slopes: Optional[List[float]], sliding_window: Optional[int], kv_cache_dtype: str, blocksparse_params: Optional[Dict[str, Any]] = None, logits_soft_cap: Optional[float] = None, attn_type: str = AttentionType.DECODER, ) -\u0026gt; None: 其中 attn_type 分为四种，下面我们主要分析 DECODER 的情况。\nDECODER: 使用 decoding 器的 self-attention block table 来Cache)KV(GPT). ENCODER: 不进行 KV Cache)用于 Encoder-Decoder 模编码器分支。编码器通常一次性处理整个输入 seq 。 ENCODER-ONLY: 不进行 KV Cache)BERT). ENCODER_DECODER: 用于编码器- decoding 器模型中的交叉注意力部分，其中 KV seq 长度与编码器 seq 长度一致(T5). 1 2 3 4 5 6 7 8 9 10 def forward( self, layer: AttentionLayer, query: torch.Tensor, # [num_tokens, num_heads * head_size] key: Optional[torch.Tensor], # [num_tokens, num_kv_heads * head_size] value: Optional[torch.Tensor], # [num_tokens, num_kv_heads * head_size] kv_cache: torch.Tensor, # [2, num_blocks, block_size * num_kv_heads * head_size] attn_metadata: \u0026#34;XFormersMetadata\u0026#34;, output: Optional[torch.Tensor] = None, ) -\u0026gt; torch.Tensor: AttentionMetadata 类定义如下\n1 2 3 4 5 6 7 8 9 10 11 @dataclass class AttentionMetadata: \u0026#34;\u0026#34;\u0026#34;Attention metadata for prefill and decode batched together.\u0026#34;\u0026#34;\u0026#34; num_prefills: int # prefill 请求的总数 num_prefill_tokens: int # 所有 prefill 请求中的 token 总数。 num_decode_tokens: int # decodeing token 的数量，等同于 decoding 请求的数量 slot_mapping: torch.Tensor # (num_tokens,)，指定每个输入 token 存储到 KV cache 中的 slot 索引 # block_idx = x // block_size, block_offset = x % block_size multi_modal_placeholder_index_maps: Optional[Dict[ str, MultiModalPlaceholderMap.IndexMap]] enable_kv_scales_calculation: bool forward 方法如下，简化了成了 DECODER 情况的逻辑。 主要流程为\n调用 PagedAttention.split_kv_cache 分离并 reshape KV Cache 张量后 调用 PagedAttention.write_to_paged_cache` 写入当前 key 和 value 到Cache)。 分离 prefill 和 decoding 的 token，初始化输出。对于 prefill 部分根据是否采用了 prefix_caching 调用 self._run_memory_efficient_xformers_forward 或 PagedAttention.forward_prefix 计算注意力。 调用 get_seq_len_block_table_args 获取 decoding Sequence 对应的 BlockTable后调用 PagedAttention.forward_decode 计算注意力。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def forward( self, layer: AttentionLayer, query: torch.Tensor, # [num_tokens, num_heads * head_size] key: torch.Tensor, # [num_tokens, num_kv_heads * head_size] value: torch.Tensor, # [num_tokens, num_kv_heads * head_size] kv_cache: torch.Tensor, # [2, num_blocks, block_size * num_kv_heads * head_size] attn_metadata: \u0026#34;XFormersMetadata\u0026#34;, output: Optional[torch.Tensor] = None, ) -\u0026gt; torch.Tensor: # 将 query 重塑为 [num_tokens, num_heads, head_size] query = query.view(-1, self.num_heads, self.head_size) # key 和 value 必须非空（自注意力要求），重塑为 [num_tokens, num_kv_heads, head_size] key = key.view(-1, self.num_kv_heads, self.head_size) value = value.view(-1, self.num_kv_heads, self.head_size) # 如果 KV Cache)空，处理Cache)辑 if kv_cache.numel() \u0026gt; 0: # 从 kv_cache 分离出 key_cache 和 value_cache # key_cache: [num_blocks, num_kv_heads, head_size/x, block_size, x] # value_cache: [num_blocks, num_kv_heads, head_size, block_size] key_cache, value_cache = PagedAttention.split_kv_cache( kv_cache, self.num_kv_heads, self.head_size) # 更新自注意力的 KV Cache) # 使用 attn_metadata.slot_mapping 指定 token 存储位置 PagedAttention.write_to_paged_cache( key, value, key_cache, value_cache, attn_metadata.slot_mapping, self.kv_cache_dtype, layer._k_scale, layer._v_scale) # 获取 prefill 和 decoding 阶段的 token 数量 (num_prefill_query_tokens, num_prefill_kv_tokens, num_decode_query_tokens) = \\ get_num_prefill_decode_query_kv_tokens(attn_metadata, AttentionType.DECODER) # 创建输出张量与 query 相同 output = torch.empty_like(query) # 分离 prefill 和 decoding 的 QKV decode_query = query[num_prefill_query_tokens:] # query = query[:num_prefill_query_tokens] key = key[:num_prefill_kv_tokens] value = value[:num_prefill_kv_tokens] # 处理 prefill 阶段（如果存在） if prefill_meta := attn_metadata.prefill_metadata: if kv_cache.numel() == 0 or prefill_meta.block_tables.numel() == 0: # 普通注意力（无Cache)缀） out = self._run_memory_efficient_xformers_forward( query, key, value, prefill_meta, attn_type=AttentionType.DECODER) output[:num_prefill_query_tokens] = out else: # 前缀Cache)意力 out = PagedAttention.forward_prefix( query, key, value, self.kv_cache_dtype, key_cache, value_cache, prefill_meta.block_tables, prefill_meta.query_start_loc, prefill_meta.seq_lens_tensor, prefill_meta.max_query_len, self.alibi_slopes, self.sliding_window, layer._k_scale, layer._v_scale) output[:num_prefill_query_tokens] = out # 处理 decoding 阶段（如果存在） if decode_meta := attn_metadata.decode_metadata: # 获取 decoding 所需的 seq 长度和 BlockTable 参数 seq_lens_arg, max_seq_len_arg, block_tables_arg = \\ get_seq_len_block_table_args(decode_meta, False, AttentionType.DECODER) # 运行 decoding 注意力 output[num_prefill_query_tokens:] = PagedAttention.forward_decode( decode_query, key_cache, value_cache, block_tables_arg, seq_lens_arg, max_seq_len_arg, self.kv_cache_dtype, self.num_kv_heads, self.scale, self.alibi_slopes, layer._k_scale, layer._v_scale) # 将输出 reshape 为 [num_tokens, num_heads * head_size] return output.view(-1, self.num_heads * self.head_size) write_to_paged_cache 调用的是已经注册到 torch.ops 中的 CUDA 函数。其对应的 host 函数为每个 token 分配一个 CUDA block，每个 CUDA block 的线程数被限制在最多 512 个。主要的 kernel 函数如下。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // scalar_t: 输入 key 和 value 的数据类型（如 float、half） // cache_t: Cache)key_cache 和 value_cache 的数据类型（如 half、uint8_t） // kv_dt: KV Cache) FP8 数据类型（如 kAuto 或具体 FP8 格式） template \u0026lt;typename scalar_t, typename cache_t, Fp8KVCacheDataType kv_dt\u0026gt; __global__ void reshape_and_cache_kernel( const scalar_t* __restrict__ key, // [num_tokens, num_heads, head_size] const scalar_t* __restrict__ value, // [num_tokens, num_heads, head_size] cache_t* __restrict__ key_cache, // [num_blocks, num_heads, head_size/x, block_size, x] cache_t* __restrict__ value_cache, // [num_blocks, num_heads, head_size, block_size] const int64_t* __restrict__ slot_mapping, // [num_tokens]，指定每个 token 的Cache)置 const int key_stride, const int value_stride, // key 和 value 在 token 维的步幅 const int num_heads, const int head_size, // 注意力head 数和每个head 的维度 const int block_size, const int x, // Cache)大小和 key_cache 中 head_size 的拆分因子 const float* k_scale, const float* v_scale) // key 和 value 的缩放因子，用于数据类型转换 const int64_t token_idx = blockIdx.x; // host 函数定义 block 个数与 token 个数相同 const int64_t slot_idx = slot_mapping[token_idx]; { // Cache Block const int64_t block_idx = slot_idx / block_size; // 块索引 const int64_t block_offset = slot_idx % block_size; // 块内偏移 const int n = num_heads * head_size; // 每个 token 的维度数目 // CUDA Block 级别并行，每个线程处理token 的一个维度 for (int i = threadIdx.x; i \u0026lt; n; i += blockDim.x) { // 计算输入 key 和 value 的源索引 const int64_t src_key_idx = token_idx * key_stride + i; const int64_t src_value_idx = token_idx * value_stride + i; // 计算当前处理的head 索引和head 内偏移 const int head_idx = i / head_size; // 第几个head const int head_offset = i % head_size; // head 内的第几个元素 // 将 head_offset 拆分为 x_idx 和 x_offset（仅用于 key_cache） const int x_idx = head_offset / x; // head_size/x 维的索引 const int x_offset = head_offset % x; // x 维的偏移 // 计算 key_cache 的目标索引，按维度逐步偏移 const int64_t tgt_key_idx = block_idx * num_heads * (head_size / x) * block_size * x + // 块偏移 head_idx * (head_size / x) * block_size * x + // head 偏移 x_idx * block_size * x + // head_size/x 偏移 block_offset * x + x_offset; // 块内和 x 偏移 // 计算 value_cache 的目标索引，按维度逐步偏移 const int64_t tgt_value_idx = block_idx * num_heads * head_size * block_size + // 块偏移 head_idx * head_size * block_size + // head 偏移 head_offset * block_size + // head_size 偏移 block_offset; // 块内偏移 // 从输入张量读取当前元素 scalar_t tgt_key = key[src_key_idx]; scalar_t tgt_value = value[src_value_idx]; // 根据 kv_dt 类型决定存储方式 if constexpr (kv_dt == Fp8KVCacheDataType::kAuto) { // 如果是 kAuto，直接存储，不进行类型转换 key_cache[tgt_key_idx] = tgt_key; value_cache[tgt_value_idx] = tgt_value; } else { // 否则，使用 scaled_convert 进行类型转换（如 FP8 量化） key_cache[tgt_key_idx] = fp8::scaled_convert\u0026lt;cache_t, scalar_t, kv_dt\u0026gt;(tgt_key, *k_scale); value_cache[tgt_value_idx] = fp8::scaled_convert\u0026lt;cache_t, scalar_t, kv_dt\u0026gt;(tgt_value, *v_scale); } } } _run_memory_efficient_xformers_forward 也同样简化成 DECODER 的逻辑的情况\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def _run_memory_efficient_xformers_forward( self, query: torch.Tensor, # [num_prefill_tokens, num_heads, head_size] key: torch.Tensor, # [num_prefill_tokens, num_kv_heads, head_size] value: torch.Tensor, # [num_prefill_tokens, num_kv_heads, head_size] attn_metadata: \u0026#34;XFormersMetadata\u0026#34;, ) -\u0026gt; torch.Tensor: original_query = query # 保存原始 query，用于最后 reshape 输出 # 处理 GQA/MQA if self.num_kv_heads != self.num_heads: # reshape Q to [num_prefill_tokens, num_kv_heads, num_queries_per_kv, head_size] query = query.view(query.shape[0], self.num_kv_heads, self.num_queries_per_kv, query.shape[-1]) # expand K to [num_prefill_tokens, num_kv_heads, num_queries_per_kv, head_size] key = key[:, :, None, :].expand(key.shape[0], self.num_kv_heads, self.num_queries_per_kv, key.shape[-1]) # expand V to [num_prefill_tokens, num_kv_heads, num_queries_per_kv, head_size] value = value[:, :, None, :].expand(value.shape[0], self.num_kv_heads, self.num_queries_per_kv, value.shape[-1]) # 获取或设置 attention bias attn_bias = _get_attn_bias(attn_metadata, AttentionType.DECODER) if attn_bias is None: assert attn_metadata.seq_lens is not None # 确保 seq 长度信息存在 if self.alibi_slopes is None: # 创建 causal mask attn_bias = BlockDiagonalCausalMask.from_seqlens( attn_metadata.seq_lens, device=query.device) if self.sliding_window is not None: # 如果有滑动窗口，应用局部注意力 attn_bias = attn_bias.make_local_attention(self.sliding_window) attn_bias = [attn_bias] else: # 使用 ALiBi 偏置（线性偏置注意力） attn_bias = _make_alibi_bias(self.alibi_slopes, self.num_kv_heads, query.dtype, attn_metadata.seq_lens) _set_attn_bias(attn_metadata, attn_bias, AttentionType.DECODER) # 执行 xFormers 高效注意力计算 if self.alibi_slopes is None: # 为 QKV 添加 batch query = query.unsqueeze(0) key = key.unsqueeze(0) value = value.unsqueeze(0) out = xops.memory_efficient_attention_forward( query, key, value, attn_bias=attn_bias[0], p=0.0, scale=self.scale) else: # ALiBi 模式直接使用 attn_bias assert attn_metadata.seq_lens is not None output = torch.empty_like(original_query) start = 0 # xformers 不支持在自定义 bias 的情况下每个 seq 的长度不同 for i, seq_len in enumerate(attn_metadata.seq_lens): end = start + seq_len out = xops.memory_efficient_attention_forward( query[None, start:end], key[None, start:end], value[None, start:end], attn_bias=attn_bias[i], p=0.0, scale=self.scale) output[start:end].copy_(out.view_as(original_query[start:end])) start += seq_len # 将输出 reshape 为原始 query return out.view_as(original_query) forward_prefix 不考虑 ALiBi 的情况调用的是 triton 编写的 _fwd_kernel() 每个线程块独立处理一个 Q 的一部分，对 KV Cache 和 当前 KV 分别采取 flash-attention 的计算策略。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 import triton import triton.language as tl @triton.jit def _fwd_kernel( # --- 输入张量 --- Q, # Query 张量: [total_seq_len, num_heads, head_dim] # total_seq_len 是所有 batch seq 长度的总和，当前块为 [BLOCK_M, BLOCK_DMODEL_PADDED] K, # 键张量（当前输入）: [total_seq_len, num_kv_heads, head_dim] V, # 值张量（当前输入）: [total_seq_len, num_kv_heads, head_dim] K_cache, # 键Cache) [num_blocks, num_kv_heads, head_dim, block_size, x] # 用于存储上下文部分的 K V_cache, # 值Cache) [num_blocks, num_kv_heads, head_dim, block_size] # 用于存储上下文部分的 V B_Loc, # 块索引表: [batch_size, max_seq_len // block_size] # 记录每个 batch 中每个块的块编号 sm_scale, # softmax 缩放因子，通常为 1/sqrt(head_dim) k_scale, # 用于 FP8 精度转换的缩放因子 v_scale, # 用于 FP8 精度转换的缩放因子 B_Start_Loc, # batch 起始位置: [batch_size + 1] # 每个 batch 的全局 seq 起始索引，最后一个元素是总长度 B_Seqlen, # batch seq 长度: [batch_size] # 每个 batch 的总 seq 长度（上下文 + Query ） block_size, # 每个Cache)的大小 x, # K_cache 的额外维度分片因子（通常为 1 或小整数） Out, # 输出张量: [total_seq_len, num_heads, head_dim] # 存储注意力计算结果 # --- 步幅参数 --- stride_b_loc_b, # B_Loc 的 batch 步幅 stride_b_loc_s, # B_Loc 的 seq 块步幅 stride_qbs, # Q 的 batch / seq 步幅，通常为 num_heads * head_dim stride_qh, # Q 的head 步幅，通常为 head_dim stride_qd, # Q 的head_size步幅，通常为 1 stride_kbs, # K 的 batch / seq 步幅 stride_kh, # K 的head 步幅 stride_kd, # K 的head_size步幅 stride_vbs, # V 的 batch / seq 步幅 stride_vh, # V 的head 步幅 stride_vd, # V 的head_size步幅 stride_obs, # Out 的 batch / seq 步幅 stride_oh, # Out 的head 步幅 stride_od, # Out 的head_size步幅 stride_k_cache_bs, # K_cache 的块步幅 stride_k_cache_h, # K_cache 的head 步幅 stride_k_cache_d, # K_cache 的head_size步幅 stride_k_cache_bl, # K_cache 的块内偏移步幅 stride_k_cache_x, # K_cache 的额外维度步幅 stride_v_cache_bs, # V_cache 的块步幅 stride_v_cache_h, # V_cache 的head 步幅 stride_v_cache_d, # V_cache 的head_size步幅 stride_v_cache_bl, # V_cache 的块内偏移步幅 # --- 超参数 --- num_queries_per_kv: int, # 每个 KV head 对应的 Query head 数量 IN_PRECISION: tl.constexpr, # 输入精度（例如 tl.float32） BLOCK_M: tl.constexpr, # Query 块大小 BLOCK_DMODEL: tl.constexpr, # head 维度大小 BLOCK_DMODEL_PADDED: tl.constexpr, # head 维度填充到 2 的幂次 BLOCK_N: tl.constexpr, # KV 块大小 SLIDING_WINDOW: tl.constexpr, # 滑动窗口大小，0 表示无窗口 SKIP_DECODE: tl.constexpr, # 是否跳过解码（仅处理上下文） ): # --- 网格定义 --- # grid = (batch_size, num_heads, max_seq_len // BLOCK_M) cur_batch = tl.program_id(0) # 当前 batch 索引 cur_head = tl.program_id(1) # 当前head 索引 start_m = tl.program_id(2) # 当前 Query 块索引 # --- 计算 KV head 索引 --- cur_kv_head = cur_head // num_queries_per_kv # 当前 KV head 索引 # --- 加载 batch 信息 --- cur_batch_seq_len = tl.load(B_Seqlen + cur_batch) # 当前 batch 总 seq 长度 cur_batch_in_all_start_index = tl.load(B_Start_Loc + cur_batch) # 当前 batch 全局起始索引 cur_batch_in_all_stop_index = tl.load(B_Start_Loc + cur_batch + 1) # 下一 batch 起始索引 cur_batch_query_len = (cur_batch_in_all_stop_index - cur_batch_in_all_start_index) # 当前 batch Query 长度 cur_batch_ctx_len = cur_batch_seq_len - cur_batch_query_len # 上下文长度 # --- 计算 Query 块起始位置 --- block_start_loc = BLOCK_M * start_m # 当前 Query 块的起始位置 # --- 初始化索引范围 --- offs_n = tl.arange(0, BLOCK_N) # KV 块内偏移: [0, BLOCK_N) offs_d = tl.arange(0, BLOCK_DMODEL_PADDED) # head_size 偏移: [0, BLOCK_DMODEL_PADDED) offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M) # Query 块内偏移: [start_m * BLOCK_M, (start_m + 1) * BLOCK_M) # --- 计算 Q 的偏移量 --- # off_q: [BLOCK_M, BLOCK_DMODEL_PADDED] # 定位当前 Query 块在 Q 张量中的内存地址 off_q = ( (cur_batch_in_all_start_index + offs_m[:, None]) * stride_qbs + # batch 和 seq 偏移 cur_head * stride_qh + # head 偏移 offs_d[None, :] * stride_qd # head_size偏移 ) # 示例: 假设 Q [100, 4, 64], stride_qbs=256, stride_qh=64, stride_qd=1 # cur_batch_in_all_start_index=20, cur_head=1, start_m=1, BLOCK_M=16 # offs_m=[16, 17, ..., 31], offs_d=[0, 1, ..., 63] # off_q[0, 0] = (20 + 16) * 256 + 1 * 64 + 0 * 1 = 9216 + 64 = 9280 # off_q[0, 1] = (20 + 16) * 256 + 1 * 64 + 1 * 1 = 9281 # --- 创建head_size维度掩码 --- dim_mask = tl.where(tl.arange(0, BLOCK_DMODEL_PADDED) \u0026lt; BLOCK_DMODEL, 1, 0).to(tl.int1) # [BLOCK_DMODEL_PADDED] # 屏蔽填充部分，例如 BLOCK_DMODEL=64, BLOCK_DMODEL_PADDED=128，则后 64 个值为 0 # --- 加载 Q 数据 --- q = tl.load(Q + off_q, mask=dim_mask[None, :] \u0026amp; (offs_m[:, None] \u0026lt; cur_batch_query_len), other=0.0) # [BLOCK_M, BLOCK_DMODEL_PADDED] # 加载当前 Query 块，掩码确保不加载超出 Query 长度和填充维度的数据 # --- 初始化online softmax 变量 --- m_i = tl.zeros([BLOCK_M], dtype=tl.float32) - float(\u0026#34;inf\u0026#34;) # 最大值 l_i = tl.zeros([BLOCK_M], dtype=tl.float32) # 归一化因子 acc = tl.zeros([BLOCK_M, BLOCK_DMODEL_PADDED], dtype=tl.float32) # 注意力累加 # --- 计算上下文注意力（Q 对 KV Cache) --- for start_n in range(0, cur_batch_ctx_len, BLOCK_N): start_n = tl.multiple_of(start_n, BLOCK_N) # 确保 start_n 是 BLOCK_N 的倍数 # --- 加载 Cache 索引 --- bn = tl.load(B_Loc + cur_batch * stride_b_loc_b + ((start_n + offs_n) // block_size) * stride_b_loc_s, mask=(start_n + offs_n) \u0026lt; cur_batch_ctx_len, other=0) # [BLOCK_N] # bn 是当前 KV Cache的块编号 # 示例: B_Loc=[0, 1, 2, ...], cur_batch=0, start_n=16, block_size=16, offs_n=[0, 1, 2, 3] # bn = B_Loc[0, 1]（若 stride_b_loc_b=8, stride_b_loc_s=1，则地址为 0*8 + 1*1 = 1） # --- 计算 K_cache 偏移量 --- # off_k: [BLOCK_DMODEL_PADDED, BLOCK_N] off_k = ( bn[None, :] * stride_k_cache_bs + # 块偏移 cur_kv_head * stride_k_cache_h + # head 偏移 (offs_d[:, None] // x) * stride_k_cache_d + # head_size偏移（分片） ((start_n + offs_n[None, :]) % block_size) * stride_k_cache_bl + # 块内偏移 (offs_d[:, None] % x) * stride_k_cache_x # 额外维度偏移 ) # 示例: bn=[1], cur_kv_head=1, stride_k_cache_bs=4096, stride_k_cache_h=1024, stride_k_cache_d=16 # offs_d=[0, 1, ..., 63], start_n=16, offs_n=[0, 1, 2, 3], block_size=16, x=1 # off_k[0, 0] = 1*4096 + 1*1024 + (0//1)*16 + (16+0)%16*256 + (0%1)*1 = 4096 + 1024 = 5120 # --- 加载 K_cache 数据 --- k_load = tl.load(K_cache + off_k, mask=dim_mask[:, None] \u0026amp; ((start_n + offs_n[None, :]) \u0026lt; cur_batch_ctx_len), other=0.0) # [BLOCK_DMODEL_PADDED, BLOCK_N] # 处理 FP8 精度 if k_load.dtype.is_fp8(): k = (k_load.to(tl.float32) * tl.load(k_scale)).to(q.dtype) else: k = k_load # --- 计算 QK 注意力分数 --- qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32) qk = tl.dot(q, k, acc=qk, input_precision=IN_PRECISION) # [BLOCK_M, BLOCK_N] qk = tl.where((start_n + offs_n[None, :]) \u0026lt; cur_batch_ctx_len, qk, float(\u0026#34;-inf\u0026#34;)) qk *= sm_scale if SLIDING_WINDOW \u0026gt; 0: qk = tl.where((cur_batch_ctx_len + offs_m[:, None]) - (start_n + offs_n[None, :]) \u0026lt; SLIDING_WINDOW, qk, -10000) # --- online softmax 更新 --- m_ij = tl.max(qk, 1) # [BLOCK_M] p = tl.exp(qk - m_ij[:, None]) # [BLOCK_M, BLOCK_N] l_ij = tl.sum(p, 1) # [BLOCK_M] m_i_new = tl.maximum(m_i, m_ij) alpha = tl.exp(m_i - m_i_new) beta = tl.exp(m_ij - m_i_new) l_i_new = alpha * l_i + beta * l_ij # --- 更新累加器 --- p_scale = beta / l_i_new p = p * p_scale[:, None] acc_scale = l_i / l_i_new * alpha acc = acc * acc_scale[:, None] # 加载 V_cache off_v = ( bn[:, None] * stride_v_cache_bs + cur_kv_head * stride_v_cache_h + offs_d[None, :] * stride_v_cache_d + (start_n + offs_n[:, None]) % block_size * stride_v_cache_bl ) v_load = tl.load(V_cache + off_v, mask=dim_mask[None, :] \u0026amp; ((start_n + offs_n[:, None]) \u0026lt; cur_batch_ctx_len), other=0.0) # [BLOCK_N, BLOCK_DMODEL_PADDED] if v_load.dtype.is_fp8(): v = (v_load.to(tl.float32) * tl.load(v_scale)).to(q.dtype) else: v = v_load p = p.to(v.dtype) acc = tl.dot(p, v, acc=acc, input_precision=IN_PRECISION) # 更新 m_i 和 l_i l_i = l_i_new m_i = m_i_new # --- 计算自注意力（Q 对当前 K 和 V） --- # 计算 K 和 V 的初始偏移 off_k = (offs_n[None, :] * stride_kbs + cur_kv_head * stride_kh + offs_d[:, None] * stride_kd) # [BLOCK_DMODEL_PADDED, BLOCK_N] off_v = (offs_n[:, None] * stride_vbs + cur_kv_head * stride_vh + offs_d[None, :] * stride_vd) # [BLOCK_N, BLOCK_DMODEL_PADDED] k_ptrs = K + off_k # 初始指针 v_ptrs = V + off_v # 检查当前 Query 块是否有效 block_mask = tl.where(block_start_loc \u0026lt; cur_batch_query_len, 1, 0) # 遍历当前输入的 K 和 V for start_n in range(0, block_mask * (start_m + 1) * BLOCK_M, BLOCK_N): start_n = tl.multiple_of(start_n, BLOCK_N) # --- 加载 K 数据 --- # 全局偏移: (cur_batch_in_all_start_index + start_n) * stride_kbs 定位 batch 和 seq 块 # 示例: K [100, 4, 64], stride_kbs=256, cur_batch_in_all_start_index=20, start_n=8 # 基地址偏移 = (20 + 8) * 256 = 7168 # k_ptrs[0, 0] = K + 0 + 1*64 + 0*1 + 7168 = K + 7232 k = tl.load(k_ptrs + (cur_batch_in_all_start_index + start_n) * stride_kbs, mask=dim_mask[:, None] \u0026amp; ((start_n + offs_n[None, :]) \u0026lt; cur_batch_query_len), other=0.0) # [BLOCK_DMODEL_PADDED, BLOCK_N] # --- 计算 QK 注意力分数 --- qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32) qk = tl.dot(q, k, acc=qk, input_precision=IN_PRECISION) qk *= sm_scale # 应用因果掩码 qk = tl.where(offs_m[:, None] \u0026gt;= (start_n + offs_n[None, :]), qk, float(\u0026#34;-inf\u0026#34;)) if SLIDING_WINDOW \u0026gt; 0: qk = tl.where(offs_m[:, None] - (start_n + offs_n[None, :]) \u0026lt; SLIDING_WINDOW, qk, -10000) # --- online softmax 更新 --- m_ij = tl.max(qk, 1) p = tl.exp(qk - m_ij[:, None]) l_ij = tl.sum(p, 1) m_i_new = tl.maximum(m_i, m_ij) alpha = tl.exp(m_i - m_i_new) beta = tl.exp(m_ij - m_i_new) l_i_new = alpha * l_i + beta * l_ij # --- 更新累加器 --- p_scale = beta / l_i_new p = p * p_scale[:, None] acc_scale = l_i / l_i_new * alpha acc = acc * acc_scale[:, None] v = tl.load(v_ptrs + (cur_batch_in_all_start_index + start_n) * stride_vbs, mask=dim_mask[None, :] \u0026amp; ((start_n + offs_n[:, None]) \u0026lt; cur_batch_query_len), other=0.0) # [BLOCK_N, BLOCK_DMODEL_PADDED] p = p.to(v.dtype) acc = tl.dot(p, v, acc=acc, input_precision=IN_PRECISION) # 更新 m_i 和 l_i l_i = l_i_new m_i = m_i_new # --- 存储输出 --- off_o = ( (cur_batch_in_all_start_index + offs_m[:, None]) * stride_obs + cur_head * stride_oh + offs_d[None, :] * stride_od ) out_ptrs = Out + off_o tl.store(out_ptrs, acc, mask=dim_mask[None, :] \u0026amp; (offs_m[:, None] \u0026lt; cur_batch_query_len)) forward_decode 调用的是 paged_atention_kernel gridDim = (num_heads, num_seqs, 1). decode 的时候每个 seq 的 Query 的 toekn 数目都是 1，\ngridDim = (num_heads, num_seqs, 1): 每个线程块负责一个 seq 的 一个 head，函数定义如下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 template \u0026lt;typename scalar_t, typename cache_t, int HEAD_SIZE, int BLOCK_SIZE, // default 16 int NUM_THREADS /*=128*/, vllm::Fp8KVCacheDataType KV_DTYPE, bool IS_BLOCK_SPARSE, int PARTITION_SIZE = 0\u0026gt; // Zero means no partitioning. __device__ void paged_attention_kernel( float* __restrict__ exp_sums, // [num_seqs, num_heads, max_num_partitions] float* __restrict__ max_logits, // [num_seqs, num_heads, // max_num_partitions] scalar_t* __restrict__ out, // [num_seqs, num_heads, max_num_partitions, head_size] const scalar_t* __restrict__ q, // [num_seqs, num_heads, head_size] const cache_t* __restrict__ k_cache, // [num_blocks, num_kv_heads, head_size/x, block_size, x] const cache_t* __restrict__ v_cache, // [num_blocks, num_kv_heads, head_size, block_size] const int num_kv_heads, // [num_heads] const float scale, const int* __restrict__ block_tables, // [num_seqs, max_num_blocks_per_seq] const int* __restrict__ seq_lens, // [num_seqs] const int max_num_blocks_per_seq, const float* __restrict__ alibi_slopes, // [num_heads] // 矩阵每一维度的 stride，便于移动指针 const int q_stride, const int kv_block_stride, const int kv_head_stride, const float* k_scale, const float* v_scale, const int tp_rank, const int blocksparse_local_blocks, const int blocksparse_vert_stride, const int blocksparse_block_size, const int blocksparse_head_sliding_step) 首先先计算一下当前线程对应的各种参数，这里根据模板函数定义不使用 PARTITIONING.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // grid = (num_heads, num_seqs, 1) 一个 thread block 处理一个 seq 的 一个 head const int seq_idx = blockIdx.y; const int partition_idx = blockIdx.z; const int max_num_partitions = gridDim.z; // 1 const int seq_len = seq_lens[seq_idx]; // 该 seq token 数 // 计算块范围和 token 范围 const int num_seq_blocks = DIVIDE_ROUND_UP(seq_len, BLOCK_SIZE); // seq 要分几块读取 const int num_blocks_per_partition = num_seq_blocks; // 分了几块 const int start_block_idx = 0; // 起始块索引 const int end_block_idx = num_seq_blocks; // 结束块索引 const int num_blocks = end_block_idx - start_block_idx; // 当前分区块数 const int start_token_idx = start_block_idx * BLOCK_SIZE; // 起始 token 索引 const int end_token_idx = MIN(start_token_idx + num_blocks * BLOCK_SIZE, seq_len); // 结束 token 索引 const int num_tokens = end_token_idx - start_token_idx; // 当前分区 token 数 // 线程组织参数 constexpr int THREAD_GROUP_SIZE = MAX(WARP_SIZE / BLOCK_SIZE, 1); // 几个 thread 处理一个 token 32/16=2 constexpr int NUM_THREAD_GROUPS = NUM_THREADS / THREAD_GROUP_SIZE; // 一个 thread block 被分成几组 128/2=64 constexpr int NUM_TOKENS_PER_THREAD_GROUP = DIVIDE_ROUND_UP(BLOCK_SIZE, WARP_SIZE); // 每线程处理的 token 数 16/32=1 constexpr int NUM_WARPS = NUM_THREADS / WARP_SIZE; // warp 个数 128/32=4 const int thread_idx = threadIdx.x; // 线程索引 const int warp_idx = thread_idx / WARP_SIZE; // 线程位于第几个 warp const int lane = thread_idx % WARP_SIZE; // 线程是该 warp 中的第几个 const int head_idx = blockIdx.x; const int num_heads = gridDim.x; // 考虑 GQA MQA const int num_queries_per_kv = num_heads / num_kv_heads; const int kv_head_idx = head_idx / num_queries_per_kv; const float alibi_slope = alibi_slopes == nullptr ? 0.f : alibi_slopes[head_idx]; 定义 thread group ，保证其一次访问的数据为 16 Bytes，需要计算其中每个 thread 处理几个元素。\n1 2 3 4 5 6 7 8 9 10 11 // VEC_SIZE 即为一个 thread group 中每个线程需要处理元素个数， constexpr int VEC_SIZE = MAX(16 / (THREAD_GROUP_SIZE * sizeof(scalar_t)), 1); // 16/2/2=4 using K_vec = typename Vec\u0026lt;scalar_t, VEC_SIZE\u0026gt;::Type; using Q_vec = typename Vec\u0026lt;scalar_t, VEC_SIZE\u0026gt;::Type; using Quant_vec = typename Vec\u0026lt;cache_t, VEC_SIZE\u0026gt;::Type; constexpr int NUM_ELEMS_PER_THREAD = HEAD_SIZE / THREAD_GROUP_SIZE; // 每个 thread 处理几个元素 64/2=32 constexpr int NUM_VECS_PER_THREAD = NUM_ELEMS_PER_THREAD / VEC_SIZE; // 这几个元素相当于几个向量 32/4=8 // thread_idx = thread_group_idx * THREAD_GROUP_SIZE + thread_group_offset const int thread_group_idx = thread_idx / THREAD_GROUP_SIZE; // 线程位于第几个 thread group const int thread_group_offset = thread_idx % THREAD_GROUP_SIZE; // 线程是该 thread group 中第几个线程 下面将 Q 加载进共享内存。 loadQ\n1 2 3 4 5 6 7 8 9 10 11 const scalar_t* q_ptr = q + seq_idx * q_stride + head_idx * HEAD_SIZE; __shared__ Q_vec q_vecs[THREAD_GROUP_SIZE][NUM_VECS_PER_THREAD]; // HEAD_SIZE * VEC_SIZE * sizeof(scalar_t) 大小 #pragma unroll for (int i = thread_group_idx; i \u0026lt; NUM_VECS_PER_THREAD; i += NUM_THREAD_GROUPS) { // NUM_ELEMS_PER_THREAD / VEC_SIZE // 使得每个 thread group 的线程访问相邻的 vec const int vec_idx = thread_group_offset + i * THREAD_GROUP_SIZE; q_vecs[thread_group_offset][i] = *reinterpret_cast\u0026lt;const Q_vec*\u0026gt;(q_ptr + vec_idx * VEC_SIZE); } __syncthreads(); 假设块不稀疏并且把不采用量化，加载 K 并计算 Q@K.T. 核心思想是一个 thread group 访问 16 Bytes. 一个 thread 访问一个 vec，一个向量包含的元素个数 VEC_SIZE = 16 / sizeof (scalar_t) / THREAD_GROUP_SIZE\n1st for 循环确定的是每次迭代中每个 warp 处理的是哪一个 block，一共要循环 num_seq_blocks / NUM_WARPS 次 2nd for 循环确定的是该 warp 中的每个 thread group 访问的是该 block 的第几个 token. 即每个线程组处理一个 token. 3rd for 循环确定的是该 thread group 中的每个 thread 访问的是第几个 vec. 该循环使得该 thread group 里面的线程读取一个完整的 headsize. 一次迭代读取的大小为 16 Bytes. 首先将 block_table 指针移动到存储该 kv cache 的首个 blockID 处，取出实际的物理块 ID，用在第三个 for 循环中将指针移动到该 K cache block 起始处. 由于 k_cache 的 shape 是 [num_blocks, num_kv_heads, head_size/x, block_size, x]，在第三个 for 循环中 k_ptr 被移动到了该 thread_group 要读取的 block 的 token 的 head 处。vec_idx * VEC_SIZE 即为 thread 要读取的元素开始位置，/x 表示对应的是第几个 16Bytes 划分, offset1 移动的是 dim3，offset2 移动的 则是 dim4.\n3rd loop 结束后已经读取了一个 K cache 的完整 head_size 到寄存器中，因此 qk 为一个 token 的一个 head 的 Score Matrix. 根据 token_idx 由每个 thread group 里的 第一个线程负责将累加和到 logits 中并更新 qk_max。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // Memory planning. extern __shared__ char shared_mem[]; // NOTE(woosuk): We use FP32 for the softmax logits for better accuracy. float* logits = reinterpret_cast\u0026lt;float*\u0026gt;(shared_mem); // Workspace for reduction. __shared__ float red_smem[2 * NUM_WARPS]; // 前一半用于存储 qk_max 后一半用于存储 exp_sum // x == THREAD_GROUP_SIZE * VEC_SIZE // 每次 thread group 一次取的元素数量 保证为 16 bytes constexpr int x = 16 / sizeof(cache_t); float qk_max = -FLT_MAX; // 指针移动到当前 seq 对应的首个 blockID const int* block_table = block_tables + seq_idx * max_num_blocks_per_seq; for (int block_idx = start_block_idx + warp_idx; block_idx \u0026lt; end_block_idx; block_idx += NUM_WARPS) { // 每个 warp 处理一个 block const int64_t physical_block_number = static_cast\u0026lt;int64_t\u0026gt;(block_table[block_idx]); // 该 warp 当前处理的 block 对应的 id // Load a key to registers. for (int i = 0; i \u0026lt; NUM_TOKENS_PER_THREAD_GROUP; i++) { // BLOCK_SIZE(16) / WARP_SIZE(32) = 1 const int physical_block_offset = (thread_group_idx + i * WARP_SIZE) % BLOCK_SIZE; // thread group 处理的是该 block 的第几个 token const int token_idx = block_idx * BLOCK_SIZE + physical_block_offset; // 该 token 是该 seq 的第几个 K_vec k_vecs[NUM_VECS_PER_THREAD]; #pragma unroll for (int j = 0; j \u0026lt; NUM_VECS_PER_THREAD; j++) { // NUM_ELEMS_PER_THREAD(32) / VEC_SIZE(4) = 8 const cache_t* k_ptr = k_cache + physical_block_number * kv_block_stride + // 移动到该 block 起始处 kv_head_idx * kv_head_stride + // 移动到对应的 head 处 physical_block_offset * x; // 移动到对应的 token 处 const int vec_idx = thread_group_offset + j * THREAD_GROUP_SIZE; // 该 thread 要读取 head_size 划分成的第几个 vec const int offset1 = (vec_idx * VEC_SIZE) / x; // 第几个 16Bytes 划分 const int offset2 = (vec_idx * VEC_SIZE) % x; // 划分的第几个元素 if constexpr (KV_DTYPE == Fp8KVCacheDataType::kAuto) { k_vecs[j] = *reinterpret_cast\u0026lt;const K_vec*\u0026gt;(k_ptr + offset1 * BLOCK_SIZE * x + offset2); } } // Compute dot product. // This includes a reduction across the threads in the same thread group. float qk = scale * Qk_dot\u0026lt;scalar_t, THREAD_GROUP_SIZE\u0026gt;::dot(q_vecs[thread_group_offset], k_vecs); // Add the ALiBi bias if slopes are given. qk += (alibi_slope != 0) ? alibi_slope * (token_idx - seq_len + 1) : 0; if (thread_group_offset == 0) { // 每个线程组的第一个线程进行更新 max // Store the partial reductions to shared memory. // NOTE(woosuk): It is required to zero out the masked logits. const bool mask = token_idx \u0026gt;= seq_len; logits[token_idx - start_token_idx] = mask ? 0.f : qk; // Update the max value. qk_max = mask ? qk_max : fmaxf(qk_max, qk); } } } load k \u0026amp; QK Mul\n上面这一段结束后下面每个 warp 内 thread group 中的第一个线程已经记录了该 group 的 qk_max. 下一步则是在 warp 内进行 qk_max 归约，存储在共享内存 red_smem 中。 由于一个 warp 处理的是一个 block，相当于现在 red_smem 每个元素存储了对应 block 内的 qk_max.\n1 2 3 4 5 6 7 8 #pragma unroll for (int mask = WARP_SIZE / 2; mask \u0026gt;= THREAD_GROUP_SIZE; mask /= 2) { qk_max = fmaxf(qk_max, VLLM_SHFL_XOR_SYNC(qk_max, mask)); } if (lane == 0) { red_smem[warp_idx] = qk_max; } __syncthreads(); 下一步则是在 thread block 内对所有 warp 进行规约，得到该 seq 最后的 qk_max. 然后广播到所有线程中。之后每个线程计算 exp 存入 logits，每个 warp 内的 exp 求和结果存储在 red_smem 的后一半中。最后则是计算 softmax 存到 logits.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 qk_max = lane \u0026lt; NUM_WARPS ? red_smem[lane] : -FLT_MAX; #pragma unroll for (int mask = NUM_WARPS / 2; mask \u0026gt;= 1; mask /= 2) { qk_max = fmaxf(qk_max, VLLM_SHFL_XOR_SYNC(qk_max, mask)); } // Broadcast the max qk value to all threads. qk_max = VLLM_SHFL_SYNC(qk_max, 0); // Get the sum of the exp values. float exp_sum = 0.f; for (int i = thread_idx; i \u0026lt; num_tokens; i += NUM_THREADS) { float val = __expf(logits[i] - qk_max); logits[i] = val; exp_sum += val; } exp_sum = block_sum\u0026lt;NUM_WARPS\u0026gt;(\u0026amp;red_smem[NUM_WARPS], exp_sum); // Compute softmax. const float inv_sum = __fdividef(1.f, exp_sum + 1e-6f); for (int i = thread_idx; i \u0026lt; num_tokens; i += NUM_THREADS) { logits[i] *= inv_sum; } __syncthreads(); 加载 v 的逻辑与 k 相同，但没有使用 thread group 概念，而是让一个 thread 一次加载 16 Bytes.\n","permalink":"http://localhost:1313/blogs/vllm/","summary":"vllm structure","title":"VLLM Sourse Code Reading"},{"content":"Github Card this is a github card\rBig Quote Basically, I’m not interested in doing research and I never have been… I’m interested in understanding, which is quite a different thing. And often to understand something you have to work it out yourself because no one else has done it. — David Blackwell\nMargin Note 这是一段正常的文本，我们正在讨论一个非常重要的概念。这就是bilibili对那个重要概念的解释和补充说明。你甚至可以在这里使用 Markdown 语法！\r这个概念源于古希腊，对后世影响深远。\n继续你的文章\u0026hellip; 另一处需要注解的地方。这是第二个旁注，它会自动对齐，不会和第一个重叠。\rVarious Notice 关于以下notice 请参考 hugo_notice\rWarning\nThis is a warning notice. Be warned!\nTip\nThis is a very good tip.\nInfo\nThis is a use info.\nNote\nThis is a note.\n","permalink":"http://localhost:1313/blogs/functiontest/","summary":"function test","title":"Functional Test of Hugo"},{"content":"CMake 入门教程：从项目结构到链接库\n核心理念：源码外构建 (Out-of-Source Builds) 在开始之前，最重要的一点是理解 CMake 的核心哲学：源码外构建。这意味着所有由构建过程产生的文件（例如 Makefiles、Visual Studio 项目文件、目标文件 .o、可执行文件 .exe、库文件 .a 或 .so）都应该与你的源代码完全分离开。这样做最大的好处是能保持你的源码目录永远干净整洁。我们将创建一个 build 目录来存放所有这些生成的文件。\n推荐的项目目录结构 📂 一个良好组织的 C++ 项目结构不仅清晰，也让 CMake 的配置工作事半功倍。这是一个推荐的、可扩展的目录结构：my_project/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 │ ├── build/ # 构建目录 (初始为空，所有生成文件都在此) │ ├── include/ # 存放项目全局头文件 │ └── my_app/ │ └── my_lib.h │ ├── src/ # 存放所有源文件 (.cpp) │ │ │ ├── main.cpp # 主程序入口 │ │ │ └── my_lib/ # 一个独立的库模块 │ ├── CMakeLists.txt # 这个库自己的 CMake 配置文件 │ └── my_lib.cpp │ └── CMakeLists.txt # 整个项目的顶层 CMake 配置文件 build/: 这个目录用于执行所有构建命令，源码不会被污染。include/: 存放可以被项目内其他部分（或被其他项目）引用的头文件。按模块组织可以避免头文件名冲突。src/: 存放所有 .cpp 源文件。 src/my_lib/: 将项目按功能模块化是一种好习惯。每个模块（比如一个库）可以有自己的 CMakeLists.txt 文件，负责管理自身的编译。 CMakeLists.txt (顶层): 这是整个项目的入口，负责设置全局配置、找到并构建所有子模块，最后生成主程序。 编写各层级的 CMakeLists.txt 📝我们将采用“自下而上”的方式来编写配置文件，先从底层的库开始，再到顶层的项目。 第 1 步: 库的 CMakeLists.txt (src/my_lib/CMakeLists.txt )这个文件只负责一件事：将 my_lib.cpp 和相关的头文件编译成一个库。# 文件位置: src/my_lib/CMakeLists.txt\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # 使用 add_library 命令创建一个库。 # 语法: add_library(\u0026lt;库名称\u0026gt; [STATIC | SHARED] \u0026lt;源文件...\u0026gt;) # # \u0026lt;库名称\u0026gt;: 我们称之为 my_lib，这是其他部分链接此库时使用的名字。 # STATIC: 生成静态链接库 (.a, .lib)。 # SHARED: 生成动态/共享链接库 (.so, .dll)。 # 如果不指定，默认是 STATIC。 # \u0026lt;源文件\u0026gt;: 用于编译这个库的源文件列表。 add_library(my_lib STATIC my_lib.cpp) # 为这个库目标指定它需要包含的头文件目录。 # 语法: target_include_directories(\u0026lt;目标\u0026gt; \u0026lt;PUBLIC|PRIVATE|INTERFACE\u0026gt; \u0026lt;路径...\u0026gt;) # # \u0026lt;目标\u0026gt;: 就是我们上面用 add_library 创建的 my_lib。 # PUBLIC: 表示此头文件路径不仅 my_lib 自己需要，任何链接了 my_lib 的目标也需要。 # 这是最关键的设置，它实现了依赖的自动传递。 # PRIVATE: 表示此头文件路径只有 my_lib 内部编译时需要，不会传递给链接它的目标。 # INTERFACE:表示此头文件路径只有链接它的目标需要，my_lib 自己编译时不需要。 target_include_directories(my_lib PUBLIC # ${PROJECT_SOURCE_DIR} 是一个非常有用的内置变量，指向顶层 CMakeLists.txt 所在的目录。 # 我们将项目的全局 include 目录暴露出去。 ${PROJECT_SOURCE_DIR}/include ) add_library() 定义了一个编译目标——一个库。 target_include_directories() 为这个目标指定了头文件搜索路径。使用 PUBLIC 关键字至关重要使得任何链接到 my_lib 的程序都能自动找到 my_lib.h，无需在链接方再次手动添加头文件路径。 第 2 步: 顶层的 CMakeLists.txt 这个文件是整个项目的总指挥，负责设置全局配置、调用子模块，并生成最终的可执行文件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # 文件位置: my_project/CMakeLists.txt # 1. 指定 CMake 的最低版本要求。这是每个顶层文件都应该有的第一行。 cmake_minimum_required(VERSION 3.10) # 2. 定义项目信息。 # 语法: project(\u0026lt;项目名称\u0026gt; VERSION \u0026lt;版本号\u0026gt; LANGUAGES \u0026lt;语言\u0026gt;) # 这会创建一些有用的变量，比如 PROJECT_NAME, PROJECT_SOURCE_DIR。 project(MyApp VERSION 1.0 LANGUAGES CXX) # 3. 设置 C++ 标准 (这是现代 CMake 推荐的方式)。 set(CMAKE_CXX_STANDARD 17) set(CMAKE_CXX_STANDARD_REQUIRED ON) set(CMAKE_CXX_EXTENSIONS OFF) # 4. 打印一条消息，方便调试时查看变量值 (可选)。 message(STATUS \u0026#34;Project source directory is: ${PROJECT_SOURCE_DIR}\u0026#34;) # 5. 添加子目录。 # 这个命令会告诉 CMake 去处理 src/my_lib 目录下的 CMakeLists.txt 文件。 # 当执行到这里时，上面定义的 my_lib 库目标就会被创建出来。 add_subdirectory(src/my_lib) # 6. 添加可执行文件。 # 语法: add_executable(\u0026lt;可执行文件名\u0026gt; \u0026lt;源文件...\u0026gt;) # 我们将主程序命名为 app，它由 src/main.cpp 编译而来。 add_executable(app src/main.cpp) # 7. 链接库！这是将所有部分组合在一起的关键步骤。 # 语法: target_link_libraries(\u0026lt;目标\u0026gt; \u0026lt;PUBLIC|PRIVATE|INTERFACE\u0026gt; \u0026lt;要链接的库...\u0026gt;) # # \u0026lt;目标\u0026gt;: 我们要链接的目标，即 app。 # PRIVATE: 表示 app 的编译需要 my_lib，但这个依赖关系不会继续传递。 # 对于可执行文件，通常使用 PRIVATE。 # \u0026lt;要链接的库\u0026gt;: 我们在子目录中定义的库目标 my_lib。 target_link_libraries(app PRIVATE my_lib) add_subdirectory() 使得顶层文件保持简洁，只负责“指挥”，具体实现则交给各个子模块。 target_link_libraries() 负责将不同的编译目标（库和可执行文件）链接在一起，形成依赖关系。 如何构建项目 🚀 现在已经写好了所有的 CMakeLists.txt 文件，可以开始构建了。整个过程都在终端中完成。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 1. 确保你位于项目的根目录 (my_project) cd path/to/my_project # 2. 创建并进入我们规划好的 build 目录 mkdir build cd build # 3. 运行 CMake 来生成构建系统。 # \u0026#39;..\u0026#39; 指向上一级目录，也就是 my_project/ 根目录，CMake 会在那里寻找顶层的 CMakeLists.txt。 # -DCMAKE_BUILD_TYPE=Debug 指定了构建类型为 Debug，会包含调试信息。 cmake -DCMAKE_BUILD_TYPE=Debug .. # CMake 会扫描你的系统，找到 C++ 编译器，然后根据 CMakeLists.txt 的内容 # 生成特定平台的构建文件（在 Linux/macOS 上是 Makefile，在 Windows 上是 Visual Studio sln 文件）。 # 4. 编译项目 # 这个命令会调用底层的构建工具（如 make 或 msbuild）来执行真正的编译和链接工作。 # \u0026#39;--build .\u0026#39; 是一个平台无关的命令，告诉 CMake 在当前目录执行构建。 cmake --build . # 或者在 Linux/macOS 上，你可以直接运行: # make # 编译完成后，你会在 build 目录（或其子目录）下找到你的可执行文件 `app` 和库文件 `libmy_lib.a`。 ","permalink":"http://localhost:1313/blogs/simple_cmake/","summary":"A Simple Cmake Example","title":"A Simple Cmake Example"},{"content":"What Can git rebase Do rebase 的字面意思是“变基”——也就是改变一个分支的“基础”提交点。它的主要目标是：将一系列的提交以更整洁、线性的方式应用到另一个分支上，从而创造一个干净、没有多余合并记录的项目历史。\n假设你的项目历史是这样的：你在 main 分支上切出了一个 feature 分支，之后 main 分支和你自己的 feature 分支都有了新的 commits.\n1 2 3 A---B---C \u0026lt;-- feature / D---E---F---G \u0026lt;-- main 如果你在 feature 分支上运行 git rebase main，Git 会做一件非常神奇的事：\nGit 会暂时“收起” feature 分支上的所有提交 (A, B, C). 将 feature 分支的起点移动到 main 分支的最新提交 G 上。 把刚才收起的提交 (A, B, C) 依次重新应用到新的起点上，形成新的提交 A\u0026rsquo;, B\u0026rsquo;, C' 1 2 3 A\u0026#39;--B\u0026#39;--C\u0026#39; \u0026lt;-- feature / D---E---F---G \u0026lt;-- main A\u0026rsquo; 和 A 的内容虽然一样，但它们的 Commit ID 是不同的，因为它们的父提交变了。rebase 相当于重写了历史。\n现在，再切换回 main 分支，执行 git merge feature，由于 main 分支的所有历史现在是 feature 分支历史的子集，Git 只会进行一次 Fast-forward 合并，不会产生新的合并提交。最终结果如下\n1 D---E---F---G---A\u0026#39;--B\u0026#39;--C\u0026#39; \u0026lt;-- main, feature 最终的项目历史是一条完美的直线，非常清晰，就像所有开发都是按顺序发生的一样。rebase 重写了历史，抹去了分支开发的“并行”痕迹。\nCompared to merge 要理解 rebase，最好的方法就是和 merge 对比。如果在 main 分支上运行 git merge feature，结果会是这样\n1 2 3 A---B---C / \\ D---E---F---G---H \u0026lt;-- main (H 是一个合并提交) merge 做的事情是：\n找到两个分支的共同祖先 E. 将两个分支的修改整合起来，创建一个全新的 Merge Commit，也就是 H. 该提交有两个父提交点 C 和 G. merge 完全全保留了历史的真实性。它清楚地记录了“在某个时间点，我们把一个分支合并了进来”。但如果项目频繁合并，历史记录会充满大量的合并提交，形成一个复杂的“菱形”或“意大利面条”式的网状结构，难以阅读。\nHow to use rebase 假设你正在 feature-login 分支上开发，同时主分支 main 也有了新的更新。\n确保 main 分支处于最新的状态 1 2 git checkout main git pull origin main 切换到你正在开发的分支 git checkout feature-login 把 main 分支上的最新修改 rebase 到你当前的 feature-login 分支上 git rebase main 解决冲突 (如果有的话). 因为 rebase 是逐个应用提交，所以可能会在某个提交应用时发生冲突。此时，rebase 会暂停。 打开冲突文件，手动解决冲突（和 merge 冲突一样）。 解决后，使用 git add \u0026lt;filename\u0026gt; 将文件标记为已解决。 然后，继续 rebase 过程 git rebase --continue 如果中途想放弃，可以回到 rebase 开始前的状态 git rebase --abort 合并到主分支 rebase 成功后，你的 feature-login 分支就已经包含了 main 的所有更新，并且你的提交都在最前面。现在可以进行一次干净的快进合并。 1 2 git checkout main git merge feature-login When NOT to Use rebase **永远不要对一个已经推送到 remote，并且可能被团队其他人使用的公共分支 (如 main, develop)进行 rebase！**因为 rebase 会重写历史。如果你 rebase 了一个公共分支并强制推送 (git push --force)，那么所有团队成员的本地历史记录都将与远程的“新历史”产生严重分歧。\n正确用法是只在你自己的、还未与他人分享的本地分支上使用 rebase，用来整理你自己的提交记录，以便在合并到公共分支前有一个干净的历史。\nAdvanced Use git rebase -i git rebase -i 允许你在 rebase 的过程中，对你的提交进行编辑、合并、拆分或删除。这常用于在合并到 main 分支前，将自己本地凌乱的提交（如 \u0026ldquo;修复拼写错误\u0026rdquo;, \u0026ldquo;临时提交\u0026rdquo;, \u0026ldquo;又改了一点\u0026rdquo;）整理成几个有意义的提交。\n假设你的 feature-login 分支有 3 个凌乱的提交，你想把它们合并成一个。\n启动交互式 rebase git rebase -i HEAD~3. 其中 HEAD~3 表示从当前提交 (HEAD) 往前数 3 个提交。 编辑 Rebase 脚本 Git 会打开一个文本编辑器，列出这 3 个提交： 1 2 3 pick a31ab34 complete login UI pick 58c34bb fix a button bug pick 948f2cb add backend verify logic 在文件下方会有指令说明。你可以修改每一行前面的 pick 命令。比如，我们想把后两个提交合并到第一个里面：\n1 2 3 pick a31ab34 complete login UI squash 58c34bb fix a button bug squash 948f2cb add backend verify logic 保存并退出编辑器 Git 会开始合并提交，并弹出另一个编辑器，让你为这个合并后的新提交编写一个新的 commit message. 整理好后保存退出。现在再用 git log 查看，你会发现原来 3 个凌乱的提交已经变成了一个干净、完整的提交。 ","permalink":"http://localhost:1313/blogs/git-rebase-flow/","summary":"Use of git rebase","title":"How to Use git rebase"},{"content":"在 All2All 通信中，每个设备给其他设备发送大小为 m 的不同的消息。此操作相当于使用一维数组分区对分布在 p 个进程中的二维数据数组进行转置，因此也被称作全交换 (total exchange)\nRing / Bidirectional Linear Array 线性数组拓扑结构的 All2All 通信中，每个设备需要发送 p-1 份大小为 m 的数据。用 {i,j} 表示消息需要从设备 i 发送到设备 j. 首先，每个节点将所有要发送的数据作为一个大小为 m(p-1) 的合并消息发送给它邻居 (假设所有设备通信方向相同)。当邻居收到这个消息后提取他所需要的那一部分，发送剩下的大小为 m(p-2). 每个设备一共发送 p-1 次，每次要发送的消息大小减少 m.\n由此可以得出在 p 个设备组成的线性数组拓扑上进行 All2All 每个设备需要向相邻设备通信 p-1 次，第 i 次通信的消息大小为 m(p-i). 如果向两个方向都进行发送，那么每个方向都只用发送原先一半的数据。\n$$\r\\begin{aligned}T_{ring}\u0026=\\quad\\sum_{i=1}^{p-1}(t_{s}+t_{w}m(p-i))\\\\\u0026=\\quad t_{s}(p-1)+\\sum_{i=1}^{p-1}it_{w}m\\\\\u0026=\\quad(t_{s}+t_{w}mp/2)(p-1).\\end{aligned}\r$$环状网络中每份消息的平均传输跳数是 $\\frac{\\sum_{d=1}^{p-1}i}{p-1} = p/2$，因此 p 个节点总共的通信量之和为 $p\\times m(p-1)\\times\\frac p2$ 环状网络中总的链路数目为 p. 因此负载平均的情况下，最少需要的时间为 $\\frac{m(p-1)\\times\\frac p2\\times p}p = m(p-1)\\frac p2$ ，因此算法时间为最优的。\n跳数为 d 的消息数量对应于相距 d 的节点对 (i, j)，其中 |i-j|=d\n(0, d),(1, d+1), \\ldots,(p-1-d, p-1)，即 i 从 0 到 p-1-d, j=i+d ，共有 p-d 对。 (d, 0),(d+1,1), \\ldots,(p-1, p-1-d)，即 i 从 d 到 p-1, ~ j=i-d ，也有 p-d 对。 总共有 2(p-d) 条消息的跳数为 d 总跳数\n$$\r\\begin{aligned}\r\\text { 总跳数 } \u0026 =\\sum_{d=1}^{p-1} d \\times 2(p-d) \\\\\r\u0026 =2 \\sum_{d=1}^{p-1} d(p-d)=2\\left(p \\sum_{d=1}^{p-1} d-\\sum_{d=1}^{p-1} d^{2}\\right) \\\\\r\u0026 = p \\cdot \\frac{(p-1) p}{2}-\\frac{(p-1) p(2 p-1)}{6} \\\\\r\u0026 = =\\frac{(p-1) p(p+1)}{6}\r\\end{aligned}\r$$因此平均跳数 =$\\frac{\\text { 总跳数 }}{\\text { 总消息数 }}=\\frac{\\frac{(p-1) p(p+1)}{3}}{p(p-1)}=\\frac{p+1}{3}$\nMesh 若 p 个设备组成大小为 $\\sqrt{p} \\times \\sqrt{p}$ 的 mesh 进行 All2All 通信，每个设备首先将其 p 个数据按照目的设备的列进行分组，即分成 $\\sqrt{p}$ 组，每组包含大小为 $m\\sqrt{p}$ 的消息。假设 3x3 的 mesh，则第一组消息的目的节点为 {0,3,6}，第二组消息的目的节点为 {1,4,7}，第三组消息的目的节点为 {2,5,8}\n首先同时分别在每一行中进行 All2All 通信，每一份数据大小为 $m\\sqrt{p}$. 通信结束后每个设备拥有的是该行目的设备为所在列的所有数据。然后将数据按照目的设备所在的行进行分组。即设备 {0,3,6} 第一组消息的目的节点为 0，第二组消息的目的节点为 3，第三组消息的目的节点为 6. 然后同时分别在每一列中进行 All2All 通信。\n我们只需要将 Linear Array 拓扑结构中的公式的 p 换成 $\\sqrt{p}$ ，m 换成 $m\\sqrt{p}$，再乘以 2 就得到在 mesh 上进行 All2All 的时间\n$$\rT_{mesh}=(2t_{s}+t_{w}mp)(\\sqrt{p}-1).\r$$Hypercube 超立方体拓扑在每个维度上都有两个节点，一共有 $\\log{p}$ 个维度。在一共有 p 个节点超立方体中，在某个维度 $d$ 上，超立方体可以被划分为两个 (n−1) 维的子立方体，这两个子立方体通过维度 d 上的 p/2 条链路相连。\n在 All2All 通信的任何阶段，每个节点都持有 $p$ 个大小为 $m$ 的数据包。当在特定维度上通信时，每个节点发送 $p/2$ 个数据包 (合并为一条消息)。这些数据包的目的地是由当前维度的链路连接的另一个子立方体包含的节点。在上述过程中，节点必须在每个 $\\log{p}$ 通信步骤之前在本地重新排列消息。\n$\\log{p}$ 步中的每一步，每个设备沿当前维度的双向链路交换大小为 mp/2 的数据。因此在 hypercube 上进行 All2All 的时间为\n$$\rT_{hcube}=(t_{s}+t_{w}mp/2)\\log p.\r$$值得注意的是与 ring 和 mesh 算法不同，超立方体算法不是最优的。每个设备发送和接收大小为 m(p- 1) 的数据，超立方体上任意两个节点之间的平均距离为 $\\log{p}/2$ . 因此，网络上的总数据流量为 $p\\times m(p - 1)\\times(\\log{p})/2$. 每个超立方体一共有 $p\\log{p}/2$ 条双向链路，如果流量能够被平分，则通信用时下界应该为\n$$\r\\begin{aligned}T_{min}\u0026=\\frac{t_{w}pm(p-1)(\\log p)/2}{(p\\log p)/2}\\\\\u0026=t_{w}m(p-1).\\end{aligned}\r$$Optimal Algorithm in Hypercube 在超立方体上，执行 All2All 的最佳方法是让每一对节点彼此直接通信。因此，每个节点只需执行 p-1 次通信，每次与不同设备交换大小为 m 的数据。设备必须在每次通信中选择不会出现拥塞的通信对象。在第 j 次通信中，节点 i 与节点 $i \\oplus j$ 交换数据。在超立方体上，从节点 i 到节点 j 的消息必须经过至少 l 条链路，其中 l 是 i 和 j 之间的汉明距离 (即 $i \\oplus j$ 的二进制表示中的非零比特数). 我们通过 E-cube 路由来选择路径：\n将当前节点地址 C 与目标节点地址 D 进行 XOR 操作，得到 $R=C\\oplus D$. 找到 R 的最低有效非零位，决定下一步跳转的维度。 沿选定维度跳转到下一个节点，更新当前节点地址。 重复上述步骤，直到 R=0， 即到达目标节点。 对于节点i和节点j之间的消息传输，该算法保证每一步的通信时间为 t_s + t_wm，因为在节点 i 和节点 j 之间的链路上沿着同一方向传播的任何其他消息都不存在竞争，切每一步只切换一个维度，通信距离为 1. 整个 All2All 的总通信时间为 $$T_{xor}=(t_{s}+t_{w}m)(p-1).$$Bruck Algorithm in Full-connected Network Bruck是一种存储-转发 (store-and-forward) 算法，需要 log(P) 次通信步骤。这意味着发送缓冲区 S 和接收缓冲区 R 都用于在中间通信轮次中发送、接收和存储数据。因为某些接收到的数据块必须在后续通信步骤中使用。这种存储-转发的特性对通信轮次的顺序提出了约束。与线性步骤实现不同，Bruck 必须保持明确的通信顺序，其中第 i+1 次迭代必须在第 i 次迭代之后物理时间上发生。 Bruck\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 Algorithm 2 NCCL Bruck algorithm P ← total number of processes. for i ∈ [0, P] do R[i] = S[(p+i) % P] // S and R are send and receive buffers, and p is rank id of each process; end for allocate temporary buffer T with SC × (P+1) / 2 elements; // SC is number of elements per data-block. for k = 1; k \u0026lt; P; k \u0026lt;\u0026lt;= 1 do allocate send indexes array SB with (P+1) / 2 integers; number of send data-blocks NB ← 0; for i ∈ [k, P] do if i \u0026amp; k then SB[NB] ← i; copy R[i] into T[NB]; NB ← NB + 1; end if sendproc ← (p + k) % P; recvproc ← (p - k + P) % P; ncclGroupStart() send data in T to sendproc; receive data from recvproc into S; ncclGroupEnd() for i ∈ [0, SB] do copy T[i] into R[SB[i]]; end for end for for i ∈ [0, P] do R[i] = R[(p - i + P) % P] // final rotation; end for end for line(2-4): 将每个设备发送缓冲区 S 中的数据按照 rank 偏移重新排列拷贝到接收缓冲区 R 中。 line(5): 为通信阶段准备一个临时缓冲区 T line(6): 通信步开始 k 以指数方式增长 (1, 2, 4, \u0026hellip;)，总共执行 logP 次迭代 line(7-14): 用索引数组 SB，记录需要发送的数据块位置。遍历 k~P-1 同通过对 i\u0026amp;k 判断哪些数据块需要在此轮发送. (若 P 是 2 的指数幂，因为 k 是 2 的指数幂，因此只有一位为 1，那么就是每轮发送 p/2 个数据块) 将接收缓冲区 R 中满足条件的数据拷贝到临时缓冲区 T，并记录索引。 line(15-16): 确定要接收和发送的目标。 line(17-20): 进行通信操作，将数据发送到目标的发送缓冲区。 line(21-23): 更新接收缓冲区。 line(25-27): 反向调整接收缓冲区数据的位置。 总共 log(p) 步骤每步发送 m 消息。\nTree-based Tree\n采用先在行上进行 All-gather, 再在列上进行 Scatter. 也需要 log(p) 步，其中 gather 阶段第一步通信量为 m(p-1)，一共进行 0.5log(p) 步每一步通信量翻倍，跳数也翻倍；scatter阶段则是相反，因此两步的通信时间相同总共 t_s*log(p) + m(p-1)^2/3\n","permalink":"http://localhost:1313/blogs/all2allcommcost/","summary":"Introduction of Transformer Family","title":"All2All Communication Cost"},{"content":"MLIR 的主要原则之一是逐步下降，即存在许多级别的 IR 粒度，并且逐步下降 IR 的不同部分，仅在不再对优化有用时丢弃信息。在本文中，将完成其中的第一步：使用所谓的方言转换基础设施将多方言 lowering 为标准MLIR方言的组合。\nThe Type Obstacle 如果不是针对类型，方言转换 (lowering) 本质上与普通 pass 相同：编写一些重写模式并将其应用于 IR. 对于每个需要 lowering 的 OP ，通常会有一个重写模式。\n类型使这个问题变得更加复杂，我将通过poly的示例来演示这个问题。\npoly.add 对两个多项式进行相加并返回结果多项式。我们想 lowering poly。例如，添加到 arith.addi 算术运算的矢量化循环中。但 arith 并不知道 poly.poly 类型的存在。\n如果必须使扩展 arith 以了解poly，需要对 arith 进行上游更改。添加 op 的 operands 以允许实现某种接口的类型，例如 integer-like 或 containers of integer-like.\n所以，除了 lowering op，还需要 lowering poly. poly\u0026lt;N\u0026gt; 变成张量 \u0026lt;Nxi32\u0026gt;. 这就是类型障碍发挥作用的地方。一旦更改了特定值的类型，例如，在 lowering 生成该值作为输出的 OP 时，那么该值的所有下游用户仍然期望使用旧类型，并且在 lowering 它们之前在技术上是无效的。在每次传递之间，MLIR运行验证器以确保IR有效，因此如果没有一些特殊处理，这意味着需要在一次传递中转换所有类型和 OP ，否则这些验证器将失败。但是用标准重写规则管理所有这些将是困难的：对于每个重写规则，您都必须不断检查参数和结果是否已经转换。\n例如在 lowering 一个生成该值作为输出的 OP 时，所有依赖该值的下游用户仍然期望旧的类型，因此在技术上这些下游用户在未被 lowering 之前是无效的。MLIR 在每次转换 (pass) 之间运行验证器以确保中间表示 (IR) 是有效的，因此如果没有特殊处理，这意味着所有类型和 OP 必须在一个转换中全部转换，否则验证器会失败。但是，使用标准的重写规则来管理这一切会很困难：对于每个 OP 重写规则，你需要不断地检查参数和结果是否已经转换。\nMLIR 通过一个围绕标准转换的包装器来处理这种情况，这个包装器被称为方言转换框架(dialect conversion framework). 使用这个框架需要用户继承不同的类来实现普通的重写，设置一些额外的元数据，并以特定的方式 将类型转换与 OP 转换分开，我们稍后会看到具体方式。但从高层次来看，这个框架通过以某种排序顺序 lowering OP 、同时转换类型，并让 OP 转换器能够访问每个 OP 的原始类型以及在 OP 被框架访问时的进行中的转换类型。每个基于 OP 的重写模式都期望在访问后使该 OP 的类型合法，但不需要担心下游 OP.\nModes of Conversion 当对一组 OP 进行转换时，有几种不同的转换模式可供选择：\nPartial Conversion 使尽可能多的对目标的操作合法化，但将允许未显式标记为“非法”的预先存在的操作保持未转换。这允许在存在未知操作的情况下部分降低输入。 可以通过 applyPartialConversion 进行部分转换。 Full Conversion 使所有输入操作合法化，并且只有当所有操作都正确地合法化到给定的转换目标时才成功。这确保了在转换过程之后只存在已知的操作。 可以通过 applyFullConversion 进行完整转换。 Analysis Conversion 如果要应用转换，Analysis Conversion 将分析哪些操作对给定的转换目标是合法的。这是通过执行 \u0026lsquo;Partial\u0026rsquo; Conversion 并记录哪些操作如果成功将被成功转换来完成的。注意，没有 rewrites 或转换实际应用于输入操作。 可以通过 a pplyAnalysisConversion 应用分析转换。 Conversion Target 转换目标是在转换过程中被认为是合法的内容的正式定义。转换框架生成的最终操作必须在converontarget上标记为合法，这样重写才能成功。根据转换模式的不同，现有操作不一定总是合法的。操作和方言可以标记为下列任何规定的合法性行为：\nLegal: 表明给定操作的每个实例都是合法的，即属性、操作数、类型等的任何组合都是有效的。 Dynamic: 此操作表示给定操作的某些实例是合法的。这允许定义微调约束，例如，arith.addi 仅在操作32位整数时合- Illegal: 此操作表示给定操作的实例不合法。为使转换成功，必须始终转换标记为“非法”的操作。此操作还允许有选择地将特定操作标记为非法，否则将是合法的方言。 未明确标记为合法或非法的操作和方言与上述（“未知”操作）分开，并被区别对待，例如，出于上述部分转换的目的。\n最后，方言转换框架会跟踪任何未解决的类型冲突。如果在转换结束时仍存在类型冲突，会发生以下两种情况之一。转换框架允许用户可选地实现一个称为类型物化器 (type materializer) 的功能，它会插入新的中间 OP 来解决类型冲突。因此，第一种可能是方言转换框架使用你的类型物化器钩子来修补 IR，转换成功结束。如果这些钩子失败，或者你没有定义任何钩子，那么转换会失败。\n这种基础设施的复杂性部分还与上游 MLIR 中一个更困难的 lowering 流水线有关：缓冲区化流水线 (bufferization pipeline). 这个流水线本质上将使用 value semantics 的操作的 IR 转换为使用 pointer semantics 的中间表示。例如，张量类型 (tensor type) 及其相关操作具有 value semantics，这意味着每个操作在语义上都会生成一个全新的张量作为输出，并且所有操作都是 pure 的 (有一些例外情况) 。另一方面， memref 具有 pointer semantics，意味着它更接近于对物理硬件的建模，需要显式的内存分配，并支持对内存位置进行变动的操作。\n由于缓冲区化过程复杂，它被拆分为 sub-passes，分别处理与上游 MLIR 各相关方言特定的缓冲区化问题 (参见文档，例如 arith-bufferize、func-bufferize 等) 。每个缓冲区化转换都会产生一些内部无法解决的类型冲突，这些冲突需要自定义的类型物化 (type materializations) 来解决。为了在所有相关方言中处理这些问题，MLIR 团队构建了一个专门的方言，称为缓冲区化方言 (bufferization dialect) ，用来存放中间操作。你会注意到像 to_memref 和 to_tensor 这样的操作，它们扮演了这一角色。然后还有一个最终缓冲区化转换 (finalizing-bufferize pass) ，其作用是清理任何残留的缓冲区化或物化操作。\nLowering Poly with Type Materializations 跟之前写 Pass tablegen 的时候大同小异，主要是需要定义 dependent dialects. Lowering 必须以这种方式依赖于包含将创建的操作或类型的任何方言，以确保 MLIR 在尝试运行 pass 之前加载这些方言。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // include/Conversion/PolyToStandard/PolyToStandard.td #ifndef LIB_CONVERSION_POLYTOSTANDARD_POLYTOSTANDARD_TD_ #define LIB_CONVERSION_POLYTOSTANDARD_POLYTOSTANDARD_TD_ include \u0026#34;mlir/Pass/PassBase.td\u0026#34; def PolyToStandard : Pass\u0026lt;\u0026#34;poly-to-standard\u0026#34;\u0026gt; { let summary = \u0026#34;Lower `poly` to standard MLIR dialects.\u0026#34;; let description = [{ This pass lowers the `poly` dialect to standard MLIR, a mixture of affine, tensor, and arith. }]; let dependentDialects = [ \u0026#34;mlir::arith::ArithDialect\u0026#34;, \u0026#34;mlir::tutorial::poly::PolyDialect\u0026#34;, \u0026#34;mlir::tensor::TensorDialect\u0026#34;, ]; } #endif // LIB_CONVERSION_POLYTOSTANDARD_POLYTOSTANDARD_TD_ 下一步需要定义 ConversionTarget，告诉 MLIR 哪些 OP 需要进行 lowering，可以定义整个需要下降的 dialect 为 illegal，确保在转换完成后没有该 dialect. 这里使用 applyPartialConversion 而不是 applyFullConversion 的原因是报错消息更直观。Partial Conversion 可以看到步骤以及最后无法修补的冲突类型。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // lib/Conversion/PolyToStandard/PolyToStandard.cpp struct PolyToStandard : impl::PolyToStandardBase\u0026lt;PolyToStandard\u0026gt; { using PolyToStandardBase::PolyToStandardBase; void runOnOperation() override { MLIRContext *context = \u0026amp;getContext(); auto *module = getOperation(); // TODO: implement pass ConversionTarget target(*context); target.addIllegalDialect\u0026lt;PolyDialect\u0026gt;(); // declare an entire dialect as “illegal” RewritePatternSet patterns(context); if (failed(applyPartialConversion(module, target, std::move(patterns)))) { signalPassFailure(); } } }; 接下来需要定义一个 TypeConverter 的子类将 poly dialect 下的 type 转换成其他类型. 其中类型转换和 materialization 是分别通过 addConversion 和 addMaterialization 完成的。这里我们将属于 poly.poly 类型的 degreBound 转换成 Tensor.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class PolyToStandardTypeConverter : public TypeConverter { public: PolyToStandardTypeConverter(MLIRContext* ctx) { addConversion([](Type type) { return type; }); addConversion([ctx](PolynomialType type) -\u0026gt; Type { int degreeBound = type.getDegreeBound(); IntegerType elementType = IntegerType::get( ctx, 32, IntegerType::SignednessSemantics::Signless); return RankedTensorType::get({degreeBound}, elementType); }); } }; 接下来就是要转换 Poly 中的各种 op，需要继承 OpConversionPattern，重写里面的 matchAndRewrtite 方法. 以 poly.add 为例，根据父类里的定义，这里 OpAdaptor 即为 AddOp:OpAdaptor，它使用 tablegen 定义的名称作为 op 的参数和方法名称的结果，而不是之前的的getOperand. AddOp 参数包含原始的、未类型转换的操作数和结果。ConversionPatternRewriter类 似于PatternRewriter，但有与方言转换相关的其他方法，例如 convertRegionTypes，用于为嵌套区域的操作应用类型转换。对IR\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 struct ConvertAdd : public OpConversionPattern\u0026lt;AddOp\u0026gt; { ConvertAdd(MLIRContext* context) : OpConversionPattern\u0026lt;AddOp\u0026gt;(context) { } using OpConversionPattern::OpConversionPattern; LogicalResult matchAndRewrite( AddOp op, OpAdaptor adaptor, ConversionPatternRewriter\u0026amp; rewriter) const override { auto addOp = rewriter.create\u0026lt;arith::AddIOp\u0026gt;( op-\u0026gt;getLoc(), adaptor.getLhs(), adaptor.getRhs()); rewriter.replaceOp(op.getOperation(), addOp); return success(); } }; 下面我们需要将 ConvertAdd 添加进 PolyToStandard::runOnOperation 中定义的 RewriterPatternSet 中。\n1 2 3 4 5 6 void runOnOperation() { ... RewritePatternSet patterns(context); PolyToStandardTypeConverter typeConverter(context); patterns.add\u0026lt;ConvertAdd\u0026gt;(typeConverter, context); } ","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch9-dialect-conversion/","summary":"Personal MLIR learning notes 9.","title":"MLIR-Ch9 Dialect Conversion"},{"content":"Why is Canonicalization Needed? 规范化器可以用标准的方式编写：在 tablegen 中声明 op 具有规范化器，然后实现生成的 C++函数声明。官网例子如下\n1 2 3 4 5 6 7 8 9 10 def MyOp : ... { // I want to define a fully general set of patterns for this op. let hasCanonicalizer = 1; } def OtherOp : ... { // A single \u0026#34;matchAndRewrite\u0026#34; style RewritePattern implemented as a method // is good enough for me. let hasCanonicalizeMethod = 1; } Canonicalization 模式可以通过如下方式定义\n1 2 3 4 5 6 7 8 9 void MyOp::getCanonicalizationPatterns(RewritePatternSet \u0026amp;patterns, MLIRContext *context) { patterns.add\u0026lt;...\u0026gt;(...); } LogicalResult OtherOp::canonicalize(OtherOp op, PatternRewriter \u0026amp;rewriter) { // patterns and rewrites go here. return failure(); } Canonicalizers in C++ 在 Op 定义中添加 let hasCanonicalizeMethod = 1; 后会为该 Op 生成如下的函数声明。\n1 2 3 4 static void getCanonicalizationPatterns( ::mlir::RewritePatternSet\u0026amp; results, ::mlir::MLIRContext* context ); 这个函数需要对 results 加入自定义的 OpRewritePattern. 例如可以重写 x^2 - y^2 这个 SubOp 为 (x+y)(x-y)，当 x^2 和 y^2 在后续没有被使用时。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 struct DifferenceOfSquares : public OpRewritePattern\u0026lt;SubOp\u0026gt; { DifferenceOfSquares(mlir::MLIRContext* context) : OpRewritePattern\u0026lt;SubOp\u0026gt;(context, 1) { } LogicalResult matchAndRewrite(SubOp op, PatternRewriter\u0026amp; rewriter) const override { Value lhs = op-\u0026gt;getOperand(0); // x^2 Value rhs = op-\u0026gt;getOperand(0); // y^2 // If either arg has another use, then this rewrite is probably less // efficient, because it cannot delete the mul ops. if (!lhs.hasOneUse() || !rhs.hasOneUse()) { return failure(); } auto rhsMul = rhs.getDefiningOp\u0026lt;SubOp\u0026gt;(); auto lhsMul = rhs.getDefiningOp\u0026lt;SubOp\u0026gt;(); if (!rhsMul || !lhsMul) { return failure(); } // check if lhsMul \u0026amp;\u0026amp; rhsMul is squre operation bool rhsMulOpsAgree = rhsMul.getLhs() == rhsMul.getRhs(); bool lhsMulOpsAgree = lhsMul.getLhs() == lhsMul.getRhs(); if (!rhsMulOpsAgree || !lhsMulOpsAgree) { return failure(); } auto x = lhsMul.getLhs(); auto y = rhsMul.getLhs(); auto newAdd = rewriter.create\u0026lt;AddOp\u0026gt;(op-\u0026gt;getLoc(), x, y); auto newSub = rewriter.create\u0026lt;AddOp\u0026gt;(op-\u0026gt;getLoc(), x, y); auto newMul = rewriter.create\u0026lt;AddOp\u0026gt;(op-\u0026gt;getLoc(), newAdd, newSub); rewriter.replaceOp(op, newMul); // We don\u0026#39;t need to remove the original ops because MLIR already has // canonicalization patterns that remove unused ops. return success(); } }; void SubOp::getCanonicalizationPatterns(::mlir::RewritePatternSet\u0026amp; results, ::mlir::MLIRContext* context) { results.add\u0026lt;DifferenceOfSquares\u0026gt;(context); } Canonicalizers in Tablegen 下面利用 tablegen 实现一个多项式共轭的 canonicalizer，f(conj(z)) = conj(f(z)).\n1 2 3 // PolyPatterns.td def LiftConjThroughEval : Pat\u0026lt;(Poly_EvalOp $f, (ConjOp $z, $fastmath)), (ConjOp (Poly_EvalOp $f, $z), $fastmath)\u0026gt;; 这里的义了重写模式的 Pat 类和定义要匹配和重写的 IR tree 的括号. Pattern 和 Pat 的定义如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Pattern\u0026lt;dag source, list\u0026lt;dag\u0026gt; results, list\u0026lt;dag\u0026gt; preds = [], list\u0026lt;dag\u0026gt; supplemental_results = [], dag benefitAdded = (addBenefit 0)\u0026gt; { dag sourcePattern = source; list\u0026lt;dag\u0026gt; resultPatterns = results; // 注意这里是 list\u0026lt;dag\u0026gt; list\u0026lt;dag\u0026gt; constraints = preds; list\u0026lt;dag\u0026gt; supplementalPatterns = supplemental_results; dag benefitDelta = benefitAdded; } class Pat\u0026lt;dag pattern, dag result, list\u0026lt;dag\u0026gt; preds = [], list\u0026lt;dag\u0026gt; supplemental_results = [], dag benefitAdded = (addBenefit 0)\u0026gt; : Pattern\u0026lt;pattern, [result], preds, supplemental_results, benefitAdded\u0026gt;; Pattern 类接受一个名为 results 的模板参数，它是一个 list\u0026lt;dag\u0026gt; 类型，可以定义一个或多个结果模式。这使得 Pattern 非常灵活，可以用于处理以下情况：\n源操作产生多个结果，并且每个结果都需要被不同的新操作替换。 重写过程需要生成一些辅助操作，这些辅助操作本身不直接替换源操作的结果，但有助于构建最终的替换结果。 Pat 类继承自 Pattern 类。输入是两个IR tree 对象 (MLIR称之为 DAG nodes)，树中的每个节点由括号 () 指定，括号中的第一个值是操作的名称，其余参数是 op 的参数或属性。当节点可以嵌套，这对应于应用于参数的匹配。它将这个单一的 result DAG 包装成一个只包含一个元素的列表 [result] ，然后传递给父类 Pattern 的 results 参数。因此 Pat 实际上是 Pattern 的一个特例，专门用于定义那些只产生单一结果模式的重写规则。\n生成的代码如下所示\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 /* Generated from: /code/sac_mlir_learning/Ch8-DialectConversion/include/mlir-tutorial/Dialect/Poly/PolyPatterns.td:8 */ // 定义一个名为 LiftConjThroughEval 的重写模式结构体，继承自 mlir::RewritePattern struct LiftConjThroughEval : public ::mlir::RewritePattern { // 构造函数 LiftConjThroughEval(::mlir::MLIRContext* context) : ::mlir::RewritePattern(\u0026#34;poly.eval\u0026#34;, // 此模式匹配的根操作名 2, // 此模式的收益 (benefit)，用于解决多个模式匹配时的优先级 context, {\u0026#34;complex.conj\u0026#34;, \u0026#34;poly.eval\u0026#34;} /* 依赖或生成的其他操作名列表 */) { } // 核心的匹配与重写逻辑 ::llvm::LogicalResult matchAndRewrite( ::mlir::Operation* op0, // 当前尝试匹配的操作 (op0 预期为 poly.eval) ::mlir::PatternRewriter\u0026amp; rewriter) const override { // 用于捕获匹配过程中操作数和属性的变量 ::mlir::Operation::operand_range z; // 将捕获 complex.conj 的操作数 ::mlir::arith::FastMathFlagsAttr fastmath; // 将捕获 complex.conj 的 fastmath 属性 ::mlir::Operation::operand_range f; // 将捕获 poly.eval 的第一个操作数 (多项式) // 用于存储匹配到的操作，方便后续统一获取位置信息 ::llvm::SmallVector\u0026lt;::mlir::Operation*, 4\u0026gt; tblgen_ops; // --- 开始匹配 --- tblgen_ops.push_back(op0); // 将根操作 op0 (poly.eval) 加入列表 // 尝试将 op0 动态转换为 poly.eval 类型 auto castedOp0 = ::llvm::dyn_cast\u0026lt;::mlir::tutorial::poly::EvalOp\u0026gt;(op0); (void) castedOp0; // 避免未使用警告 (如果后续不直接使用 castedOp0 的某些特性) // 获取 poly.eval 的第一个操作数 (多项式 f) f = castedOp0.getODSOperands(0); { // 内嵌作用域，用于匹配 poly.eval 的第二个操作数 (求值点 point) // 获取定义 poly.eval 第二个操作数 (point) 的那个操作 (op1) auto* op1 = (*castedOp0.getODSOperands(1).begin()).getDefiningOp(); if (!(op1)) { // 如果 point 不是由某个操作定义的 (例如，它是块参数) return rewriter.notifyMatchFailure( castedOp0, [\u0026amp;](::mlir::Diagnostic\u0026amp; diag) { diag \u0026lt;\u0026lt; \u0026#34;There\u0026#39;s no operation that defines operand 1 \u0026#34; \u0026#34;of castedOp0 (the point operand)\u0026#34;; }); } // 尝试将 op1 动态转换为 complex.conj 类型 auto castedOp1 = ::llvm::dyn_cast\u0026lt;::mlir::complex::ConjOp\u0026gt;(op1); (void) castedOp1; if (!(castedOp1)) { // 如果 op1 不是 complex.conj 操作 return rewriter.notifyMatchFailure( op1, [\u0026amp;](::mlir::Diagnostic\u0026amp; diag) { diag \u0026lt;\u0026lt; \u0026#34;Operand 1 of poly.eval is not defined by mlir::complex::ConjOp\u0026#34;; }); } // 获取 complex.conj 的操作数 (z) z = castedOp1.getODSOperands(0); { // 内嵌作用域，用于提取 complex.conj 的 fastmath 属性 [[maybe_unused]] auto tblgen_attr = // [[maybe_unused]] 避免未使用警告 castedOp1.getProperties().getFastmath(); if (!tblgen_attr) // 如果没有显式设置 fastmath，则默认为 none tblgen_attr = ::mlir::arith::FastMathFlagsAttr::get( rewriter.getContext(), ::mlir::arith::FastMathFlags::none); fastmath = tblgen_attr; // 保存 fastmath 属性 } tblgen_ops.push_back(op1); // 将匹配到的 complex.conj 操作 (op1) 加入列表 } // --- 匹配结束 --- // --- 开始重写 --- // 为新生成的操作创建一个融合的位置信息，源自所有匹配到的操作 auto odsLoc = rewriter.getFusedLoc( {tblgen_ops[0]-\u0026gt;getLoc(), tblgen_ops[1]-\u0026gt;getLoc()}); (void) odsLoc; // 避免未使用警告 // 用于存储替换原操作 op0 的新值 ::llvm::SmallVector\u0026lt;::mlir::Value, 4\u0026gt; tblgen_repl_values; // 声明新的 poly.eval 操作 ::mlir::tutorial::poly::EvalOp tblgen_EvalOp_0; { // 创建新的 poly.eval 操作: eval(f, z) ::mlir::Value tblgen_value_0 = (*f.begin()); // poly.eval 的第一个操作数 (多项式 f) ::mlir::Value tblgen_value_1 = (*z.begin()); // poly.eval 的第二个操作数 (原 conj 的操作数 z) tblgen_EvalOp_0 = rewriter.create\u0026lt;::mlir::tutorial::poly::EvalOp\u0026gt;( odsLoc, /*input=*/tblgen_value_0, /*point=*/tblgen_value_1); } // 声明新的 complex.conj 操作 ::mlir::complex::ConjOp tblgen_ConjOp_1; { // 创建新的 complex.conj 操作: conj(result of new eval) ::llvm::SmallVector\u0026lt;::mlir::Value, 4\u0026gt; tblgen_values; // 新 conj 的操作数列表 (void) tblgen_values; ::mlir::complex::ConjOp::Properties tblgen_props; // 新 conj 的属性 (void) tblgen_props; // 新 conj 的操作数是新创建的 poly.eval 的结果 tblgen_values.push_back( (*tblgen_EvalOp_0.getODSResults(0).begin())); // 设置新 conj 的 fastmath 属性，与原 conj 保持一致 tblgen_props.fastmath = ::llvm::dyn_cast_if_present\u0026lt;decltype(tblgen_props.fastmath)\u0026gt;( fastmath); tblgen_ConjOp_1 = rewriter.create\u0026lt;::mlir::complex::ConjOp\u0026gt;( odsLoc, tblgen_values, tblgen_props); } // 将新创建的 complex.conj 操作的结果作为替换值 for (auto v : ::llvm::SmallVector\u0026lt;::mlir::Value, 4\u0026gt;{ tblgen_ConjOp_1.getODSResults(0)}) { tblgen_repl_values.push_back(v); } // 用新的值替换原始操作 op0 rewriter.replaceOp(op0, tblgen_repl_values); return ::mlir::success(); // 表示匹配和重写成功 } }; void LLVM_ATTRIBUTE_UNUSED populateWithGenerated(::mlir::RewritePatternSet\u0026amp; patterns) { patterns.add\u0026lt;LiftConjThroughEval\u0026gt;(patterns.getContext()); } 然后跟上一个方法一样，需要添加这个 canonicalizer.\n1 2 3 4 5 void EvalOp::getCanonicalizationPatterns(::mlir::RewritePatternSet\u0026amp; results, ::mlir::MLIRContext* context) { populateWithGenerated(results); } 同样我们可以通过 tablegen 的方式编写 DifferenceOfSquares，但由于将一个 SubOp 替换成了 3 个 Op，需要继承 Pattern 而不是 Pat.\n1 2 3 4 5 6 7 8 9 10 11 12 13 // PolyPatterns.td def HasOneUse: Constraint\u0026lt;CPred\u0026lt;\u0026#34;$_self.hasOneUse()\u0026#34;\u0026gt;, \u0026#34;has one use\u0026#34;\u0026gt;; // Rewrites (x^2 - y^2) as (x+y)(x-y) if x^2 and y^2 have no other uses. def DifferenceOfSquares : Pattern\u0026lt; (Poly_SubOp (Poly_MulOp:$lhs $x, $x), (Poly_MulOp:$rhs $y, $y)), [ (Poly_AddOp:$sum $x, $y), (Poly_SubOp:$diff $x, $y), (Poly_MulOp:$res $sum, $diff), ], [(HasOneUse:$lhs), (HasOneUse:$rhs)] \u0026gt;; ","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch8-canonicalizers-and-declarative-rewrite-patterns/","summary":"Personal MLIR learning notes 8.","title":"MLIR-Ch8 Canonicalizers and Declarative Rewrite Patterns"},{"content":"Purposes of a Verifier Verifiers 确保具体的 MLIR 程序中的类型和操作格式正确。验证器会在每次优化 pass 之前和之后运行，帮助确保单个 pass, folders, rewrite patterns 等都能生成正确的 IR. 这使得每个操作的约束条件（invariants）能够得到强制执行，同时简化了传递的实现，因为它们可以依赖这些约束条件，从而避免检查边界情况。多数情况下验证代码是用 Traits 来实现的。\nTrait-based Verifiers 上一章我们加入了 SameOperandsAndResultElementType 从而让 poly.add 的输入可以既是 poly 或者张量类型的 poly. 从技术上讲，这向 IR 添加了一个验证器，但是为了更清楚地演示这一点，这一章将限制该行为，我们将 Trait 改成 SameOperandsAndResultType 以断言输入和输出类型必须全部一致。\n这样会自动生成一些新功能。首先，验证引擎会使用 verifyTrait 来检查类型是否一致。在这里，verifyInvariants 是 Operation 基类中的一个方法，当某些 Traits 注入验证逻辑时，生成的代码会覆盖这个方法，用于检查操作类型上的类型约束。(如果是自定义验证器，则会使用名为 verify 的方法，以与 verifyInvariants 区分开来) 由于 SameOperandsAndResultType 是一个通用检查，因此它不会影响生成的代码。\n下面展示了 AddOp 的 inferReturnTypes 方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 ::llvm::LogicalResult AddOp::inferReturnTypes( ::mlir::MLIRContext* context, ::std::optional\u0026lt;::mlir::Location\u0026gt; location, ::mlir::ValueRange operands, ::mlir::DictionaryAttr attributes, ::mlir::OpaqueProperties properties, ::mlir::RegionRange regions, ::llvm::SmallVectorImpl\u0026lt;::mlir::Type\u0026gt;\u0026amp; inferredReturnTypes) { inferredReturnTypes.resize(1); // Represent AddOp\u0026#39;s output as a single type. ::mlir::Builder odsBuilder(context); if (operands.size() \u0026lt;= 0) // Check that there is at least one operand. return ::mlir::failure(); ::mlir::Type odsInferredType0 = operands[0].getType(); inferredReturnTypes[0] = odsInferredType0; // Set the output type to the first operand\u0026#39;s type. return ::mlir::success(); } 有了类型推导钩子，我们可以简化操作的汇编格式，类型只需要指定一次，而不是三次 ((type, type) -\u0026gt; type). 同时也需要更新所有测试的 mlir 以启用这个新的 assemblyFormat.\n1 let assemblyFormat = \u0026#34;$lhs `,` $rhs attr-dict `:` qualified(type($output))\u0026#34;; 我们可以从 AddOp 的 build 方法中看到现在不需要指定返回值，而是通过 inferReturnTypes 来推导。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void AddOp::build(::mlir::OpBuilder\u0026amp; odsBuilder, ::mlir::OperationState\u0026amp; odsState, ::mlir::Value lhs, ::mlir::Value rhs) { odsState.addOperands(lhs); odsState.addOperands(rhs); ::llvm::SmallVector\u0026lt;::mlir::Type, 2\u0026gt; inferredReturnTypes; if (::mlir::succeeded(AddOp::inferReturnTypes( odsBuilder.getContext(), odsState.location, odsState.operands, odsState.attributes.getDictionary(odsState.getContext()), odsState.getRawProperties(), odsState.regions, inferredReturnTypes))) odsState.addTypes(inferredReturnTypes); else ::mlir::detail::reportFatalInferReturnTypesError(odsState); } EvalOp 无法使用 SameOperandsAndResultType，因为它的操作数需要不同的类型。然而，我们可以使用 AllTypesMatch，它会生成类似的代码，但将验证限制在某些特定类型的子集上。\n1 2 3 4 5 def Poly_EvalOp : Op\u0026lt;Poly_Dialect, \u0026#34;eval\u0026#34;, [AllTypesMatch\u0026lt;[\u0026#34;point\u0026#34;, \u0026#34;output\u0026#34;]\u0026gt;]\u0026gt; { let summary = \u0026#34;Evaluates a Polynomial at a given input value.\u0026#34;; let arguments = (ins Polynomial:$input, AnyInteger:$point); let results = (outs AnyInteger:$output); } 可以看到相似的 inferReturnTypes 方法，由于 EvalOp 是返回多项式在某个整数点上的值，因此推断的返回值类型需要与第二个操作数类型一致。\n1 2 3 4 5 6 7 8 9 10 11 12 13 ::llvm::LogicalResult EvalOp::inferReturnTypes( ::mlir::MLIRContext* context, ::std::optional\u0026lt;::mlir::Location\u0026gt; location, ::mlir::ValueRange operands, ::mlir::DictionaryAttr attributes, ::mlir::OpaqueProperties properties, ::mlir::RegionRange regions, ::llvm::SmallVectorImpl\u0026lt;::mlir::Type\u0026gt;\u0026amp; inferredReturnTypes) { inferredReturnTypes.resize(1); ::mlir::Builder odsBuilder(context); if (operands.size() \u0026lt;= 1) return ::mlir::failure(); ::mlir::Type odsInferredType0 = operands[1].getType(); inferredReturnTypes[0] = odsInferredType0; return ::mlir::success(); } A Custom Verifier 如果需要添加自定义的 verifier 我们需要在 def 的时候添加 let hasVerifier = 1. 我们会发现生成的类里面定义了 verify 方法。\n1 2 3 4 class EvalOp ... { ... ::mlir::LogicalResult verify(); }; 因此我们需要在 PolyOps.cpp 中实现它。\n1 2 3 4 5 6 // lib/Dialect/Poly/PolyOps.cpp LogicalResult EvalOp::verify() { return getPoint().getType().isSignlessInteger(32) ? success() : emitError(\u0026#34;argument point must be a 32-bit integer\u0026#34;); } A Trait-based Custom Verifier 在 MLIR 中，每个 Trait 都有一个可选的 verifyTrait 钩子，这个钩子会在通过 hasVerifier 创建的自定义验证器之前执行。我们可以利用这个钩子定义通用的验证器，使其适用于多个操作。比如，我们可以通过扩展上一节的内容，创建一个通用的验证器，用于断言所有整数类型的操作数必须是 32 位。\n因此我们先需要 def 一个新的 Trait，然后将它加入到 EvalOp 中.\n1 2 let cppNamespace = \u0026#34;::mlir::tutorial::poly\u0026#34;; } 我们可以看到生成的代码里有一个新类需要我们实现\n1 2 3 4 5 6 7 8 class EvalOp : public ::mlir::Op\u0026lt; EvalOp, ::mlir::OpTrait::ZeroRegions, //..., ::mlir::tutorial::poly::Has32BitArguments, //... \u0026gt; { // ... }; 我们需要新建一个 PolyTraits.h 文件并且让 PolyOps.h 包含它\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // // /include/mlir-learning/Dialect/Poly/PolyOps.h #ifndef LIB_DIALECT_POLY_POLYTRAITS_H_ #define LIB_DIALECT_POLY_POLYTRAITS_H_ #include \u0026#34;mlir/include/mlir/IR/OpDefinition.h\u0026#34; namespace mlir::tutorial::poly { template \u0026lt;typename ConcreteType\u0026gt; class Has32BitArguments : public OpTrait::TraitBase\u0026lt;ConcreteType, Has32BitArguments\u0026gt; { public: static LogicalResult verifyTrait(Operation *op) { for (auto type : op-\u0026gt;getOperandTypes()) { // OK to skip non-integer operand types if (!type.isIntOrIndex()) continue; if (!type.isInteger(32)) { return op-\u0026gt;emitOpError() \u0026lt;\u0026lt; \u0026#34;requires each numeric operand to be a 32-bit integer\u0026#34;; } } return success(); } }; } #endif // LIB_DIALECT_POLY_POLYTRAITS_H_ 这样做的优点是具有更强的通用性，但缺点是需要进行繁琐的类型转换来支持特定的操作及其命名参数。例如，这里我们无法直接调用 getPoint，除非对操作进行动态转换为 EvalOp.\n","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch7-verifiers/","summary":"Personal MLIR learning notes 7.","title":"MLIR-Ch7 Verifiers"},{"content":"Constant Propagation vs Canonicalization -sccp Sparse Conditional Constant Propagation 是稀疏条件常数传播，它试图推断 op 何时具有常量输出，然后用常量值替换 op 。重复这个过程，它在程序中尽可能地“传播”这些常量。\n例如对于如下的函数\n1 2 3 4 5 6 7 8 func.func @test_arith_sccp() -\u0026gt; i32 { %0 = arith.constant 7 : i32 %1 = arith.constant 8 : i32 %2 = arith.addi %0, %0 : i32 %3 = arith.muli %0, %0 : i32 %4 = arith.addi %2, %3 : i32 return %2 : i32 } -sccp 优化后的结果如下：\n1 2 3 4 5 6 7 8 func.func @test_arith_sccp() -\u0026gt; i32 { %c63_i32 = arith.constant 63 : i32 %c49_i32 = arith.constant 49 : i32 %c14_i32 = arith.constant 14 : i32 %c8_i32 = arith.constant 8 : i32 %c7_i32 = arith.constant 7 : i32 return %c14_i32 : i32 } 需要注意的是：sccp 不会删除死代码；这里没有展示的是 sccp 的主要作用，它可以通过控制流 (if 或者 loop) 传播常量。\n一个相关的概念是 canonicalization，--canonicalize pass 隐藏了 MLIR 中的许多繁重工作。它与 sccp 有一点重叠，因为它也计算常量并在 IR 中具体化它们。例如，在上面的 IR 上使用 ——canonicalize pass 的结果如下\n1 2 3 4 func.func @test_arith_sccp() -\u0026gt; i32 { %c14_i32 = arith.constant 14 : i32 return %c14_i32 : i32 } 中间的常量都被修剪掉了，剩下的只是返回值，没有任何 op. 规范化不能通过控制流传播常量。\n这两者都是通过折叠 (folding) 来支持的，折叠是采取一系列 op 并将它们合并在一起为更简单的 op 的过程。它还要求我们的方言具有某种常量 op ，该 op 与折叠的结果一起插入。\n以这种方式支持折叠所需的大致步骤是：\n添加一个常量 op. 添加实例化钩子。 为每个 op 添加 folders. Making a Constant Operation 我们目前只支持通过 from_tensor op 从 arith.constant 创建常量。\n1 2 %0 = arith.constant dense\u0026lt;[1, 2, 3]\u0026gt; : tensor\u0026lt;3xi32\u0026gt; %p0 = poly.from_tensor %0 : tensor\u0026lt;3xi32\u0026gt; -\u0026gt; !poly.poly\u0026lt;10\u0026gt; 一个常量 op 可以将上述两个操作简化成一个 op. from_tensor op 还可以用于根据数据 (而不仅仅是常数) 构建一个多项函数，因此即使在我们实现了 poly.constant 之后，它也应该保留。\n1 %0 = poly.constant dense\u0026lt;[2, 8, 20, 24, 18]\u0026gt; : !poly.poly\u0026lt;10\u0026gt; fold 可以用于向 sccp 等 pass 传递信号，表明 op 的结果是常量，或者它可以用于说 op 的结果等效于由不同 op 创建的预先存在的值。对于常量的情况，还需要一个 materializeConstant 钩子来告诉 MLIR 如何获取常量结果并将其转化为适当的 IR op. 常量 op 的定义如下\ndef Poly_ConstantOp: Op\u0026lt;Poly_Dialect, \u0026#34;constant\u0026#34;, [Pure, ConstantLike]\u0026gt; {\rlet summary = \u0026#34;Define a constant polynomial via an attribute.\u0026#34;;\rlet arguments = (ins AnyIntElementsAttr:$coefficients);\rlet results = (outs Polynomial:$output);\rlet assemblyFormat = \u0026#34;$coefficients attr-dict `:` type($output)\u0026#34;;\r} ConstantLike trait 标记的 op 被视为常量值生成 op ，可以在编译时进行常量折叠等优化。arguments 定义 op 的输入是一个具有 AnyIntElementsAttr 的值，使得 op 可以处理任意包含整数的集合，而不仅仅是特定位宽的整数。\nAdding Folders 我们为定义的 op 都加上 let hasFolder = 1; 它在 .hpp.inc 中添加了如下形式的声明。FoldAdaptor 定义为 GenericAdaptor 类型的别名，而 GenericAdaptor 包含了一个 Attribute 数组的引用，这个数组提供了对 op 属性的访问接口。\nAttribute 类的核心作用是：\n表示常量值：Attribute 用于表示操作的静态、不可变的常量值，例如整数、浮点数、字符串、类型信息等。这些值在编译期已知且不可更改。 支持编译器优化：通过提供常量值的表示，Attribute 支持 MLIR 的优化流程，如折叠 (folding) 、规范化 (canonicalization), 常量传播 (constant propagation) 等。 跨方言的通用接口：Attribute 是一个抽象接口，允许不同方言 (dialects) 定义自己的常量表示，同时通过统一的 API 进行操作。 轻量级和高效：Attribute 是一个值类型 (passed by value) ，内部仅存储指向底层存储的指针，依赖 MLIRContext 的唯一化机制 (uniquing) 确保内存效率和一致性。 1 2 3 using FoldAdaptor = GenericAdaptor\u0026lt;::llvm::ArrayRef\u0026lt;::mlir::Attribute\u0026gt;\u0026gt;; ::mlir::OpFoldResult fold(FoldAdaptor adaptor); 我们需要在 PolyOps.cpp 中实现这个函数。如果 fold 方法决定 op 应被替换为一个常量，则必须返回一个表示该常量的 Attribute，该属性可以作为 poly.constant 操作的输入。FoldAdaptor 是一个适配器，它具有与操作的 C++ 类实例相同的方法名称，但对于那些已经被折叠的参数，会用表示其折叠结果常量的 Attribute 实例替换。这在折叠加法和乘法操作时尤为重要，因为折叠的实现需要立即计算结果，并且需要访问实际的数值来完成计算。\n对于 poly.constant 我们只需要返回输入的 attribute.\n1 2 3 OpFoldResult ConstantOp::fold(ConstantOp::FoldAdaptor adaptor) { return adaptor.getCoefficients(); } 对于 from_tensor 我们需要有一个额外的强制转换作为断言，因为张量可能是用我们不希望作为输入的奇怪类型构造的。如果 dyn_cast 结果是 nullptr， MLIR 将其强制转换为失败的 OpFoldResult.\n1 2 3 4 OpFoldResult FromTensorOp::fold(FromTensorOp::FoldAdaptor adaptor) { // Returns null if the cast failed, which corresponds to a failed fold. return dyn_cast\u0026lt;DenseIntElementsAttr\u0026gt;(adaptor.getInput()); } BinOp 稍微复杂一些，因为这些 fold 方法中的每一个 op 都接受两个 DenseIntElementsAttr 作为输入，并期望我们为结果返回另一个 DenseIntElementsAttr.\n对于 elementwise op 的 add/sub，我们可以使用现有的方法 constFoldBinaryOp，它通过一些模板元编程技巧，允许我们只指定元素 op 本身。\n1 2 3 4 OpFoldResult AddOp::fold(AddOp::FoldAdaptor adaptor) { return constFoldBinaryOp\u0026lt;IntegerAttr, APInt\u0026gt;( adaptor.getOperands(), [\u0026amp;](APInt a, APInt b) { return a + b; }); } 对于 mul，我们手动的通过循环计算每个系数。getResult() 方法来自于 OneTypedResult 类模板及其内部类 Impl 是一个 MLIR Trait，它主要用于那些返回单一特定类型结果的 op 。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 OpFoldResult MulOp::fold(MulOp::FoldAdaptor adaptor) { auto lhs = llvm::dyn_cast\u0026lt;DenseIntElementsAttr\u0026gt;(adaptor.getOperands()[0]); auto rhs = llvm::dyn_cast\u0026lt;DenseIntElementsAttr\u0026gt;(adaptor.getOperands()[1]); if (!lhs || !rhs) { return nullptr; } auto degree = mlir::cast\u0026lt;PolynomialType\u0026gt;(getResult().getType()).getDegreeBound(); auto maxIndex = lhs.size() + rhs.size() - 1; SmallVector\u0026lt;llvm::APInt, 8\u0026gt; results; results.reserve(maxIndex); for (int64_t i = 0; i \u0026lt; maxIndex; i++) { results.push_back(APInt((*lhs.begin()).getBitWidth(), 0)); } int64_t i = 0; for (auto lhsIt = lhs.value_begin\u0026lt;APInt\u0026gt;(); lhsIt != lhs.value_end\u0026lt;APInt\u0026gt;(); lhsIt++) { int64_t j = 0; for (auto rhsIt = rhs.value_begin\u0026lt;APInt\u0026gt;(); rhsIt != rhs.value_end\u0026lt;APInt\u0026gt;(); rhsIt++) { results[(i + j) % degree] += (*lhsIt) * (*rhsIt); j++; } i++; } return DenseIntElementsAttr::get( RankedTensorType::get(static_cast\u0026lt;int64_t\u0026gt;(results.size()), mlir::IntegerType::get(getContext(), 32)), results); } Adding a Constant Materializer 最后我们添加常量实例化函数，这是一个 dialect 级别的特性，我们在 PolyDialect.td 中添加 let hasConstantMaterializer = 1; 则会在 .hpp.inc 中添加如下形式的声明。\n1 2 3 4 ::mlir::Operation *materializeConstant(::mlir::OpBuilder \u0026amp;builder, ::mlir::Attribute value, ::mlir::Type type, ::mlir::Location loc) override; 该函数作用是将给定 Attribute (上面每个折叠步骤的结果) 的单个常量 op 实例化为所需的结果 Type.\n1 2 3 4 5 6 7 Operation *PolyDialect::materializeConstant( OpBuilder \u0026amp;builder, Attribute value, Type type, Location loc) { auto coeffs = dyn_cast\u0026lt;DenseIntElementsAttr\u0026gt;(value); if (!coeffs) return nullptr; return builder.create\u0026lt;ConstantOp\u0026gt;(loc, type, coeffs); } ","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch6-folders-and-constant-propagation/","summary":"Personal MLIR learning notes 6.","title":"MLIR-Ch6 Folders and Constant Propagation"},{"content":"Traits and Loop Invariant Code Motion 为了提高代码重用性，MLIR 提供了 Traits 和 Interfaces Traits，用于增强 op (Operation) 或类型的功能，提供结构化的约束和功能接口，方便在编译优化和生成过程中进行更强大和灵活的 op 。\nTraits 是一种机制，用于抽象出多个不同属性、 op 或类型之间共同的实现细节和特性。可用于指定对象的特殊属性和约束，例如 op 是否具有副作用，或其输出类型是否与输入类型相同。Traits 将特定的行为或限制抽象出来，使这些行为可以复用在不同的对象上，而不需要在每个对象中重复实现相同的逻辑。\nInterfaces 是一种通用的机制，用于与 IR 进行交互。它们的目标是使转换或分析可以基于这些接口进行，而无需了解具体的 op 或 dialect 的内部实现。通过这种方法，编译器可以在实现转换和分析时不依赖于特定 dialect 或 op ，从而更轻松地扩展编译器的功能。\nLoop Invariant Code Motion 是 MLIR 提供的 General Transform Passes 之一。它会检查循环体中的 op ，如果发现某些 op 在循环内部执行没有必要（即它们的结果在每次循环中保持不变），就会将这些 op 移出循环体。这可以减少循环中的重复计算，提高效率。\n要让某个自定义 op 可以被这种 pass 识别并移出循环体，需要添加两个关键的 Traits 来表明该 op 在循环外执行是安全的：\nNoMemoryEffect: 是 MemoryEffect 的一个 empty 实现，表示该 op 不会产生任何与内存写入相关的副作用。 AlwaysSpeculatable: 是一个包含两个 Traits 的 列表，告诉编译器该 op 可以在不影响程序逻辑的前提下，将其提前计算或移动到其他位置。 在 MLIR 中，Loop Invariant Code Motion (LICM) 会将具有 NoMemoryEffect 和 AlwaysSpeculatable 这两个 Traits 的 op 移动到循环体外部，但前提是该 op 的 operands 在整个循环体中保持不变。这样可以避免循环内部的重复计算，从而优化代码执行效率。MLIR 提供了一个方便的组合 Trait Pure，它包含了 NoMemoryEffect 和 AlwaysSpeculatable 这两个 Traits. 因此，直接添加 Pure Trait 到 op 的定义中就能让编译器自动识别它为可移动到循环外部的 op 。\nTypeOrContainer 是一个用于处理 op 输入和输出类型的机制，它可以匹配单个类型 (如 f32 或 i32) 以及容器类型(如 vector\u0026lt;f32\u0026gt; 或 tensor\u0026lt;i32\u0026gt;)，使得一个 op 可以被设计为同时支持标量类型和集合类型。\ninclude \u0026#34;mlir/Interfaces/SideEffectInterfaces.td\u0026#34;\rdef PolyOrContainer: TypeOrContainer\u0026lt;Polynomial, \u0026#34;poly-or-container\u0026#34;\u0026gt;;\rclass Poly_BinOp\u0026lt;string mnemonic\u0026gt;: Op\u0026lt;Poly_Dialect, mnemonic, [Pure]\u0026gt; {\rlet arguments = (ins PolyOrContainer:$lhs, PolyOrContainer:$rhs);\rlet results = (outs PolyOrContainer:$output);\rlet assemblyFormat = \u0026#34;$lhs `,` $rhs attr-dict `:` `(` type($lhs) `,` type($rhs) `)` `-\u0026gt;` type($output)\u0026#34;;\r} 加入 Pure trait 后生成的 .hpp.inc 中关于 op 的定义继承了新的内容\n1 2 3 4 5 6 7 8 9 10 11 class AddOp : public ::mlir::Op\u0026lt; AddOp, ::mlir::OpTrait::ZeroRegions, ::mlir::OpTrait::OneResult, ::mlir::OpTrait::OneTypedResult\u0026lt;::mlir::tutorial::poly::PolynomialType\u0026gt;::Impl, ::mlir::OpTrait::ZeroSuccessors, ::mlir::OpTrait::NOperands\u0026lt;2\u0026gt;::Impl, ::mlir::OpTrait::OpInvariants, ::mlir::ConditionallySpeculatable::Trait, // \u0026lt;-- new ::mlir::OpTrait::AlwaysSpeculatableImplTrait, // \u0026lt;-- new ::mlir::MemoryEffectOpInterface::Trait\u0026gt; // \u0026lt;--- new NoMemoryEffect interface 则在生成的 .cpp.inc 中添加了一个简单的函数\n1 2 3 4 5 void AddOp::getEffects( ::llvm::SmallVectorImpl\u0026lt; ::mlir::SideEffects::EffectInstance\u0026lt;::mlir::MemoryEffects::Effect\u0026gt;\u0026gt;\u0026amp; effects) { } 我们可以写一个 .mlir 来测试 %2 的计算是否能优化到循环外：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // RUN: build/Ch4-UsingTraits/tools/ch4-tutorial-opt %s --loop-invariant-code-motion \u0026gt; %t // RUN: FileCheck %s \u0026lt; %t module { // CHECK-LABEL: func.func @test_loop_invariant_code_motion func.func @test_loop_invariant_code_motion() -\u0026gt; !poly.poly\u0026lt;10\u0026gt; { %0 = arith.constant dense\u0026lt;[1,2,3]\u0026gt; : tensor\u0026lt;3xi32\u0026gt; %p0 = poly.from_tensor %0 : tensor\u0026lt;3xi32\u0026gt; -\u0026gt; !poly.poly\u0026lt;10\u0026gt; %1 = arith.constant dense\u0026lt;[9,8,16]\u0026gt; : tensor\u0026lt;3xi32\u0026gt; %p1 = poly.from_tensor %0 : tensor\u0026lt;3xi32\u0026gt; -\u0026gt; !poly.poly\u0026lt;10\u0026gt; // CHECK: poly.mul // CHECK: affine.for %ret_val = affine.for %i = 0 to 100 iter_args(%sum_iter = %p0) -\u0026gt; !poly.poly\u0026lt;10\u0026gt; { // The polt.mul should be hoisted out of the loop. // CHECK-NOT: poly.mul %2 = poly.mul %p0, %p1 : (!poly.poly\u0026lt;10\u0026gt;, !poly.poly\u0026lt;10\u0026gt;) -\u0026gt; !poly.poly\u0026lt;10\u0026gt; %sum_next = poly.add %sum_iter, %2 : (!poly.poly\u0026lt;10\u0026gt;, !poly.poly\u0026lt;10\u0026gt;) -\u0026gt; !poly.poly\u0026lt;10\u0026gt; affine.yield %sum_next : !poly.poly\u0026lt;10\u0026gt; } return %ret_val: !poly.poly\u0026lt;10\u0026gt; } } Passes Already Handled by Pure 给某个 op 加上 Pure Trait 后，下列 Pass 就会自动识别并优化该 op ：\n--control-flow-sink: 将只在条件语句的某一个分支中使用的 op 移动到对应的分支中，以减少无效代码的执行。需要 op 无内存副作用 (memory-effect free)，通常可以通过 Pure Trait 来满足。 --cse (Constant Subexpression Elimination): 常量子表达式消除。当某些重复的计算结果已经存在时，消除不必要的重复计算，提高效率。需要 op 没有内存副作用（memory-effect free），因此 Pure Trait 也可以满足这一要求。 --inline: 将函数调用“内联”到调用位置，以减少函数调用的开销。在某些情况下，这可以减少调用栈的深度或优化代码执行的性能。 --mem2reg: 将内存中的存储/加载 op 转换为对实际值的直接使用，从而减少内存访问，提高运行效率。 --remove-dead-values: 移除未使用的函数参数或返回值，以减少不必要的数据传递或内存占用。 --sroa (Scalar Replacement of Aggregates): 将聚合类型（例如数组或结构体）拆分为标量值，通常会对内存布局进行重排，以便更好地利用内存。 --symbol-dce (Symbol Dead Code Elimination): 消除不再使用的私有函数 (死代码)，减少不必要的代码量。 Elementwise Mappings 有四种 traits 可以把标量运算扩展到张量运算或者反过来\nElemntwise: 标记逐元素的 op ，仅适用于向量或张量，不允许广播。\n如果任何结果是向量或张量，至少有一个 operand 必须是向量或张量。 如果任何 operand 是向量或张量，至少有一个结果并且所有结果必须是向量或张量。 所有 operand 和结果的向量或张量类型必须具有相同的形状。形状可以是动态的，但对于不匹配的形状，行为是未定义的。 该 op 必须在 operand 和结果上逐元素进行，即在单元素向量或张量上应用时，每个元素的结果应相同。 Scalarizable: 标记和验证某些操作是否可以被系统性地标量化，即将其基于向量或张量的操作转化为基于标量的操作。只要操作是 Elementwise 的，Scalarizable 就可以使用。\n%tensor_select = \u0026#34;arith.select\u0026#34;(%pred_tensor, %true_val, %false_val) : (tensor\u0026lt;?xi1\u0026gt;, tensor\u0026lt;?xf32\u0026gt;, tensor\u0026lt;?xf32\u0026gt;) -\u0026gt; tensor\u0026lt;?xf32\u0026gt; // Can be scalarized to %scalar_select = \u0026#34;arith.select\u0026#34;(%pred, %true_val_scalar, %false_val_scalar) : (i1, f32, f32) -\u0026gt; f32 Vectorizable: 提供了与 Scalarizable 相反的 op 。所有的标量 operand 和结果将被替换为相应的向量类型。即，该 op 表示同时作用于多个元素。允许通过广播将标量提升为向量，再进行向量化操作。\nTensorizable: 提供了与 Scalarizable 相反的 op ，允许在张量和标量之间进行推理。允许通过广播将标量提升为张量，以便在张量 op 中保持一致的 op 结构。\n%scalar = \u0026#34;arith.addf\u0026#34;(%a, %b) : (f32, f32) -\u0026gt; f32 // Can be tensorized to %tensor = \u0026#34;arith.addf\u0026#34;(%a, %b) : (tensor\u0026lt;?xf32\u0026gt;, tensor\u0026lt;?xf32\u0026gt;) -\u0026gt; tensor\u0026lt;?xf32\u0026gt; // Also supports broadcasting %scalar_pred = \u0026#34;arith.select\u0026#34;(%pred, %true_val, %false_val) : (i1, tensor\u0026lt;?xf32\u0026gt;, tensor\u0026lt;?xf32\u0026gt;) -\u0026gt; tensor\u0026lt;?xf32\u0026gt; // Can be tensorized to %tensor_pred = \u0026#34;arith.select\u0026#34;(%pred, %true_val, %false_val) : (tensor\u0026lt;?xi1\u0026gt;, tensor\u0026lt;?xf32\u0026gt;, tensor\u0026lt;?xf32\u0026gt;) -\u0026gt; tensor\u0026lt;?xf32\u0026gt; ElementwiseMappable Trait 包含了以上所有的 Traits. 我们可以修改 Poly_BinOp 定义如下：\n// PolyOps.td\rdef PolyOrContainer : TypeOrContainer\u0026lt;Polynomial, \u0026#34;poly-or-container\u0026#34;\u0026gt;;\rclass Poly_BinOp\u0026lt;string mnemonic\u0026gt; : Op\u0026lt;Poly_Dialect, mnemonic, [Pure, ElementwiseMappable]\u0026gt; {\rlet arguments = (ins PolyOrContainer:$lhs, PolyOrContainer:$rhs);\rlet results = (outs PolyOrContainer:$output);\r...\r} 添加这个 Trait 后，生成的 .cpp.inc 文件定义了许多检查 op 数类型的函数，下面是其中一个：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 static ::llvm::LogicalResult __mlir_ods_local_type_constraint_PolyOps1( ::mlir::Operation* op, ::mlir::Type type, ::llvm::StringRef valueKind, unsigned valueIndex) { if (!(((::llvm::isa\u0026lt;::mlir::tutorial::poly::PolynomialType\u0026gt;(type))) || (((type.hasTrait\u0026lt;::mlir::ValueSemantics\u0026gt;())) \u0026amp;\u0026amp; ([](::mlir::Type elementType) { return (::llvm::isa\u0026lt;::mlir::tutorial::poly::PolynomialType\u0026gt;( elementType)); }(::llvm::cast\u0026lt;::mlir::ShapedType\u0026gt;(type).getElementType()))))) { return op-\u0026gt;emitOpError(valueKind) \u0026lt;\u0026lt; \u0026#34; #\u0026#34; \u0026lt;\u0026lt; valueIndex \u0026lt;\u0026lt; \u0026#34; must be poly-or-container, but got \u0026#34; \u0026lt;\u0026lt; type; } return ::mlir::success(); } 该函数首先检查 type 是否为 PolynomialType；如果不是，则进一步检查它是否具有 ValueSemantics Trait，并且是一个 ShapedType（即容器类型，如 vector 或 tensor），其中包含的元素类型是 PolynomialType.\n","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch5-using-traits/","summary":"Personal MLIR learning notes 5.","title":"MLIR-Ch5 Using Traits"},{"content":"Sketching Out a Dseign TableGen 也可以用来定义 dialect. 本文将定义一个单未知数多项式运算的 dialect，系数用 uint32_t 类型表示。，并提供通过从标准 MLIR 类型指定多项式系数来定义多项式的操作，提取关于多项式的数据以将结果存储在标准MLIR类型中，以及对多项式进行算术运算。\nAn Empty Dialect 我们首先用 TableGen 定义一个空的 dialect. 它和上一章定义 Pass 没什么不同，只不过 include 的是 DialectBase.td 文件。同时也定义了命名空间为 ::mlir::tutorial::poly.\n1 2 3 4 5 6 7 8 9 10 11 12 include \u0026#34;mlir/IR/DialectBase.td\u0026#34; def Poly_Dialect : Dialect { let name = \u0026#34;poly\u0026#34;; let summary = \u0026#34;A dialect for polynomial math\u0026#34;; let description = [{ The poly dialect defines types and operations for single-variable polynomials over integers. }]; let cppNamespace = \u0026#34;::mlir::tutorial::poly\u0026#34;; } 我们需要在 include 目录下的 CMakeLists.txt 文件中添加\n1 2 3 4 5 set(TARGET_NAME \u0026#34;${PROJECT_TARGET_PREFIX}-Dialect-PolyDialect-IncGen\u0026#34;) set(LLVM_TARGET_DEFINITIONS mlir-learning/Dialect/Poly/PolyDialect.td) mlir_tablegen(mlir-learning/Dialect/Poly/PolyDialect.hpp.inc --gen-dialect-decls) mlir_tablegen(mlir-learning/Dialect/Poly/PolyDialect.cpp.inc --gen-dialect-defs) add_public_tablegen_target(${TARGET_NAME}) 然后在 tutorial-opt.cpp 中注册所有 mlir 自带的所有 dialect 后进行构建，我们可以查看生成的 .hpp.inc 和.cpp.inc 文件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 namespace mlir { namespace tutorial { class PolyDialect : public ::mlir::Dialect { explicit PolyDialect(::mlir::MLIRContext *context); void initialize(); friend class ::mlir::MLIRContext; public: ~PolyDialect() override; static constexpr ::llvm::StringLiteral getDialectNamespace() { return ::llvm::StringLiteral(\u0026#34;poly\u0026#34;); } }; } // namespace tutorial } // namespace mlir MLIR_DECLARE_EXPLICIT_TYPE_ID(::mlir::tutorial::PolyDialect) 编译器会报错，因为 inc 不会包含 Dialect 等类所在的头文件。这需要我们自己在 PolyDialect.h 文件中进行 include，这样 当重新构建的时候该文件注入变不会报错\n1 2 3 4 5 6 7 8 9 // include/mlir-learning/Dialect/Poly/PolyDialect.h #ifndef LIB_DIALECT_POLY_POLYDIALECT_H #define LIB_DIALECT_POLY_POLYDIALECT_H #include \u0026#34;mlir/IR/DialectImplementation.h\u0026#34; // include mannually #include \u0026#34;mlir-learning/Dialect/Poly/PolyDialect.hpp.inc\u0026#34; #endif 生成的 .cpp.inc 如下，他只包含了该类基本的构造函数和析构函数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 MLIR_DEFINE_EXPLICIT_TYPE_ID(::mlir::tutorial::poly::PolyDialect) namespace mlir { namespace tutorial { namespace poly { PolyDialect::PolyDialect(::mlir::MLIRContext *context) : ::mlir::Dialect(getDialectNamespace(), context, ::mlir::TypeID::get\u0026lt;PolyDialect\u0026gt;()) { initialize(); } PolyDialect::~PolyDialect() = default; } // namespace poly } // namespace tutorial } // namespace mlir 然后我们可以在 tutorial-opt.cpp 中注册该 dialect.\n1 2 3 4 5 6 7 8 9 10 11 12 /* other includes */ #include \u0026#34;mlir-learning/Dialect/Poly/PolyDialect.h\u0026#34; int main(int argc, char** argv) { // Register all built-in MLIR dialects mlir::DialectRegistry registry; // Register our Dialect registry.insert\u0026lt;mlir::tutorial::poly::PolyDialect\u0026gt;(); mlir::registerAllDialects(registry); return mlir::asMainReturnCode( mlir::MlirOptMain(argc, argv, \u0026#34;Tutorial Pass Driver\u0026#34;, registry)); } Adding a Trival Type 下面我们需要定义自己的 poly.poly 类型.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // poly_types.td #ifndef LIB_DIALECT_POLY_POLYTYPES_TD_ #define LIB_DIALECT_POLY_POLYTYPES_TD_ include \u0026#34;mlir-learning/Dialect/Poly/PolyDialect.td\u0026#34; include \u0026#34;mlir/IR/AttrTypeBase.td\u0026#34; // a base class for all types in the dialect class Poly_Type\u0026lt;string name, string typeMnemonic\u0026gt; : TypeDef\u0026lt;Poly_Dialect, name\u0026gt; { let mnemonic = typeMnemonic; } def Polynomial: Poly_Type\u0026lt;\u0026#34;Polynomial\u0026#34;, \u0026#34;poly\u0026#34;\u0026gt; { let summary = \u0026#34;A polynomial with u32 coefficients\u0026#34;; let description = [{ A type for polynomials with integer coefficients in a single-variable polynomial ring. }]; } #endif 在 MLIR 的 TableGen 文件中，class 和 def 的用法和含义有所不同\nclass 用于定义一个模板或基类，可以被其他类型或定义继承和重用。它本身不会创建实际的对象或具体类型，它只是一种结构，可以包含参数和默认属性。其他定义可以通过继承该类来获得其功能。 def 用于创建一个具体的实例，比如一个类型、操作或属性。它会将所定义的内容应用到 TableGen 中，使其成为可用的具体类型或功能。 这里我们定义了一个名为 Poly_Type 的类，参数为 name（类型的名称）和 typeMnemonic（类型的简写或助记符）。这个类继承自 TypeDef\u0026lt;Poly_Dialect, name\u0026gt;. 然后 def 特定的多项式类型 Polynomial，继承自 Poly_Type.\n在 MLIR 的 TableGen 中，TypeDef 本身也是一个类，它接受模板参数，用于指定该类型所属的 dialect 和名称字段。其作用包括将生成的C++类与该 dialect 的命名空间相关联。\n生成的 .hpp.inc 文件如下。生成的类 PolynomialType 就是在我们的 TableGen 文件中定义的 Polynomial 类型后面加上了 Type.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #ifdef GET_TYPEDEF_CLASSES #undef GET_TYPEDEF_CLASSES namespace mlir { class AsmParser; class AsmPrinter; } // namespace mlir namespace mlir { namespace tutorial { namespace poly { class PolynomialType; class PolynomialType : public ::mlir::Type::TypeBase\u0026lt;PolynomialType, ::mlir::Type, ::mlir::TypeStorage\u0026gt; { public: using Base::Base; static constexpr ::llvm::StringLiteral name = \u0026#34;poly.poly\u0026#34;; static constexpr ::llvm::StringLiteral dialectName = \u0026#34;poly\u0026#34;; static constexpr ::llvm::StringLiteral getMnemonic() { return {\u0026#34;poly\u0026#34;}; } }; } // namespace poly } // namespace tutorial } // namespace mlir MLIR_DECLARE_EXPLICIT_TYPE_ID(::mlir::tutorial::poly::PolynomialType) #endif // GET_TYPEDEF_CLASSES 生成的 .cpp.inc 文件如下。TableGen 试图为 dialect 中的 PolynomialType 自动生成一个 类型解析器 (type parser) 和类型打印器 (type printer). 不过此时这些功能还不可用，构建项目时会看到一些编译警告。\n代码中使用了 头文件保护 (header guards) 来将 cpp 文件分隔为两个受保护的部分。这样可以分别管理类型声明和函数实现。\nGET_TYPEDEF_LIST 只包含类名的逗号分隔列表。原因在于 PolyDialect.cpp 文件需要负责将类型注册到 dialect 中，而该注册过程通过在方言初始化函数中将这些 C++ 类名作为模板参数来实现。换句话说，GET_TYPEDEF_LIST 提供了一种简化机制，使得 PolyDialect.cpp 可以自动获取所有类名称列表，便于统一注册，而不需要手动添加每一个类型。\ngeneratedTypeParser 函数是为 PolynomialType 定义的解析器。当解析器遇到 PolynomialType 的助记符（poly）时，会将 PolynomialType 类型实例化。KeywordSwitch 使用 getMnemonic() 来匹配 PolynomialType 的助记符（poly）。如果匹配成功，则调用 PolynomialType::get() 来获取类型实例。Default 子句在助记符不匹配时执行，记录未知的助记符，并返回 std::nullopt 表示解析失败。 generatedTypePrinter 函数为 PolynomialType 提供了打印功能。当类型为 PolynomialType 时，打印其助记符（poly），否则返回失败。TypeSwitch 用于检查 def 类型是否是 PolynomialType。如果是，打印助记符；否则返回失败，表示该类型不属于此方言。 PolyDialect::parseType 和 PolyDialect::printType 作为方言接口调用这两个函数，从而实现类型的解析和打印功能。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #ifdef GET_TYPEDEF_LIST #undef GET_TYPEDEF_LIST ::mlir::tutorial::poly::PolynomialType #endif // GET_TYPEDEF_LIST #ifdef GET_TYPEDEF_CLASSES #undef GET_TYPEDEF_CLASSES static ::mlir::OptionalParseResult generatedTypeParser(::mlir::AsmParser \u0026amp;parser, ::llvm::StringRef *mnemonic, ::mlir::Type \u0026amp;value) { return ::mlir::AsmParser::KeywordSwitch\u0026lt;::mlir::OptionalParseResult\u0026gt;(parser) .Case(::mlir::tutorial::poly::PolynomialType::getMnemonic(), [\u0026amp;](llvm::StringRef, llvm::SMLoc) { value = ::mlir::tutorial::poly::PolynomialType::get(parser.getContext()); return ::mlir::success(!!value); }) .Default([\u0026amp;](llvm::StringRef keyword, llvm::SMLoc) { *mnemonic = keyword; return std::nullopt; }); } static ::llvm::LogicalResult generatedTypePrinter(::mlir::Type def, ::mlir::AsmPrinter \u0026amp;printer) { return ::llvm::TypeSwitch\u0026lt;::mlir::Type, ::llvm::LogicalResult\u0026gt;(def) .Case\u0026lt;::mlir::tutorial::poly::PolynomialType\u0026gt;([\u0026amp;](auto t) { printer \u0026lt;\u0026lt; ::mlir::tutorial::poly::PolynomialType::getMnemonic(); return ::mlir::success(); }) .Default([](auto) { return ::mlir::failure(); }); } namespace mlir { namespace tutorial { namespace poly { } // namespace poly } // namespace tutorial } // namespace mlir MLIR_DEFINE_EXPLICIT_TYPE_ID(::mlir::tutorial::poly::PolynomialType) namespace mlir { namespace tutorial { namespace poly { /// Parse a type registered to this dialect. ::mlir::Type PolyDialect::parseType(::mlir::DialectAsmParser \u0026amp;parser) const { ::llvm::SMLoc typeLoc = parser.getCurrentLocation(); ::llvm::StringRef mnemonic; ::mlir::Type genType; auto parseResult = generatedTypeParser(parser, \u0026amp;mnemonic, genType); if (parseResult.has_value()) return genType; parser.emitError(typeLoc) \u0026lt;\u0026lt; \u0026#34;unknown type `\u0026#34; \u0026lt;\u0026lt; mnemonic \u0026lt;\u0026lt; \u0026#34;` in dialect `\u0026#34; \u0026lt;\u0026lt; getNamespace() \u0026lt;\u0026lt; \u0026#34;`\u0026#34;; return {}; } /// Print a type registered to this dialect. void PolyDialect::printType(::mlir::Type type, ::mlir::DialectAsmPrinter \u0026amp;printer) const { if (::mlir::succeeded(generatedTypePrinter(type, printer))) return; } } // namespace poly } // namespace tutorial } // namespace mlir #endif // GET_TYPEDEF_CLASSES 在设置 C++ 接口以使用 TableGen 文件时，通常会按照以下步骤来组织代码文件和包含关系。\nPolyTypes.h 是唯一被允许包含 PolyTypes.h.inc 的文件。 PolyTypes.cpp.inc 文件包含了 TableGen 为 PolyDialect 中的类型生成的实现。我们需要在 PolyDialect.cpp 中将其包含进去，以确保所有实现都能在该方言的主文件中使用。 PolyTypes.cpp 文件应该包含 PolyTypes.h，以便访问类型声明，并在该文件中实现所有需要的额外功能。 ./Ch3-DefiningANewDialect/\r├── CMakeLists.txt\r├── include\r│ ├── CMakeLists.txt\r│ └── mlir-tutorial\r│ └── Dialect\r│ └── Poly\r│ ├── PolyDialect.hpp\r│ ├── PolyDialect.td\r│ ├── PolyOps.hpp\r│ ├── PolyOps.td\r│ ├── PolyTypes.hpp\r│ └── PolyTypes.td\r├── lib\r│ ├── CMakeLists.txt\r│ └── Dialect\r│ └── Poly\r│ └── PolyDialect.cpp 为了让类型解析器和打印器能够正确编译和运行，需要最后在方言的 TableGen 文件中添加 let useDefaultTypePrinterParser = 1;，这个指令告诉 TableGen 使用默认的类型解析和打印器。当这个选项启用后，TableGen 会生成相应的解析和打印代码，并将这些实现作为 PolyDialect 类的成员函数。\n1 2 3 4 5 6 /// Parse a type registered to this dialect. ::mlir::Type parseType(::mlir::DialectAsmParser \u0026amp;parser) const override; /// Print a type registered to this dialect. void printType(::mlir::Type type, ::mlir::DialectAsmPrinter \u0026amp;os) const override; 我们可以写一个 .mlir 来测试属性是是否获取正确。在 MLIR 中自定义的 dialect 前都需要加上 !.\n1 2 3 4 5 // CHECK-LABEL: test_type_syntax func.func @test_type_syntax(%arg0: !poly.poly\u0026lt;10\u0026gt;) -\u0026gt; !poly.poly\u0026lt;10\u0026gt; { // CHECK: poly.poly return %arg0: !poly.poly\u0026lt;10\u0026gt; } Add a Poly Type Parameter 我们需要为多项式类型添加一个属性，表示它的次数上限。\n// include/mlir-tutorial/Dialect/Poly/PolyTypes.td\rlet parameters = (ins \u0026#34;int\u0026#34;:$degreeBound);\rlet assemblyFormat = \u0026#34;`\u0026lt;` $degreeBound `\u0026gt;`\u0026#34;; 第一行定义了类型的一个参数 degreeBound，类型为 int. 表示在实例化该类型时，用户可以指定一个整数值作为类型的参数。parameters 中的 (ins \u0026quot;int\u0026quot;:$degreeBound) 指定了输入参数的类型和名称，其中 int 是数据类型，$degreeBound 是参数的占位符。assemblyFormat 用于定义该类型在 MLIR 文本格式中的打印和解析格式。\u0026quot;\u0026lt;\u0026quot; $degreeBound \u0026quot;\u0026gt;\u0026quot; 表示该类型的参数会用尖括号包裹。第二行是必需的，因为现在一个 Poly 类型有了这个关联的数据，我们需要能够将它打印出来并从文本 IR 表示中解析它。\n加上这两行代码后进行 build 会发现多了一些新的内容。\nPolynomialType 有一个新的 int getDegreeBound() 方法，以及一个静态 get 工厂方法。 parse 和 print 升级为新格式。 有一个名为 typestorage 的新类，它包含 int 形参，并隐藏在内部细节名称空间中。 MLIR会自动生成简单类型的 storage 类，因为它们不需要复杂的内存管理。如果参数更复杂，就需要开发者手动编写 storage 类来定义构造、析构和其他语义。复杂的 storage 类需要实现更多细节，以确保类型能够在 MLIR 的 dialect 系统中顺利运行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // include/mlir-learning/Dialect/Poly/PolyTypes.hpp.inc static ::mlir::Type parse(::mlir::AsmParser \u0026amp;odsParser); void print(::mlir::AsmPrinter \u0026amp;odsPrinter) const; int getDegreeBound() const; // include/mlir-learning/Dialect/Poly/PolyTypes.cpp.inc struct PolynomialTypeStorage : public ::mlir::TypeStorage { /* lots of code */ }; PolynomialType PolynomialType::get(::mlir::MLIRContext *context, int degreeBound) { return Base::get(context, std::move(degreeBound)); } ::mlir::Type PolynomialType::parse(::mlir::AsmParser \u0026amp;odsParser) { /* code to parse the type */ } void PolynomialType::print(::mlir::AsmPrinter \u0026amp;odsPrinter) const { ::mlir::Builder odsBuilder(getContext()); odsPrinter \u0026lt;\u0026lt; \u0026#34;\u0026lt;\u0026#34;; odsPrinter.printStrippedAttrOrType(getDegreeBound()); odsPrinter \u0026lt;\u0026lt; \u0026#34;\u0026gt;\u0026#34;; } int PolynomialType::getDegreeBound() const { return getImpl()-\u0026gt;degreeBound; } Adding Some Simple Operations 下面我们定义一个简单的多项式加法操作\n// include/mlir-tutorial/Dialect/Poly/PolyOps.td\rinclude \u0026#34;PolyDialect.td\u0026#34;\rinclude \u0026#34;PolyTypes.td\u0026#34;\rdef Poly_AddOp : Op\u0026lt;Poly_Dialect, \u0026#34;add\u0026#34;\u0026gt; {\rlet summary = \u0026#34;Addition operation between polynomials.\u0026#34;;\rlet arguments = (ins Polynomial:$lhs, Polynomial:$rhs);\rlet results = (outs Polynomial:$output);\rlet assemblyFormat = \u0026#34;$lhs `,` $rhs attr-dict `:` `(` type($lhs) `,` type($rhs) `)` `-\u0026gt;` type($output)\u0026#34;;\r} 和刚才定义 types 非常相近，但基类是 Op，arguments 对应于操作的输入，assemblyFormat 更复杂。生成的 .hpp.inc 和 .cpp.inc 非常复杂。我们可以编写一个 .mlir 来测试。\n1 2 3 4 5 6 // CHECK-LABEL: test_add_syntax func.func @test_add_syntax(%arg0: !poly.poly\u0026lt;10\u0026gt;, %arg1: !poly.poly\u0026lt;10\u0026gt;) -\u0026gt; !poly.poly\u0026lt;10\u0026gt; { // CHECK: poly.add %0 = poly.add %arg0, %arg1 : (!poly.poly\u0026lt;10\u0026gt;, !poly.poly\u0026lt;10\u0026gt;) -\u0026gt; !poly.poly\u0026lt;10\u0026gt; return %0 : !poly.poly\u0026lt;10\u0026gt; } 生成的代码定义了以下几个方面：\nAdaptor Classes:\nAddOpGenericAdaptorBase 和 AddOpAdaptor: 提供了便捷的方式来访问操作的操作数 (operands) 和属性 (attributes)。它们在编写转换和重写模式时特别有用。 Properties Handling:\n诸如 setPropertiesFromAttr , getPropertiesAsAttr , computePropertiesHash 等函数是 MLIR 操作属性系统的接口。虽然在这个特定的 AddOp 实现中，有些函数可能是空实现或返回默认值，但它们是操作定义结构的一部分。 Builder Methods:\n多个重载的 AddOp::build 静态方法。这些方法用于在代码中以编程方式创建 AddOp 的实例。 Verification:\nAddOp::verifyInvariantsImpl() 和 AddOp::verifyInvariants() : 这些方法用于检查一个 AddOp 实例是否符合其定义。例如，它们会验证操作数的数量和类型是否正确，结果类型是否符合预期。代码中调用了像 __mlir_ods_local_type_constraint_PolyOps2 这样的辅助函数来进行类型约束检查。 Assembly Format Parsing and Printing:\nAddOp::parse(::mlir::OpAsmParser\u0026amp; parser, ::mlir::OperationState\u0026amp; result) : 这个方法定义了如何从 MLIR 的文本汇编格式中解析出 AddOp 。当 MLIR 工具读取 .mlir 文件时，会调用此方法。 AddOp::print(::mlir::OpAsmPrinter\u0026amp; _odsPrinter) : 这个方法定义了如何将 AddOp 实例打印成 MLIR 的文本汇编格式。 Type ID Definition:\nMLIR_DEFINE_EXPLICIT_TYPE_ID(::mlir::tutorial::poly::AddOp) : 这个宏用于 MLIR 的运行时类型信息 (RTTI) 系统，为 AddOp 类型生成一个唯一的标识符。 ","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch4-defining-a-new-dialect/","summary":"Personal MLIR learning notes 4.","title":"MLIR-Ch4 Defining a New Dialect"},{"content":"What is Tablegen? TableGen 是一个用于生成代码和描述结构的 DSL 和工具，最初由 LLVM 开发，后来被 MLIR 继承并扩展。它主要用于以声明式的方式定义和生成 MLIR 的各种组件，例如 Dialects、Operations、Attributes、Types 和 Passes，从而减少手动编写重复性 C++ 代码的工作量。\nmlir-tablegen 并没有清楚地告诉你哪些函数没有实现，也没有解释必须编写的函数。确定缺失内容的主要方法是尝试用一些使用它的代码来构建生成的代码，然后筛选数百行 c++ 编译器错误，这反过来又需要了解生成代码中的各种模板操作。生成的代码将使用必须知道的符号，以便在正确的位置导入或提前声明，并且它要求管理生成的代码所在的名称空间。\nTablegen Files and the mlir-tblgen Binary TableGen 允许你定义变量，并且这些变量可以在多个定义中重复使用。\nTableGen允许你在定义中嵌入C++代码片段。这些代码片段会被插入到TableGen生成的C++类中，并且这些C++代码片段可以访问前面定义的变量。这使得TableGen能够生成高度定制化的C++代码。如果需要为你的 pass 编写特殊的构造函数，就可以在 PassBase.td中用 TableGen 的语法写下相应的 C++ 代码。\n下面给出了一个以 tablegen 语法重写上一章的 AffineFullUnroll pass 的例子\n1 2 3 4 5 6 7 8 9 10 // mlir-learning/Transform/Affine/Pass.td include \u0026#34;mlir/Pass/PassBase.td\u0026#34; def AffineFullUnroll : Pass\u0026lt;\u0026#34;affine-full-unroll\u0026#34;\u0026gt; { let summary = \u0026#34;Fully unroll all affine loops\u0026#34;; let description = [{ Fully unroll all affine loops. (could add more docs here like code examples) }]; let dependentDialects = [\u0026#34;mlir::affine::AffineDialect\u0026#34;]; } TableGen 拥有类似的类和继承的概念。: Pass\u0026lt;...\u0026gt; 表示一个类继承自 PassBase.td 文件中定义的 Pass 基类\ndef 用于定义一个具体实例，它会生成对应的 C++ 代码。 也就是说，使用 def 定义的类实例会被 TableGen 处理，最终转换成实际的代码，而仅仅使用 class 定义的类则不会直接生成代码，只作为模板或基类存在。\n上面代码说明 TableGen 允许定义字符串变量和列表。 TableGen 还有一个重要功能：它允许定义变量并在多个定义中复用这些变量，还可以定义 C++ 代码片段，并将这些片段插入到生成的类中。 这些 C++ 代码片段可以使用前面定义的变量。例如 PassBase.td 类定义了一个代码构造函数变量。 如果需要为你的 Pass 类编写特殊的构造函数，可以在 PassBase.td 中编写相应的 C++ 代码。 这意味着 TableGen 不仅仅是简单的文本替换，它能够处理更复杂的代码生成逻辑，包括变量的跨定义使用和 C++ 代码的嵌入。\n和上一章不同的是，这次我们也需要在 include 目录下写一个 CMakeLists.txt\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 set(TARGET_NAME \u0026#34;${PROJECT_TARGET_PREFIX}-Transform-Affine-Passes-IncGen\u0026#34;) set(LLVM_TARGET_DEFINITIONS mlir-learning/Transform/Affine/Pass.td) mlir_tablegen(mlir-learning/Transform/Affine/Pass.h.inc -gen-pass-decls -name=Affine) mlir_tablegen(mlir-learning/Transform/Affine/Pass.md -gen-pass-doc) add_public_tablegen_target(${TARGET_NAME}) set( ALL_TABLEGEN_TARGETS ${PROJECT_TARGET_PREFIX}-Transform-Affine-Passes-IncGen #${PROJECT_TARGET_PREFIX}-Transform-Arith-Passes-IncGen ) # Add the generated files to a global property, so they can be used in the library set_property( GLOBAL PROPERTY ${PROJECT_TARGET_PREFIX}-TABLEGEN-TARGETS ${ALL_TABLEGEN_TARGETS} ) set(LLVM_TARGET_DEFINITIONS mlir-learning/Transform/Affine/Pass.td): 这行代码设置了 TableGen 的输入文件。 mlir_tablegen(mlir-learning/Transform/Affine/Pass.h.inc -gen-pass-decls -name=Affine): 这行调用了 mlir_tablegen 命令，它将 Pass.td 文件作为输入，生成一个名为 Pass.h.inc 的头文件，其中包含 Pass 的声明 (-gen-pass-decls)，并且命名空间为 Affine (-name=Affine). mlir_tablegen(mlir-learning/Transform/Affine/Pass.md -gen-pass-doc): 这行同样调用 mlir_tablegen，生成一个名为 Pass.md 的文件，包含 Pass 的文档信息 (-gen-pass-doc). add_public_tablegen_target(${TARGET_NAME}): 这行代码将 TableGen 生成的目标添加到 CMake 项目中，使其成为一个公共目标，其他部分可以依赖它。 set(ALL_TABLEGEN_TARGETS ...): 这行代码定义了一个列表 ALL_TABLEGEN_TARGETS，包含所有 TableGen 生成的目标。 set_property(GLOBAL PROPERTY ...): 这行代码将所有 TableGen 生成的目标添加到全局属性 ${PROJECT_TARGET_PREFIX}-TABLEGEN-TARGETS} 中。 使得构建系统能够跟踪和管理所有由 TableGen 生成的文件，确保它们被正确地包含在库或可执行文件中。 .inc Files 我们同样创建和上一章相同的文件 (可以先不写)，需要注意的是由于 TableGen 生成的 .inc 文件位于构建目录下，在 lib 的 CMakeLists.txt 中我们需要在 target_include_directories 命令中加入 ${CMAKE_OUTPUT_DIR}/include\n下面我们来逐段看生成的 .inc 文件\n头部保护和条件编译 1 2 3 4 5 6 7 //===----------------------------------------------------------------------===// // AffineFullUnroll //===----------------------------------------------------------------------===// #ifdef GEN_PASS_DECL_AFFINEFULLUNROLL std::unique_ptr\u0026lt;::mlir::Pass\u0026gt; createAffineFullUnroll(); #undef GEN_PASS_DECL_AFFINEFULLUNROLL #endif // GEN_PASS_DECL_AFFINEFULLUNROLL 这部分代码使用了预处理宏 GEN_PASS_DECL_AFFINEFULLUNROLL。 如果这个宏被定义，则编译器会生成 createAffineFullUnroll() 函数的声明。\nPass 的实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #ifdef GEN_PASS_DEF_AFFINEFULLUNROLL namespace impl { std::unique_ptr\u0026lt;::mlir::Pass\u0026gt; createAffineFullUnroll(); } // namespace impl namespace impl { template \u0026lt;typename DerivedT\u0026gt; class AffineFullUnrollBase : public ::mlir::OperationPass\u0026lt;\u0026gt; { // ... (Pass 的方法定义) ... }; } // namespace impl std::unique_ptr\u0026lt;::mlir::Pass\u0026gt; createAffineFullUnroll() { return impl::createAffineFullUnroll(); } #undef GEN_PASS_DEF_AFFINEFULLUNROLL #endif // GEN_PASS_DEF_AFFINEFULLUNROLL 这部分是 Pass 的主要实现。它使用了 GEN_PASS_DEF_AFFINEFULLUNROLL 宏来控制编译。如果该宏被定义，则编译器会编译 AffineFullUnrollBase 类以及 createAffineFullUnroll 函数。\nAffineFullUnrollBase 是一个基类模板，使用 CRTP (Curiously Recurring Template Pattern) 技术，允许派生类通过 DerivedT 获取自身的类型信息。 这是一种常见的 C++ 设计模式，用于实现静态多态。它定义了 Pass 的基本信息，例如名称、描述、命令行参数、依赖的 Dialect (这里是 mlir::affine::AffineDialect). createAffineFullUnroll 函数负责创建 AffineFullUnroll Pass 的实例。 它使用了 impl 命名空间，这是一种常见的 C++ 代码组织方式，用于隐藏实现细节。 Pass 注册 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #ifdef GEN_PASS_REGISTRATION //===----------------------------------------------------------------------===// // AffineFullUnroll Registration //===----------------------------------------------------------------------===// inline void registerAffineFullUnroll() { ::mlir::registerPass([]() -\u0026gt; std::unique_ptr\u0026lt;::mlir::Pass\u0026gt; { return createAffineFullUnroll(); }); } // Old registration code, kept for temporary backwards compatibility. inline void registerAffineFullUnrollPass() { ::mlir::registerPass([]() -\u0026gt; std::unique_ptr\u0026lt;::mlir::Pass\u0026gt; { return createAffineFullUnroll(); }); } //===----------------------------------------------------------------------===// // Affine Registration //===----------------------------------------------------------------------===// inline void registerAffinePasses() { registerAffineFullUnroll(); } #undef GEN_PASS_REGISTRATION #endif // GEN_PASS_REGISTRATION Complete .hpp \u0026amp; .cpp TableGen根据 .td文件生成Pass的代码，生成的代码包含注册函数，这些注册函数最终会被调用，将Pass注册到MLIR系统中。 我们可以通过写一个 Passes.h文件集中管理所有Pass的注册，简化构建过程。\n1 2 3 4 5 6 7 // include/mlir-learning/Transform/Affine/Pass.h #include \u0026#34;mlir-learning/Transform/Affine/AffineFullUnroll.h\u0026#34; namespace mlir::tutorial { #define GEN_PASS_REGISTRION #include \u0026#34;mlir-learning/Transform/Affine/Pass.h.inc\u0026#34; } 然后再对应的 AffineFullUnroll.hpp 中定义 GEN_PASS_DECL_AFFINEFULLUNROLL 宏，以实现创建 Pass 函数的声明。\n1 2 3 4 5 6 7 8 9 #pragma once #include \u0026#34;mlir/Pass/Pass.h\u0026#34; namespace mlir::tutorial { #define GEN_PASS_DECL_AFFINEFULLUNROLL #include \u0026#34;mlir-learning/Transform/Affine/Pass.h.inc\u0026#34; } // namespace mlir::tutorial 同样在 cpp 中需要定义 GEN_PASS_DEF_AFFINEFULLUNROLL 宏，然后写你对应的实现 (与上一章相同). 问题是仅仅查看生成的代码并不能直接看出还需要实现哪些函数，需要通过其他方法来确定。\n编译并查看编译器错误信息: 最直接的方法是尝试编译代码。编译器会指出哪些函数没有实现，从而告诉你需要实现哪些函数。 与基类进行比较: 可以将生成的代码与基类（OperationPass和 Pass）进行比较。通过比较，可以发现唯一需要实现的函数是 runOnOperation()。 这需要你熟悉MLIR Pass的继承结构和各个函数的作用。 观察缺失的函数: 如果之前已经从原始API手动实现过类似的Pass，可以观察生成的代码中哪些函数已经存在（例如 getArgument），哪些函数缺失（例如 runOnOperation）。 通过对比，可以确定还需要实现哪些函数。 具体的实现与上一章相同，这里我们要继承 .inc 文件中生成的类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include \u0026#34;mlir-learning/Transform/Affine/AffineFullUnroll.h\u0026#34; #include \u0026#34;mlir/Dialect/Affine/IR/AffineOps.h\u0026#34; #include \u0026#34;mlir/Dialect/Affine/LoopUtils.h\u0026#34; #include \u0026#34;mlir/Pass/Pass.h\u0026#34; namespace mlir::tutorial { #define GEN_PASS_DEF_AFFINEFULLUNROLL #include \u0026#34;mlir-learning/Transform/Affine/Pass.h.inc\u0026#34; using mlir::affine::AffineForOp; using mlir::affine::loopUnrollFull; class AffineFullUnroll : public impl::AffineFullUnrollBase\u0026lt;AffineFullUnroll\u0026gt; { public: using AffineFullUnrollBase::AffineFullUnrollBase; void runOnOperation() override { getOperation()-\u0026gt;walk([\u0026amp;](AffineForOp op) { if (failed(loopUnrollFull(op))) { op.emitError(\u0026#34;unrolling failed\u0026#34;); signalPassFailure(); } }); } }; } // namespace mlir::tutorial 最后在 tutorial.cpp 中使用 .inc 文件生成的 registerAffinePasses\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include \u0026#34;mlir/IR/DialectRegistry.h\u0026#34; #include \u0026#34;mlir/InitAllDialects.h\u0026#34; #include \u0026#34;mlir/Pass/PassManager.h\u0026#34; #include \u0026#34;mlir/Pass/PassRegistry.h\u0026#34; #include \u0026#34;mlir/Tools/mlir-opt/MlirOptMain.h\u0026#34; #include \u0026#34;mlir-learning/Transform/Affine/Pass.h\u0026#34; int main(int argc, char** argv) { // Register all built-in MLIR dialects mlir::DialectRegistry registry; mlir::registerAllDialects(registry); mlir::tutorial::registerAffinePasses(); return mlir::asMainReturnCode( mlir::MlirOptMain(argc, argv, \u0026#34;Tutorial Pass Driver\u0026#34;, registry)); } ","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch3-using-tablegen-for-passes/","summary":"Personal MLIR learning notes 3.","title":"MLIR-Ch3 Using Tablegen for Passes"},{"content":"Tutorial-opt and Project Organization 编译器可能将 mlir-opt 作为子例程在前端 (c++ -\u0026gt; 某些MLIR方言) 和后端 (MLIR 的 LLVM 方言 -\u0026gt; LLVM -\u0026gt; 机器码) 之间运行。 (我将它命名为 tutorial-opt).\n典型的 MLIR 代码库将代码分成具有大致相同层次结构的目录：\ninclude/ 目录用于存放头文件和tablegen 文件， lib/ 目录用于存放实现代码。可能会有 Transform/ 子目录用于存储在方言中转换代码的 pass，Conversion/ 子目录用于在方言之间转换的 pass ，Analysis/ 子目录用于分析 pass，等等。这些目录中的每一个都可能有它们所操作的特定方言的子目录。 test/ 用于存放需要测试的 mlir 文件。 tools/ 存放用于注册 pass 的主文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ./Ch1-WritingOurFirstPass/ ├── CMakeLists.txt ├── include │ └── mlir-tutorial ├── lib │ ├── CMakeLists.txt │ └── Transform ├── tests │ ├── Output │ ├── affine_loop_unroll.mlir │ ├── lit.cfg.py │ └── mul_to_add.mlir └── tools ├── CMakeLists.txt └── tutorial-opt.cpp 尽管 MLIR 提供了许多定义循环和控制流的机制，最高级的是 affine dialect. 它被设计用来进行多面体循环分析 (polyhedral loop analysis).\nPolyhedral Loop Analysis 多面体循环分析的核心思想是将程序中的循环和数组访问抽象为数学形式，使得可以应用几何变换来优化代码。这种数学形式通常表示为 整数线性不等式的集合 ，这些不等式定义了循环迭代空间和数组访问的范围。\n迭代空间（Iteration Space） ：程序中的循环嵌套可以被表示为一个多维的迭代空间。例如，对于一个双层嵌套循环： 1 2 3 4 5 for (i = 0; i \u0026lt; N; i++) { for (j = 0; j \u0026lt; M; j++) { A[i][j] = A[i][j] + 1; } } 这里的迭代空间是二维的，由 (i, j) 构成。\n访问关系（Access Relations） ：每个数组的访问模式（例如 A[i][j]）也可以被表示为几何关系。这种关系定义了哪些迭代变量访问哪些数组元素。 多面体表示（Polyhedral Representation） ：在多面体循环分析中，循环的迭代空间和数组访问模式可以用整数线性不等式来表示，从而形成一个多面体。例如，0\u0026lt;=i\u0026lt;N 和 0\u0026lt;=j\u0026lt;M 是两个简单的线性不等式，它们表示循环的边界。 一个简单的对数组求和的函数如下: affine.for 定义一个循环，迭代变量为 %i，范围 [0,4)，即循环 4 次。 iter_args(%sum_iter = %sum_0) 表示循环维护一个迭代变量 %sum_iter，初始值为 %sum_0.\n1 2 3 4 5 6 7 8 9 func.func @sum_buffer(%buffer: memref\u0026lt;4xi32\u0026gt;) -\u0026gt; i32 { %sum_0 = arigh.constant 0 : i32 %sum = affine.for %i = 0 to 4 iter_args(%sum_iter = %sum_0) -\u0026gt; (i32) { %t = affine.load %buffer[%i] : memref\u0026lt;4xi32\u0026gt; %sum_next = arith.addi %sum_iter, %t : i32 affine.yield %sum_next : i32 } return %sum: i32 } MLIR 高级结构 基于图数据结构，其节点称为 Operations，边称为 Values。每个 Value 都是一个 Operation 或 Block Argument 的结果，并具有由类型系统定义的 Value Type。Operations 包含在 Blocks 中，Blocks 包含在 Regions 中。Operations 在其所在的 Block 中是有序的，Blocks 在其所在的 Region 中也是有序的，尽管这种顺序在特定类型的 Region 中可能具有或不具有语义意义。Operations 还可以包含 Regions，从而能够表示层次化的结构。\nOperations 可以表示多种不同的概念，从高级概念如函数定义、函数调用、缓冲区分配、缓冲区的视图或切片、进程创建，到低级概念如目标无关的算术运算、目标特定的指令、配置寄存器和逻辑门。这些不同的概念在 MLIR 中由不同的 Operations 表示，并且 MLIR 中可用的 Operations 集可以任意扩展。\nMLIR 还提供了一个可扩展的框架，用于对 Operations 进行转换，使用熟悉的编译器 Passes 概念。在任意 Operations 集上启用任意 Passes 集会带来显著的扩展性挑战，因为每个转换可能需要考虑任何 Operation 的语义。MLIR 通过允许使用 Traits 和 Interfaces 抽象地描述 Operation 的语义来解决这种复杂性，从而使转换能够更通用地操作 Operations。Traits 通常描述对有效 IR 的验证约束，能够捕获和检查复杂的不变性。（参见 Op vs Operation）\nMLIR 的表示基于 SSA 的 IR，例如 LLVM core IR，通过适当选择 Operation 类型来定义 Modules、Functions、Branches、Memory Allocation，以及验证约束以确保 SSA Dominance 属性。MLIR 包含一组 Dialects，定义了此类结构。\nAffine Full Unroll Pass MLIR 提供了一个方法 loopUnrollFull 来进行循环展开，因此我们的 pass 将是对这个函数调用的一个包装，直接调用 C++ API 实现。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // include/mlir-learning/Transform/Affine/AffineFullUnroll.h class AffineFullUnrollPass : public PassWrapper\u0026lt;AffineFullUnrollPass, OperationPass\u0026lt;mlir::FuncOp\u0026gt;\u0026gt; { private: void runOnOperation() override; StringRef getArgument() const final {return \u0026#34;affine-full-unroll\u0026#34;;} StringRef getDescription() const final { return \u0026#34;Perform full unrolling of all affine.for loops\u0026#34;; } }; // lib/Transform/Affine/AffineFullUnroll.cpp using mlir::affine::AffineForOp; using mlir::affine::loopUnrollFull; void AffineFullUnrollPass::runOnOperation() { getOperation().walk( [\u0026amp;](AffineForOp op) { if (failed(loopUnrollFull(op))) { op.emitError(\u0026#34;unrolling failed\u0026#34;); signalPassFailure(); } }); } 该类的定义使用了奇异递归模板模式 (Curiously Recurring Template Pattern, CRTP). PassWrapper 是 MLIR 框架中的一个模板类，为定义的 Pass 提供通用功能 (如类型检查、名称获取、克隆)。开发者只需专注于 Pass 的核心逻辑（如 runOnOperation），而无需手动实现类型标识、克隆等辅助功能。\nrunOnOperation 中调用了 getOperation 方法，它是 MLIR 中 Pass 类提供的一个方法，返回当前操 Operation. walk 方法是 MLIR 提供的一个遍历方法，用来遍历操作树中的每个节点。它会递归地遍历操作树中的所有子操作，并对每个操作应用传入的回调函数 (lambda func). 当运行这个 Pass 时，它会在每一个 AffineForOp 类型的操作上执行 runOnOperation 函数。 getArgument 方法返回 Pass 的命令行参数。这个返回值 affine-full-unroll 表示这个 Pass 的名称，可以在运行时通过命令行参数指定是否启用该 Pass. getDescription 方法会在调用像 mlir-opt 这样的工具时若有 --help 参数则返回 Pass 的描述信息。 Callback Function 回调函数 (Callback Function) 是一种通过将函数作为参数传递给另一个函数，来实现某些特定操作的机制。回调函数通常在某个事件发生或某个特定条件满足时被调用。简而言之，回调函数就是被调用的函数，它会在特定的时机被执行。\n在这个例子中，invokeCallback 函数接收到 printMessage 函数的地址，并在 main 函数中调用它。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include \u0026lt;iostream\u0026gt; // 回调函数的定义 void printMessage() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello, World!\u0026#34; \u0026lt;\u0026lt; std::endl; } // 接受回调函数作为参数的函数 void invokeCallback(void (*callback)()) { // 调用回调函数 callback(); } int main() { // 将回调函数传递给另一个函数 invokeCallback(printMessage); return 0; } 在现代 C++ 中，回调函数通常通过 lambda 表达式传递。下面的例子中 invokeCallback 函数接受一个 std::function\u0026lt;void()\u0026gt; 类型的回调函数参数。在 main 函数中，传入了一个 Lambda 表达式作为回调函数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 #include \u0026lt;iostream\u0026gt; void invokeCallback(std::function\u0026lt;void()\u0026gt; callback) { callback(); } int main() { // 使用 Lambda 表达式作为回调函数 invokeCallback([](){ std::cout \u0026lt;\u0026lt; \u0026#34;Hello from Lambda!\u0026#34; \u0026lt;\u0026lt; std::endl; }); return 0; } Registering the Pass 接下来我们需要在 tutorial.cpp 中注册这个 Pass。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include \u0026#34;mlir-learning/Transform/Affine/AffineFullUnroll.h\u0026#34; #include \u0026#34;mlir/InitAllDialects.h\u0026#34; #include \u0026#34;mlir/Pass/PassManager.h\u0026#34; #include \u0026#34;mlir/Pass/PassRegistry.h\u0026#34; #include \u0026#34;mlir/Tools/mlir-opt/MlirOptMain.h\u0026#34; int main(int argc, char** argv) { mlir::DialectRegistry registry; mlir::registerAllDialects(registry); mlir::PassRegistration\u0026lt;mlir::tutorial::AffineFullUnrollPass\u0026gt;(); return mlir::asMainReturnCode( mlir::MlirOptMain(argc, argv, \u0026#34;Tutorial Pass Driver\u0026#34;, registry)); } mlir::registerAllDialects(registry); 会调用 MLIR 库的函数，将所有可用的方言注册到 registry 中。方言是 MLIR 中用来定义各种中间表示的抽象，可以理解为不同类型的 IR. mlir::PassRegistration\u0026lt;mlir::tutorial::AffineFullUnrollPass\u0026gt;(); 将自定义的 AffineFullUnrollPass 注册到 MLIR 的 Pass 系统中。 MlirOptMain 是 MLIR 提供的一个函数，处理命令行参数，并执行相应的 Pass. argc 和 argv：来自命令行的参数。 \u0026ldquo;Tutorial Pass Driver\u0026rdquo;：这是一个程序描述字符串，通常是给用户的信息。 registry：之前创建的 DialectRegistry，它包含了所有已注册的方言。 mlir::asMainReturnCode(...) 将 MlirOptMain 的返回值转换为标准的退出代码 (0 表示成功，非零值表示失败). Test the Pass 我们写一个 .mlir 来测试我们的 Pass，这是一个对数组进行累加的函数。FileCheck 检查经过 Pass 后函数中不会存在 affine.for 指令。\n1 2 3 4 5 6 7 8 9 10 11 12 13 // RUN: /leaning/build/chapter2/tools/02-tutorial-opt %s --affine-full-unroll \u0026gt; %t // RUN: FileCheck %s \u0026lt; %t func.func @test_single_nested_loop(%buffer: memref\u0026lt;4xi32\u0026gt;) -\u0026gt; (i32) { %sum_0 = arith.constant 0 : i32 // CHECK-NOT: affine.for %sum = affine.for %i = 0 to 4 iter_args(%sum_iter = %sum_0) -\u0026gt; i32 { %t = affine.load %buffer[%i] : memref\u0026lt;4xi32\u0026gt; %sum_next = arith.addi %sum_iter, %t : i32 affine.yield %sum_next : i32 } return %sum : i32 } 经过优化后的函数如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #map = affine_map\u0026lt;(d0) -\u0026gt; (d0 + 1)\u0026gt; #map1 = affine_map\u0026lt;(d0) -\u0026gt; (d0 + 2)\u0026gt; #map2 = affine_map\u0026lt;(d0) -\u0026gt; (d0 + 3)\u0026gt; module { func.func @test_single_nested_loop(%arg0: memref\u0026lt;4xi32\u0026gt;) -\u0026gt; i32 { %c0 = arith.constant 0 : index %c0_i32 = arith.constant 0 : i32 %0 = affine.load %arg0[%c0] : memref\u0026lt;4xi32\u0026gt; %1 = arith.addi %c0_i32, %0 : i32 %2 = affine.apply #map(%c0) %3 = affine.load %arg0[%2] : memref\u0026lt;4xi32\u0026gt; %4 = arith.addi %1, %3 : i32 %5 = affine.apply #map1(%c0) %6 = affine.load %arg0[%5] : memref\u0026lt;4xi32\u0026gt; %7 = arith.addi %4, %6 : i32 %8 = affine.apply #map2(%c0) %9 = affine.load %arg0[%8] : memref\u0026lt;4xi32\u0026gt; %10 = arith.addi %7, %9 : i32 return %10 : i32 } } A Rewrite Pattern Version 当想要对一个给定的 IR 子结构重复应用相同的变换子集，直到该子结构被完全去除时，需要写一个重写模式引擎。重写模式是 OpRewritePattern 的子类，它有一个名为 matchAndRewrite 的方法来执行转换。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // chapter2/lib/Transform/Affine/AffineFullUnroll.cpp struct AffineFullUnrollPattern : public mlir::OpRewritePattern\u0026lt;AffineForOp\u0026gt; { AffineFullUnrollPattern(mlir::MLIRContext* context) : mlir::OpRewritePattern\u0026lt;AffineForOp\u0026gt;(context, 1) { } // 一般在 OpRewritePattern 中，IR 的更改要通过 PatternRewriter // PatternRewriter 处理 OpRewritePattern中发生的突变的原子性 LogicalResult matchAndRewrite(AffineForOp op, PatternRewriter\u0026amp; rewriter) const override{ return loopUnrollFull(op); } }; AffineFullUnrollPattern 继承自 OpRewritePattern\u0026lt;AffineForOp\u0026gt;，OpRewritePattern 是 MLIR 中用于对特定操作类型 (在这里是 AffineForOp) 进行模式匹配和重写的基类。模板参数 AffineForOp 表示我们要为 AffineForOp 这个操作创建一个模式。 构造函数初始化了基类 OpRewritePattern\u0026lt;AffineForOp\u0026gt;，并传递了两个参数 context：MLIRContext 是 MLIR 的上下文，保存着所有的操作、方言和类型等信息。在这里，context 用来初始化模式对象。 benefit 是一个表示模式匹配优先级的整数值，优先级越高的模式越先应用。 matchAndRewrite 是在 MLIR 中进行模式重写的核心方法。它的目的是：检查某个操作是否符合当前模式的要求。如果操作匹配模式，则执行重写操作，通常会用新的 IR 替换原来的 IR。 AffineForOp op 表示要进行模式匹配的 AffineForOp 操作。 PatternRewriter \u0026amp;rewriter 是一个用于生成新的 MLIR 操作的工具，它可以修改 IR. 我们同样要像上一节一样在头文件中声明一个 AffineFullUnrollPassAsPatternRewrite 类，然后实现其 runOnOperation 方法。\n1 2 3 4 5 6 // chapter2/lib/Transform/Affine/AffineFullUnroll.cpp void AffineFullUnrollPassAsPatternRewrite::runOnOperation() { mlir::RewritePatternSet patterns(\u0026amp;getContext()); patterns.add\u0026lt;AffineFullUnrollPattern\u0026gt;(\u0026amp;getContext()); (void) applyPatternsGreedily(getOperation(), std::move(patterns)); } RewritePatternSet 是 MLIR 中一个容器，用于存储多个 Rewrite Pattern. 每个模式都是针对某种特定操作进行的优化规则。RewritePatternSet 会把所有这些规则聚合在一起，方便在后续的步骤中批量应用。 然后通过 patterns.add\u0026lt;AffineFullUnrollPattern\u0026gt;，将一个 Rewrite Pattern (这里是上面定义的 AffineFullUnrollPattern) 添加到 patterns 集合中。 applyPatternsGreedily是 MLIR 提供的一个函数，用于将定义的模式应用到给定的操作 (getOperation()) 上。这个函数使用贪心策略，在一次遍历中尽可能多地应用模式，直到无法再应用为止。 std::move std::move 是 C++11 引入的一个标准库函数，它的主要作用是将一个对象转换为右值引用，以便启用移动语义 (Move Semantics). 简单来说，std::move 本身并不实际移动对象，而是为对象提供一个指示，告诉编译器该对象可以被移动而不是复制。\n在 C++ 中，有两种主要的值类别:\n左值 (Lvalue) ：表示可以取地址的对象，可以理解为拥有持久生命周期的对象。它通常是变量、数组元素、对象成员等。 右值 (Rvalue) ：表示临时对象、非持久生命周期的对象，通常是返回值、字面常量等。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;utility\u0026gt; // std::move class MyClass { public: MyClass() { std::cout \u0026lt;\u0026lt; \u0026#34;Constructor\\n\u0026#34;; } MyClass(const MyClass\u0026amp; other) { std::cout \u0026lt;\u0026lt; \u0026#34;Copy Constructor\\n\u0026#34;; } MyClass(MyClass\u0026amp;\u0026amp; other) noexcept { std::cout \u0026lt;\u0026lt; \u0026#34;Move Constructor\\n\u0026#34;; } MyClass\u0026amp; operator=(const MyClass\u0026amp; other) { std::cout \u0026lt;\u0026lt; \u0026#34;Copy Assignment\\n\u0026#34;; return *this; } MyClass\u0026amp; operator=(MyClass\u0026amp;\u0026amp; other) noexcept { std::cout \u0026lt;\u0026lt; \u0026#34;Move Assignment\\n\u0026#34;; return *this; } }; int main() { MyClass obj1; // Constructor MyClass obj2 = std::move(obj1); // Move Constructor MyClass obj3; obj3 = std::move(obj2); // Move Assignment } A proper greedy RewritePattern 接下来写一个用重写模式定义的 MulToAddPass，它会将 y=C*x 形式的乘法转换为 y=C/2*x+C/2*x 形式的加法当 C 是偶数。否则转换成 y=1+(C-1)/2*x+(C-1)/2*x 形式的加法。\nPowerOfTwoExpand 获取了 rhs 的定义操作（rhs.getDefiningOp\u0026lt;arith::ConstantIntOp\u0026gt;()），以确保右操作数是一个常数。 如果右操作数的值是 2 的幂，即 (value \u0026amp; (value - 1)) == 0，则进行优化。 将 value 除以 2 然后生成新的常数 newConstant。 计算新的乘法 lhs * newConstant，并将其加倍（通过 AddIOp 来实现 lhs * value）。 最终用新的加法替代原来的乘法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 struct PowerOfTwoExpand : public OpRewritePattern\u0026lt;MulIOp\u0026gt; { PowerOfTwoExpand(MLIRContext* context) : OpRewritePattern\u0026lt;MulIOp\u0026gt;(context, 2) { } LogicalResult matchAndRewrite(MulIOp op, PatternRewriter\u0026amp; rewriter) const override { // Value represents an instance of an SSA value in the MLIR system Value lhs = op-\u0026gt;getOperand(0); Value rhs = op-\u0026gt;getOperand(1); auto rhsDefiningOp = rhs.getDefiningOp\u0026lt;arith::ConstantIntOp\u0026gt;(); if (!rhsDefiningOp) { return failure(); } int64_t value = rhsDefiningOp.value(); bool is_power_of_two = (value \u0026amp; (value - 1)) == 0; if (!is_power_of_two) { return failure(); } auto newConstant = rewriter.create\u0026lt;ConstantOp\u0026gt;( rhsDefiningOp-\u0026gt;getLoc(), rewriter.getIntegerAttr(rhs.getType(), value / 2)); auto newMul = rewriter.create\u0026lt;MulIOp\u0026gt;(op-\u0026gt;getLoc(), lhs, newConstant); auto newAdd = rewriter.create\u0026lt;AddIOp\u0026gt;(op-\u0026gt;getLoc(), newMul, newMul); rewriter.replaceOp(op, newAdd); rewriter.eraseOp(rhsDefiningOp); return success(); } }; PeelFromMul 这个 Pass 的目标是将一个常数乘法转化为加法形式，适用于常数值 rhs 不为 2 的幂时。\n将 rhs 减去 1，然后生成一个新的常数 newConstant（即 value - 1）。 用 lhs * newConstant 进行计算，并将结果加上 lhs（即 lhs * value 转化为 (lhs * (value - 1)) + lhs）。 最终用新的加法替代原来的乘法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 struct PeelFromMul : public OpRewritePattern\u0026lt;MulIOp\u0026gt; { PeelFromMul(MLIRContext* context) : OpRewritePattern\u0026lt;MulIOp\u0026gt;(context, 1) { } LogicalResult matchAndRewrtite(MulIOp op, PatternRewriter\u0026amp; rewriter) const { Value lhs = op-\u0026gt;getOperand(0); Value rhs = op-\u0026gt;getOperand(1); auto rhsDefiningOp = rhs.getDefiningOp\u0026lt;arith::ConstantIntOp\u0026gt;(); if (!rhsDefiningOp) { return failure(); } int64_t value = rhsDefiningOp.value(); // Beacause PowerOfTwoExpand has higher benefit, // value must not be power of 2 auto newConstant = rewriter.create\u0026lt;ConstantOp\u0026gt;( rhsDefiningOp-\u0026gt;getLoc(), rewriter.getIntegerAttr(rhs.getType(), value - 1)); auto newMul = rewriter.create\u0026lt;MulIOp\u0026gt;(op.getLoc(), lhs, newConstant); auto newAdd = rewriter.create\u0026lt;AddIOp\u0026gt;(op.getLoc(), newMul, lhs); rewriter.replaceOp(op, newAdd); rewriter.eraseOp(rhsDefiningOp); return success(); } }; Add the Pass 之后我们同样在 runOnOperation 方法中注册 PowerOfTwoExpand 和 PeelFromMul 两个模式。\n1 2 3 4 5 6 void MulToAddPass::runOnOperation() { mlir::RewritePatternSet patterns(\u0026amp;getContext()); patterns.add\u0026lt;PowerOfTwoExpand\u0026gt;(\u0026amp;getContext()); patterns.add\u0026lt;PeelFromMul\u0026gt;(\u0026amp;getContext()); (void) applyPatternsAndFoldGreedily(getOperation(), std::move(patterns)); } Lit, FileCheck LLVM 和 MLIR 使用的是同一个测试框架，分为两个测试步骤。\nlit (LLVM Integratesd Tester) 负责发现、组织和运行测试，并报告测试结果。测试文件中通常包含 RUN: 指令，告诉 lit 如何运行测试。 FileCheck 通过模式匹配的方式，验证输出是否包含特定的字符串或结构。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # lit.cfg.py # CMD: llvm-lit -v path/to/test_files import os from os import path as osp from lit.formats import ShTest config.name = \u0026#34;MLIR-LEARN\u0026#34; config.test_format = ShTest() config.suffixes = [\u0026#34;.mlir\u0026#34;] current_path = os.getcwd() tool_path = \u0026#34;path/to/build/opt_executable\u0026#34; config.environment[\u0026#34;PATH\u0026#34;] = ( osp.join(current_path, tool_path) + \u0026#34;:\u0026#34; + os.environ[\u0026#34;PATH\u0026#34;] ) Test the Pass 我们同样创建一个 .mlir 文件来测试我们的 Pass. 我们希望 Pass 能够将递归地将乘法转化为加法形式，\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // RUN: /leaning/build/chapter2/tools/02-tutorial-opt %s --mul-to-add \u0026gt; %t // RUN: FileCheck %s \u0026lt; %t func.func @just_power_of_two(%arg0: i32) -\u0026gt; i32 { %0 = arith.constant 8: i32 %1 = arith.muli %arg0, %0: i32 func.return %1: i32 } // CHECK-LABEL: func.func @just_power_of_two( // CHECK-SAME: %[[ARG:.*]]: i32 // CHECK-SAME: ) -\u0026gt; i32 { // CHECK: %[[SUM_0:.*]] = arith.addi %[[ARG]], %[[ARG]] // CHECK: %[[SUM_1:.*]] = arith.addi %[[SUM_0]], %[[SUM_0]] // CHECK: %[[SUM_2:.*]] = arith.addi %[[SUM_1]], %[[SUM_1]] // CHECK: return %[[SUM_2]] : i32 // CHECK: } func.func @power_of_two_plus_one(%arg: i32) -\u0026gt; i32 { %0 = arith.constant 9 : i32 %1 = arith.muli %arg, %0 : i32 func.return %1 : i32 } // CHECK-LABEL: func.func @power_of_two_plus_one( // CHECK-SAME: %[[ARG:.*]]: i32 // CHECK-SAME: ) -\u0026gt; i32 { // CHECK: %[[SUM_0:.*]] = arith.addi %[[ARG]], %[[ARG]] // CHECK: %[[SUM_1:.*]] = arith.addi %[[SUM_0]], %[[SUM_0]] // CHECK: %[[SUM_2:.*]] = arith.addi %[[SUM_1]], %[[SUM_1]] // CHECK: %[[SUM_3:.*]] = arith.addi %[[SUM_2]], %[[ARG]] // CHECK: return %[[SUM_3]] : i32 // CHECK: } 经过优化后的代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 module { func.func @just_power_of_two(%arg0: i32) -\u0026gt; i32 { %0 = arith.addi %arg0, %arg0 : i32 %1 = arith.addi %0, %0 : i32 %2 = arith.addi %1, %1 : i32 return %2 : i32 } func.func @power_of_two_plus_one(%arg0: i32) -\u0026gt; i32 { %0 = arith.addi %arg0, %arg0 : i32 %1 = arith.addi %0, %0 : i32 %2 = arith.addi %1, %1 : i32 %3 = arith.addi %2, %arg0 : i32 return %3 : i32 } } Summary 使用模式重写引擎通常比编写遍历AST的代码更容易。不需要大型 case/switch 语句来处理 IR 中可能出现的所有内容。因此可以单独编写模式，并相信引擎会适当地组合它们。\n","permalink":"http://localhost:1313/blogs/courselearning/mlir/mlir-ch2-writing-our-first-pass/","summary":"Personal MLIR learning notes 2.","title":"MLIR-Ch2 Writing Our First Pass"},{"content":"Abstract DistriFusion 将模型输入分割成多个 patch 后分配给 GPU。但是直接实现这样的算法会破坏 patch 之间的交互并失去保真度，而同步 GPU 之间的激活将产生巨大的通信开销。为了克服这一困境，根据观察到的相邻扩散步输入之间的高度相似性提出了 displaced patch parallelism，该方法通过重用前一个时间步骤中预先计算的 feature map 来利用扩散过程的顺序性，为当前步提供 context. 该方法支持异步通信，可以通过计算实现流水线化。\nIntroduction Original, Navie Patch \u0026amp; DistriFusion\n加速扩散模型推理主要集中在两种方法上：减少采样步骤和优化网络推理。随着计算资源的快速增长，利用多个 GPU 来加速推理是很有吸引力的。例如在 NLP 中， LLM 已经成功地利用了 GPU 之间的张量并行性，从而显著降低了延迟。然而，对于扩散模型，由于激活尺寸大，张量并行这样的技术不太适合扩散模型。多个 GPU 通常只用于 batch 推理，当生成单个图像时，通常只涉及一个GPU.\nTechniques like tensor parallelism are less suitable for diffusion models due to the large activation size, as communication costs outweigh savings from distributed computation.\n自然而然的一种方法是将图像分成几个 patch 后分配给不同的设备进行生成。由于各个 patch 之间缺乏相互作用，它在每个 patch 的边界处都有一个清晰可见的分界线。\nDistriFusion 也是基于 patch parallelism. 关键在于扩散模型中相邻去噪步骤的输入是相似的，因此，只在第一步采用同步通信。后续步骤重用前一步中预先计算的激活，为当前步骤提供全局上下文和 patch 交互。通过异步通信有效地隐藏了计算中的通信开销。并且还稀疏地在指定的区域上进行卷积和注意力计算，从而按比例减少每个设备的计算量。\nMethod Displaced Patch Parallelism. 在预测 $\\epsilon_{\\theta}(\\mathbf{x}_{t})$ 时 (忽略条件 c 和时间步 t 的输入) ，首先将 $\\mathbf{x}_{t}$ 分割成多个 patch $\\mathbf{x}_t^{(1)},\\mathbf{x}_t^{(2)},\\ldots,\\mathbf{x}_t^{(N)}$ ，对于每一层 l 和设备 i，在获得输入激活 patch $\\mathbf{A}_{t}^{l,(i)}$ 后异步处理两个操作：首先，对于设备i， 激活 $\\mathbf{A}_{t}^{l,(i)}$ 首先 scatter 到上一步旧的激活 $\\mathbf{A}_{t+1}^{l}$ 中。然后将此分散操作的输出送入稀疏算子 Fl (线性、卷积或注意层)，该算子专门对新区域执行计算并产生相应的输出。同时，对 $\\mathbf{A}_{t}^{l,(i)}$ 执行 AllGather 操作，为下一步的全尺寸激活 $\\mathbf{A}_{t}^{l}$ 做准备。\nOverview of DistriFusion\n我们对除第一层 (采用同步通信获得其他设备上的输入) 外的每一层重复这个过程。然后将最终输出 Gather 在一起以近似 $\\epsilon_{\\theta}(\\mathbf{x}_{t})$，用于计算 $\\mathbf{x}_{t-1}$\nTimeline Visualization on Each Device\nSparse Operations 对于每一层 l，如果原始算子 Fl 是一个卷积层、线性层或交叉注意层，调整使其专门作用于新激活的区域。这可以通过从 scatter 输出中提取最新部分并将其输入到 Fl 中来实现。对于 self-attention，将其转换为 cross-attention，仅在设备上保留来自新激活的 Q，而 KV 仍然包含整个特征图。\nCorrected Asynchronous GroupNorm 仅对新 patch 进行归一化或重用旧特征都会降低图像质量。同步 AllGather 所有均值和方差将产生相当大的开销。为了解决这一困境，DistriFusion 在陈旧的统计数据中引入了一个校正项。计算公式如下\n$$\r\\mathbb{E}[\\mathbf{A}_t]\\approx\\underbrace{\\mathbb{E}[\\mathbf{A}_{t+1}]}_{\\text{stale global mean}}+\\underbrace{\\mathbb{E}[\\mathbf{A}_t^{(i)}]-\\mathbb{E}[\\mathbf{A}_{t+1}^{(i)}]}_{\\text{correction}}\r$$同样对二阶矩 $\\mathbb{E}[\\mathbf{A}^2_t]$ 也采用这种计算方式，然后通过 $\\mathbb{E}[\\mathbf{A}^2_t] - \\mathbb{E}[\\mathbf{A}_t]^2$ 来计算方差。对于方差结果为负的部分，将使用新鲜 patch 的局部方差代替。\nCode Implementation Distrifusion 中主要就是将 UNet2DConditionModel 中的 Conv2d, Attention 和 GroupNorm 替换成对应的 patch 实现的网络结构 DistriUNetPP. 这里继承的 BaseModel 类为集成了 PatchParallelismCommManager 类 (介绍见后文) 的网络。\nUNet2DConditionModel\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class DistriUNetPP(BaseModel): # for Patch Parallelism def __init__(self, model: UNet2DConditionModel, distri_config: DistriConfig): assert isinstance(model, UNet2DConditionModel) if distri_config.world_size \u0026gt; 1 and distri_config.n_device_per_batch \u0026gt; 1: for name, module in model.named_modules(): if isinstance(module, BaseModule): continue \u0026#39;\u0026#39;\u0026#39; Substitute Conv2d, Attention, GroupNorm with DistriConv2dPP, DistriSelfAttentionPP, DistriCrossAttentionPP, DistriGroupNorm \u0026#39;\u0026#39;\u0026#39; for subname, submodule in module.named_children(): if isinstance(submodule, nn.Conv2d): kernel_size = submodule.kernel_size if kernel_size == (1, 1) or kernel_size == 1: continue wrapped_submodule = DistriConv2dPP( submodule, distri_config, is_first_layer=subname == \u0026#34;conv_in\u0026#34; ) setattr(module, subname, wrapped_submodule) elif isinstance(submodule, Attention): if subname == \u0026#34;attn1\u0026#34;: # self attention wrapped_submodule = DistriSelfAttentionPP(submodule, distri_config) else: # cross attention assert subname == \u0026#34;attn2\u0026#34; wrapped_submodule = DistriCrossAttentionPP(submodule, distri_config) setattr(module, subname, wrapped_submodule) elif isinstance(submodule, nn.GroupNorm): wrapped_submodule = DistriGroupNorm(submodule, distri_config) setattr(module, subname, wrapped_submodule) super(DistriUNetPP, self).__init__(model, distri_config) PatchParallelismCommManager PatchParallelismCommManager 类主要处理异步通信的部分。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class PatchParallelismCommManager: def __init__(self, distri_config: DistriConfig): self.distri_config = distri_config self.torch_dtype = None self.numel = 0 # 已经注册的张量的累计总元素数量 self.numel_dict = {} # 记录每个 layer_type 所注册的张量的累计元素数量 self.buffer_list = None # 在每个设备上存储所有注册张量的数据，通信所用的 buffer self.starts = [] # 记录每个注册张量的起始位置 (在 buffer_list 中的起始索引) self.ends = [] # 结束 结束 self.shapes = [] # 记录每个注册张量的 shape self.idx_queue = [] # 需要进行通信的张量索引的队列 self.handles = None # 存储每个设备通信操作的句柄的 list, 用于检查通信是否完成 成员函数功能介绍如下\nregister_tensor(self, shape: tuple[int, ...] or list[int], torch_dtype: torch.dtype, layer_type: str = None) -\u0026gt; int: 用于注册张量的形状和数据类型，同时计算并记录张量在缓冲区中的起始位置和结束位置。\n如果尚未指定 torch_dtype，则将传入的 torch_dtype 设为类成员的默认数据类型。 计算传入张量形状的总元素数 numel，并更新 starts、ends 和 shapes 列表。 如果指定了 layer_type，更新 numel_dict 中该层类型对应的元素数目。 create_buffer(self) : 每个设备上为所有注册的张量创建一个统一的缓冲区。\n为每个设备创建一个形状为 (numel,) 的张量，并将其放入 buffer_list 中。 输出在各设备上创建的缓冲区总参数量。 get_buffer_list(self, idx: int) -\u0026gt; list[torch.Tensor]: 返回每个设备上对应于指定索引 idx 的缓冲区张量。\n根据 starts 和 ends 信息，从 buffer_list 中提取指定索引 idx 的张量片段并调整其形状。 communicate(self): 调用 dist.all_gather 将缓冲区中的张量在不同设备间进行广播。\n确定当前需要通信的张量范围 (根据 idx_queue 中的索引). 调用 dist.all_gather 在设备组内进行异步广播通信，并将句柄存储在 handles 中。 enqueue(self, idx: int, tensor: torch.Tensor): 将指定索引 idx 处的张量数据复制到 buffer_list 中，并将索引添加到通信队列 idx_queue。\n如果通信队列不为空且索引为 0，则先执行一次通信操作。 将张量数据复制到 buffer_list 中的对应位置。 当通信队列长度达到 distri_config 中设定的通信检查点值时，进行通信。 clear(self): 执行一次所有待通信张量的通信，并等待所有异步操作完成。\n如果通信队列不为空，则进行通信操作。 遍历所有句柄，等待所有异步操作完成后，将句柄设为 None. DistriConv2dPP DistriConv2dPP 计算自己负责 patch 部分的卷积，需要通信其他设备需要自己负责 patch 的上下 padding 部分。\n__init__：构造函数，初始化成员变量，设置是否为第一层卷积。 naive_forward：执行标准的前向传播，不进行任何切片操作。这是单个设备处理时的普通卷积操作。 sliced_forward：处理输入张量的切片操作。根据当前设备索引 (split_idx) 计算输入张量在高度方向的起始和结束位置，并在必要时为切片后的张量添加 padding 后进行卷积操作。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 class DistriConv2dPP(BaseModule): def __init__(self, module: nn.Conv2d, distri_config: DistriConfig, is_first_layer: bool = False): super(DistriConv2dPP, self).__init__(module, distri_config) self.is_first_layer = is_first_layer def naive_forward(self, x: torch.Tensor) -\u0026gt; torch.Tensor: # x: [B, C, H, W] output = self.module(x) return output def sliced_forward(self, x: torch.Tensor) -\u0026gt; torch.Tensor: \u0026#39;\u0026#39;\u0026#39;...\u0026#39;\u0026#39;\u0026#39; def forward(self, x: torch.Tensor, *args, **kwargs) -\u0026gt; torch.Tensor: distri_config = self.distri_config # 等待上一步通信完成 if self.comm_manager is not None and self.comm_manager.handles is not None and self.idx is not None: if self.comm_manager.handles[self.idx] is not None: self.comm_manager.handles[self.idx].wait() self.comm_manager.handles[self.idx] = None boundary_size = self.module.padding[0] if self.buffer_list is None: # buffer_list 存储的是每个 devive 进行卷积所需要的其他 devive 的数据 if self.comm_manager.buffer_list is None: self.idx = self.comm_manager.register_tensor( shape=[2, x.shape[0], x.shape[1], boundary_size, x.shape[3]], torch_dtype=x.dtype, layer_type=\u0026#34;conv2d\u0026#34;, ) else: self.buffer_list = self.comm_manager.get_buffer_list(self.idx) def create_padded_x(): \u0026#39;\u0026#39;\u0026#39;拼接接收到的数据\u0026#39;\u0026#39;\u0026#39; if distri_config.split_idx() == 0: # rank 0 concat_x = torch.cat([x, self.buffer_list[distri_config.split_idx() + 1][0]], dim=2) padded_x = F.pad(concat_x, [0, 0, boundary_size, 0], mode=\u0026#34;constant\u0026#34;) elif distri_config.split_idx() == distri_config.n_device_per_batch - 1: # rank n-1 concat_x = torch.cat([self.buffer_list[distri_config.split_idx() - 1][1], x], dim=2) padded_x = F.pad(concat_x, [0, 0, 0, boundary_size], mode=\u0026#34;constant\u0026#34;) else: # other ranks padded_x = torch.cat( [ self.buffer_list[distri_config.split_idx() - 1][1], x, self.buffer_list[distri_config.split_idx() + 1][0], ], dim=2, ) return padded_x # 提取当前输入张量需要发送给其他设备的部分 boundary = torch.stack([x[:, :, :boundary_size, :], x[:, :, -boundary_size:, :]], dim=0) # 直接用上一步的 buffer 拼接 padded_x = create_padded_x() output = F.conv2d( padded_x, self.module.weight, self.module.bias, stride=self.module.stride[0], padding=(0, self.module.padding[1]), ) if distri_config.mode != \u0026#34;no_sync\u0026#34;: self.comm_manager.enqueue(self.idx, boundary) # 插入自己要发送的数据 self.counter += 1 return output DistriSelfAttentionPP DistriSelfAttentionPP 只负责计算自己 patch 的输出，需要完整的 KV，将 self attention 运算变成 cross-attention 计算。需要通信自己的 KV.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class DistriSelfAttentionPP(DistriAttentionPP): def __init__(self, module: Attention, distri_config: DistriConfig): super(DistriSelfAttentionPP, self).__init__(module, distri_config) def _forward(self, hidden_states: torch.FloatTensor, scale: float = 1.0): attn = self.module # 获取 Attention 模块 distri_config = self.distri_config residual = hidden_states # 残差连接 batch_size, sequence_length, _ = hidden_states.shape args = () if USE_PEFT_BACKEND else (scale,) query = attn.to_q(hidden_states, *args) # Q Projection encoder_hidden_states = hidden_states kv = self.to_kv(encoder_hidden_states) # KV Projection if self.buffer_list is None: # 如果缓冲区未创建 full_kv = torch.cat([kv for _ in range(distri_config.n_device_per_batch)], dim=1) new_buffer_list = [buffer for buffer in self.buffer_list] new_buffer_list[distri_config.split_idx()] = kv full_kv = torch.cat(new_buffer_list, dim=1) if distri_config.mode != \u0026#34;no_sync\u0026#34;: self.comm_manager.enqueue(self.idx, kv) # 将 full_kv 分割为 key 和 value key, value = torch.split(full_kv, full_kv.shape[-1] // 2, dim=-1) inner_dim = key.shape[-1] head_dim = inner_dim // attn.heads # multi-head attention query = query.view(batch_size, -1, attn.heads, head_dim).transpose(1, 2) key = key.view(batch_size, -1, attn.heads, head_dim).transpose(1, 2) value = value.view(batch_size, -1, attn.heads, head_dim).transpose(1, 2) hidden_states = F.scaled_dot_product_attention(query, key, value, dropout_p=0.0, is_causal=False) hidden_states = hidden_states.transpose(1, 2).reshape(batch_size, -1, attn.heads * head_dim) hidden_states = hidden_states.to(query.dtype) hidden_states = attn.to_out[0](hidden_states, *args) # O Projection hidden_states = attn.to_out[1](hidden_states) # Dropout if attn.residual_connection: hidden_states = hidden_states + residual hidden_states = hidden_states / attn.rescale_output_factor return hidden_states DistriGroupNorm DistriGroupNorm 根据上一步全特征图的以及当前步 patch 的均值和二阶矩近似当前步的全特征图均值和方差。需要通信 patch 均值和二阶矩。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 class DistriGroupNorm(BaseModule): def __init__(self, module: nn.GroupNorm, distri_config: DistriConfig): assert isinstance(module, nn.GroupNorm) super(DistriGroupNorm, self).__init__(module, distri_config) def forward(self, x: torch.Tensor) -\u0026gt; torch.Tensor: module = self.module distri_config = self.distri_config if self.comm_manager is not None and self.comm_manager.handles is not None and self.idx is not None: if self.comm_manager.handles[self.idx] is not None: self.comm_manager.handles[self.idx].wait() self.comm_manager.handles[self.idx] = None assert x.ndim == 4 n, c, h, w = x.shape num_groups = module.num_groups group_size = c // num_groups if self.buffer_list is None: if self.comm_manager.buffer_list is None: n, c, h, w = x.shape self.idx = self.comm_manager.register_tensor( # register for E[x], E[x^2] shape=[2, n, num_groups, 1, 1, 1], torch_dtype=x.dtype, layer_type=\u0026#34;gn\u0026#34; ) else: self.buffer_list = self.comm_manager.get_buffer_list(self.idx) x = x.view([n, num_groups, group_size, h, w]) # 计算 patch 均值和二阶矩 x_mean = x.mean(dim=[2, 3, 4], keepdim=True) # [1, num_groups, 1, 1, 1] x2_mean = (x**2).mean(dim=[2, 3, 4], keepdim=True) # [1, num_groups, 1, 1, 1] slice_mean = torch.stack([x_mean, x2_mean], dim=0) if self.buffer_list is None: full_mean = slice_mean else: # Equation 2 in the paper E[A_t] = E[A_(t+1)] + (E[A^i_t] - E[A^i_(t+1)]), same for E[A^2_t] correction = slice_mean - self.buffer_list[distri_config.split_idx()] full_mean = sum(self.buffer_list) / distri_config.n_device_per_batch + correction self.comm_manager.enqueue(self.idx, slice_mean) full_x_mean, full_x2_mean = full_mean[0], full_mean[1] var = full_x2_mean - full_x_mean**2 # 计算方差 slice_x_mean, slice_x2_mean = slice_mean[0], slice_mean[1] slice_var = slice_x2_mean - slice_x_mean**2 var = torch.where(var \u0026lt; 0, slice_var, var) # Correct negative variance num_elements = group_size * h * w var = var * (num_elements / (num_elements - 1)) std = (var + module.eps).sqrt() output = (x - full_x_mean) / std output = output.view([n, c, h, w]) # scale and shift if module.affine: output = output * module.weight.view([1, -1, 1, 1]) output = output + module.bias.view([1, -1, 1, 1]) self.counter += 1 return output ","permalink":"http://localhost:1313/blogs/distrifusion/","summary":"Paper reading about DistriFusion.","title":"DistriFusion"},{"content":"DeepSpeed-Ulysses Core Design System Design 原理如下图所示，假设设备数 P 等于多头注意力的头数 hc. 输入 x[N,d] 被切分到每个设备上 [N/p, d]，之后进行 QKV Projection，随后将 K 进行转置后进行一次 all-to-all 通信，这样每个设备上就有 Q[N, d/P], K[d/P, N], V[N, d/P], 再执行标准的 attention 计算 $Outputcontext=Softmax((QK^T)/\\sqrt{d})V$. 再进行一次 all-to-all 通信使得每个设备上有 [N, d/P] 结果再进行后续操作。\nDeepSpeed Sequence Parallelism (DeepSpeed-Ulysses) Design\nCommunication Analysis 在采用节点内 NVSwitch 互连和节点间 fat tree IB 拓扑的集群中，对于总消息大小为 M 的 all-to-all 通信，每条链路通过 P 个 gpu 传输的通信量为 M/P。对于隐藏层大小为 h、序列长度为 N、并行度为 P 的 transform 模型，DS-Sequence 对注意力计算前总消息大小为 3Nh 的 QKV Projection 执行 all-to-all 通信，对每个 transformer block 的输出执行 all-to-all 通信，大小为 Nh. 因此，DeepSpeed 序列下每条链路的总通信量为 4Nh/P (或复杂度为 O(N/P)). 也就是说当 N 和 P 按比例增加时，该通信量是恒定的。\nComparison of Other Works Comparison of DS-Ulysses to Other Sequence Parallelism Methods\nColAI-SP 发明了 Ring-Attention，Q 存储在本地 而 KV 以环形方式传输以计算全局注意力，导致通信复杂度与消息大小 M 呈线性关系。 Megatron-LM 序列并行方法与 Megatron 张量并行紧密集成。Megatron-LM 沿着序列维度划分序列，并应用 all gather 和 reduce scatter 来聚合 QKV 注意力计算的投影。并行通信量随消息大小 M 线性增加。 DeepSpeed-Ulysses 通过增加与序列长度成比例的设备数来保持通信量恒定。同时将 Zero3 扩展到数据并行和序列并行的组合。ZeRO 跨序列和数据并行组划分模型状态，并在需要时使用 allgather 收集每个 rank 的部分。 General and Attention Agnostic Solution DeepSpeed-Ulysses 的优势在于一种以注意力为中心的序列并行设计。在注意力计算是 N/P 划分的序列并行之前，注意力计算是头并行，每个头的注意力都是完整的，但只有较少的头，因此注意力计算可以被任何类型的注意机制所取代，例如 dense attention 和各种形式的 sparse attention.\n","permalink":"http://localhost:1313/blogs/deepspeedulysses/","summary":"Paper reading of Deepseed Ulysses.","title":"DeepSpeedUlysses"},{"content":"Abstract 本文展示了如何将张量、流水线和数据并行性组合起来以扩展到数千个gpu。我们提出了一种新的交错流水线调度，可以在内存占用与现有方法相当的同时将吞吐量提高 10%.\nTrend of Sizes of SOTA NLP Models\nIntroduction 张量（层内）模型并行对于较大的模型会崩溃。较大的模型在多个多 GPU 服务器上进行切分会导致两个问题：\n张量并行所需的 all-reduce 通信需要通过服务器间链路进行，这比多 GPU 服务器内可用的高带宽 NVLink 要慢 高度模型并行会产生小规模的矩阵乘法（GEMM），从而可能降低 GPU 利用率。 流水线模型并行化是指模型的各层在多个 GPU 上进行条带化处理。batch 被拆分成更小的 microbatch ，并在这些 microbatch 之间流水线执行。无论进度如何，为了保持严格的优化器语义，优化器步骤需要跨设备同步，从而在每个 batch 结束时进行流水线刷新 (pipeline flush)，允许 microbatch 完成执行 (不再注入新的 microbatch). microbatch 数量与流水线级数的比例越大，流水线刷新所花费的时间就越少。\n我们展示了如何结合流水线、张量和数据并行性，我们称之为PTD-P. 配置分布式训练的指导原则如下:\n不同形式的并行性以不同的方式相互作用: 并行策略对通信量、执行内核的计算效率以及由于流水线冲洗 (流水线气泡) 而花费的等待计算的空闲时间有影响。 用于流水线并行性的调度对通信量、流水线气泡大小和用于存储激活的内存有影响。 超参数 (如 microbatch 大小) 的值会影响内存占用、在工作线程上执行的内核的算术效率和流水线气泡大小。 随着规模扩展分布式训练是通信密集型的。使用较慢的节点间互连或更密集的通信分区会影响扩展性能。 Model Parallelism 本节中将讨论有助于不适合单个 GPU 内存的大模型的并行训练方法。我们将流水线模型并行和张量模型并行 (如图 2 所示的组合) 与数据并行结合起来，简称为PTD-P.\nCombination of Tensor and Pipeline Model Parallelism (MP)\nData Parallelism 使用数据并行时，每个 worker 都有一个完整模型的副本，输入数据集被分片， worker 定期汇总他们的梯度，以确保所有 worker 看到一个一致的权重版本。\nPipeline Parallelism 通过流水线并行，模型的层被分散到多个设备上。一个 batch 被分成更小的 microbatch. 在 microbatch 之间进行流水线执行。为了准确地保持优化器语义，我们引入了定期的流水线刷新，以便在设备之间同步优化器步骤。在每个 batch 处理的开始和结束时，设备都是空闲的。我们称这段空闲时间为流水线气泡 (pipeline bubble).\nDefault Schedule GPipe 提出了一个调度方案，如图 3 所示 (假设反向传播的时间是前向传播的两倍，管道调度的效率并不取决于这个因素)，首先执行一个 batch 中所有 microbatch 的前向传播，然后执行所有 microbatch 的反向传播。设 GPipe 流水线气泡的大小为 t_pb，microbatch 的数量为 m，流水线阶段数量 (用于流水线并行的设备数量) 表示为 p，每次迭代的理想时间表示为 t_id (假设理想缩放)，执行单个 microbatch 的向前和反向传播的时间表示为 t_f 和 t_b. 在该调度中，流水线气泡由批处理开始时的 p−1 个前向传播和 p−1 个反向传播组成。则流水线气泡总时间为 t_pb=(p−1)·(t_f+t_b). batch 的理想执行时间为 t_id=m·(t_f+t_b)。因此，在流水线气泡中花费与理想计算时间的比例为:\n流水线气泡占比 = t_pb / t_id = (p−1) / m.\n为了使流水线气泡占比小，我们需要 m 远大于 p. 然而 m 非常大时这种方法的内存占用很高，因为它需要在训练一次迭代时间内为所有 m 个 microbatch 保存中间激活.\nGPipe Pipeline Schedule\nSchedule with Interleaved Stages 为了缩小流水线气泡的大小，每个设备都可以对多个层的子集（称为模型块）进行计算，流水线中的每个设备都被分配了多个流水线阶段（与之前相比，每个流水线阶段的计算量更少），而不是单个连续的层。\nAn Example 例如，如果每个设备之前被分配 4 层 (即设备 1 有 1 - 4 层，设备 2 有 5 - 8层\u0026hellip;)，我们可以让每个设备为两个模型块执行计算 (每个模型块被分配 2 层)，即设备 1 有 1、2、9、10 层; 设备 2 具有第3、4、11、12层\u0026hellip; 和上一小节一样，我们可以执行完所有 microbatch 的前向传播然后执行所有反向传播 (all-forward, all-backward)，但这将占用大量内存 (与 m 成正比). 因此如图 4 所示，我们设计了一个适配于之前的内存高效 1F1B 的交错调度。它要求 microbatch 数量是流水线并行度 (流水线中的设备数量) 的整数倍。\n如果每个设备都有 v 个阶段 (模型块)，那么每个阶段 microbatch 的前向和反向传播的时间分别为 t_f/v 和 t_b/v. 流水线气泡时间因此减少到 𝑡^int_pb=(p−1)·(tf+tb)/v，\n流水线气泡占比为 𝑡^int_pb / t_id = (p−1) / (m·v).\n这意味着该调度减少气泡时间到原先的 1/v，但该计划需要额外的通信，因此通信量也为原来的 v 倍。\nDefault and Interleaved 1F1B Pipeline Schedules\nTensor Model Parallelism 详情见 Megatron-LM.\nBlocks of Transformer Model Partitioned with Tensor Model Parallelsim\nPerformance Analysis of Parallelization Configurations 首先定义下符号含义\n(p,t,d): 并行化维度。p 表示流水线模型并行大小，t 表示张量模型并行大小，d 表示数据并行大小。 n: GPU 数量，要求 ptd=n. B: 全局批大小 (作为输入提供) b: microbatch 大小。 m = B/(db): 一个 batch 中每个流水线中的 microbatch 的数量。 Tensor and Pipeline Model Parallelism 如前所述，使用带有周期性冲洗的流水线并行会产生大小为 (p−1)/m 的流水线气泡. 固定 d=1，则 tp=n，气泡大小可以用 t 表示为\n(p−1)/m=(n/t-1)/m.\nGPU 之间的通信量也受 p 和 t 大小的影响。流水线模型并行的特点是更便宜的点对点通信，每个 microbatch 的每对连续设备之间 (前向或后向传递) 需要执行的通信总量为 bsh. 张量模型并行则使用 all-reduce 通信，总大小为 bsh 的张量需要在每层的前向和后向传递中，在 t 个模型副本之间进行两次 all-reduce，因此每个 microbatch 每层每个设备的总通信量为 4bsh(t-1)/t. 每个设备通常有多个层，则每个设备上每个 microbatch 的张量并行通信总量为 l^stage4bsh(t-1)/t, 其中 l^stage 为流水线阶段的层数。\nTip\n启示 1: 当 t 大于单个节点中的 GPU 数量时，在较慢的节点间链路上执行张量模型并行的开销非常大。在考虑不同形式的模型并行时，使用 g-GPU 服务器时张量模型并行度一般为 g (all-reduce 通信量大，NVLink 带宽高)，然后可以使用流水线模型并行来扩展到跨服务器的更大模型 (P2P 通信量小，PCIe 带宽低).\nData and Model Parallelism 管道模型并行性。设 t=1，每个管道的 microbatches 数量 m=𝐵/(db)=b\u0026rsquo;/d, b\u0026rsquo;:=B/b. 设 GPU 总数为 n ，流水线阶段数为 p=n/d，气泡大小为\n(p−1)/m=(n/d-1)/(b\u0026rsquo;/d)=(n-d)/b'\n管道气泡随着 d 变大而变小。如果数据并行所需的 all-reduce 通信不会随着 d 的变大而急剧增加，那么总体吞吐量将会增加，因为基于环的实现的通信时间随着 d 的变化为 (d−1)/d=1−1/d.同样对于给定的并行配置，随着批量大小的增加，b\u0026rsquo; = B/b 增加，因此吞吐量上升。同时数据并行所需的 all-reduce 通信频率也下降，进一步提高了吞吐量。\nFraction of Time Spent Idling due to Pipeline Flush\n在张量模型并行下，每个 microbatch 都需要进行 all-reduce 通信，这在多 GPU 服务器上开销很大；而数据并行只需要在每个 batch 中执行一次的 all-reduce通信。此外，使用张量模型并行，每个设备计算每层的一部分，因此对于不够大的层， GPU 可能无法以峰值效率执行这些子矩阵计算。\nTip\n启示 2：在使用数据和模型并行时，应使用 M=tp 的总模型并行大小，以便模型参数和中间数据满足 GPU 内存限制；数据并行可用于将训练扩展到更多 GPU.\nMicrobatch Size 给定函数 t_f(b) 和 t_b(b)，将 microbatch 大小映射为单个 microbatch 的前向和反向计算时间，计算一个 batch 所花费的总时间 (忽略通信成本) 为\n(b\u0026rsquo;/b+p-1)·(t_f(b)+t_b(b)).\nmicrobatch 大小因此既影响运算的算术强度，也影响管道气泡大小。\nPer-GPU Throughput versus Microbatch Size for a GPT Model\nBehavior of Throughput for the same GPT Model\nTip\n启示 3：最佳 microbatch 大小 b 取决于模型的吞吐量和内存占用特征，以及流水线深度 p、数据并行大小 d 和批量大小 B.\nActivation Recomputation 激活重计算通过在向后传递之前运行第二次正向传播 (并且仅存储给定流水线阶段的输入激活)，来权衡所执行的计算操作数量的增加对额外内存占用的影响。设 A^input 为一层的输入激活的大小，A^intermediate 为每层的中间激活的大小，一个模型阶段有 l 层， 激活保存点的数量为 c，那么总内存占用为 c·A^input + l/c·A^intermediate. 因此取 c = \\sqrt(l·A^input·A^intermediate) 时内存占用最小。\nImplementation Communication Optimizations 使用流水线并行时，我们希望在正向和反向并行发送和接收张量。每台 DGX A100 都配备了 8 个 InfiniBand（IB）网卡。然而发送和接收都是点对点的，只发生在两台服务器上的一对 GPU 之间，因此很难充分利用所有网卡。对于流水线内的单次通信，每个 transformer 层的输出都会在张量并行的设备中复制。为了减少这种冗余，我们可以在发送端将张量分割成大小相等的块，然后使用每个 rank 自己的 InfiniBand 发送. 在接收端通过比 InfiniBand 互连快得多的 NVLink 执行 all-gather，重新组装整个张量。通过 scatter-gather 通信优化，将每对连续流水线阶段之间需要执行的通信总量减少为 bsh/t.\nComputation Optimizations 将数据布局从 (b,s,a,h) 更改为 (s,b,a,h). 其次，使用 PyTorch JIT 为一系列元素操作 (bias+GeLU 和 bias+dropout+add) 生成融合算子。\nEvaluation 在 Selene 超级计算机上以混合精度运行。每个集群节点有\n8 个 NVIDIA 80GB A100 GPU，通过 NVLink 和 NVSwitch 互连。 8 个 NVIDIA Mellanox 200Gbps HDR Infiniband HCA 用于应用程序通信 额外有 2 个 HCA 用于专用存储。 节点以三级 (leaf, spine, core) 胖树拓扑结构连接，一共有 850个交换机。集群使用 all-NVME 共享并行文件系统进行高性能数据访问和存储。16 位精度的 A100 GPU 的峰值设备吞吐量为 312 teraFLOP/s. QKV 变换的线性层权重参数量均为 h^2, attention 后的线性层权重参数量为 h^2, 两层前馈网络每个线性层的权重参数量为 4h^2，因此每一个 transformer block 的所有线性层的参数量为 12h^2. 词嵌入的参数量为 Vh，位置编码的参数量为 sh.\n一个 $A_{m\\times k}\\times X_{k\\times n}$ 矩阵乘法需要 2mkn FLOPs( 2 是因为乘法和加法). transformer block 包含一个注意力块和一个两层前馈网络组成。对于注意力块，主要的 FLOP 来源于 QKV 转换 (6Bsh^2 次操作)、注意力矩阵计算 (2Bhs^2 次操作)、注意力乘 Value (2Bhs^2 次操作) 和 attention 后的线性层 (2Bsh^2 次操作). 前馈网络将隐藏维度放大到 4h，然后再减小到 1h，需要 16Bsh^2 次操作。将这些加在一起，每个 transformer block 一共有 24Bsh^2+4Bhs^2 FLOPs. 反向传播需要两倍的计算量，因为需要计算关于输入张量和权重张量的梯度。此外，使用激活重计算需要在反向传播之前进行额外的正向传播。因此，每一层的总计算量为 FLOPs 为 4*(24Bsh^2+4Bhs^2).\n计算量另一方面来源于 head 的 logit 层，它将维度的特征 h 转换为词汇表维度的特征 V. 该操作所需的计算量为正向传播的 2BshV 和反向传播的 4BshV，总共 6BshV FLOPs.\nResult Pipeline-parallel 并行度增加降低 GPU 的计算效率，因为 bubble 变多了。 Batchsize 的增大可以减少 pipeline-parallel 并行度大小带来的影响。\nBatch size增加有助于提高GPU的计算效率。 Interleaved schedules 能显著提高GPU的计算效率。\n不使用激活重计算的话单位时间内的训练的吞吐是要高于使用重计算的，因为重计算在反向传播中引入额外的计算量。 由于重计算可以节省显存，batchsize 可以相应提高不少。由于 batchsize 的提高，训练吞吐量也得到了提高，从而达到了优化的效果。\n","permalink":"http://localhost:1313/blogs/efficient-large-scale-language-model-training-on-gpu-clusters/","summary":"Paper reading about Efficient Large-Scale Language Model Training on GPU Clusters.","title":"Efficient Large-Scale Language Model Training on GPU"},{"content":"Abstract 我们的方法不需要新的编译器或更改库，与流水线模型并行 (pipeline model parallelism) 正交互补，并且可以通过在原生 PyTorch 中插入一些通信操作来实现。为了阐述我们的方法，使用 512 个 GPU 将基于 transformer 的模型扩展到 83 亿个参数。与可保持 39 TeraFLOPs (峰值 FLOPs 的 30%) 的强大单 GPU 基准相比，我们在整个应用中保持了 15.1 PetaFLOPs，扩展效率高达 76%.\nIntroduction 随着 LLM 变得越来越大，它们会超出现代处理器的内存限制，并需要如激活检查点 (activation checkpoint) 等额外的内存管理技术。广泛使用的优化算法 (如ADAM) 需要每个参数额外的内存来存储动量和其他优化器状态。这减少了可以有效训练的模型的大小。模型并行性的几种方法克服了这一限制，它们对模型进行分区，使权重及其相关的优化器状态不需要并发地驻留在处理器上。\nActivation Checkpoint 在深度学习模型的训练过程中，前向传播会计算并存储每一层的激活值，这些激活值在后向传播时被用来计算梯度。然而，对于深度很大的模型因为需要存储大量的激活值，可能会导致内存溢出。激活检查点技术通过在前向传播过程中只存储一部分的激活值来解决内存占用问题，如果在后向传播过程中需要没有存储的激活值就进行重新计算。 为了证明方法的可扩展性，通过在单个英伟达 V100 32GB GPU 上训练一个包含 12 亿个参数的模型来建立基准。训练该模型可维持 39 TeraFLOPs 的算力，是在 DGX-2H 服务器中配置的单个 GPU 理论峰值 FLOPS 的 30%. 在 512 个 GPU 上将模型扩展到 83 亿个参数，并采用 8 路模型并行，在整个应用中实现了高达 15.1 PetaFLOPs 的持续运行速度。与单 GPU 情况相比，扩展效率提高了 76%. 下图展示了更详细的扩展结果。\nModel (blue) and model\u0026#43;data (green) parallel FLOPS\nBackground \u0026amp; Chanllenges Neural Language Model Pretraining 早期的预训练和传递语言神经表示的例子表明，与从头开始学习的词嵌入表相比，预训练的词嵌入表改善了下游任务的结果。目前的技术水平已经从传输单词嵌入表发展到传输整个数十亿参数的语言模型。这种方法的进步要求硬件、系统技术和框架能够高效地大规模运行。\nTransformer Language Models and Multi-Head Attention 下图展示了使用的 transformer 模型的示意图。最近利用 transformer 进行语言建模的工作，如 BERT 和 GPT-2 根据需要分别只使用编码器和解码器。\nGPT-2 和 BERT 都对多头注意和 FFN 的输入使用 GeLU 非线性和层归一化，而原始 transformer 使用 ReLU 非线性并对输出进行层归一化。\nTransformer Architecture\nData and Model Parallelism in Deep Learning 将深度神经网络训练扩展到多硬件加速器有两种范式:\nData Parallelism (DP): 将 batch 拆分到多个 worker Model Parallelism (MP): 将模型的内存使用和计算分布在多个 worker 中。 Pipeline Parallelism (PP): 一组操作在一个设备上执行，然后将输出传递到流水线中的下一个设备执行另一组操作。 Distributed Tensor Computation: 将张量运算分割到多个设备上，以加速计算或增加模型大小。 然而，这些技术有一个基本的限制: 模型权重必须能加载进 worker. 我们的方法是利用模型并行性在多个加速器之间分割模型。\nModel Parallel Transformers 我们利用 transformer 网络的结构 (self-attention 和 FFN (2*MLP) 组成)，通过添加一些同步原语，创建了一个简单的并行计算模型。下面分别阐述对 FFN 和 self-attention 的并行化。\nFFN 第一个 MLP 由一个 GEMM，后跟一个 GeLU 非线性组成:\n$$\rY=\\text{GeLU}(XA)\r$$并行化 GEMM 的一种选择是将权重矩阵 A 沿着行切分，并将 X 沿着其列切分:\n$$\rX=[X_1,X_2], A=\\begin{bmatrix}A_1\\\\A_2\\end{bmatrix}\r$$\rRow Split of Weight\n可以得出 $Y = X_1A_1+X_2A_2$. 由于 GeLU 是非线性函数，因此这种方法需要在 GeLU 函数之前进行同步。\n另一个选择是沿着列切分 $A=\\begin{bmatrix}A_1,A_2\\end{bmatrix}$. 这样可以让 GeLU 独立地应用于每个 GEMM 的输出\n$[Y_1, Y_2]=\\begin{bmatrix}\\text{GeLU}(XA_1),\\text{GeLU}(XA_2)\\end{bmatrix}$.\nColumn Split of Weight\n这种切分方式的优点是不需要进行同步操作。\n如下图所示，以列并行方式切分第一个 GEMM，并沿着其行切分第二个GEMM。然后，在将输出传递给 dropout 层之前，第二个GEMM 的输出在 GPU 之间进行 all-reduce 操作。这种方法将 FFN 中的两个 GEMM 拆分到多个 GPU 上执行，并且只需要在正向传播 (g 操作符) 和反向传播 (f 操作符) 中分别执行一次 all-reduce 操作。\nParallelism of MLP\n如下图所示，利用多头注意力操作中本身存在的并行性，以列并行的方式划分与 QKV 相关的 GEMM，以便每个注意力头对应的矩阵乘法在一个 GPU 上独立完成。输出线性层的 GEMM 沿着其行并行化，并直接获取并行 attention 的输出。\nParallelism of Self-Attention\n如下图所示，这使能够仅在正向传播和反向传播中分别中使用两个 all-reduce 操作执行 transformer 中所有的 GEMM.\nParallelism of Transformer Layer\n基于 transformer 的语言模型的输出嵌入维度为隐藏层大小 (H) 乘以词汇表大小 (v). 我们沿着词汇表维度 $E = \\begin{bmatrix}E_1,E_2\\end{bmatrix}$ 并行化权重矩阵。每一块现在只包含嵌入表的一部分，输入嵌入后需要一个 all-reduce (g 算子).\n对于输出嵌入，一种方法是通过并行 $\\mathrm{GEMM} [Y_{1},Y_{2}]=[XE_{1},XE_{2}]$ 来获得 logits，并对结果 all-gather 后送入交叉熵损失函数。在这种情况下，all-gather 通信量为 bsv 个元素 (b 是批处理大小，s 是序列长度). 为了减小通信规模，我们将输出与交叉熵损失融合，这样通信量降为 bs.\n我们在每个 GPU 上维护层归一化参数的副本，并在将这些张量作为输入送到下一个模型并行区域之前，在本地输出上进行 dropout 和残差连接。为了优化模型，我们允许每个模型并行 worker 优化自己的一组参数。因为所有的值要么是本地的，要么是在 GPU上 重复的，所以在这个公式中不需要通信更新的参数值。\n","permalink":"http://localhost:1313/blogs/megatronlm/","summary":"Paper reading about Megatron-LM","title":"Megatron-LM"},{"content":"Background 如今 LLM 的 token 长度显著增加，从 GPT-3.5 的 16k 到 Claude 2 的 200k，现在 Gemini 1.5 Pro 甚至有 1M 的 token 长度。如此长的 token 在计算 attention 时对显存的需求非常大。Ring Attention 便是为了并行计算 attention 而提出的一种方法1。\nRing Attention 和 Flash Attention 可以同时使用。\nAttention and Memory 要计算 attention， 我们需要三个大小为 (s, d) 的矩阵：Q (query)、K (key)、V (value)，其中 s 为序列长度，d 为模型维度。attention 的计算公式为\n$$\rAttention(Q, K, V) = softmax(QK^T / \\sqrt{d})V\r$$忽略 sqrt(d) 项，我们记 Score Matrix 为 S = QK^T / \\sqrt{d}，然后对 S 进行 softmax 归一化，得到 Attention Matrix. 可以发现它们占用显存大小是 O(s*s) 数量级。即使使用 Flash Attention，显存占用量也是 O(s) 数量级。\nAttention Compute Process\n我们希望如果在 N 个设备上并行计算 attention，每个设备的显存占用量为整个的 1/N, 因此就需要对 Q、K、V 的 sequence 长度进行切分。但是如果得到的最终 attention 矩阵需要在设备间进行集合通信组装每个的计算结果，通信量也和 sequence 长度成正比。Ring Attention 提出了一个巧妙的解决方案：在设备之间进行轮转，并行化所有计算而且完全隐藏通信的开销。\nWe will rotate between devices to parallelize all computation and hide the communication overhead completely.\nSplitting the Query 假设我们有 N 个设备，我们将 Q 沿着 sequence 维度切分为 N 份，每份大小为 (s/N, d). 由于计算 Score 和 Attention 需要完整的 K 和 V，这样它们也被切分成 N 份，每份大小为 (s/N, d). 计算示意图如下。\nSplit Q\nSplitting the Key and Value 对 K 和 V 的切分并不能像 Q 那样直接。因为 softmax 的计算公式如下，要得到分母的值意味着我们需要对每一行进行计算。\n$$\rsoftmax(s_i) = \\frac{\\exp(s_i)}{\\sum_{j=i}^d{\\exp(s_j)}}\r$$如果我们能对 K 和 V 进行切分并正确计算 softmax，那么计算过程可以由下图所示的那样完成 (忽略 softmax). 外循环遍历 Q 的所有分块，内循环遍历 K 和 V 的所有分块，一次计算一部分的 attention. Ring Attention 示意图如下所示，顾名思义所有设备组成一个环状，每个设备存储 Q 的一部分，每次迭代过程会传递 K 和 V 到下一个设备，最终每个设备将得到计算自己 Q 部分的 attention 矩阵所需要的 K 和 V. 每个设备被分配 Q 的一部分 (即一个外层循环索引)，并迭代计算每个 K 和 V 的分块 (内循环)。每个设备只需要跟踪形状为 (s/N, s/N) 的累积和 A_j。\nAttention Parallel Computation\nOnline Softmax 在内循环的每次迭代中我们可以更新部分和为 $l^j = l^{j-1} + \\sum_{k_t\\in K_j}{\\exp(Q_ik_t^T)}$. 在内循环结束后我们就可以获得每一行的指数和。归一化和与 V 的相乘顺序不会影响结果，我们可以先累加总和，并在所有其他计算完成后再执行实际的归一化操作。\n因此，设备 i 除了计算当前的累计和 $A^j = A^{j-1} + \\exp(Q_i K_j^T) V_j$ 外，还需要在内循环每次迭代中更新部分和 $l^j \\in \\mathbb{R}^{B_q}$ ，其中 $B_q$ 为 Q 的分块大小。\nSafe softmax 由于指数运算经常容易出现溢出，我们通常减去 max(s_i) 后进行指数运算，公式如下，这样并不会影响结果。\n$$\r\\mathrm{softmax}(s_{1:N})=\\frac{\\exp(s_{1:N})}{\\sum_i\\exp(s_i)}\\cdot\\frac{\\exp(-s_{max})}{\\exp(-s_{max})}=\\frac{\\exp(s_{1:N}-s_{max})}{\\sum_i\\exp(s_i-s_{max})}\r$$所以我们在内循环每次迭代中需要先更新当前的最大值 $m^{j+1}=\\max(m^j,\\max(Q_iK_{j+1}^T))$，然后更新之前迭代的计算结果 A_j 和 部分和 l_j. 最后再计算本次迭代的结果。\n$$\rA^{j+1}=A^j\\cdot\\exp(m^j-m^{j+1})+\\exp(Q_iK_{j+1}^T-m^{j+1})\\cdot V_j\r$$更新部分和\n$$\rl^{j+1}=l^j\\cdot\\exp(m^j-m^{j+1})+\\exp(Q_iK_{j+1}^T-m^{j+1})\r$$Putting it Together Ring Attention 计算步骤如下：\n沿着 Q 的 sequence 长度拆分为一个独立的外循环。 应用 Online Safe Softmax，以便沿着 K 和 V 的sequence 长度拆分，从而在内层循环中累积计算注意力。 这种并行化的方式是通过将每个设备分配一个 Q_i 块来实现的。因此，我们需要将 Q 拆分为 N 个相等的部分 (B_Q=N). 每个设备将分别计算它的输出块 $\\text{Output}(Qi,K,V)= \\text{softmax}(Q_i K^T)V ，通过在 K 和 V 块上执行内循环来迭代计算。难点挑战在于设备无法一次存储完整的 K 和 V 矩阵。\n如果我们有 4 个 GPU，那么我们将把每个设备的 Q 按序列维度分成 4 个块，K 和 V 被分割成 B_K=B_Q=N 个块，并对设备进行初始化，使每个设备都持有一个 Qi 块、 一个 Kj 块和 一个 Vj 块。为简单起见，我们可以假设设备 i 在开始时持有 Qi, Ki 和 Vj 块。在设备计算完与其当前 vj kj 相对应的一个内循环步骤后，每个设备都需要接收下一个 Key 和 Value 块，以继续内循环。 我们将 N 个设备围成一个环，其中设备 i 可以向设备 i+1 以此类推，如图所示：\nKV-overlap\n如果在设备 i 上计算内循环的一个步骤 Qi,Vj,Kj 的这段时间内，设备 i 还能向设备 i+1 发送其当前 Kj Vj，并同时从设备 i-1 接收 V_j-1,K_j-1，那么只要发送和接收密钥和值块的时间低于计算时间，那么发送和接收 Key 和 Value 块的延迟就会隐藏在执行实际计算时间之内。一个例子如下图所示。\nKV-rotate\nMemory and Arithmetic Complexity 以深度学习中常用的 bfloat16 数据类型为例。GPU 或 TPU 等并行处理加速器通常以 FLOP:=F 来衡量，即设备理论上每秒可执行的浮点运算次数。我们假设硬件被完全利用。此外，我们设不同设备之间的连接带宽为:=B (Bytes/sec).\n内存复杂度: 为了同时进行接收发送和计算，我们需要有用于接收新 KV 块的寄存器器。存储当前 KV 值块需要 2dc 浮点数或 4dc 字节。用于接收新的 KV 块的内存大小也是 2dc 浮点数或 4dc 字节。假设计算本身不需要更多内存 (利用 Flash Attention 或 Blockwise Attention)，计算当前步骤的输出需要 dc 个浮点数或 2dc 字节。此外，每个设备还需要存储其 Qi 块，这也需要 dc 个浮点数或 2dc 字节。总共需要 6dc 个浮点或 12dc 字节。\nNote\nRing Attention 与 Flash Attention 是正交的，可以一起使用 (Flash Attention 实际上用于 Ring Attention 的内循环). Flash Attention 目标是不将整个 Score Matrix 加载到全局内存中，从而在序列长度上获得线性内存复杂度。Ring Attention 将 原始注意力方法和 Flash Attention 的内存复杂度至少降低了 N 倍，使用 N 个设备的内存复杂度至少降低 N 倍，因为它将所有矩阵都拆分为至少 N 个或更多部分 (将 QKV 分别分成 N 份，并将 Score Matrix 分成 N^2 分). 无论内存复杂度是由 QKV，还是由 Score Matrix 主导，Ring Attention 都能将内存成本降低至少 N 倍。\n通信开销: 在内循环每一步中，每个设备需要通过带宽为 B 的信道向下一个设备发送 2⋅c_Q⋅d 浮点数。每个 bf16 大小为 2字节，因此，所需的时间约为 4⋅c⋅d/B.\n运算强度： 一个内循环步骤，计算局部注意力需要 2⋅d⋅c^2 次浮点计算，计算 softmax，归一化向量和最大值向量需要 2⋅c⋅d 次浮点计算，计算局部注意力与 Vj 块的乘积需 2⋅d⋅c^2 次浮点计算。因此，总计算所需时间≈4⋅d⋅c^2/F.\n为了重叠通信和计算 (隐藏通信开销)，我们需要 KV 块的传输时间小于等于计算本地 QKV 所需的时间：\n$$\r4\\cdot c\\cdot d/B\\leq4\\cdot d\\cdot c^2/F\\iff B\\geq F/c\\iff s/N\\geq F/B $$Futher Optimization Ring Attention 的一个应用是用于因果 Transformal 模型时，加上三角形掩码用于注意力计算。这意味着有些 GPU 不需要对整个序列进行计算，导致它们大部分时间处于闲置状态。作为 Ring Attention 的扩展，Stripe Attention 解决了这一问题，并提供了一种分配计算更均匀的方案，从而使 Ring Attention 的计算速度更快。\n除了 Ring Attention 和 Flash Attention 等使标准 Transformer 架构能有更长的上下文长度的技术外，人们还尝试使用 Mamba 等具有线性注意力的状态空间模型（SSM）等模型架构。\nReferences https://coconut-mode.com/posts/ring-attention/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/blogs/ringattention/","summary":"This is a brief introduction to the Ring Attention Principle.","title":"Ring Attention Principle"},{"content":"15 Graph Traversal 图是一种表示实体之间关系的数据结构。所涉及的实体表示为顶点，关系表示为边。图的遍历是指从一个顶点出发，依次访问图中所有与之相邻的顶点，直到所有顶点都被访问过为止。\n15.1 Background 下图展示了一个有向的简单图的例子。我们为每个顶点分配一个唯一的数字，称为顶点编号 (vertex id).\nA Simple Graph Example with 9 Vertices and 15 Directional Edges\n图的直观表示是邻接矩阵 (adjacency matrix). 如果存在一条从源顶点 i 到目的顶点 j 的边，则邻接矩阵元素 a[i][j] 的值为 1，否则为 0. 下图展示了对应的邻接矩阵。\nAdjacent Matrix Representation of the Example Graph\n稀疏连接的图可以用稀疏矩阵表示，下图展示了用三种不同存储格式的邻接矩阵: CSR, CSC 和 COO. 我们将行下标和指针数组分别称为 src 和 srcPtrs 数组，列下标和指针数组分别称为 dst 和 dstPtrs 数组。在图的 CSR 表示中，每个源顶点指针(srcPtrs) 给出顶点出边的起始位置。在图的 CSC 表示中，每个目的顶点指针 (dstPtrs) 给出顶点入边的起始位置。在图的 COO 表示中，src 和 dst 数组分别存储源顶点和目的顶点的编号。\nThree Sparse Matrix Representations of the Adjacency Matrix\n15.2 Breadth-first Search (BFS) BFS 通常用于找到从图的一个顶点到另一个顶点所需遍历的最短边数。一种方法是，给定一个被称为根的顶点，用从根到某个顶点所需要遍历的最小边数来标记每个顶点。\n下图(A)展示示了以顶点 0 为根的 BFS 结果。如果另一个顶点作为根，BFS 的结果将完全不同。下图(B)是为以顶点 2 为根的 BFS 的结果。可以将 BFS 的标记操作看作是构建一个搜索根节点的 BFS 树。树由所有标记的顶点和在搜索过程中从一个顶点到下一个顶点的遍历的边组成。\n(A and B) Two Examples of BFS Results for Two Different Root Vertices\n下图展示了 BFS 在计算机辅助设计 (Computer-Aided Design, CAD) 中的一个重要应用。迷宫路由 (maze routing) 将芯片表示为图。路由块是顶点。从顶点 i 到顶点 j 的边表示可以将一条线从块 i 延伸到块 j.\nMaze Routing in Integrated Circuits\n15.3 Vertex-centric Parallelization of BFS 以顶点为中心的并行实现将线程分配给顶点，并让每个线程对其顶点执行操作，这通常涉及迭代该顶点的邻居。当处理不同层级的迭代时，并行实现遵循相同的策略。为每一层调用一个单独的内核的原因是，我们需要等待前一层的所有顶点都被标记，然后再继续标记下一层的顶点。下面实现了一个 BFS 内核，根据前一个层级的顶点标签来标记属于该层级的所有顶点。该内核将每个线程分配给一个顶点，检查其顶点是否属于前一层。如果是，线程将遍历出边，将所有未访问的邻居标记为属于当前级别。这种以顶点为中心的实现通常被称为自顶向下或 push 实现，因为其需要访问给定源顶点的出边。多个线程可以将该标志赋值为 1，代码仍然可以正确执行。这个性质称为幂等性 (idempotence).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct CSRGRAPH { int numVertices; int* scrPtrs; // Strating outgoing edge index of each vertex int* dstList; // Destination vertex index of each edge }; __global__ void bfs_kernel_csr(CSRGRAPH graph, unsigned int* level, unsigned int* visited, unsigned int currLevel) { unsigned vertexId = blockIdx.x * blockDim.x + threadIdx.x; if (vertexId \u0026lt; graph.numVertices) { if (level[vertexId] == currLevel - 1) { for (int i = graph.scrPtrs[vertexId]; i \u0026lt; graph.scrPtrs[vertexId + 1]; i++) { unsigned int neighbor = graph.dstList[i]; if (level[neighbor] == 0xFFFFFFFF) { // unvisited neighbor level[neighbor] = currLevel; visited[neighbor] = 1; *visited = 1; // flag to indicate whether reached the end of the graph } } } } } 下图展示了该内核如何执行从第 1 层 (currLevel-1) 到第 2 层 (currLevel) 的遍历。\nExample of a Vertex-centric Push BFS Traversal from Level 1 to Level 2\n第二个以顶点为中心的并行实现将每个线程分配给一个顶点，迭代顶点的入边。每个线程首先检查其顶点是否已被访问。如果没被访问，线程将遍历入边，如果线程找到一个属于前一层的邻居，线程将把它的顶点标记为属于当前层。这种以顶点为中心的实现通常被称为自底向上或 pull 实现。实现要求能访问给定目标顶点的入边，因此要采用 CSC 表示。 以顶点为中心的 pull 实现的内核代码如下，对于一个线程来说，要确定它的顶点处于当前层，只需要该顶点有一个邻居s属于前一层中就足够了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct CSCGRAPH { int numVertices; int* dstPtrs; // Starting incoming edge index of each vertex int* scrList; // Source vertex index of each edge }; __global__ void bfs_kernel_csc(CSCGRAPH graph, unsigned int* level, unsigned int* visited, unsigned int currLevel) { unsigned vertexId = blockIdx.x * blockDim.x + threadIdx.x; if (vertexId \u0026lt; graph.numVertices) { if (level[vertexId] == 0xFFFFFFF) { // loop through its incoming edges if not visited for (int i = graph.dstPtrs[vertexId]; i \u0026lt; graph.dstPtrs[vertexId + 1]; i++) { unsigned int neighbor = graph.scrList[i]; if (level[neighbor] == currLevel - 1) { level[vertexId] = currLevel; *visited = 1; // flag to indicate whether reached the end of the graph break; // Only need 1 neighbor in previous level to identify the vetex is currLevel } } } } } 下图展示了这个内核如何执行从第 1 层到第 2 层的遍历。\nExample of a Vertex-centric Pull (bottom-up) Traversal from Level 1 to Level 2\n在比较推和拉以顶点为中心的并行实现时，需要考虑两个对性能有重要影响的关键差异。\n在 push 实现中，线程在其顶点的循环遍历所有邻居；而在 pull 实现中，线程可能会提前跳出循环。 在 push 实现中，只有被标记为前一层的顶点的线程在遍历其邻居列表；而在 pull 实现中，任何被标记为未访问顶点的线程会遍历其邻居列表。 基于两种实现的差异，常见的优化方法是对低层级使用 push 实现，然后对较高层级使用 pull 实现。这种方法通常被称为方向优化 (directional optimization) 实现。选择何时切换通常取决于图的类型。低度图通常有很多层；高度图中，从任何顶点到任何其他顶点只需要很少的层。因此对于高度图来说从 push 实现切换到 pull 实现通常比低度图要早得多。 如果要使用方向优化的实现，则图的 CSR 和 CSC 表示都需要储存。但对于无向图来说，其邻接矩阵是对称的，因此 CSR 和 CSC 表示是相同的的，只需要存储其中一个，就可以被两个实现使用。 15.4 Edge-centric Parallelization of BFS 在这个实现中，每个线程被分配到一条边。它检查边的源顶点是否属于前一层以及边的目标顶点是否未被访问。 以边为中心的并行实现的内核代码如下。每个线程使用 COO src 数组找到其边缘的源顶点，并检查顶点是否属于前一级。通过此检查的线程将使用 COO dst 数组确定边的目的顶点，并检查其是否未被访问过。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct COOGRAPH { int numVertices; int numEdges; int* srcList; // Source vertex index of each edge int* dstList; // Destination vertex index of each edge }; __global__ void bfs_kernel_coo(COOGRAPH graph, unsigned int* level, unsigned int* visited, unsigned int currLevel) { unsigned edgeId = blockIdx.x * blockDim.x + threadIdx.x; if (edgeId \u0026lt; graph.numEdges) { unsigned int src = graph.srcList[edgeId]; if (level[src] == currLevel - 1) { unsigned int neighbor = graph.dstList[edgeId]; if (level[neighbor] == 0xFFFFFFFF) { // unvisited neighbor level[neighbor] = currLevel; visited[neighbor] = 1; *visited = 1; // flag to indicate whether reached the end of the graph } } } } 下图展示了该内核如何执行从从第 1 层到第 2 层的遍历。\nExample of an Edge-centric Traversal from Level 1 to Level 2\n与以顶点为中心的并行实现相比，以边为中心的并行实现的优点如下\n有更多的并行性。在以顶点为中心的实现中，如果顶点的数量很少，可能不会启动足够的线程来完全占用设备。因为一个图通常有比顶点更多的边，以边为中心的实现可以启动更多的线程。 具有较小的负载不平衡和控制发散。在以顶点为中心的实现中，每个线程迭代不同数量的边。相反，在以边为中心的实现中，每个线程只遍历一个边。 以边为中心的实现的缺点如下 需要检查图中的每条边。相反，以顶点为中心的实现中，如果确定顶点与当前层级无关，则会跳过整个边列表。 使用 COO 格式存储图，与以顶点为中心的实现使用的 CSR 和 CSC 相比，它需要更多的存储空间来存储边。 15.5 Improving efficiency with frontiers 在前两节中的方法中，我们会检查每个顶点或每条边是否属和当前层有关。这种策略的优点是内核是高度并行的，并且不需要跨线程进行任何同步。缺点是启动了许多不必要的线程，并执行了大量无用的工作。我们可以让处理前一层顶点的线程将它们访问的顶点作为 frontier. 因此，对于当前层级，只需要为该 frontier 中的顶点启动线程。\nExample of a Vertex-centric Push (top-down) BFS Traversal from Level 1 to Level 2 with Frontiers\n对应的内核代码如下。首先为 frontier 的每个元素分配一个线程，使用 CSR srcPtrs 数组来定位顶点的出边并进行迭代。对于每个出边，线程使用 CSR dst 数组确定其目的顶点，若未被访问过，并将其标记为属于当前层级。为了避免多个线程将邻居视为未访问，应该以原子方式执行邻居标签的检查和更新。atomicCAS 内置函数提供 compare-and-swap 的原子操作。如果比较成功,与其他原子操作一样，atomicCAS 返回存储的旧值。因此，我们可以通过比较返回值与被比较的值来检查该顶点是否被访问过。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 __global__ void frontier_bfs_kernel(CSRGRAPH graph, unsigned int* level, unsigned int* prevFroniter, unsigned int* currFroniter, unsigned int numPrevFroniter, unsigned int* numCurrFroniter, unsigned int* currLevel) { // Each thread processes a node in prevFroniter. unsigned int i = blockIdx.x * blockDim.x + threadIdx.x; if (i \u0026lt; numPrevFroniter) { unsigned int vertexId = prevFroniter[i]; // All its neighbouring nodes are traversed. for (unsigned int edge = graph.scrPtrs[vertexId]; edge \u0026lt; graph.scrPtrs[vertexId + 1]; edge++) { unsigned int neighbor = graph.dstList[edge]; if (atomicCAS(level + neighbor, 0xFFFFFFFF, currLevel) == 0xFFFFFFFF) { // check if neighbor is unvisited unsigned int currFroniterIndex = atomicAdd(numCurrFroniter, 1); currFroniter[currFroniterIndex] = neighbor; } } } } 这种基于 frontier 的方法的优势在于，它通过只启动处理相关顶点的线程减少了冗余工作。缺点是长延迟原子操作的开销，特别是当这些操作竞争访问相同的地址时。对于 atomicAdd 操作争用会很高，因为所有线程都增加同一个计数器。\n15.6 Reducing Contention with Privatization 私有化可以应用于对 numCurrFrontier 的增加，以减少插入 frontier 时的争用。我们可以让每个线程块在整个计算过程中维护自己的本地 frontier，并在完成后更新全局 frontier. 本地 frontier 及其计数器可以存储在共享内存中，从而支持对计数器和存储到本地边界的低延迟原子操作。此外，当将共享内存中的 frontier 存储到全局内存中的公共 frontier 时，访问可以合并。\n下图说明了 frontier 私有化的执行情况。\nPrivatization of Frontiers Example\n对应的内核代码如下。注意到公共 frontiner 的索引 currFrontierIdx 是用 currFrontierIdx_s 表示的，而 currFrontierIdx_s 是用 threadIdx.x 表示的。因此，相邻线程存储到连续的全局内存位置，这意味着内存访问是合并的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #define LOCAL_FRONTIER_SIZE 4 __global__ void private_frontier_bfs_kernel(CSRGRAPH graph, unsigned int* level, unsigned int* prevFroniter, unsigned int* currFroniter, unsigned int numPrevFroniter, unsigned int* numCurrFroniter, unsigned int* currLevel) { // Initialize privative frontier __shared__ unsigned int currFrontier_s[LOCAL_FRONTIER_SIZE]; __shared__ unsigned int numCurrFrontier_s; if (threadIdx.x == 0) { numCurrFrontier_s = 0; } __syncthreads(); // Perform BFS on private frontier unsigned int i = blockIdx.x * blockDim.x + threadIdx.x; if (i \u0026lt; numPrevFroniter) { unsigned int vertexId = prevFroniter[i]; for (unsigned int edge = graph.scrPtrs[vertexId]; edge \u0026lt; graph.scrPtrs[vertexId + 1]; edge++) { unsigned int neighbor = graph.dstList[edge]; if (atomicCAS(level + neighbor, 0xFFFFFFFF, currLevel) == 0xFFFFFFFF) { // Once a new frontier node is found, unsigned currFroniterIndex = atomicAdd(\u0026amp;numCurrFrontier_s, 1); if (currFroniterIndex \u0026lt; LOCAL_FRONTIER_SIZE) { // Try to add it to the private frontier (currFrontier_s) currFrontier_s[currFroniterIndex] = neighbor; } else { numCurrFrontier_s = LOCAL_FRONTIER_SIZE; // frontier is full, stop adding new elements unsigned int currFrontierIdx = atomicAdd(numCurrFroniter, 1); currFroniter[currFrontierIdx] = neighbor; } } } } // Copy private frontier to global frontier __syncthreads(); __shared__ unsigned int currFrontierStartIdx; // Start index of private frontier in global frontier if (threadIdx.x == 0) { currFrontierStartIdx = atomicAdd(numCurrFroniter, numCurrFrontier_s); } __syncthreads(); // Commit private frontier to global frontier for (unsigned int j = threadIdx.x; j \u0026lt; numCurrFrontier_s; j += blockDim.x) { unsigned int currFroniterIdx = currFrontierStartIdx + j; currFroniter[currFroniterIdx] = currFrontier_s[j]; } } ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch15/","summary":"Personal notebook 15 of Programming Massively Parallel","title":"PMPP Learning-Chapter 15 Graph traversal"},{"content":"14 Sparse Matrix Computation 在稀疏矩阵中，大多数元素是零。存储和处理这些零元素在内存容量、内存带宽、时间和能量方面是浪费的。\n14.1 Background 矩阵常用于求解 N 个未知数 N 个方程的线性系统，其形式为 AX+Y = 0，其中A是一个 NxN 矩阵，X 是一个 N 维的未知数向量，Y 是一个 N 维的常数向量。求解线性方程组的迭代方法中最耗时的部分是对计算 AX+Y，这是一个稀疏矩阵向量的乘法和累加。 删除所有的零元素不仅节省了存储空间，而且消除了从内存中获取这些零元素并对它们执行无用的乘法或加法操作的冗余步骤。 以下是一些在稀疏矩阵存储格式的结构中的关键考虑因素如下:\n空间效率 (Space efficiency): 使用存储格式表示矩阵所需的内存容量。 灵活性 (Flexibility): 通过添加或删除非零来修改矩阵的存储格式的方便程度• 可访问性 (Accessibility): 存储格式是否易于访问数据。 内存访问效率 (Memory access efficiency): 存储格式在多大程度上为特定计算实现了有效的内存访问模式 (正则化的一个方面). 负载平衡 (Load balancing): 存储格式在多大程度上为特定计算在不同线程之间平衡负载 (正则化的另一个方面). 14.2 A simple SpMV kernel with the COO format 如下图所示， COO (COOrdinate) 格式是一种稀疏矩阵的存储格式，其中矩阵元素以三元组的形式存储，即 (i, j, a_ij). 、\nExample of the Coordinate List (COO) Format\n使用以 COO 格式表示的稀疏矩阵并行执行 SpMV (Sparse Matrix Vector Multiplication) 的一种方法是为矩阵中的每个非零元素分配一个线程，下图是其示意图。\nExample of Parallelizing SpMV with the COO Format\n对应的内核代码如下所示，它在列索引对应的位置查找输入向量值，将其乘以非零值，然后将结果累加到对应的行索引处的输出值。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 struct COOMATRIX { int* rowIdx; int* colIdx; float* val; int numNonZeros; }; __global__ void spmv_coo_kernel(COOMATRIX m, float* x, float* y) { // Assign a thread to each nonzero element unsigned int i = blockIdx.x * blockDim.x + threadIdx.x; if (i \u0026lt; m.numNonZeros) { int row = m.rowIdx[i]; int col = m.colIdx[i]; int val = m.val[i]; atomicAdd(\u0026amp;y[row], val * x[col]); // Perform the matrix-vector multiplication } } 下面来分析 COO 格式在几个性能指标上的表现。\n空间效率：COO 需要三个数组，rowIdx, colIdx 和 value，每个数组的元素数量与非零元素的数量相同。 灵活性：只要以相同的方式重新排序 rowIdx, colIdx 和 value 数组，就可以在不丢失任何信息的情况下任意地以 COO 格式重新排序元素。 可访问性方面：COO 不易访问某一行或某一列中的所有非零元素。 内存访问效率：相邻线程访问 COO 格式的每个数组中的相邻元素。因此，通过 SpMV/COO 对矩阵的访问是内存合并的。 负载平衡：由于每个线程负责计算一个非零元素，所有线程负责相同数量的工作。 SpMV/COO 的主要缺点是需要使用原子操作，非常耗时。 14.3 Grouping Row Nonzeros with the CSR Format 如果将同一行中的所有非零都分配给同一个线程，那么该线程将是唯一更新相应输出值的线程，则可以避免原子操作。这种可访问性可以通过 CSR (Compressed Sparse Row ) 存储格式实现。下图说明了如何使用 CSR 格式存储 14.1 节中的矩阵。CSR 也将非零值存储在一维数组中，但这些非零值是按行分组的。COO 格式和 CSR 格式之间的关键区别在于，CSR 格式用 rowPtrs 数组替换了 rowIdx 数组，rowPtrs 数组存储了 colIdx 和 value 数组中每行非零的起始偏移量，每行中的非零元素不一定按列索引排序。\nExample of Compressed Sparse Row (CSR) Format\n如下图所示，要使用以 CSR 格式表示的稀疏矩阵并行执行 SpMV，可以为矩阵的每一行分配一个线程。由于一个线程遍历一行，所以每个线程将输出写入不同的内存位置。\nExample of Parallelizing SpMV with the CSR Format\n对应的内核代码如下，每个线程确定它负责的行，循环遍历该行的非零元素来执行点积。线程在 rowPtrs 数组中确定它们的起始索引 (rowPtrs[row])和通过下一行非零的起始索引 (rowPtrs[row+1]) 来确定结束位置。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct CSRMatrix { int* rowPtrs; int* colIdx; float* val; int numRows; }; __global__ void spmv_csr_kernel(CSRMatrix m, float* x, float* y) { // Assign a thread to each row unsigned int row = blockIdx.x * blockDim.x + threadIdx.x; if (row \u0026lt; m.numRows) { int start = m.rowPtrs[row]; int end = m.rowPtrs[row + 1]; float sum = 0.0f; for (int i = start; i \u0026lt; end; i++) { int col = m.colIdx[i]; float val = m.val[i]; sum += val * x[col]; } y[row] = sum; // Perform the matrix-vector multiplication } } 下面来分析 CSR 格式在几个性能指标上的表现。\n空间效率：CSR 需要三个数组，其中 colIdx 和 value 的维度和非零元素的数量一样。rowPtrs 维度等于行数加 1. 灵活性：CSR 格式中要添加的非零必须添加到它所属的特定行中。这意味着后面行的非零元素都需要移动，后面行的行指针都需要相应增加。 可访问性：CSR 可以很容易地访问给定行的非零元素，允许在 SpMV/CSR 中跨行并行。 内存访问效率：CSR 访问模式使得连相邻程访问的数据相距很远，并不能进行内存合并。 负载平衡：线程在点积循环中进行的迭代次数取决于分配给线程的行中非零元素的数量，因此大多数甚至所有线程中都存在控制发散。 14.4 Improving Memory Coalescing with the ELL Format ELL 存储格式通过对稀疏矩阵数据进行填充和转置，可以解决非合并内存访问的问题。它的名字来源于 ELLPACK 中的稀疏矩阵包，一个用于求解椭圆边值问题的包。 一个用 ELL 格式存储的例子如下图所示。从按行分组非零的 CSR 格式中确定具有最大非零元素数量的行。然后在所有其他行的非零元素之后的添加填充元素，使它们与最大行长度相同。最后按列主元素顺序存储填充矩阵。\nExample of ELL Storage Format\n下图使用 ELL 格式并行化 SpMV。与 CSR 一样，每个线程被分配到矩阵的不同行。\nExample of Parallelizing SpMV with the ELL Format\n对应的内核代码如下，点积循环遍历每行的非零元素。SpMV/ELL 内核假设输入矩阵有一个向量 ellMatrix.nnzPerRow 记录每行中非零的数量，每个线程只迭代其分配的行中的非零元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct ELLMATRIX { int* nnzPerRow; // Number of nonzeros per row int* colIdx; // Column indices of nonzeros float* val; // Nonzero values int numRows; // Number of rows }; __global__ void spmv_ell_kernel(ELLMATRIX m, float* x, float* y) { unsigned int row = blockIdx.x * blockDim.x + threadIdx.x; if (row \u0026lt; m.numRows) { float sum = 0.0f; for (unsigned int i = 0; i \u0026lt; m.nnzPerRow[row]; i++) { // ell matrix stores values in column-major order unsigned int col = m.colIdx[i * m.numRows + row]; float val = m.val[i * m.numRows + row]; sum += val * x[col]; } y[row] = sum; // Perform the matrix-vector multiplication } } 下面来分析 CSR 格式在几个性能指标上的表现。\n空间效率：由于填充元素的空间开销，ELL格式的空间效率低于CSR格式。 灵活性：ELL 格式的比 CSR 格式有更高的灵活性。只要一行没有达到矩阵中非零的最大数目，就可以通过简单地用实际值替换填充元素来向该行添加非零。 可访问性：ELL 可以访问某一行的非零元素。ELL 还允许在给定非零元素的索引后得到该元素的行和列索引，因为 i = col*m.numRows + row, 通过 i % m.numRows 就可以得到所在的行。 内存访问效率：由于元素按列主序排列，所有相邻的线程现在都访问相邻的内存位置。 负载平衡：SpMV/ELL 仍然和 SpMV/CSR 具有相同的负载不平衡问题，因为每个线程循环次数仍取决它负责的行中的非零元素数量。 14.5 Regulating Padding with the Hybrid ELL-COO Format 在 ELL 格式中，当一行或少数行具有非常多的非零元素时，空间效率低和控制发散的问题最为明显。COO 格式可用于限制 ELL 格式中的行长度。在将稀疏矩阵转换为 ELL 之前，我们可以从具有大量非零元素的行中取出一些元素，并将这些元素用单独的 COO 格式存储。 下图展示了如何使用混合 ELL-COO 格式存储图中矩阵。从 ELL 格式中删除第二行的最后 3 个非零元素和第六行的最后 2 个非零元素，并将它们移动到单独的 COO 格式中。\nHybrid ELL-COO Example\n对应的内核代码如下，点积将被划分为两部分处理，一部分负责处理 ELL 格式的非零元素，另一部分负责处理 COO 格式中 rowIdx 与 row 相同的非零元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 __global__ void spmv_hybrid_ell_coo_kernel(ELLMATRIX ell, COOMATRIX coo, float* x, float* y) { unsigned int row = blockIdx.x * blockDim.x + threadIdx.x; float sum = 0.0f; // ELL part if (row \u0026lt; ell.numRows) { for (int i = 0; i \u0026lt; ell.nnzPerRow[row]; i++) { unsigned int col = ell.colIdx[i * ell.numRows + row]; float val = ell.val[col]; sum += val * x[col]; } } y[row] = sum; // Perform the matrix-vector multiplication // COO part for (int i = 0; i \u0026lt; coo.numNonZeros; i++) { int col = coo.colIdx[i]; float val = coo.val[i]; sum += val * x[col]; atomicAdd(\u0026amp;y[row], val * x[col]); } } 下面来分析混合 ELL-COO 格式在几个性能指标上的表现。\n空间效率：因为减少了填充元素，混合 ELL-COO 格式比单独使用 ELL 格式的空间效率更高。 灵活性：混合 COO-ELL 既可以通过替换填充元素来添加非零。如果该行没有任何可以在 ELL 部分中替换的填充元素，也可以在格式的 COO 部分添加。 可访问性：访问给定行中所有的非零元素只能用于适合用 ELL 格式存储的部分行。 内存访问效率：SpMV/ELL 和 SpMV/COO 都能对稀疏矩阵进行合并内存访问。因此，它们的组合也将是合并访问模式。 负载平衡：从ELL 格式部分移除一些非零元素可以减少 SpMV/ELL 内核的控制发散。这些非零元素被放在 COO 格式部分，不会出现控制发散。 14.6 Reducing Control Divergence with the JDS Format 根据矩阵中行的非零元素夺少进行降序排序之后矩阵在很大程度上看起来像三角形矩阵，因此这种格式通常被称为 JDS (Jagged Diagonal Storage) 格式。 下图展示了如何使用 JDS 格式存储矩阵。首先，与 CSR 和 ELL 格式一样将非零元素按行分组。接下来，按每行中非零的个数从大到小排序。value 数组中的非零值及其存储其对应列索引的 colIdx 数组按列主元素顺序存储。在每次迭代中添加一个 iterPtr 数组来跟踪非零元素的开始位置。并且维护一个保留原始行索引的 rowIdx 数组。\nExample of JDS Storage Format\n对应的内核代码如下，我们一共要迭代 maxNumNonZerosPerRow 次，每次迭代中每个线程判断自己负责的行是否还存在非零元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 struct JDSMATRIX { int* iterPtr; // Pointer to the start of each row in the JDS format int* colIdx; // Column indices of nonzeros float* val; // Nonzero values int* rowIdx; // Original row indices int numRows; int maxNumNonZerosPerRow; }; __global__ void spmv_jds_kernel(JDSMATRIX m, float* x, float* y) { unsigned int row = blockIdx.x * blockDim.x + threadIdx.x; if (row \u0026lt; m.numRows) { float sum = 0.0f; for (int i = 0; i \u0026lt; m.maxNumNonZerosPerRow + 1; i++) { int start = m.iterPtr[i]; int end = m.iterPtr[i + 1]; if (row + i * blockDim.x \u0026gt;= end) { break; } else { sum += m.val[row + i * blockDim.x]; } } y[m.rowIdx[row]] = sum; // Perform the matrix-vector multiplication } } 下面来分析 JDS 格式在几个性能指标上的表现。\n空间效率：因为避免了填充 JDS 格式比 ELL 格式效率更高。 灵活性：JDS 格式的灵活性较差，因为添加非零会改变行大小，这可能需要重新对行进行排序。 可访问性：JDS 格式类似于CSR格式，允许在给定行索引的情况下访问该行的非零元素。 内存访问效率：JDS 格式的内存访问效率比 ELL 格式高，因为它可以对稀疏矩阵进行合并访问。 负载平衡：JDS 格式对矩阵的行进行排序，使得相邻线程遍长度接近的行。因此，JDS 格式能减少控制发散。 ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch14/","summary":"Personal notebook 14 of Programming Massively Parallel","title":"PMPP Learning-Chapter 14 Sparse Matrix Computation"},{"content":"13 Sorting 排序算法将列表中的数据元素按一定的顺序排列。\n13.1 Background 任何排序算法都必须满足以下两个条件:\n输出是非递减顺序或非递增顺序。 输出是输入的一种排列 (permutation). 排序算法可以分为稳定算法和不稳定算法。当两个元素具有相同的键值时，稳定的排序算法保留了原始的出现顺序。 排序算法也可以分为基于比较的算法和非基于比较的算法。基于比较的排序算法无法达到比 O(NlogN) 更好的复杂度，因为它们必须在元素之间执行最少次数的比较。\n13.2 Radix Sort 基数排序是一种基于非比较的排序算法，其工作原理是根据基数值将要排序的键分布到桶 (bucket) 中。如果键由多个数字组成，则重复对每个数字重复分配桶，直到覆盖所有数字。 下图展示了如何使用 1 位基数对 4 位整数列表进行基数排序。\nA Radix Sort Example\n13.3 Parallel Radix Sort 基数排序的每次迭代都依赖于前一次迭代的整个结果。因此，迭代是相对于彼此顺序执行的。我们将重点关注执行单个基数排序迭代的内核的实现，并假设主机代码每次迭代调用该内核一次。 在 GPU 上并行化基数排序迭代的一种直接方法是让每个线程负责输入列表中的一个键。线程必须确定键在输出列表中的位置，然后将键存储到该位置。 下图展示了这种并行化方法第一次迭代的执行情况。对于映射到 0 桶的键，目标索引可以通过如下公式计算： $$\r\\begin{align*} \\text{destination of a zero} \u0026= \\text{\\#zeros before} \\\\\r\u0026=\\text{\\#keys before} - \\text{\\#ones before} \\\\\r\u0026=\\text{key index}-\\text{\\#ones before}\r\\end{align*}\r$$对于映射到 1 桶的键，目标索引如下所示:\n$$\r\\begin{align*}\r\\text{destination of a one}\u0026=\\text{\\#zeros in total}+\\text{\\#ones before} \\\\\r\u0026=(\\text{\\#keys in total}-\\text{\\#ones in total})+\\text{\\#ones before} \\\\\r\u0026=\\text{input size}-\\text{\\#ones in total}+\\text{\\#ones before}\r\\end{align*}\r$$\rParallelizing a Radix Sort Iteration by Assigning One Input Key to Each Thread\n下图展示了每个线程查找其键的目标索引所执行的操作。\nFinding the Destination of Each Input Key\n对应的内核代码如下所示。在每个线程确定自己的索引并提取出对应的 bit 后，因为这些位不是 0 就是 1，所以排除扫描的结果就等于索引前面 1 的个数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 __global__ void exclusiveScan(unsigned int* bits, int N) { extern __shared__ unsigned int temp[]; int thid = threadIdx.x; int offset = 1; // Load input into shared memory temp[2 * thid] = (2 * thid \u0026lt; N) ? bits[2 * thid] : 0; temp[2 * thid + 1] = (2 * thid + 1 \u0026lt; N) ? bits[2 * thid + 1] : 0; // Build sum in place up the tree for (int d = N \u0026gt;\u0026gt; 1; d \u0026gt; 0; d \u0026gt;\u0026gt;= 1) { __syncthreads(); if (thid \u0026lt; d) { int ai = offset * (2 * thid + 1) - 1; int bi = offset * (2 * thid + 2) - 1; temp[bi] += temp[ai]; } offset *= 2; } // Clear the last element if (thid == 0) { temp[N - 1] = 0; } // Traverse down the tree for (int d = 1; d \u0026lt; N; d *= 2) { offset \u0026gt;\u0026gt;= 1; __syncthreads(); if (thid \u0026lt; d) { int ai = offset * (2 * thid + 1) - 1; // left child index of the thread int bi = offset * (2 * thid + 2) - 1; // right unsigned int t = temp[ai]; temp[ai] = temp[bi]; temp[bi] += t; } } // Write results to output array __syncthreads(); if (2 * thid \u0026lt; N) bits[2 * thid] = temp[2 * thid]; if (2 * thid + 1 \u0026lt; N) bits[2 * thid + 1] = temp[2 * thid + 1]; } __global__ void radix_sort_iter(unsigned int* input, unsigned int* output, unsigned int* bits, int N, unsigned int iter) { unsigned int i = blockIdx.x * blockDim.x + threadIdx.x; unsigned int key, bit; if (i \u0026lt; N) { key = input[i]; bit = (key \u0026gt;\u0026gt; iter) \u0026amp; 1; bits[i] = bit; } exclusiveScan(bits, N); // # ones before if (i \u0026lt; N) { unsigned int numberOnesBefore = bits[i]; unsigned int numberOnesTotal = bits[N]; unsigned int dst = (bit == 0) ? (i - numberOnesBefore) : (N - numberOnesTotal - numberOnesBefore); output[dst] = key; } } 13.4 Optimizing for Memory Coalescing 上面方法效率低下的一个主要原因是，对输出数组的写入显示出不能以内存合并的模式访问。改进后的算法如下图所示，每个块中的线程将首先执行块级别的局部排序，以分离共享内存中映射到 0 bucket 的键和映射到 1 bucket 的键。此优化中的主要挑战是每个线程块在全局 bucket 中确定其位置。线程块的 0 桶的位置在前面线程块的所有 0 桶之后。另一方面，线程块的 1 桶的位置在所有线程块的 0 桶和之前线程块的所有 1 桶之后。\nOptimizing for Memory Coalescing by Sorting Locally in Shared Memory\n下图展示了如何使用排除扫描来查找每个线程块的本地桶的位置的。在完成局部基数排序之后，每个线程块标识其每个自己桶中键的数量。然后每个块将结果记录在如图中所示的表中，该表按行主顺序存储，对线性化的表执行排除扫描，结果表示线程块的本地 bucket 的起始位置。\nFinding the Destination of Each Thread Block\u0026#39;s Local Buckets\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #define SECTION_SIZE 32 __global__ void memory_coalescing_radix_sort(unsigned int* input, unsigned int* output, unsigned int* bits, unsigned int* table, int N, int iter) { __shared__ unsigned int input_s[SECTION_SIZE]; __shared__ unsigned int output_s[SECTION_SIZE]; // Load input into shared memory unsigned int globalIdx = blockIdx.x * blockDim.x + threadIdx.x; if (globalIdx \u0026lt; N) { input_s[threadIdx.x] = input[globalIdx]; } __syncthreads(); // Sort each section radix_sort_iter(input_s, output_s, bits + blockIdx.x * SECTION_SIZE, SECTION_SIZE, iter); __syncthreads(); // Store local bucket num if (threadIdx.x == 0) { unsigned int numberOnesTotal = 0; unsigned int numberZerosTotal = 0; for (int i = 0; i \u0026lt; SECTION_SIZE; ++i) { numberOnesTotal += bits[blockIdx.x * SECTION_SIZE + i]; } numberZerosTotal = SECTION_SIZE - numberOnesTotal; table[blockIdx.x] = numberZerosTotal; table[blockIdx.x + gridDim.x] = numberOnesTotal; } __syncthreads(); // Exclusive prefix sum to determine output index exclusiveScan(table, 2 * gridDim.x); // Write results to output array if (globalIdx \u0026lt; N) { int zeroOffset = table[blockIdx.x]; int oneOffset = table[blockIdx.x + gridDim.x]; unsigned int bit = bits[blockIdx.x * SECTION_SIZE + threadIdx.x]; unsigned int dst = (bit == 0) ? (globalIdx - zeroOffset) : (N - oneOffset); output[dst] = input[globalIdx]; } } 13.5 Choice of Radix Value 使用 2 bit 的基数时，如下图所示，每次迭代使用两个比特将键分发到存储桶。因此，两次迭代就可以对 4 bit 键进行完全排序。\nRadix Sort Example with 2-bit Radix\n为了内存合并访问，如下图所示，每个线程块可以在共享内存中对其键进行本地排序，然后将每个本地桶中的键的数量写入表中。和 13.4 节一样，对于 r 位基数，对具有 2^r 行的表执行排除扫描操作。最后以合并的方式将本地 bucket 写入全局内存。\nOptimizing 2-bit Radix Sorting for Memory Coalescing Using the Shared Memory\n使用更大的基数也有缺点\n每个线程块有更多的本地桶，每个桶有更少的键。这样就会向多个全局内存块进行写入，但每一部分写入的数据变少，不利于内存合并。 进行排除扫描的表会随着基数的增大而变大，扫描的开销随着基数的增加而增加。 Finding the Destination of Each Block\u0026#39;s Local Buckets for a 2-bit Radix\n13.6 Thread Coarsening to Improve Coalescing 跨多个线程块并行化基数排序的一个代价是对全局内存的写的访问合并很差。每个线程块都有自己的本地桶，并将其写入全局内存。拥有更多的线程块意味着每个线程块拥有更少的键，这意味着本地存储桶将更小，从而在将它们写入全局内存时合并机会更少。另一个代价是执行全局排除扫描以识别每个线程块的本地桶的存储位置的开销。通过应用线程粗化，可以减少块的数量，从而减少表的大小和排除扫描操作的开销。 下图展示了如何将线程粗化应用于 2 位基数排序。每个线程被分配给输入列表中的多个键。\nRadix Sort for a 2-bit Radix with Thread Coarsening\n13.7 Parallel Merge Sort ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch13/","summary":"Personal notebook 13 of Programming Massively Parallel","title":"PMPP Learning-Chapter 13 Sorting"},{"content":"12 Merge-An Introduction to Dynamic Input Data Identification 有序归并操作接受两个有序列表并生成一个合并后的有序列表。\n12.1 Background 假设数组中的每个元素都有一个键并且键定义了一个用 ≤ 表示的顺序关系。下图展示了基于数字排序关系的简单归并函数的操作。一般来说，如果键值相等的元素在输出中的顺序与其在输入中的顺序相同，则称排序操作是稳定的。\nExample of a Merge Operation\n12.2 A Sequential Merge Algorithm 归并操作可以用如下一个简单的顺序算法来实现。顺序归并函数访问 A 和 B 的每个输入元素一次，并向 C 中每个位置写入一次。其算法复杂度为 O(m+n).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void merge_sequential(int* A, int* B, int* C, int m, int n) { int i = 0, j = 0, k = 0; // Indices for A, B, and C while (i \u0026lt; m \u0026amp;\u0026amp; j \u0026lt; n) { if (A[i] \u0026lt; B[j]) { C[k++] = A[i++]; } else { C[k++] = B[j++]; } if (i == m) { // Done with A[], handling remaining B while (j \u0026lt; n) { C[k++] = B[j++]; } } else { // Done with B[], handling remaining A while (i \u0026lt; m) { C[k++] = A[i++]; } } } } 12.3 A Parallelization Approach 每个线程首先确定它将要负责的输出位置范围，并使用该输出范围作为 co-rank 函数的输入，以确定所负责 C 输出范围的对应的 A 和 B 输入范围。这样每个线程在它们的子数组上执行顺序合并函数，从而并行地进行合并。\nExamples of Observations\nObservation 1：子数组 C[0]-C[k-1] (k 个元素) 是 A[0]-A[i-1] (i 个元素) 和 B[0]-B[k-i-1] (k-i 个元素) 的归并结果。 Observation 2：对于任意满足 0≤k≤m+n 的 k，我们可以找到唯一的 i 和 j 使得 k=i+j, 0≤i≤m, 0≤j≤n，并且子数组 C[0]-C[k-1] 是子数组 A[0]-A[i-1] 和子数组 B[0]-B[j-1] 合并的结果。唯一的索引 i 和 j 被称 C[k] 的 co-rank. 我们可以通过将输出数组划分为子数组，并让每个线程负责一个子数组的生成来划分工作。由于并行归并算法中每个线程使用的输入元素的范围取决于实际的输入值使得我们需要辅助函数来完成。\n12.4 Co-rank Function Implementation 将 co-rank 函数定义为接受输出数组 C 中元素的位置 k 和两个输入数组 A 和 B的信息，并返回输入数组 A 对应的 co-rank 值 i. 以下图为例，假设线程 1 的 co-rank 函数的目标是为其秩 k1=4 确定 co-rank值 i1=3 和 j1=1. 也就是说，从 C[4] 开始的子数组将由从 A[3] 和 B[1] 开始的子数组合并生成。我们可以发现线程 t 使用的输入子数组由线程 t 和线程 t+1 的 co-rank 确定。\nExample of co-rank Function Execution\n目标是找到使得 A[i - 1] \u0026lt;= B[j] 并且 B[j - 1] \u0026lt;= A[i] 的索引。\n如果 A[i-1] \u0026gt; B[j]，说明 A[i] 太大，需要减少 i，并增加 j。 如果 B[j-1] \u0026gt; A[i]，说明 B[j] 太大，需要减少 j，并增加 i。 每次调整时，i 和 j 都按照二分方式调整，即调整的步长是 delta / 2. i 和 i_low 确定了当前正在搜索的数组 A 的范围。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 int co_rank(int k, int* A, int m, int* B, int n) { // C[k] comes from A[i] of B[j] // k = i + j int i = k \u0026lt; m ? k : m; // max starting search value for A, i.e. A[k-1] \u0026lt; B[0] int i_low = 0 \u0026gt; (k - n) ? 0 : k - n; // when B is done, min starting search value for A is k-n int j = k - i; int j_low = 0 \u0026gt; (k - m) ? 0 : (k - m); int delta; bool active = true; while (active) { // Binary search for C[k] if (i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026lt; n \u0026amp;\u0026amp; A[i - 1] \u0026gt; B[j]) { delta = (i - i_low + 1) \u0026gt;\u0026gt; 1; j_low = j; j += delta; i -= delta; } else if (j \u0026gt; 0 \u0026amp;\u0026amp; i \u0026lt; m \u0026amp;\u0026amp; B[j - 1] \u0026gt; A[i]) { delta = (j - j_low + 1) \u0026gt;\u0026gt; 1; i_low = i; i += delta; j -= delta; } else { // Found the correct position for C[k] active = false; } return i; } } 12.5 A Basic Parallel Merge Kernel 在剩下的小节里，我们假设输入数组 A 和 B 存储在全局内存中，一个内核被启动用来合并两个输入数组，输出一个同样位于全局内存中的数组 C. 下面内核是并行归并的直接实现。它首先通过计算当前线程 (k_curr) 和下一个线程 (k_next) 产生的输出子数组的起点来确定负责输出的范围。然后分别调用自己和后一个线程的 co_rank 函数来确定对应的 A 和 B 输入子数组的范围。最后调用顺序合并函数来合并两个输入子数组，并将结果写入输出子数组。\n1 2 3 4 5 6 7 8 9 10 11 12 13 __global__ void mergre_basic_kernel(int* A, int* B, int* C, int m, int n) { // Each thread handles a section of C int tid = blockIdx.x * blockDim.x + threadIdx.x; int elementsPerThread = ceil(m + n) / (blockDim.x * gridDim.x); int start = tid * elementsPerThread; int end = std::min(start + elementsPerThread, m + n); // Determin the range of A and B to be merged for this thread int i_curr = co_rank(start, A, m, B, n); int i_next = co_rank(end, A, m, B, n); int j_curr = start - i_curr; int j_next = end - i_next; merge_sequential(A + i_curr, B + j_curr, C + start, i_next - i_curr, j_next - j_curr); } 上面的基本归并内核有 2 个问题：\nwarp 中的相邻线程在读写输入和输出子数组元素时不会访问相邻的内存位置。 线程在执行 co-rank 函数时还需要从全局内存访问 A 和 B 的元素。 12.6 A Tiled Merge Kernel to Improve Coalescing 注意到相邻线程使用的 A 和 B 子数组在内存中彼此相邻。我们可以为为每个块调用 co-rank 函数来获得其 A 和 B 子数组的起始和结束位置。 Info\n回忆一下改进内核内存合并的主要策略有三种:\n重新组织线程到数据的映射。 重新组织数据本身。 以合并的方式在全局内存和共享内存之间传输数据，并在共享内存中执行不规则访问。 下图展示了分段合并内核的块级别设计。A_S 和 B_S 可能无法覆盖块的整个输入子数组，因此在每次迭代期间，块中的所有线程将协作从块的 A 和 B 子数组中加载 x 个元素。这样每个块有足够的输入元素来生成至少 x 个输出数组元素 (在最坏的情况下，当前输出部分的所有元素可能都来自 A 或 B 的子数组)。假设每个块负责 y 个输出元素，则需要进行 y/x 次归并。每个块中的线程将在每次迭代中使用 A_S 的一部分和 B_S 的一部分 (深灰色部分)\nDesign of a Tiled Merge Kernel\n下面是分段合并内核的实现的第一部分。本质上是线程级基本合并内核的块级版本的代码。每个块的第一个线程负责计算当前块和下一个块的开始输出索引的位置以及他们的 co-rank. 结果被放入共享内存中，以便块中的所有线程都可以看到。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 __global__ void merge_tiled_kernel(int* A, int* B, int* C, int m, int n, int tile_size) { /* Part 1: Identify block-level output \u0026amp; input subarrays */ // Use extern keywords to determine // the shared memory size at runtime rather than compilation extern __shared__ int shared_AB[]; int* A_s = \u0026amp;shared_AB[0]; // Start index of ShareA int* B_s = \u0026amp;shared_AB[tile_size]; // Start index of ShareB int C_curr = blockIdx.x * ceil((m + n) / gridDim.x); // Start index of C for this block int C_next = std::min(C_curr + int(ceil((m + n) / gridDim.x)), m + n); // End index of C for this block if (threadIdx.x == 0) { A_s[0] = co_rank(C_curr, A, m, B, n); // Make block level co-rank values visible A_s[1] = co_rank(C_next, A, m, B, n); // Next threads co-rank values in the block } __synctyhreads(); int A_curr = A_s[0]; int A_next = A_s[1]; int B_curr = C_curr - A_curr; int B_next = C_next - A_next; 第二部分线程使用它们的 threadIdx.x 的值来确定要加载的元素，因此连续的线程加载连续的元素，内存访问是合并的。每次迭代从 A 和 B 数组中加载当前tile的起始点取决于块的所有线程在之前的迭代中消耗的 A 和 B 元素的总数。下图说明了 while 循环第二次迭代的索引计算。每个块在第一次迭代中消耗的 A 元素部分 为 A 子数组开头的白色小部分 (用竖条标记)。if 语句确保线程只加载 A 子数组剩余部分中的元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /* Part 2: Loading A \u0026amp; B elements into the shared memory */ int counter = 0; int lenC = C_next - C_curr; int lenA = A_next - A_curr; int lenB = B_next - B_curr; int num_iterations = ceil(lenC / tile_size); // index of completed merge in int C_completed = 0; int A_completed = 0; int B_completed = 0; while (counter \u0026lt; num_iterations) { // Each iter threads in a block will generate tile_size C elements // Loading tile_size A and B elements into shared memory for (int i = 0; i \u0026lt; tile_size; i += blockDim.x) { // Coalecsing loading from global memory if (i + threadIdx.x \u0026lt; lenA - A_completed) { A_s[i + threadIdx.x] = A[i + threadIdx.x + A_curr + A_completed]; } if (i + threadIdx.x \u0026lt; lenB - B_completed) { B_s[i + threadIdx.x] = B[i + threadIdx.x + B_curr + B_completed]; } } __syncthreads(); 第三部分则是每个块的线程对共享内存的数组进行归并。在更新索引的部分中最后一次迭代中 A_s 和 B_s 可能没有 tile_size 个元素，调用 co-rank 可能会得到错误结果。但是，由于 while 循环不会进一步迭代，因此不会使用结果，因此不会造成任何影响。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /* Part 3: All threads merge their subarrays in prallel */ int c_curr = threadIdx.x * (tile_size / blockDim.x); // Output index in shared memory int c_next = c_curr + (tile_size / blockDim.x); c_curr = (c_curr \u0026lt;= lenC - C_completed) ? c_curr : lenC - C_completed; c_next = (c_next \u0026lt;= lenC - C_completed) ? c_next : lenC - C_completed; // find co-rank for c_curr and c_next int a_curr = co_rank(c_curr, A_s, std::min(tile_size, lenA - A_completed), B_s, std::min(tile_size, lenB - B_completed)); int b_curr = c_curr - a_curr; int a_next = co_rank(c_next, A_s, std::min(tile_size, lenA - A_completed), B_s, std::min(tile_size, lenB - B_completed)); int b_next = c_next - a_next; // merge the subarrays merge_sequential(A_s + a_curr, B_s + b_curr, C + C_curr + C_completed + c_curr, a_next - a_curr, b_next - b_curr); // Update completed indices C_completed += tile_size; A_completed += co_rank(tile_size, A_s, tile_size, B_s, tile_size); // Idx of A_s to generate tile_size Idx of merged A_s and B_s B_completed += tile_size - A_completed; } } 12.7 A Circular Buffer Merge Kernel 上一节的内核不是那么高效因为下一次迭代 tile 的一部分已经被加载到共享内存中，但是我们每次迭代从全局内存中重新加载整个块，并覆盖掉前一次迭代中的这些元素。下图展示了 merge_circular_buffer_kernel 的主要思想，添加了两个额外的变量 A_S_start 和B_S_start，使得 while 循环的每次迭代动态确定从 A 和 B 的哪个位置开始加载，这样可以利用前一次迭代中剩余的 A_s 和 B_s 元素。修改后每个 for 循环都只加载 A_S_consumed 表示的填充 tile 所需的元素数量。因此，线程在第 i 次 for 循环迭代中加载的A 元素是 A[A_curr+A_S_consumed+i+threadIdx.x]. 取模(%) 操作检查索引值是否大于或等于 tile_size.\n!A Circular Buffer Scheme for Managing the Shared Memory Tiles\n12.8 Thread Coarsening for Merge 多个线程并行执行归并的代价是每个线程必须执行自己的二进制搜索操作来识别其输出索引的 co-rank. 本章中介绍的所有内核都已经应用了线程粗化，因为它们都是为每个线程处理多个元素而设计的。在完全未粗化的内核中，每个线程将负责单个输出元素。\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch12/","summary":"Personal notebook 12 of Programming Massively Parallel","title":"PMPP Learning-Chapter 12 Merge-An Introduction to Dynamic Input Data Identification"},{"content":"11 Prefix sum (scan)-An Introduction to Work Efficiency in Parallel Algorithms 一般来说，如果计算本质上可以被描述为数学递归，即序列中的每一项都是根据前一项定义的，那么它可能被并行化为并行扫描 (parallel scan) 运算。\n11.1 Background 包含扫描 (inclusive scan) 操作接收一个二元可交换运算符 $\\oplus$ 和一个包含 n 个元素的输入数组 $[x_0,x_1,\\ldots,x_{n-1}]$，输出数组 $[x_0,(x_0\\oplus x_1),\\ldots,(x_0\\oplus x_1\\oplus\\ldots\\oplus x_{n-1})]$ . 包含扫描的名称体现在输出数组每个位置的结果都有对应输入元素参与。考虑包含扫描的一种直观方式是，接收一组所需香肠的长度的订单，并一次性得出所有所有订单对应的切割点。 排除扫描操作类似于包含扫描操作，只是输出数组的排列略有不同: $[i,x_0,(x_0\\oplus x_1),\\ldots,(x_0\\oplus x_1\\oplus\\ldots\\oplus x_{n-2})]$ . 每个输出元素的计算都与相应输入元素无关。 用包含扫描函数计算排除扫描的结果时，只需将所有元素向右移动，并为第 0 个元素填充恒等值。反之，只需要将所有元素向左移动，并用排除扫描结果的最后一个元素 $\\oplus$ 最后一个输入元素来填充最后一个元素。\n11.2 Parallel Scan with the Kogge-Stone Algorithm 计算位置 i 的输出元素 需要进行 i 次加法运算，因此除非找到一种方法来共享不同输出元素的归约树的部分和，否则这种方法计算复杂度为 $O(N^2)$. Kogge-Stone 算法最初是为了设计快速加法器电路而发明的，如下图所示，它是一种就地扫描算法，它对最初包含输入元素的数组 XY 进行操作。经过 k 次迭代后，XY[i] 将包含在该位置及之前的最多 2^k 个输入元素的和。\nA Parallel Inclusive Scan Algorithm Based on Kogge-Stone Adder Design\n对应的内核函数如下，假设输入最初位于全局内存数组 X 中。让每个线程计算其全局数据索引，即其负责计算输出数组的位置。每个个活动线程首先将其位置的部分和存储到一个临时变量中(在寄存器中)。当步幅值大于 threadIdx.x 时，意味着线程分配的 XY 位置已经累加了所有所需的输入值，退出活动状态。需要额外的 temp 和 __syncthreads() 因为更新中存在读后写数据依赖竞争关系。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #define SECTION_SIZE 32 __global__ void Kogge_Stone_Scan_Kernel(int* X, int* Y, unsigned int N) { __shared__ float XY[SECTION_SIZE]; unsigned int i = blockIdx.x * blockDim.x + threadIdx.x; /* Exclusive kernel initilization if (i \u0026lt; N \u0026amp;\u0026amp; threadIdx.x != 0) { XY[threadIdx.x] = X[i]; } else { XY[threadIdx.x] = 0.0f; } */ if (i \u0026lt; N) { XY[threadIdx.x] = X[i]; } else { XY[threadIdx.x] = 0.0f; } for (unsigned stride = 1; stride \u0026lt; blockDim.x; stride *= 2) { __syncthreads(); float temp; if (threadIdx.x \u0026gt;= stride) { temp = XY[threadIdx.x] + XY[threadIdx.x - stride]; } __syncthreads(); // write-after-read dependence if (threadIdx.x \u0026gt;= stride) { // Only N - stride threads are active XY[threadIdx.x] = temp; } } if (i \u0026lt; N) { Y[i] = XY[threadIdx.x]; } } Kogge-Stone 算法重用了横跨归约树的部分和来降低计算复杂度。在上一章的归约内核中，活动线程在迭代中写入的元素不会在同一迭代中被任何其他活动线程读取，因此不存在读后写竞争条件。如果希望避免在每次迭代中都有 barrier 同步，那么克服竞争条件的另一种方法是为输入和输出使用单独的数组。这种方法需要两个共享内存缓冲区。交替变化不能输入/输出缓冲区的角色，直到迭代完成。这种优化称为双缓冲 (double buffering).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #define SECTION_SIZE 32 __global__ void DF_Kogge_Stone_Scan_Kernel(int* X, int* Y, unsigned int N) { __shared__ float XY_in[SECTION_SIZE]; __shared__ float XY_out[SECTION_SIZE]; unsigned int i = blockIdx.x * blockDim.x + threadIdx.x; // Initialization if (i \u0026lt; N) { XY_in[threadIdx.x] = X[i]; } else { XY_in[threadIdx.x] = 0.0f; } bool read_in = true; // Alternating ther role of XY_in and XY_out for (unsigned stride = 1; stride \u0026lt; blockDim.x; stride *= 2) { if (read_in) { if (threadIdx.x \u0026gt;= stride) { XY_out[threadIdx.x] = XY_in[threadIdx.x] + XY_in[threadIdx.x - stride]; } else { XY_out[threadIdx.x] = XY_in[threadIdx.x]; } } else { if (threadIdx.x \u0026gt;= stride) { XY_in[threadIdx.x] = XY_out[threadIdx.x] + XY_out[threadIdx.x - stride]; } else { XY_in[threadIdx.x] = XY_out[threadIdx.x]; } } read_in = !read_in; // 切换数组 } // 将结果写回全局内存 if (i \u0026lt; N) { if (read_in) { Y[i] = XY_in[threadIdx.x]; } else { Y[i] = XY_out[threadIdx.x]; } } } 11.3 Speed and Work Efficiency Consideration 算法的工作效率（work efficiency）是指算法所完成的工作接近于计算所需的最小工作量的程度。在每次迭代中，非活动线程的数量等于步长。因此我们可以计算出工作量为\n$$\r\\sum_{stride}(N-\\mathrm{stride}), \\text{for strides} 1, 2, 4, \\ldots N/2(\\mathrm{log}_2N \\text{terms}) = N\\log_2N - (N-1)\r$$因此，Kogge-Stone 算法的计算复杂度为 $O(N\\log_2N)$.\n使用计算步数 (compute steps) 的概念作为比较扫描算法的近似指标。顺序扫描用 N-1 步来处理 N 个输入元素；若 CUDA 设备有 P 个执行单元，Kogge-Stone 内核执行需要步数为 $O(N\\log_2N)/P$. Kogge-Stone 内核相比串行代码所做的额外工作有两个问题。首先，使用硬件执行并行内核的效率要低得多。第二，所有额外的工作消耗额外的能量，不利于移动应用等场景。Kogge-Stone 内核的强大之处在于，当有足够的硬件资源时，它可以达到非常好的执行速度。\n11.4 Parallel Scan with the Brent-Kung Algorithm 对一组值进行求和最快的方法是使用归约树，如果有足够的执行单元，就可以在 $O(N\\log_2N)$ 时间内计算 N 个值的求和结果。该树还可以生成几个子序列的和，它们可用于计算某些扫描输出值。 下图展示了基于 Brent-Kung 加法器设计的并行包含扫描算法的步骤。图中上半部分，花 4 步计算所有 16 个元素的和。下半部分是使用反向树将部分和分配到可以使用部分和的位置，以计算这些位置的结果。约简树中的求和总是在对一个连续的范围内的输入元素进行。因此，求和累积到 XY 的每个位置的值总是可以表示为输入元素的一个 xi…xj 的范围，其中 xi 是开始位置， xj 是结束位置 (包括)。\nA Parallel Inclusive Scan Algorithm Based on the Brent–Kung Adder Design\n下图展示了反向树中每个位置 (列) 的状态，包括已经累积到该位置的值以及在反向树的每级 (行) 上需要的额外输入元素值 (浅灰色表示 2，深灰色表示 1，黑色表示 0).\nProgression of Values in XY After Each Level of Additions in the Reverse Tree.\n上半部分归约树的内核代码如下，和第十章不同的是\n我们把求和结果写到最大索引的位置。 我们将线程索引组织成 $2^n-1$ 的形式 (n 为树的高度)。 1 2 3 4 5 6 for (unsigned int stride = 1; stride \u0026lt; blockDim.x; stride *= 2) { __syncthreads(); if ((threadIdx.x + 1) % (2 * stride) == 0) { XY[threadIdx.x] += XY[threadIdx.x - stride]; } } 这种归约方式的一个缺点是存在控制发散问题。因此需要将线程的连续部分映射到索引为 $k*2^n-1$ 形式的 XY 位置。\n1 2 3 4 5 6 7 8 // Mapping a continous section of threads to the XY positions for (unsigned int stride = 1; stride \u0026lt;= blockDim.x; stride *= 2) { __syncthreads(); unsigned int index = (threadIdx.x + 1) * 2 * stride - 1; // index of the left child if (index \u0026lt; SECTION_SIZE) { XY[index] += XY[index - stride]; } } 反向树的实现要复杂一些。步长从 SECTION_SIZE/4 减小到 1. 在每次迭代中，我们需要将 XY 元素索引值从步长减去 1 后的两倍的位置向右推到距离其一个步长的位置。\n1 2 3 4 5 6 7 8 // Reverse tree stride value decreases from SECTION_SIZE / 4 to 1 for (unsigned int stride = SECTION_SIZE / 4; stride \u0026gt; 0; stride /= 2) { __syncthreads(); unsigned int index = (threadIdx.x + 1) * 2 * stride - 1; // index of the left child if (index + stride \u0026lt; SECTION_SIZE) { XY[index + stride] += XY[index]; } } 我们可以看到 Brent-Kung 算法无论在归约阶段还是分发阶段，都不需要超过 SECTION_SIZE/2 的线程。并行扫描中的运算总数，包括归约树 (N-1 次) 和反向树 ( $N-1-log_2N$ 次) 阶段，总共 $2N-2-log_2N$ 次。当输入长度变大时，Brent-Kung 算法执行的操作数量永远不会超过顺序算法执行的操作数量的 2 倍。\nBrent-Kung 算法的活动线程的数量通过归约树比 Kogge-Stone 算法下降得快得多。然而，一些非活动线程可能仍然会消耗 CUDA 设备中的执行资源，因为它们通过 SIMD 绑定到其他活动线程。这使得在 CUDA 设备上前者工作效率上的优势不那么明显。在有充足执行资源的情况下，由于需要额外的步骤来执行反向树阶段，Brent-Kung 的时间是 Kogge-Stone 的两倍。\n11.5 Coarsening for Even More Work Efficiency 如下图所示，粗化扫描分为三个阶段。在第一阶段，我们让每个线程对其相邻的子线程执行串行扫描。需要注意如果每个线程通过访问全局内存的输入直接执行扫描，则它们的访问不会合并。所以我们以合并的方式在共享内存和全局内存之间传输数据，并在共享内存中执行不是那么好的内存访问模式。在第二阶段，每个块中的所有线程协作并对由每个部分的最后一个元素组成的逻辑数组执行扫描操作。在第三阶段，每个线程将其前一个部分的最后一个元素的新值与自身部分除最后一个的所有元素相加。对应的内核代码如下。\nA Three-phase Parallel Scan for Higher Work Efficiency\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #define CORASE_FACTOR 4 #define SUBSECTION_SIZE (SECTION_SIZE / CORASE_FACTOR) __global__ void Corasened_Scan_Kernel(int* X, int* Y, unsigned int N) { // Partition X into blockDim.x subsections // Load X into shared memory in coalesced fashion __shared__ float XY[SECTION_SIZE]; __shared__ float subXY[SUBSECTION_SIZE]; for (int i = 0; i \u0026lt; SECTION_SIZE; i+= blockDim.x) { XY[threadIdx.x + i] = X[threadIdx.x + i]; } __syncthreads(); // Part 1: Compute prefix sum of each subsection in sequenial for (int i = 1; i \u0026lt; SUBSECTION_SIZE; i++) { XY[threadIdx.x * SUBSECTION_SIZE + i] += XY[threadIdx.x * SUBSECTION_SIZE + i - 1]; } __syncthreads(); // Part 2: Compute prefix sum of the last element of each subsection in parallel unsigned int lastElemId = (blockIdx.x + 1) * blockDim.x * CORASE_FACTOR - 1; subXY[threadIdx.x] = XY[(threadIdx.x + 1) * SUBSECTION_SIZE - 1]; float temp = 0.0f; for (int stride = 1; stride \u0026lt; SUBSECTION_SIZE; stride *= 2) { __syncthreads(); if (threadIdx.x \u0026gt;= stride) { temp = subXY[threadIdx.x] + subXY[threadIdx.x - stride]; } __syncthreads(); if (threadIdx.x \u0026gt;= stride) { subXY[threadIdx.x] = temp; } } __syncthreads(); // Part 3: Add the reduction sum of the previous subsection to the current subsection (except the last element) for (int i = 1; i \u0026lt; SUBSECTION_SIZE - 1; i++) { XY[threadIdx.x * SUBSECTION_SIZE + i] += subXY[threadIdx.x]; } __syncthreads(); // Store back to Y for (int i = 0; i \u0026lt; SECTION_SIZE; i+= blockDim.x) { Y[threadIdx.x + i] = XY[threadIdx.x + i]; } } 11.6 Segmented Parallel Scan for Arbitrary-length Inputs 对于长度很大的输入数据，我们首先将其划分为多个部分，以便每个部分都可以放入流多处理器的共享内存中，并由单个块进行处理。如下图所示，第一步在每个块内部先进行扫描，完成后每个扫描块的最后一个输出元素为该扫描块的所有输入元素的和。第二步将每个扫描块的最后一个结果元素收集到一个数组中，并对这些输出元素执行扫描。第三步将第二步扫描输出值与其对应扫描块的值相加。\nA Hierarchical Scan for Arbitrary Length Inputs\n我们可以用三个内核实现分段扫描。第一个内核与 11.5 节的内核基本相同，第二个内核只是单个线程块的并行扫描内核，第三个内核将 S 数组和 Y 数组作为输入，并将其输出写回 Y.\n11.7 Single-pass Scan for Memory Access Efficiency ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch11/","summary":"Personal notebook 11 of Programming Massively Parallel","title":"PMPP Learning-Chapter 11 Prefix sum (scan)-An Introduction to Work Efficiency in Parallel Algorithms"},{"content":"10 Reduction and Minimizing Divergence 归约 (Reduction) 是从输入数组计算出一个数的运算。\n10.1 Background 归约是从输入数组计算出一个数的运算，通常是通过对数组中的元素进行某种二元运算来实现的。如果二元操作符具有定义良好的恒等值 (例如加法中的 0，乘法中的 1)，则可以为基于该操作符进行运算的一个数组中的值定义归约操作。可以通过顺序遍历数组的每个元素来进行归约。下面伪代码为运算符的一般归约形式，它被定义为接受两个输入并返回一个值的函数。\n1 2 3 4 acc = IDENTITY; for (i = 0; i \u0026lt; n; i++) { acc = Operator(acc, input[i]); } 10.2 Reduction Trees 并行归约的基本思想如下图所示，时间竖直向下增加，水平方向为线程在每个时间点并行执行的活动。并行约简假定输出不随着输入值进行运算的顺序而改变 (即具有交换律)。\nA Parallel Max Reduction Tree\n上图中的并行归约模式被称为归约树 (reduction tree)，因为它看起来像一棵叶子是原始输入元素，根是最终结果的树。归约树的边是无实际意义，只是反映了从一个时间步执行的操作到下一个时间步执行的操作的信息流。执行的操作总数是一个几何级数 $\\frac{1}{2}N + \\frac{1}{2^2}N + \\cdots + \\frac{1}{N}N = N-1$. 归约树需要 $log_{2}{N}$ 步骤来完成。完成计算所需的资源数量随着时间步的增加而迅速减少，每个时间步的并行度与所需的执行单元数量相同。并行度和资源消耗随着时间步长的剧烈变化让归约树成为一种具有挑战性的并行模式。\n10.3 A Simple Reduction Kernel 从实现一个在单个线程块内执行求和归约树的内核开始。其并行执行的情况如下图所示，假设输入数组位于全局内存中，并且在调用内核函数时将其指针作为输入参数传入。每个线程被分配到索引2*threadIdx.x 处，每一步归约的结果也会被写入此处。\nThreads Arrangment of the Input Array in the Simple Kernel\n对应的内核代码如下所示，for 循环中的 __syncthreads() 确保任何一个线程开始下一次迭代之前，所有线程都已经完成了上一次迭代的计算。\n1 2 3 4 5 6 7 8 9 10 11 12 13 __global__ void SimpleReductionKernel(float* input, float* output) { // launch single block with 1/2 #elements threads unsigned int i = threadIdx.x * 2; for (unsigned int stride = 1; stride = blockDim.x; stride *= 2) { if (threadIdx.x % 2 == 0) { input[i] += input[i + stride]; } __syncthreads(); // Ensure partial sums have been written to the destinition. } if (threadIdx.x == 0) { *output = input[0]; } } 10.4 Minimizing Control Divergence 上面代码在每次迭代中对活动和非活动线程的管理导致了控制发散。只有那些线程的 threadIdx.x 为偶数的线程在第二次迭代中执行加法操作。由于控制发散造成的执行资源浪费随着迭代次数的增加而增加，第二次迭代中每个 warp 只有一半的线程执行加法操作，但消耗的计算资源却是相同的。如果输入数组的大小大于32，整个 warp 将在第五次迭代后不再执行加法操作。消耗的执行资源的总数与所有迭代中活动 warp 的总数成正比，计算方式如下。\n$$\\text{active warps} = (5+\\frac{1}{2}+\\frac{1}{4}+\\cdots+1)*\\frac{N}{64}*32$$其中 N/64 代表启动的 warp 总数。每个 warp 在前五次迭代中都处于活动状态，之后每次迭代都只有上次一半的线程在活动状态，直到只剩最后一个。 每次迭代中活动线程计算出的结果个数等于活动线程的总数\n$$\\text{active threads} = \\frac{N}{64}*(32+16+8+4+2+1)+\\frac{N}{64}*\\frac{1}{2}*1+\\frac{N}{64}*\\frac{1}{4}*1+\\cdots+1$$每个 warp 在前五次迭代中处于活动状态的线程数减半，之后每次迭代中每个处于活动状态的 warp 只有一个线程处于活动状态。这个结果应该非常直观的，因为其正等于完成归约所需的操作总数。 由此我们可以得出当输入大小为 256 时，执行资源利用率为 255/736 = 0.35. 如下图所示，为了减少控制分散应该安排线程和它们计算的位置使得能够随着时间的推移而彼此靠近。也就是说，我们希望步幅随着时间的推移而减少，而不是增加。修改后的内核函数如下，每次迭代中执行加法操作的线程数是相同的，但直到同时进行加法的线程数小于 32 之前，一个 warp 的线程数所走的分支相同。\nArrangement with Less Control Divergence\n1 2 3 4 5 6 7 8 9 10 11 12 13 __global__ void ConvergentSumReductionKernel(float* input, float* output) { unsigned int i = threadIdx.x; for (unsigned int stride = blockDim.x; stride \u0026gt;= 1; stride /= 2) { // Decrease stride to reduce control divergence if (threadIdx.x \u0026lt; stride) { input[i] += input[i + stride]; } __syncthreads(); } if (threadIdx.x == 0) { *output = input[0]; } } 这种情况下的进行规约操作消耗的计算资源总数为 $$(\\frac{N}{64}*1 + \\frac{N}{64}*\\frac{1}{2}*1 + \\frac{N}{64}*\\frac{1}{4}*1 + \\cdots + 1 + 5*1) * 32 $$ 5*1 代表最后的五次迭代，只有一个活动的warp，并且它的所有32个线程都消耗执行资源，即使只有一小部分线程是活动状态。执行资源的利用率为 255/384 = 0.66.\n10.5 Minimizing Memory Divergence 上面的内核还有内存分散的问题。在每次迭代中，每个线程对全局内存执行 2 次读取和 1 次写入。第一次从自己的位置读取，第二次从离自己 stride 的位置读取，相加后写入到自己的位置。 10.3 节的内核代码中，第一次迭代每个 warp 中的相邻线程间隔 2 个元素，因此要访问 2 个内存位置，此后每次迭代 stride 都增加，直到第六次迭代时，每个 warp 都只有一个线程处于活动状态，只用访问 1 个位置。因此进行内存访问的总次数为 $$(5*\\frac{N}{64}*2+\\frac{N}{64}*1+\\frac{N}{64}*\\frac{1}{2}*1+\\cdots+1)*3$$ 10.4 节的内核代码中，每个 warp 在任何读或写时只进行一个全局内存请求，直到该 warp 中的所有线程都处于非活动状态。最后五次迭代的线程都位于一个 warp 中，因此进行内存访问的总次数为 $$((\\frac{N}{64}*1+\\frac{N}{64}*\\frac{1}{2}*1+\\frac{N}{64}*\\frac{1}{4}*1+\\cdots+1)+5)*3$$ 对于长度为 2048 的输入，前者和后者全局内存请求的总数分别为 1149 和 204. 后者在使用 DRAM 带宽方面也具有更高的效率。\n10.6 Minimizing Global Memory Accesses 通过使用共享内存，可以进一步改进 10.4 节的内核。在每次迭代中，线程将它们的部分和结果值写入全局内存，这些值在下一次迭代中由相同的线程和其他线程重新读取。如下图所示，通过将部分和结果保存在共享内存中，可以进一步提高执行速度。\nUse Shared Memory to Reduce Accesses from the Global Memory 对应的代码如下，每个线程从全局内存加载并 2 个输入元素并将部分和写入共享内存。剩下的所有迭代中的计算都在共享内存中进行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #define BLOCK_DIM 512 __global__ void SharedMemoryReductionKernel(float* input) { __shared__ float input_s[BLOCK_DIM]; unsigned int i = threadIdx.x; input_s[i] = input[i] + input[i + blockDim.x]; // Partial sum of first iteration for (unsigned int stride = blockDim.x / 2; stride \u0026gt;= 1; stride /= 2) { __syncthreads(); // Ensure all partial sums have been written to shared memory if (threadIdx.x \u0026lt; stride) { input_s[i] += input_s[i + stride]; // Partial sum of subsequent iterations } } if (threadIdx.x == 0) { input[0] = input_s[0]; // Write final sum to output } } 全局内存访问的次数减少到初始加载输入数组和最终写入 input[0]，总共只有 (N/32) + 1 个全局内存请求。\n10.7 Hierarchical Reduction for Arbitrary Input Length 由于 __syncthreads() 只对同一块中的线程有效，因此无法在不同块之间同步。下图展示了如何使用分级归约来解决这个问题，其思想是将输入数组划分为多个适合于线程块大小的段。然后，所有块都独立地执行归约树，并使用原子加法操作将它们的结果累积到最终输出。\nSegmented Multiblock Reduction Using Atomic Operations 对应的内核代码如下。每个线程块处理 2*blockDim.x 个元素。在每个线程块内，我们通过线程所属块的段起始位置加上 threadIdx.x 为每个线程分配其输入元素的位置。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 __global__ void SegmentedSumReductionKernel(float* input, float* output) { __shared__ float input_s[BLOCK_DIM]; unsigned int segment = blockIdx.x * blockDim.x * 2; // Each block processes 2*blockDim.x elements unsigned int i = segment + threadIdx.x; unsigned int t = threadIdx.x; input_s[t] = input[t + blockDim.x]; // Partial sum of first iteration of each block for (unsigned int stride = blockDim.x / 2; stride \u0026gt;= 1; stride /= 2) { __syncthreads(); // Ensure all partial sums have been written to shared memory if (t \u0026lt; stride) { input_s[t] += input_s[t + stride]; // Partial sum of subsequent iterations } } if (t == 0) { atomicAdd(\u0026amp;output, input_s[0]); // Write final sum to output } } 10.8 Thread Coarsening for Reduced Overhead 到目前为止，我们使用过的归约内核都试图通过使用尽可能多的线程来最大化并行性。若线程块大小为 1024 个线程，则需要启动的线程块数量为 N/2048. 下图展示了如何将线程粗化。线程独立地添加它们负责的四个元素，它们不需要同步，直到将所有的四个元素相加之后才能将部分和结果写入共享内存。剩下的步骤与 10.7 节后续相同。\nThread Coarsening in Reduction 对应的内核如下，我们乘以 COARSE_FACTOR 来表示每个线程块的负责的段的大小是原来的 COARSE_FACTOR 倍。部分和累加到局部变量 sum 中，并且因为线程是独立运行的，在循环中不会调用 __syncthreads().\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #define COARSE_FACTOR 2 __global__ void CoarsenedSumReductionKernel(float* input, float* output) { __shared__ float input_s[BLOCK_DIM]; unsigned int segment = blockIdx.x * COARSE_FACTOR * blockDim.x * 2; unsigned int i = segment + threadIdx.x; unsigned int t = threadIdx.x; float sum = input[i]; for (int tile = 1; tile \u0026lt; COARSE_FACTOR; tile++) { // Partitial sum is accumulated independently sum += input[i + tile * blockDim.x]; } input_s[t] = sum; for (unsigned int stride = blockDim.x / 2; stride \u0026gt;= 1; stride /= 2) { __syncthreads(); if (t \u0026lt; stride) { input_s[t] += input_s[t + stride]; } } if (t == 0) { atomicAdd(\u0026amp;output, input_s[0]); } } 下图比较了两个原始线程块在没有进行线程粗化下被硬件顺序执行情况，图 A 当第一个线程块完成后，硬件调度第二个线程块，在不同的数据段上执行相同的步骤。图 B 的这个线程块开始需要三个步骤，其中每个线程对它负责的四个元素求和。剩下的三个步骤执行归约树，每个步骤中有一半的线程退出活动状态。相比图 A，图 B 只需要6个步骤 (而不是 8 个)，其中 3 个步骤 (而不是 2 个) 充分利用了硬件。 当我们粗化线程时，并行完成的工作就会减少。因此，增加粗化因子将减少硬件正在利用的数据并行性的数量。\nComparing Parallel Reduction with and without Thread Coarsening\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch10/","summary":"Personal notebook 10 of Programming Massively Parallel","title":"PMPP Learning-Chapter 10 Reduction and Minimizing Divergence"},{"content":"8 Stencil 在流体动力学、热传导、燃烧、天气预报、气候模拟和电磁学等应用领域，模板是求解偏微分方程的数值方法的基础。模板方法的基本思想是，将偏微分方程的求解转化为求解一个局部的线性方程组，然后在该局部进行迭代求解，最后得到全局解。由于求解微分问题时对数值精度的要求，模板处理的数据往往是高精度的浮动数据，对于 tiling 技术来说，这需要消耗更多的片上内存。\nBackgroud 用计算机数值计算和求解函数、模型、变量和方程的第一步是将它们转换成离散的表示形式。表示的保真度或这些近似插值技术的函数值的准确性取一方面决于网格点之间的间距:间距越小，近似越准确。离散表示的保真度还取决于所使用数字的精度。本章中将重点关注计算模式，其中模板应用于所有相关的输入网格点以生成所有网格点的输出值，这将被称为模板扫描 (stencil sweep).\nOne-dimensional Stencil Example\nTwo-dimensional \u0026amp; Three-dimensional Stencil Example\n8.2 Parallel stencil: A Basic Algorithm 2D 情况下输出网格的 tiling 如下图所示，其中每个线程块负责一个 4*4 大小的输出 tile. 一个基本的 3D stencil 内核函数如下，其中每个线程块负责计算一个输出 tile 的值，每个线程用于计算一个元素。每个线程执行13次浮点操作 (7 次乘法和 6 次加法)，并加载 7 个输入元素 (每个 4 字节)。因此，这个内核的浮点对计算访存比是 13 / (7*4) = 0.46 OP/B.\n2D 5-point Stencil Tiling for Output Grid\n1 2 3 4 5 6 7 8 9 10 11 12 13 __global__ void stencil_kernel(float* in, float* out, unsigned int N) { unsigned int i = blockIdx.z*blockDim.z+threadIdx.z; unsigned int j = blockIdx.y*blockDim.y+threadIdx.y; unsigned int k = blockIdx.x*blockDim.x+threadIdx.x; if (i \u0026gt;= 1 \u0026amp;\u0026amp; i \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 1 \u0026amp;\u0026amp; j \u0026lt; N - 1 \u0026amp;\u0026amp; k \u0026gt;= 1 \u0026amp;\u0026amp; k \u0026lt; N - 1) { out[i * N * N + j * N + k] = c0 * in[i * N * N + j * N + k] + c1 * in[i * N * N + j * N + k - 1] + c2 * in[i * N * N + j * N + k + 1] + c3 * in[i * N * N + (j - 1) * N + k] + c4 * in[i * N * N + (j + 1) * N + k] + c5 * in[(i - 1) * N * N + j * N + k] + c6 * in[(i + 1) * N * N + j * N + k]; } } 8.3 Shared Memory Tiling for Stencil Sweep 下图展示了二维五点模板的输入和输出 tile，可以发现五点模板的输入 tile 不包括四个角落的元素。因为每个输出网格点值只使用输入 tile 的 5 个元素，而 3*3 卷积使用 9 个元素。而 3D 情况下七点模板相对于 3*3*3 卷积从将输入网格点加载到共享内存中能获得的收益更低。由于为卷积加载输入 tile 的所有策略都直接应用于模板扫描，下面给出了一个加载到共享内存版本的内核函数，线程块的大小与输入 tile 相同，在计算输出 tile 点值时没有使用部分线程。每个表达式中减去的值1是因为内核假设一个3D七点模板，每边有一个网格点\nInput and Output Tiles for a 2D 5-point Stencil\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #define IN_TILE_DIM 16 __global__ void stencil_shared_mem_tiling_kernel(float* in, float* out, unsigned int N) { // upper left corner of input tile unsigned int i = blockIdx.z*blockDim.z+threadIdx.z - 1; unsigned int j = blockIdx.y*blockDim.y+threadIdx.y - 1; unsigned int k = blockIdx.x*blockDim.x+threadIdx.x - 1; __shared__ float in_s[IN_TILE_DIM][IN_TILE_DIM][IN_TILE_DIM]; if (i \u0026gt;= 1 \u0026amp;\u0026amp; i \u0026lt; IN_TILE_DIM \u0026amp;\u0026amp; j \u0026gt;= 1 \u0026amp;\u0026amp; j \u0026lt; IN_TILE_DIM \u0026amp;\u0026amp; k \u0026gt;= 1 \u0026amp;\u0026amp; k \u0026lt; IN_TILE_DIM) { in_s[threadIdx.z][threadIdx.y][threadIdx.x] = in[i * N * N + j * N + k]; } __syncthreads(); if (i \u0026gt;= 1 \u0026amp;\u0026amp; i \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 1 \u0026amp;\u0026amp; j \u0026lt; N - 1 \u0026amp;\u0026amp; k \u0026gt;= 1 \u0026amp;\u0026amp; k \u0026lt; N - 1) { if (threadIdx.x \u0026gt;=1 \u0026amp;\u0026amp; threadIdx.x \u0026lt; IN_TILE_DIM-1 \u0026amp;\u0026amp; threadIdx.y \u0026gt;=1 \u0026amp;\u0026amp; threadIdx.y \u0026lt; IN_TILE_DIM-1 \u0026amp;\u0026amp; threadIdx.z \u0026gt;=1 \u0026amp;\u0026amp; threadIdx.z \u0026lt; IN_TILE_DIM-1) { // 7 point template out[i * N * N + j * N + k] = c0 * in_s[threadIdx.z][threadIdx.y][threadIdx.x] + c1 * in_s[threadIdx.z][threadIdx.y][threadIdx.x - 1] + c2 * in_s[threadIdx.z][threadIdx.y][threadIdx.x + 1] + c3 * in_s[threadIdx.z][threadIdx.y - 1][threadIdx.x] + c4 * in_s[threadIdx.z][threadIdx.y + 1][threadIdx.x] + c5 * in_s[threadIdx.z - 1][threadIdx.y][threadIdx.x] + c6 * in_s[threadIdx.z + 1][threadIdx.y][threadIdx.x]; } } 硬件限制每个块最大为 1024 ，因此 tile 通常比较小。一般 tile 的边长为8，每个块的大小为 512 个线程。相反，卷积通常用于处理二维图像，可以使用更大的 tile 尺寸 (32x32). 第一个缺点是由于 halo cell 的开销，重用率随着 tile 大小的降低而降低。第二个缺点是它对内存合并有不利影响。对于一个 8x8x8 tile，每 warp 的线程将访问全局内存中至少四行 (888*4 bytes, 32 threads, 64 bits/DRAM = 4)\n8.4 Thread Coarsening 下图假设每个输入 tile 由 6x6x6 个网格点组成。为了使输入 tile的内部可见，块的前、左和上面没有画出。假设每个输出 tile 由 4x4x4个网格点组成。分配给处理该 tile 的线程块由与输入 tile 的一个x-y平面 (即 6x6) 相同数量的线程组成。程序一开始，每个块需要将包含计算输出块平面值所需的所有点的三个输入块平面加载到共享内存中。在每次迭代期间，块中的所有线程将处理输出 tile 与迭代值相同的 z 索引对应的 x-y 平面。\nMapping of Shared Memory Array after First Iteration\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #define OUT_TILE_DIM IN_TILE_DIM - 2 __global__ void stencil_thread_coarsening_kernel(float* in, float* out, unsigned int N) { int iStart = blockIdx.z * OUT_TILE_DIM; int j = blockIdx.y * blockDim.y + threadIdx.y - 1; int k = blockIdx.x * blockDim.x + threadIdx.x - 1; __shared__ float inPrev_s[IN_TILE_DIM][IN_TILE_DIM]; __shared__ float inCurr_s[IN_TILE_DIM][IN_TILE_DIM]; __shared__ float inNext_s[IN_TILE_DIM][IN_TILE_DIM]; if (iStart \u0026gt;= 1 \u0026amp;\u0026amp; iStart \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; N \u0026amp;\u0026amp; k \u0026gt;= 0 \u0026amp;\u0026amp; k \u0026lt; N) { inPrev_s[threadIdx.y][threadIdx.x] = in[(iStart - 1) * N * N + j * N + k]; } if (iStart \u0026gt;= 0 \u0026amp;\u0026amp; iStart \u0026lt; N \u0026amp;\u0026amp; j \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; N \u0026amp;\u0026amp; k \u0026gt;= 0) { inCurr_s[threadIdx.y][threadIdx.x] = in[iStart * N * N + j * N + k]; } for (int i = 0; i \u0026lt; OUT_TILE_DIM; i++) { i += iStart; if (i \u0026gt;= -1 \u0026amp;\u0026amp; i \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; N \u0026amp;\u0026amp; k \u0026gt;= 0 \u0026amp;\u0026amp; k \u0026lt; N) { inNext_s[threadIdx.y][threadIdx.x] = in[(i + 1) * N * N + j * N + k]; } __syncthreads(); if (i \u0026gt;= 1 \u0026amp;\u0026amp; i \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 1 \u0026amp;\u0026amp; j \u0026lt; N - 1 \u0026amp;\u0026amp; k \u0026gt;= 1 \u0026amp;\u0026amp; k \u0026lt; N - 1 \u0026amp;\u0026amp; threadIdx.y \u0026gt;= 1 \u0026amp;\u0026amp; threadIdx.y \u0026lt; IN_TILE_DIM - 1 \u0026amp;\u0026amp; threadIdx.x \u0026gt;= 1 \u0026amp;\u0026amp; threadIdx.x \u0026lt; IN_TILE_DIM - 1) { out[i * N * N + j * N + k] = c0 * inCurr_s[threadIdx.y][threadIdx.x] + c1 * inCurr_s[threadIdx.y][threadIdx.x - 1] + c2 * inCurr_s[threadIdx.y][threadIdx.x + 1] + c3 * inCurr_s[threadIdx.y - 1][threadIdx.x] + c4 * inCurr_s[threadIdx.y + 1][threadIdx.x] + c5 * inPrev_s[threadIdx.y][threadIdx.x] + c6 * inNext_s[threadIdx.y][threadIdx.x]; } } inPrev_s[threadIdx.y][threadIdx.x] = inCurr_s[threadIdx.y][threadIdx.x]; inCurr_s[threadIdx.y][threadIdx.x] = inNext_s[threadIdx.y][threadIdx.x]; } 线程粗化内核的优点是，它不要求输入 tile 的所有平面都出现在共享内存中。在任意时刻，只有三层输入 tile 需要在共享内存中。\n8.5 Register Tiling 根据计算过程可以发现每个 inPrev_s 和 inNext_s 的元素仅由一个线程在计算具有相同 x-y 索引的输出 tile 网格点时使用。只有 inCurr_s 的元素被多个线程访问，真正需要位于共享内存中。因此我们可以修改内涵函数如下，寄存器变量 inPrev 和 inNext 分别替换共享内存数组 inPrev_s 和 inNext_s. 保留了 inCurr_s 以允许在线程之间共享 x-y 平面相邻网格点值。这样这个内核使用的共享内存量减少到原来的 1/3.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 void stencil_register_tiling_coarsening_kernel(float* in, float* out, unsigned int N) { int iStart = blockIdx.z * OUT_TILE_DIM; int j = blockIdx.y * blockDim.y + threadIdx.y - 1; int k = blockIdx.x * blockDim.x + threadIdx.x - 1; float inPrev; float inCurr; float inNext; __shared__ float inCurr_s[IN_TILE_DIM][IN_TILE_DIM]; if (iStart \u0026gt;= 1 \u0026amp;\u0026amp; iStart \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; N \u0026amp;\u0026amp; k \u0026gt;= 0 \u0026amp;\u0026amp; k \u0026lt; N) { inPrev = in[(iStart - 1) * N * N + j * N + k]; } if (iStart \u0026gt;= 0 \u0026amp;\u0026amp; iStart \u0026lt; N \u0026amp;\u0026amp; j \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; N \u0026amp;\u0026amp; k \u0026gt;= 0) { inCurr = in[iStart * N * N + j * N + k]; inCurr_s[threadIdx.y][threadIdx.x] = inCurr; } for (int i = 0; i \u0026lt; OUT_TILE_DIM; i++) { i += iStart; if (i \u0026gt;= -1 \u0026amp;\u0026amp; i \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; N \u0026amp;\u0026amp; k \u0026gt;= 0 \u0026amp;\u0026amp; k \u0026lt; N) { inNext = in[(i + 1) * N * N + j * N + k]; } __syncthreads(); if (i \u0026gt;= 1 \u0026amp;\u0026amp; i \u0026lt; N - 1 \u0026amp;\u0026amp; j \u0026gt;= 1 \u0026amp;\u0026amp; j \u0026lt; N - 1 \u0026amp;\u0026amp; k \u0026gt;= 1 \u0026amp;\u0026amp; k \u0026lt; N - 1 \u0026amp;\u0026amp; threadIdx.y \u0026gt;= 1 \u0026amp;\u0026amp; threadIdx.y \u0026lt; IN_TILE_DIM - 1 \u0026amp;\u0026amp; threadIdx.x \u0026gt;= 1 \u0026amp;\u0026amp; threadIdx.x \u0026lt; IN_TILE_DIM - 1) { out[i * N * N + j * N + k] = c0 * inCurr + c1 * inCurr_s[threadIdx.y][threadIdx.x - 1] + c2 * inCurr_s[threadIdx.y][threadIdx.x + 1] + c3 * inCurr_s[threadIdx.y - 1][threadIdx.x] + c4 * inCurr_s[threadIdx.y + 1][threadIdx.x] + c5 * inPrev + c6 * inNext; } } __syncthreads(); inPrev = inCurr; inCurr = inNext; inCurr_s[threadIdx.y][threadIdx.x] = inNext; } 首先，许多对共享内存的读写现在被转移到寄存器中。其次，每个块只消耗三分之一的共享内存。当然，这是以每个线程多使用 3 个寄存器为代价实现的。需要注意全局内存访问的数量没有改变。\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch8/","summary":"Personal notebook 8 of Programming Massively Parallel Processors.","title":"PMPP Learning-Chapter 8 Stencil"},{"content":"9 Parallel Histogram-An Introduction to Atomic Operations and Privatization 本章介绍并行直方图计算模式，其中每个输出元素都可以由任何线程更新。因此，当线程更新输出元素时必须注意线程之间的协调，避免任何可能破坏最终结果的干扰。\n9.1 Background 直方图是数据集中数据值出现的数量计数或百分比的显示。在最常见的直方图形式中，间隔区间沿水平轴绘制，每个间隔中的数据值计数表示为从水平轴上升的矩形或条形的高度。 许多应用领域依赖于直方图来总结数据集进行数据分析。其中一个领域就是计算机视觉。图像子区域直方图的计算过程是计算机视觉中特征 (图像中感兴趣的模式) 提取的重要方法。\nA Histogram Representation of “programming massively parallel processors”\n9.2 Atomic Operations and A Basic Histogram Kernel 如下图所示，并行化直方图计算的最直接的方法是启动数据一样多的线程，让每个线程处理一个元素。每个线程读取其分配的输入元素，并增加对应的隔计数器的值。\nBasic Parallelization of a Histogram\nhisto 数组中间隔计数器的增加是对内存位置的更新或 read-modify-write 操作。该操作包括读取内存位置(读)，在原始值上加 1(修改)，并将新值写回内存位置 (写)。在实际过程中会出现读-修改-写竞争条件 (read-modify-write race condition)，在这种情况下，两个或多个同步更新操作的结果会根据所涉及的操作的相对时间而变化。 下图 A 中线程 1 在时间段 1~3 期间完成了其读-修改-写序列的所有三个部分，然后线程 2 在时间段 4 开始，最后结果正确。在图 B 中，两个线程的读-修改-写顺序重叠。线程 1 在时间段 4 时将新值写入 histo[x]。当线程 2 在时间段 3 读取 histo[x]时，它的值仍然是 0，因此最后的写入的值是 1.\nRace Condition in Updating a histo Array Element\n原子操作 (atomic operation) 的读、修改和写部分构成一个不可分割的单元，因此称为原子操作。对该位置的其他读-修改-写序列不能与其在时间上有重叠。需要注意原子操作在线程之间不强制任何特定的执行顺序，比如线程 1 可以在线程 2 之前或之后运行。CUDA内核可以通过函数调用对内存位置执行原子加法操作:\n1 int atomicAdd(int* address, int val); atomicAdd 是一个内建函数 (intrinsic function)，它被编译成一个硬件原子操作指令。该指令读取全局或共享内存中 address 参数所指向的32位字，将 val 加上旧值中并写入结果回相同地址的内存中。该函数返回地址处的旧值。\nIntrinsic Functions 现代处理器通常提供特殊指令，这些指令要么执行关键功能 (如原子操作)，要么大幅提高性能 (如矢量指令)。这些指令通常作为内建函数暴露给程序员，从程序员的角度来看，这些是库函数。然而，它们被编译器以一种特殊的方式处理。每个这样的调用都被翻译成相应的特殊指令。在最终代码中没有函数调用，只有与用户代码一致的特殊指令。 1 2 3 4 5 6 7 8 9 10 __global__ void histo_kernel(char* data, unsigned int length, unsigned int* histo) { unsigned int i = threadIdx.x + blockIdx.x * blockDim.x; if (i \u0026lt; length) { int alphabet_position = data[i] - \u0026#39;a\u0026#39;; if (alphabet_position \u0026gt;= 0 \u0026amp;\u0026amp; alphabet_position \u0026lt; 26) { atomicAdd(\u0026amp;histo[alphabet_position / 4], 1); } } } 9.3 Latency and Throughput of Atomic Operations 高内存访问吞吐量的关键是同时进行许多 DRAM 访问。然而，当许多原子操作更新相同的内存位置时，一个后面线程的读-修改-写序列在前一个线程的写操作结束之前不能开始，即如下图所示，同时只能有一个线程在同一内存位置执行原子操作。更新这些间隔的大量争用流量会使得吞吐量降低。\nThe Execution of Atomic Operations at the Same Location\n提高原子操作吞吐量的一种方法是减少对竞争严重的位置的访问延迟。现代 GPU 允许在被所有 SM 共享的最后一级缓存中执行原子操作。由于对最后一级缓存的访问时间是几十个周期而不是几百个周期，因此原子操作的吞吐量与早期GPU相比至少提高了一个数量级。\n9.4 Privatization 提高原子操作吞吐量的另一种方法是通过引导流量远离竞争严重的位置。这可以通过一种称为私有化 (privatization) 的技术来实现。其思想是将高度竞争的输出数据结构复制到私有副本中，以便线程的每个子集都可以更新其私有副本。 下图展示了如何将私有化应用于直方图统计。每个线程块由 8 个线程组成，争用只会在同一块中的线程之间以及在最后合并私有副本时发生，而不是更新相同直方图 bin 的所有线程之间发生争用。\nReduce Contention of Atomic Operations by Private Copies of Histogram\n一个私有化版本的代码如下，为 histo 数组分配足够的设备内存 (gridDim.x*NUM_BINS*4 bytes) 来保存直方图的所有私有副本。在执行结束时，每个线程块将把私有副本中的值提交到 块 0 的部分。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #define NUM_BINS 7 // # histo bins __global__ void histo_private_kernel(char* data, unsigned int length, unsigned int* histo) { unsigned int i = threadIdx.x + blockIdx.x * blockDim.x; if (i \u0026lt; length) { int alphabet_position = data[i] - \u0026#39;a\u0026#39;; if (alphabet_position \u0026gt;= 0 \u0026amp;\u0026amp; alphabet_position \u0026lt; 26) { atomicAdd(\u0026amp;histo[blockIdx.x * 7 + alphabet_position / 4], 1); } } if (blockIdx.x \u0026gt; 0) { __syncthreads(); // for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { unsigned int binValue = histo[blockIdx * NUM_BINS + bin]; atomicAdd(\u0026amp;histo[bin], binValue); } } } 在每个线程块的基础上创建直方图的私有副本的一个好处是线程可以在提交自己的统计结果之前使用 __syncthreads() 来等待彼此。另一个好处是，如果直方图中的 bin 数量足够小，则可以在共享内存中声明直方图的私有副本 (每个线程块一个)。下面代码直方图在共享内存中分配私有副本 histo_s 数组，并由块的线程并行初始化为 0.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 __global__ void histo_shared_private_kernel(char* data, unsigned int length, unsigned int* histo) { // Initializing private bins __shared__ unsigned int histo_s[NUM_BINS]; for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { histo_s[bin] = 0; } __syncthreads(); // Histogram unsigned int i = threadIdx.x + blockIdx.x * blockDim.x; if (i \u0026lt; length) { int alphabet_position = data[i] - \u0026#39;a\u0026#39;; if (alphabet_position \u0026gt;= 0 \u0026amp;\u0026amp; alphabet_position \u0026lt; 26) { atomicAdd(\u0026amp;histo_s[alphabet_position / 4], 1); } } __syncthreads(); // Commit to global memory for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { unsigned binValue = histo_s[bin]; if (binValue \u0026gt; 0) { atomicAdd(\u0026amp;histo[bin], binValue); } } } 9.5 Coarsening 私有化的开销是需要将私有副本提交到公共副本。每个线程块都会执行一次提交操作，因此，使用的线程块越多，这个开销就越大。如下图所示，我们可以通过减少块的数量来减少私有副本的数量，从而减少提交到公共副本的次数，让每个线程处理多个输入元素。\nContiguous Partition of Input Elements\n下面代码是一个连续分区 (contiguous partition) 策略的示例，输入被连续划分成多个段，每个段被分配给一个线程，每个线程从 tid*CFACTOR 迭代到 (tid+1)*CFACTOR 进行所负责部分的统计。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #define CFACTOR 3 __global__ void histo_shared_private_contiguous_kernel(char* data, unsigned int length, unsigned int* histo) { { // Initializing private bins __shared__ unsigned int histo_s[NUM_BINS]; for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { histo_s[bin] = 0; } __syncthreads(); // Histogram unsigned tid = blockIdx.x * blockDim.x + threadIdx.x; for (unsigned int i = tid * CFACTOR; i \u0026lt; (tid + 1)*CFACTOR \u0026amp;\u0026amp; i \u0026lt; length; i++) { int alphabet_position = data[i] - \u0026#39;a\u0026#39;; if (alphabet_position \u0026gt;= 0 \u0026amp;\u0026amp; alphabet_position \u0026lt; 26) { atomicAdd(\u0026amp;histo_s[alphabet_position / 4], 1); } } __syncthreads(); // Commit to global memory for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { unsigned binValue = histo_s[bin]; if (binValue \u0026gt; 0) { atomicAdd(\u0026amp;histo[bin], binValue); } } } 上述在 GPU 上连续分区的思路会导致内存不友好的访问模式，因为 threadIdx 相同的线程访问的不是一块连续的内存区域。因此我们要采用交错分区 (interleaved partition)，如下图所示，即不同线程要处理的分区彼此交错。实际应用中每个线程在每次迭代中应该处理 4 个 char (一个 32 位字)，以充分利用缓存和 SMs 之间的互连带宽。\nInterleaved Partition of Input Elements\n下面代码是一个交错分区的示例。在循环的第一次迭代中，每个线程使用其全局线程索引访问数据数组:线程 0 访问元素 0，线程 1 访问元素 1，线程 2 访问元素 2\u0026hellip;所有线程共同处理输入的第一个 blockDim.x*gridDim.x 元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __global__ void histo_shared_private_interleaved_kernel(char* data, unsigned int length, unsigned int* histo) { { // Initializing private bins __shared__ unsigned int histo_s[NUM_BINS]; for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { histo_s[bin] = 0; } __syncthreads(); // Histogram unsigned tid = blockIdx.x * blockDim.x + threadIdx.x; for (unsigned int i = tid; i \u0026lt; length; i += blockDim.x * gridDim.x) { int alphabet_position = data[i] - \u0026#39;a\u0026#39;; if (alphabet_position \u0026gt;= 0 \u0026amp;\u0026amp; alphabet_position \u0026lt; 26) { atomicAdd(\u0026amp;histo_s[alphabet_position / 4], 1); } } __syncthreads(); // Commit to global memory for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { unsigned binValue = histo_s[bin]; if (binValue \u0026gt; 0) { atomicAdd(\u0026amp;histo[bin], binValue); } } } 9.6 Aggregation 一些数据集在局部区域有大量相同的数据值。如此高度集中的相同值会导致严重的争用，并降低并行直方图计算的吞吐量。一个简单而有效的优化是，如果每个线程正在更新直方图的相同元素，则将连续的更新聚合为单个更新。下面的代码展示了聚合的直方图计算。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 __global__ void histo_shared_private_interleaved_aggregated_kernel(char* data, unsigned int length, unsigned int* histo) { // Initializing private bins __shared__ unsigned int histo_s[NUM_BINS]; for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { histo_s[bin] = 0; } __syncthreads(); // Histogram unsigned int accumulator = 0; int prevBinIdx = -1; unsigned tid = blockIdx.x * blockDim.x + threadIdx.x; for (unsigned int i = tid; i \u0026lt; length; i += blockDim.x * gridDim.x) { int alphabet_position = data[i] - \u0026#39;a\u0026#39;; if (alphabet_position \u0026gt;= 0 \u0026amp;\u0026amp; alphabet_position \u0026lt; 26) { int currBinIdx = alphabet_position / 4; if (currBinIdx != prevBinIdx) { // Update previous statistics if (accumulator \u0026gt; 0) { atomicAdd(\u0026amp;histo_s[prevBinIdx], accumulator); } accumulator = 1; prevBinIdx = currBinIdx; } else { // Accumulate statistics accumulator++; } } } if (accumulator \u0026gt; 0) { // Update last bin atomicAdd(\u0026amp;histo_s[prevBinIdx], accumulator); } __syncthreads(); // Commit to global memory for (unsigned int bin = threadIdx.x; bin \u0026lt; NUM_BINS; bin += blockDim.x) { unsigned binValue = histo_s[bin]; if (binValue \u0026gt; 0) { atomicAdd(\u0026amp;histo[bin], binValue); } } } 可以看出聚合内核需要更多的语句和变量。添加的 if 语句可能会出现控制发散。然而，如果没有争用或存在严重的争用，就很少有控制发散，因为线程要么都在增加累加器值，要么都在连续刷新。\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch9/","summary":"Personal notebook 9 of Programming Massively Parallel Processors.","title":"PMPP Learning-Chapter 9 Parallel Histogram-An Introduction to Atomic Operations and Privatization"},{"content":"7 Convolution-An Introduction to Constant Memory and Caching 卷积的每个输出数据元素可以相互独立地计算，这是并行计算的理想特性。另一方面，在处理具有边界条件的输出数据元素时，有大量的输入数据共享。这使得卷积可以实现复杂的 tiling 方法和输入数据分段方法。\n7.1 Background 输入数据向量 $[x_0, x_1, \\cdots, x_{n-1}]$ 和包含 2r+1 个元素的 filter 数组 $[f_0, f_1, \\cdots, f_{2r}]$， 1D卷积计算公式为 $$y_i=\\sum_{j=-r}^rf_{i+j}\\times x_i$$ 同样对于 n*n 大小的二维输入，和 r*r 大小的 filter，2D 卷积计算公式为 $$P_{y,x}=\\sum_{j=-r_y}^{r_y}\\sum_{k=-r_x}^{r_x}f_{y+j,x+k}\\times N_{y,x}$$7.2 Parallel Convolution: a Basic Algorithm 假设二维卷积内核接收五个参数: 输入数组 N 的指针; 滤波器 F 的指针; 输出数组 P 的指针; 方形滤波器的半径 r; 输入输出数组的宽度; 输入和输出数组的高度。如下图所示，一个简单的并行方式是网格中的每个线程计算与自身坐标相同的输出像素。对应的内核函数代码如下，浮点计算与全局内存访问的比仅为 0.25 OP/B (每加载 8 字节执行 2 次运算)\nParallelization and Thread Organization for 2D Convolution\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 __global__ void convolution_2D_basic_kernel (float *N, float *F, float *P, int r, int width, int height) { int outCol = blockIdx.x * blockDim.x + threadIdx.x; int outRow = blockIdx.y * blockDim.y + threadIdx.y; int Pvalue = 0.0f; for (int fRow = 0; fRow \u0026lt; 2*r+1; fRow++) { for (int fCol = 0; fCol \u0026lt; 2 * r + 1; fCol++) { int inRow = outRow - r + fRow; int inCol = outCol - r + fCol; if (inRow \u0026gt; 0 \u0026amp;\u0026amp; inRow \u0026lt; height \u0026amp;\u0026amp; inCol \u0026gt; 0 \u0026amp;\u0026amp; inCol \u0026lt; width) { Pvalue += P[inRow * width + inCol] * F[fRow * r + fCol]; } } } P[outRow * width + outCol] = Pvalue; } 7.3 Constant Memory and Caching 可以发现卷积核 F 通常很小，在整个卷积内核的执行过程中不会改变，所有线程都以相同的顺序访问其元素。因此我们可以考虑将其存储在常量内存里，之前说过它和全局内存的区别是线程不能修改常量内存变量的值并且常量内存非常小，目前为 64 KB. 假设已经在主机代码里分配好 F_h 的内存，可以通过 cudaMemcpyToSymbol() 将其从主机内存传输到设备常量内存中。内核函数以全局变量的形式访问常量内存变量。因此，它们的指针不需要作为参数传递给内核函数。\n如果主机代码和内核代码位于不同的文件中，内核代码文件必须包含相关的外部声明的头文件，以确保声明对内核可见。\nCUDA runtime 知道常量内存变量在内核执行期间不会被修改，因此会让硬件在内核执行期间直接缓存常量内存变量。在不需要支持写的情况下，可以在减小芯片面积和降低功耗的情况下设计用于常量内存变量的专用缓存，被称为常量缓存 (constant caching).\n7.4 Tiled Convolution with Halo Cells 我们定义输出 tile 为每个块处理的输出元素，输入 tile 为计算输出 tile 中元素所需的输入元素的集合。下图给出了一个例子，可以看到输入 tile 大小和输出 tile 大小之间的差异使 tile 卷积核的设计变得复杂。有两种线程组织可以处理这种差异。\n启动与输入 tile 具有相同维度的线程块。这样因为每个线程只需要加载一个输入元素。但由于输入 tile 比对应的输出 tile 大，在计算输出元素时需要禁用一些线程，降低了资源利用率。 启动与输出 tile 具有相同维度的线程块。这样线程需要迭代以确保加载所有输入 tile 元素。但简化了输出元素的计算。 Input Tile vs. Output Tile in 2D Convolution\n第一种线程组织方式的内核如下。现在每个块中的线程共同执行 OUT_TILE_DIM^2*(2*FILTER_RADIUS+1) 次浮点运算。分配给输入 tile 元素的每个线程加载一个4字节的输入值。因此每个block加载 IN_TILE_DIM^2*4=(OUT_TILE_DIM+2*FILTER_RADIUS)^2*4\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #define IN_TILE_DIM 32 #define FILTER_RADIUS 5 #define OUT_TILE_DIM (IN_TILE_DIM - 2*(FILTER_RADIUS)) __constant__ float F_c[2 * FILTER_RADIUS + 1][FILTER_RADIUS + 1]; __global__ void convolution_tiled_2D_constant_mem_kernel_1( float* N, float* P, int width, int height) { // Upper left input tile coord int col = blockIdx.x * OUT_TILE_DIM + threadIdx.x - FILTER_RADIUS; int row = blockIdx.y * OUT_TILE_DIM + threadIdx.y - FILTER_RADIUS; // Loading input tile __shared__ float N_s[IN_TILE_DIM][IN_TILE_DIM]; if (row \u0026gt;= 0 \u0026amp;\u0026amp; row \u0026lt; height \u0026amp;\u0026amp; col \u0026gt;= 0 \u0026amp;\u0026amp; col \u0026lt; width) { N_s[threadIdx.y][threadIdx.x] = N[row * width + col]; } else { N_s[threadIdx.y][threadIdx.x] = 0.0f; } __syncthreads(); // Calculate output elements int tileCol = threadIdx.x - FILTER_RADIUS; int tileRow = threadIdx.y - FILTER_RADIUS; if (row \u0026gt;= 0 \u0026amp;\u0026amp; row \u0026lt; height \u0026amp;\u0026amp; col \u0026gt;= 0 \u0026amp;\u0026amp; col \u0026lt; width \u0026amp;\u0026amp; tileCol \u0026gt;= 0 \u0026amp;\u0026amp; tileCol \u0026lt; OUT_TILE_DIM \u0026amp;\u0026amp; tileRow \u0026gt;= 0 \u0026amp;\u0026amp; tileRow \u0026lt; OUT_TILE_DIM) { float Pvalue = 0.0f; for (int fRow = 0; fRow \u0026lt; 2 * FILTER_RADIUS + 1; fRow++) { for (int fCol = 0; fCol \u0026lt; 2 * FILTER_RADIUS + 1; fCol++) { Pvalue += F_c[fRow][fCol] * N_s[tileRow + fRow][tileCol + fCol]; } } P[row * width + col] = Pvalue; } } 第二种线程组织方式的内核如下，每个线程现在可能需要加载多个输入 tile 的元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 __global__ void convolution_tiled_2D_constant_mem_kernel_2( // OUT_TILE_DIM^2 threads per block float* N, float* P, int width, int height) { // Upper left output tile coord int col = blockIdx.x * OUT_TILE_DIM + threadIdx.x; int row = blockIdx.y * OUT_TILE_DIM + threadIdx.y; // Each thread may need to load multiple elements into shared memory __shared__ float N_s[IN_TILE_DIM][IN_TILE_DIM]; for (int i = threadIdx.y; i \u0026lt; IN_TILE_DIM; i += OUT_TILE_DIM) { for (int j = threadIdx.x; j \u0026lt; IN_TILE_DIM; j += OUT_TILE_DIM) { int in_col = blockIdx.x * OUT_TILE_DIM + j - FILTER_RADIUS; int in_row = blockIdx.y * OUT_TILE_DIM + i - FILTER_RADIUS; if (in_row \u0026gt;= 0 \u0026amp;\u0026amp; in_row \u0026lt; height \u0026amp;\u0026amp; in_col \u0026gt;= 0 \u0026amp;\u0026amp; in_col \u0026lt; width) { N_s[i][j] = N[in_row * width + in_col]; } else { N_s[i][j] = 0.0f; } } } __syncthreads(); // Calculate output elements if (threadIdx.x \u0026lt; OUT_TILE_DIM \u0026amp;\u0026amp; threadIdx.y \u0026lt; OUT_TILE_DIM \u0026amp;\u0026amp; row \u0026lt; height \u0026amp;\u0026amp; col \u0026lt; width) { float Pvalue = 0.0f; for (int fRow = 0; fRow \u0026lt; 2 * FILTER_RADIUS + 1; fRow++) { for (int fCol = 0; fCol \u0026lt; 2 * FILTER_RADIUS + 1; fCol++) { Pvalue += F_c[fRow][fCol] * N_s[threadIdx.y + fRow][threadIdx.x + fCol]; } } P[row * width + col] = Pvalue; } } 7.5 Tiled Convolution Using Caches for Halo Cells 当一个块需要它的 halo cell 时，由于相邻块的访问，它们已经在二级缓存中了。因此，对这些 halo cell 的内存访问可以从 L2 缓存提供，而不会造成额外的 DRAM 流量。我们可以对原来的 N 进行这些 halo cell 的访问，而不是将它们加载到 N_ds 中。代码如下，加载 N_s 变得更简单，因为每个线程可以简单地加载与其分配的输出元素具有相同坐标的输入元素。然而，计算P个元素的循环体变得更加复杂。它需要添加条件来检查 helo cell 和 ghost cell.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 __global__ void convolution_tiled_cached_2D_shared_mem_kernel( // OUT_TILE_DIM^2 threads per block float* N, float* P, int width, int height) { int col =blockIdx.x * OUT_TILE_DIM + threadIdx.x; int row =blockIdx.y * OUT_TILE_DIM + threadIdx.y; // loading input tile __shared__ float N_s[IN_TILE_DIM][IN_TILE_DIM]; if (row \u0026lt; height \u0026amp;\u0026amp; col \u0026lt; width) { N_s[threadIdx.y][threadIdx.x] = N[row * width + col]; } else { N_s[threadIdx.y][threadIdx.x] = 0.0f; } __syncthreads(); // Calculate output elements if (col \u0026lt; width \u0026amp;\u0026amp; row \u0026lt; height) { float Pvalue = 0.0f; // turning off the threads at the edge of the block for (int fRow = 0; fRow \u0026lt; 2 * FILTER_RADIUS + 1; fRow++) { for (int fCol = 0; fCol \u0026lt; 2 * FILTER_RADIUS + 1; fCol++) { if (threadIdx.x + fCol - FILTER_RADIUS \u0026gt;= 0 \u0026amp;\u0026amp; threadIdx.x + fCol - FILTER_RADIUS \u0026lt; IN_TILE_DIM \u0026amp;\u0026amp; threadIdx.x + fRow - FILTER_RADIUS \u0026gt;= 0 \u0026amp;\u0026amp; threadIdx.x + fRow - FILTER_RADIUS \u0026lt; IN_TILE_DIM) { Pvalue += F_c[fRow][fCol] * N_s[threadIdx.y + fRow][threadIdx.x + fCol]; } else { if (row - FILTER_RADIUS + fRow \u0026gt;= 0 \u0026amp;\u0026amp; row - FILTER_RADIUS + fRow \u0026lt; height \u0026amp;\u0026amp; col - FILTER_RADIUS + fCol \u0026gt;= 0 \u0026amp;\u0026amp; col - FILTER_RADIUS + fCol \u0026lt; width) { Pvalue += F_c[fRow][fCol] * N[(row - FILTER_RADIUS + fRow) * width + (col - FILTER_RADIUS + fCol)]; } } } } N[row * width + col] = Pvalue; } } Halo Cell: 实际计算区域周围添加的一圈额外的单元格。本质上是 \u0026ldquo;虚拟\u0026rdquo; 单元格，存在于不直接关注的区域之外。 Ghost Cell: 存储来自相邻 tile 的数据副本，使得 block 在无需直接访问彼此的内存的情况下访问相邻的必要数据。 ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch7/","summary":"Personal notebook 7 of Programming Massively Parallel Processors.","title":"PMPP Learning-Chapter 7 Convolution-An Introduction to Constant Memory and Caching"},{"content":"6 Performance Considerations 并行程序的执行速度根据程序的资源需求和硬件的资源约束之间的相互制约会有很大的变化。管理并行代码和硬件资源约束之间的交互对于在几乎所有并行编程模型中实现高性能非常重要。\n6.1 Memory Coalescing 影响 CUDA 内核性能最重要的因素之一是访问全局内存中的数据，有限的带宽可能成为瓶颈。CUDA 设备的全局内存是用 DRAM 实现的。数据存储在DRAM单元中，访问时间通常是纳秒级别，相对于亚纳秒级别的时钟周期来说很慢。现代 DRAM 通过并行化设计来提高数据访问速率，通常称为内存访问吞吐量 (memory access throughput).\nWhy Are DRAMs So Slow DRAM 通过一个个 CMOS 晶体管 (称为 cell) 来存储 0/1. 当给晶体管最上面的一端 (称作栅极) 加上电压或是取消电压，晶体管两端就可以流过电流。cell 中的小电容是存储信息的关键，小电容可以存储电荷，当电容存有电荷，cell 存储 1；当电容不存电荷，存储 0. 当要读取 cell 的存储值，首先打开晶体），然后根据导通后的电容是否会进行充放电信息获得存储值。如果 cell 存储 1，即电容存有电荷，那么当打开开关时电容就会放电；反之则不会。 一个 cell 只能存储 1 比特信息，为了存储大量信息，需要构建起如图所示的 cell 阵列。可以看到每行 cell 的晶体管的栅极都是连在一起的，即都连在字线 (word line) 上，这意味着给字线施加电压，字线对应的一行cell都会被打开。当一行 cell 被打开，cell 电容就会向位线 (bit line) 充放电，一行中的每个 cell 都与一条位线直接相连，读取位线的电压变化，即可知道 cell 的存储信息。\n字线：用来控制读取哪一个字，一个字由 4字节组成。之所以叫字线，是因为给这根线通电，一行 cell 都会被打开.多个 cell 组合起来就是多个字，因为这根线可以打开多个字，所以叫字线 位线：在读取信息时，每一根线上的电压波动都代表一位比特信息，所以叫做位线。 cell 的读取依靠小电容充放电，电容充放电导致位线产生电压波动，通过读取位线电压波动即可获取信息。小电容充放电所产生的电压波动是很微弱的，充放电所造成的电压波动的时间也是很短的，因此很难直接读取充放电信息，为此 cell 阵列的读取使用到了 sense amplifier，即读出放大器。读出放大器可以捕捉到微弱的电压波动，并根据电压波动的情况在本地还原出 cell 的电容电压，而且放大器内还有锁存器，可以把还原出来的电容电压值保存起来，这样一来 cell 保存的信息就从 cell 电容转移到了放大器本地。 每条位线都要接到一个放大器中。在读取 cell 行前，需要把每根位线都预充电 (precharge) 到电容电压/供电电压最大值的一半。在 DRAM 芯片中，读出放大器把 cell 阵列分成了两半，因为其采用的是差分放大器，需要同时接入两根位线。放大信号波动时需要用一个基准和待测线作比较，接到放大器上的两条位线的其中一条就作为基准。在读出数据之后，根据放大器锁存的值，把各条位线拉到供电电压或接到地，然后 cell 电容就会根据位线电压进行充电或放电，当 cell 电容充放电结束，就可以断开字线，宣告本次 DRAM 读取结束。 简单来说读取一个比特的总体流程是：获得行号，译码行号，开启单元行，放大位线电压波动并暂存数据到放大器，获得列号并根据列号选择一位进行输出，写回数据，关闭字线，重新预充电。而写一个比特的总体流程是：获得行号，译码行号，开启单元行，放大位线电压波动并暂存数据到放大器，获得列号并输入写入数据，根据列号把写入数据送到放大器并改写暂存值，写回数据，关闭字线，重新预充电。 其中花费时间最久的两项是开启单元行和放大电压波动并暂存数据。开启单元行时行地址译码器需要拉高一条字线，然后用这一条字线拉高单元行上所有晶体管的栅极电压，相当于给一个很大的电容充电，非常花费时间。放大器大部分是模拟电路，工作速度不快，因此放大电压波动并暂存数据也很花费时间。 DRAM Cell Array\n由于读取非常耗时，DRAM 每次读取数据都会存储在放大器本地缓存 (row buffer / cache line). 缓存行内的各个字在内存上是相邻的，每当读取 cell 阵列中的一个比特会把其所在缓存行的所有比特都送到输出缓存，这种读取方式叫做突发 (burst). 当 warp 中的所有线程访问连续的全局内存位置时，硬件将所有这些访问合并 (colaesce) 为对连续 DRAM 位置的访问 (即行地址)。 有各种优化策略来实现内存合并。\n重新排列线程到数据的映射。 重新排列数据本身的布局。 corner turning: 以合并的方式在全局内存和共享内存之间传输数据，并在共享内存中执行不利的访问模式。共享内存是用SRAM技术实现的，不需要合并，因此不是连续的地址访问带来的影响不大。 内存合并的主要优点是，能通过将多个内存访问合并为单个访问来减少全局内存流量。 6.2 Hiding memory latency 一个 cell 阵列一次可以提供一个比特，那么 8 个 cell 阵列就可以一次提供 8 个比特，他们共享一组行地址和列地址，被称作一个 bank. 处理器包含一个或多个通道 (channel). 每个通道都是一个带有总线的内存控制器，该总线将一组 DRAM 组连接到处理器。 如下图所示当两个 bank 连接到通道总线时，当第一个 bank 为另一个访问提供服务时，可以在第二个 bank 发起访问。一般来说，如果 cell 阵列访问延迟与数据传输时间之比为 R，则充分利用信道总线的数据传输带宽至少需要 R+1 个 bank 。更多的 bank 减少了针对同一 bank 的多个同时访问的概率，这种现象称为 bank 冲突 (bank conflict). 由于每个 bank 一次只能译码一行字线，因此这些冲突访问的单元阵列访问延迟不能再重叠。拥有更多数量的 bank 会增加这些访问分散到多个 bank 的可能性。第二个原因是每个 cell 阵列的大小限制了每个 bank 可以提供的比特数。因此第四章所说的最大化占用率还有一个额外的好处，那就是确保发出足够的内存访问请求来隐藏 DRAM 访问延迟。\nBanking Improves the Utilization of Data Transfer Bandwidth of a Channel\n分布方案存储如下图所示，通常称为交错数据分布 (interleaved data distribution). 对于一个 4*4 的矩阵，每输出矩阵的每个元素计算将对通道 0 中的两个 bank 以及通道 2 中的两个 bank 进行合并访问。\nAn Example of Interleaved Data Distribution\n6.3 Thread Coarsening 以最细粒度并行化工作的缺点在于，并行化工作需要付出代价，例如不同线程块对数据的重复加载、冗余工作、同步开销等。如果硬件最由于资源不足而顺序执行，那么这个代价是不必要的。部分序列化工作，减少为并行性付出的代价。因此可以通过为每个线程分配多个最细粒度的工作来解决，通常被称为线程粗化 (thread coarsening). 如下图所示，在之前的 tiled 矩阵乘法里，由于共享内存内容不能跨块共享，每个块必须加载矩阵 M 的 tile 副本。因此可以让块中的每个线程处理两个输出元素。这样，粗化的线程块将加载 M 的 tile 一次，并将它们用于计算为多个输出 tile.\nThread Coarsening for Tiled Matrix Multiplication\n下面的代码展示了线程粗化的矩阵乘法内核函数，在 width/TILE_WIDTH 的每次迭代中，一个线程计算原来 COARSE_FACTOR 个线程对应位置的输出。\n使用线程粗化时要注意：\n不要在不必要的时候使用，当并行化的代价可以通过粗化来降低时，粗化是有益的。 不要使用过多的粗化，以免硬件资源得不到充分利用。 避免将资源消耗增加到损害占用的程度。根据内核的不同，线程粗化可能需要每个线程使用更多的寄存器或每个线程块使用更多的共享内存。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 __global__ void CoarsingMatrixMulKernel(float* M, float* N, float* P, int width) { __shared__ float Mds[TILE_WIDTH][TILE_WIDTH]; __shared__ float Nds[TILE_WIDTH][TILE_WIDTH]; int bx = blockIdx.x; int by = blockIdx.y; int tx = threadIdx.x; int ty = threadIdx.y; // Identify the row and column of the P element to work on int row = by * TILE_WIDTH + ty; int colStart = bx * TILE_WIDTH * COARSE_FACTOR + tx; // Initialize Pvalue for all output elements float Pvalue[COARSE_FACTOR]; for (int i = 0; i \u0026lt; COARSE_FACTOR; i++) { Pvalue[i] = 0; } // Loop over the M and N tiles required to compute P element for (int ph = 0; ph \u0026lt; width/TILE_WIDTH; ph++) { // the COARSE_FACTOR tiles of N needs the same tile of M Mds[ty][tx] = M[row * width + ph * TILE_WIDTH + tx]; for (int c = 0; c \u0026lt; COARSE_FACTOR; c++) { int col = colStart + c * TILE_WIDTH; // Value to be computed in the c th tile // Collaborative loading of N tile into shared memory Nds[ty][tx] = N[(ph * TILE_WIDTH + ty) * width + col]; __syncthreads(); for (int k = 0; k \u0026lt; TILE_WIDTH; k++) { Pvalue[c] += Mds[ty][k] * Nds[k][tx]; } __syncthreads(); } for (int c = 0; c \u0026lt; COARSE_FACTOR; c++) { int col = colStart + c * TILE_WIDTH; P[row * width + col] = Pvalue[c]; } } } ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch6/","summary":"Personal notebook 6 of Programming Massively Parallel","title":"PMPP Learning-Chapter 6 Performance Considerations"},{"content":"Compute Architecture and Scheduling 本章介绍 GPU 计算架构，并说明灵活资源分配、块调度和占用的概念。然后将深入讨论线程调度、延迟容忍、控制发散和同步。\n4.1 Architecture of a modern GPU 下图展示了 CUDA GPU 架构，它被组织成一个流式多处理器 (Streaming Multiprocessors, SMs) 数组。每个 SM 都有几个处理单元，称为流处理器或 CUDA core (简称为 core)，如图中 SMs 内部的小块所示，它们共享控制逻辑和内存资源。\nSMs 还带有不同的片上存储结构，统称为内存。GPU 还带有千兆字节的片外设备内存，称为全局内存 (global memory).\n虽然旧的GPU使用 DDR DRAM，但从 NVIDIA 的 Pascal 架构开始 GPU 可能使用HBM (High-Bandwidth Memory) 或 HBM2，它们由 DRAM 模块组成，与GPU紧密集成在同一个封装中。\nArchitecture of a CUDA-capable GPU\n4.2 Block Scheduling 当调用内核时，CUDA runtime 系统启动执行内核代码的线程网格，块中的所有线程同时分配给同一个的 SM. 下图中每个 SM 分配了三个块，但是块需要占用硬件资源来执行，因此同时只能将有限数量的块分配给给定的 SM. 为了确保网格中的所有块都得到执行，runtime 系统维护一个需要执行的块列表，并在先前分配的块完成执行后再将新块分配给 SMs. 以块为基本单元将线程分配给 SMs 保证了同一块中的线程在同一SM上同时被调度。\nThread Block Assignment to SMs\n4.3 Synchronization and Transparent Scalability CUDA 允许同一块中的线程使用 barrier 同步函数 __syncthreads() 来协调其行动。下图展示了屏障同步的执行情况，箭头表示线程各自执行运行的时间。弯曲线标记了每个线程开始执行 __syncthreads() 的时间。弯曲线右侧的空白区域表示每个线程等待所有线程完成所需的时间。竖线标志着最后一个线程执行 __syncthreads() 的时间，之后所有线程都被允许继续执行 __syncthreads() 之后的代码。\n不要在分支语句中使用 __syncthreads()\n放在 if 语句中时，块中的所有线程要么全执行包含 __syncthreads() 的路径，要么都不执行。 if-else 语句中的两个分支都存在，块中的所有线程要么全执行 if 情况下的 __syncthreads() 的路径，要么全执行 else 下的路径。 A Example Execution of Barrier Synchronization\n系统需要确保所有参与 barrier 同步的线程都能访问足够资源以到达 barrier. 否则，那些到达不了线程可能会导致死锁。因此只有当 runtime 系统确保了块中所有线程有完成执行所需的所有资源时，一个块才能开始执行。 通过禁止不同块中的线程一起执行 barrier 同步，CUDA runtime 系统可以以任何顺序执行块。如下图所示，在只有少量执行资源的系统中，一次执行两个块。反之，可以同时执行多个块。这种在不同硬件上使用不同数量的执行资源执行相同的代码的能力被称为透明可扩展性 (transparent scalability)\nTransparent Scalability of CUDA Programs\n4.4 Warps and SIMD Hardware 当一个块被分配给一个 SM 时，它会被进一步划分为 32 个线程为一组的单元，称为 warp. 在 SMs 中，warp 是线程调度的单位。下图展示了一个划分的例子。\nBlocks are Partitioned into Warps for Thread Scheduling\n由多维度的线程组成的块，将被投影到线性化的行主布局中来划分。线性布局是以 (z, y, x) 坐标升序的方式排列。下图展示了一个大小为 4*4 块的线性化视图。前 4 个线程的 threadIdx.y 为 0，它们以 threadIdx.x 升序的方式排列。\nLinear Layout of 2D Threads\nSM 是单指令多数据 (SIMD) 模型，按顺序执行所有线程，warp 中的所有线程同时执行一条指令。下图展示了 SM 中的内核如何被分组为处理块，其中每 8 个内核构成一个处理块 (processing block) 并共享一个指令获取/调度单元。同一 warp 中的线程被分配到相同的处理块，该处理块获取指令并让 warp 中的所有线程对各自负责数据的部分执行该指令。这种设计允许较小比例的硬件专注于控制，而较大比例的硬件专注于提高计算吞吐量。\nProcessing Blocks Organization\n4.5 Control divergence 当同一 warp 中的线程执行不同的路径时，这些线程的行为被称作控制发散 (control divergence). 下图展示了一个 warp 在遇到分支语句时的执行方式，即通过两次 pass (执行代码的阶段) 来分别执行 then-path 和 else-path，最终实现所有线程的汇合。\nPascal 及之前架构中，warp 需要顺序执行两个 pass，一个 pass 执行完才能开始下一个 pass。 Pass 1： 线程 0-23 执行 then-path 的代码 A，线程 24-31 处于 inactive 状态。 Pass 2： 线程 24-31 执行 else-path 的代码 B，线程 0-23 处于 inactive 状态。 Pass 3： 所有线程汇合，执行后续代码 C。 Volta 及之后架构中，warp 可以同时执行两个 pass，不同的线程可以交错执行不同的代码路径。 Pass 1： 线程 0-23 开始执行 A 的第一个指令，线程 24-31 开始执行 B 的第一个指令。 Pass 2： 线程 0-23 执行 A 的第二个指令，线程 24-31 执行 B 的第二个指令。 \u0026hellip; Pass N： 线程 0-23 执行完 A 的所有指令，线程 24-31 执行完 B 的所有指令。 Pass N+1： 所有线程汇合，执行后续代码 C。 Example of a Warp Diverging at an if-else Statement\n发散也可能出现在其他控制流中。下图展示了 warp 如何执行发散 for 循环。通常来说如果判断条件基于 threadIdx 的值，那么控制语句可能会导致线程发散。由于线程总数需要是线程块大小的倍数，而数据大小可以是任意的，因此具有线程控制发散的控制流程很常见。由以上两个例子可以看出不能假设 warp 中的所有线程都具有相同的执行时间。如果 warp 中的所有线程都必须完成执行的一个阶段，然后才能继续前进，则必须使用 barrier 同步机制 (如 __syncwarp() )来确保正确性。\n控制发散对性能的影响随着被处理向量大小的增加而减小。例如对于长度为 100 的向量，4个 warp 中有 1 个将会控制发散 (25%)；对于大小为1000的矢量，32 个 warp 中只有 1 个将会控制发散 (3.125%).\nExample of a Warp Diverging at a for-loop\n4.6 Warp scheduling and latency tolerance 当将线程分配给 SMs 时，分配给 SM 的线程通常比 SM 中 core 的个数还要多，导致每个 SM 只能同时执行分配给它的所有线程的一部分。当要由 warp 执行的指令需要等待先前启动的操作的结果时，不会选择该 warp 执行。而是选择执行另一个不用等待先前指令结果的 warp。这种用其他线程的工作填充某些线程操作延迟时间的机制通常称为延迟容忍 (latency tolerance) 或者延迟隐藏 (latency hiding). 而选择准备执行的 warp 不会在执行时间线中引入任何空闲或浪费的时间的策略被称为零开销线程调度 (zero-overhead thread scheduling). 这种容忍长操作延迟的能力是 GPU 不像 CPU 那样为缓存和分支预测机制分配那么多芯片面积的主要原因，因此可以更专注于浮点数计算和内存读取。\nThreads, Context-switching, and Zero-overhead Scheduling 之前介绍过线程由程序的代码、正在执行的代码中的指令、变量的值和数据结构组成。在基于冯·诺伊曼模型的计算机中，程序的代码存储在存储器中。PC (Program Counter) 跟踪正在执行的程序指令的地址。IR (Instruction Register) 保存正在执行的指令。寄存器和内存保存变量和数据结构的值。 现代处理器的设计允许上下文切换 (Context-switching)，多个线程可以通过轮流执行的方式分时复用一个处理器。通过保存和恢复 PC 值以及寄存器和内存的内容，可以暂停线程的执行，并在稍后正确恢复线程的执行。不过保存和恢复寄存器内容可能会增加大量执行时间。 传统的 CPU 从一个线程切换到另一个线程需要将执行状态 (例如被切换线程的寄存器内容) 保存到内存中，稍后再从内存中加载，这样会产生空闲周期。GPU SMs 通过在硬件寄存器中保存指定 warp 的所有执行状态来实现零开销调度，因此不需要保存和恢复状态。 4.7 Resource partitioning and occupancy 给 SM 分配其所支持的最大 warp 数并不总是可行。分配给 SM 的 warp 数量与其支持的 warp 数量之比称为占用率 (occupancy). 例如，Ampere A100 GPU 每个 SM 最多支持 32 个 block，每个 SM 最多支持 64 个 warp (2048 个线程)，每个 block 最多支持 1024 个线程。意味着块大小可以从 641024 不等，每个 SM 分别可以有 322 个块。在这些情况下，分配给SM的线程总数为2048，这使占用率最大化。 SM 中的执行资源包括寄存器、共享内存线程块槽 (每个 SM 最大能被分配的线程块数量) 和线程槽 (每个线程块最大能被分配的线程数量)，这些资源在线程之间动态分配。资源的动态分配可能导致他们之间相互制约，使得资源利用不足。\n硬件资源支持的影响。当每个块有32个线程时。Ampere A100 GPU 会将 2048 个线程槽分配给 64 个块。然而 Volta SM 只支持 32 个线程块槽，导致占用率只有 50%. 当每个块的最大线程数不能整除块大小时。当块大小为 768，SM 将只能容纳 2 个线程块 (1536个线程)，剩下512个线程槽未使用，占用率为 75%. 寄存器资源限制对占用率的影响。Ampere A100 GPU 允许每个 SM 最多占有 65,536个寄存器。为了达到满占用率每个线程不应该使用超过 32 个寄存器。 这种限制导致资源使用的轻微增加可能导致并行性和性能的显著降低，称为 performance cliff. ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch4/","summary":"Personal notebook 3 of Programming Massively Parallel","title":"PMPP Learning-Chapter 4 Compute Architecture and Scheduling"},{"content":"5 Memory Architecture and Data Locality 之前章节所写的 CUDA 内核只能达到底层硬件峰值算里的一小部分。因为全局内存 (通常使用片外 DRAM 实现) 往往具有较长的访问延迟 (数百个时钟周期) 和有限的访问带宽。\n5.1 Importance of Memory Access Efficiency 在之前矩阵乘法的内核函数中，每次迭代里执行一次浮点乘法和一次浮点加法需要访问全局内存两次。因此，从全局内存访问的浮点操作次数 (FLOP) 与字节数 (B) 的比率为 2 FLOP-to-8 B，即 0.25FLOP/B. 计算访存比 (compute to global memory access ratio) 定义为在程序的一个区域内对全局内存访问的单位字节执行的 FLOPS 数。 计算访存比对 CUDA 内核的性能有重大影响。A100 GPU 的全局内存带宽峰值为 1555 GB/s，矩阵乘法内核计算访存比为 0.25 OP/B，因此内核可以执行的单精度 FLOPs 的吞吐量为 389 GFLOPS，仅为 A100 GPU 峰值单精度运算吞吐量 (19,500 GFLOPS) 的 2%. 我们把执行速度受内存带宽限制的程序称为内存瓶颈 (memory bound) 程序。\nRoofline Model Rooline 模型用于评估应用程序相在其所运行的硬件的限制上达到的性能。如下图所示，x 轴表示算术或计算强度 (computational intensity)，单位为 FLOP/B. y 轴表示以 GFLOPS 为单位的计算吞吐量。横线表示硬件可以提供的峰值计算吞吐量。 硬件通常关注两个指标:\n算力 π：也称为计算平台的性能上限，指的是一个计算平台倾尽全力每秒钟所能完成的浮点运算数。单位是 FLOP/s。 带宽 ß：即计算平台的带宽上限，指的是一个计算平台倾尽全力每秒所能完成的内存交换量。单位是Byte/s。 两个指标相除即可得到计算平台的计算强度上限 I_max = π / ß，它描述的是在这个计算平台上，单位内存交换最多用来进行多少次计算。 Roofline Model\n从图中可以看出算力决定“屋顶”的高度（绿色线段），带宽决定“房檐”的斜率（红色线段）。\nMemory-Bound: 当模型的计算强度 I 小于硬件的计算强度上限 I_max 时，由于此时模型位于“房檐”区间，因此模型理论性能 P 的大小完全由硬件的带宽上限 ß （房檐的斜率）以及模型自身的计算强度 I 所决定，因此这时候就称模型处于 Memory-Bound 状态。 Compute-Bound: 不管模型的计算强度 I 有多大，它的理论性能 P 最大只能等于硬件的算力 π 。当模型的计算强度 I 大于硬件的计算强度上限 I_max 时，模型在当前硬件处于 Compute-Bound 状态 为了让内核具有更高的性能，需要通过减少内核执行的全局内存访问次数来增加计算访存比。\n5.2 CUDA memory types 下图展示了 CUDA 设备的内存。全局内存和常量内存这两种类型的内存都可以被主机写入 (W) 和读取 (R) 。全局内存也可以被设备读写，而常量内存只支持设备对其读取。 另一种类型的内存是本地内存，也可以被读写。本地内存实际上放在全局内存中，具有相似的访问延迟，但它不是跨线程共享的。每个线程都有自己的全局内存部分，将其用作自己的私有本地内存，存放私有但不能在寄存器中分配的数据。 寄存器 (register) 和共享内存 (shared memory) 是片上内存。存储在这些类型内存中的变量可以以高度并行的方式以高速访问。其中每个线程只能访问自己的寄存器。\nOverview of CUDA Memory Model\n与基于冯·诺伊曼模型的计算机类比，CUDA 设备中的全局内存对应于内存框，寄存器对应于寄存器堆。与访问全局内存相比，每次访问寄存器所涉及的指令更少。当算术指令的操作数在寄存器中时，不需要额外的指令使算术逻辑单元(ALU)可以使用该操作数的值。如果操作数值在全局内存中，处理器需要执行内存加载操作让 ALU 能使用操作数。并且从寄存器堆访问所消耗的能量至少比从全局内存访问低一个数量级。\nMemory vs. Registers in a Modern Computer Based on the von Neumann Model\n下图展示了 CUDA 设备中的共享内存和寄存器。共享内存实际上是一种暂存存储器 (scratchpad memory)，作为片上内存的一部分。当处理器访问存储在共享内存中的数据时，需要执行内存加载操作。CUDA 中共享内存和寄存器之间的一个重要区别是，存储在共享内存中的变量可以被块中的所有线程访问，而寄存器数据是线程私有的。\nShared Memory vs. Registers in a CUDA Device SM\n下表给出了将程序变量声明为各种内存类型的 CUDA 语法。\n所有在内核和设备函数中声明的 automatic scalar variables 都被放入寄存器中。 Automatic array variables 存储在线程的本地内存中。如果所有访问都使用常量索引值，编译器可能决定将将其存储到寄存器中。 块中的所有线程都看到 shared variable 的相同版本。内核执行期间每个块会创建和使用一个私有版本。通常使用共享变量来保存在内核执行阶段经常使用和重用的全局内存数据部分。 Constant variables 通常用于向核函数提供输入。内核函数不能修改常量变量的值。 Global variables 通常用于将信息从一个内核调用传递到另一个内核调用。 Variable Declaration Memory Scope Lifetime Automatic variables other than arrays Register Thread Kernel Automatic array variables Local Thread Kernel __device__ __shared__ int SharedVar; Shared Block Kernel __device__ int GlobalVar; Global Grid Application __device__ __constant__ int ConstantVar; Constant Grid Application 在 CUDA 中，指针可以用来指向全局内存中的数据对象，通常有以下两种情况会使用\n对象由主机函数分配，指向对象的指针由内存分配函数 (如 cudaMalloc) 初始化，作为参数传递给内核函数。 将在全局内存中声明的变量的地址赋给指针变量。 5.3 Tiling for Reduced Memory Traffic 一种常见的策略是将数据划分为称为 tile 的子集，以便每个 tile 都适合共享内存。能进行划分的一个重要的标准是这些 tile 上的内核计算可以彼此独立地完成。 下图展示了 block(0,0) 的四个线程所完成的计算。这四个线程计算P(0,0), P(0,1), P(1,0) 和 P(1,1). 每个线程在执行过程中访问 M 的 4 个元素和 N 的 4 个元素，可以看出有明显重复的部分。将每个块需要访问的数据先加载到共享内存，这样可以避免每个线程从全局内存里加载重复的数据。全局内存流量的减少与块的维度成正比。每个块大小为 Width*Width 时，全局内存流量将减少为原来的 1/Width.\nA Small Example of Matrix Multiplication\n按 tile 进行矩阵乘法的基本思想是让线程在各自使用元素来进行内积计算之前，将 M 和 N 元素的子集加载到共享内存中。如下图所示把 M 和 N 分成大小为 2*2 的块。每个线程执行的内积计算现在被划分为几个阶段。在每个阶段，一个块中的所有线程协作将对应的 M 和 N 的 tile 加载到共享内存中。这样每个阶段关注的是输入矩阵元素的一个小子集。这种集中的访问行为称为局部性 (locality).\nTiling M and N to Utilize Shared Memory\n5.4 A Tiled Matrix Multiplication Kernel 按照上述方法编写的内核函数如下。如下图所示，x 轴方向上坐标为 bx 和 tx 的线程应该负责计算 P 中索引为 bx * tile_width + tx 元素。类似地，y 轴方向上线程要处理的 P 中索引为 by * tile_width + ty. 外循环的每次迭代对应于计算的一个阶段。两次调用 __syncthreads() 的原因不同，第一次被称为写后读 (read-after-write) 依赖关系，因为线程在尝试读取数据之前必须等待其他线程将数据写入正确的位置。第二种被称为读后写 (write-after-read) 依赖，因为线程必须等待所有需要它的线程读取数据，然后才能覆盖它。\n写后读依赖是一种真正依赖 (true dependence)，因为读线程确实需要写线程提供的数据，所以它别无选择，只能等待。读后写依赖关系是伪依赖 (false dependence) 关系，因为写线程不需要来自读线程的任何数据。这种依赖性是因为它们访问相同的内存地址，如果它们访问不同的地址，则不存在这种依赖性。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __global__ void TilingMatrixMulKernel(float* M, float* N, float* P, int width) { __shared__ float Mds[TILE_WIDTH][TILE_WIDTH]; __shared__ float Nds[TILE_WIDTH][TILE_WIDTH]; int bx = blockIdx.x; int by = blockIdx.y; int tx = threadIdx.x; int ty = threadIdx.y; // Identify the row and column of the P element to work on int Row = by * TILE_WIDTH + ty; int Col = bx * TILE_WIDTH + tx; float Pvalue = 0; // Loop over the M and N tiles required to compute the P elemrnt for (int ph = 0; ph \u0026lt; width/TILE_WIDTH; ph++) { // Collaborative loading of M and N tiles into shared memory Mds[ty][tx] = M[Row * width + ph * TILE_WIDTH + tx]; Nds[ty][tx] = N[(ph * TILE_WIDTH + ty) * width + Col]; __syncthreads(); for (int k = 0; k \u0026lt; TILE_WIDTH; k++) { Pvalue += Mds[ty][k] * Nds[k][tx]; } __syncthreads(); P[Row * width + Col] = Pvalue; } } Tiling 技术并不是 GPU 上才能实现。CPU 上的 tiling 依赖缓存来将重用的数据保留在芯片上，而 GPU 上的 tiling 则直接地使用共享内存来存储片上数据。CPU 核心通常只运行一个或两个线程，因此线程可以依赖于缓存来保存最近使用的数据。相反，GPU SM 同时运行多个线程以隐藏延迟，些线程会竞争缓存槽，使得 GPU 缓存不太可靠。\n5.5 Boundary Checks 我们需要扩展 tiling 矩阵乘法内核使其处理任意大小的矩阵。下图展示了 block(0,0) 在 phase 1 的内存访问模式。在不进行边界检查时 thead(0,1) 试图访问 M(0,3) 时实际上获得的是 M(1,0). 同样在 Block(1,1) 在 phase 0 访问时也会出现类似的问题。因此在加载所需的 M 和 N 的 tile 时边界条件为两个索引都小于 Width: Row \u0026lt; Width \u0026amp;\u0026amp; (ph * TILE_WIDT + tx) \u0026lt; Width，否则将 0.0f 存入对应位置。\nMemory Access of Block(0,0) in Phase 1\n扩展为一般的矩阵乘法内核是很容易的。将 Width 参数替换为三个无符号整数参数: m, k, n; 将用于指代 M 的行数/列数和 P 的行数/列数的 Width 替换为 m/n；将用于指代 M 的列数和 P 的行数的 Width 替换为 k. 修改后代码如下\nCalculation of the Matrix Indexes in Tiled Multiplication\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 __global__ void GEMMKernel(float* M, float* N, float* P, int m, int n, int k) { __shared__ float Mds[TILE_WIDTH][TILE_WIDTH]; __shared__ float Nds[TILE_WIDTH][TILE_WIDTH]; int bx = blockIdx.x; int by = blockIdx.y; int tx = threadIdx.x; int ty = threadIdx.y; // Identify the row and column of the P element to work on int Row = by * TILE_WIDTH + ty; int Col = bx * TILE_WIDTH + tx; float Pvalue = 0; // Loop over the M and N tiles required to compute the P element for (int ph = 0; ph \u0026lt; (k + TILE_WIDTH - 1) / TILE_WIDTH; ph++) { // Collaborative loading of M and N tiles into shared memory if (Row \u0026lt; m \u0026amp;\u0026amp; ph * TILE_WIDTH + tx \u0026lt; k) { Mds[ty][tx] = M[Row * k + ph * TILE_WIDTH + tx]; } else { Mds[ty][tx] = 0.0f; } if (ph * TILE_WIDTH + ty \u0026lt; k \u0026amp;\u0026amp; Col \u0026lt; n) { Nds[ty][tx] = N[(ph * TILE_WIDTH + ty) * n + Col]; } else { Nds[ty][tx] = 0.0f; } __syncthreads(); for (int i = 0; i \u0026lt; TILE_WIDTH; i++) { Pvalue += Mds[ty][i] * Nds[i][tx]; } __syncthreads(); } if (Row \u0026lt; m \u0026amp;\u0026amp; Col \u0026lt; n) { P[Row * n + Col] = Pvalue; } } 5.6 Impact of Memory Usage on Occupancy CUDA 设备提供有限的资源限制了可以同时在给定程序的 SM 中分配的线程数量。上面代码不支持主机代码对共享内存使用情况的任何动态调整，因为共享内存使用的大小是一个常量。 解决的方法是共享内存声明前添加一个 extern 关键字，并在声明中省略数组的大小。当调用内核时，可以根据设备查询结果动态配置每个块要使用的共享内存量，并将其作为第三个执行配置参数提供给内核调用。然后将数组中每个部分的大小作为参数传递给内核函数。\n1 2 3 4 5 6 7 8 9 size = ...; matrixMulKernel\u0026lt;\u0026lt;\u0026lt;dimGrid,dimBlock,size\u0026gt;\u0026gt;\u0026gt;(Md，Nd，Pd, Width，size/2，size/2); __global__ void matrixMulKernel(float* M, float* N,float* P,int width, unsigned Mdz_sz, unsigned Nds_sz) { extern __shared__ char float Mds_Nds[]; float *Mds = (float *) Mds_Nds; float *Nds = (float*) Mds_Nds + Mds_sz; } ","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch5/","summary":"Personal notebook 5 of Programming Massively Parallel","title":"PMPP Learning-Chapter 5 Memory Architecture and Data Locality"},{"content":"3 Multidimensional Grids and Data 本章将更广泛地介绍线程是如何组织的和如何使用线程和块来处理多维数组。\n3.1 Multidimensional Grid Organization 再次强调网格中的所有线程执行相同的内核函数，它们依赖于线程索引来区分彼此，并确定各自要处理的数据的部分。这些线程被组织成两级结构: 一个网格由一个或多个块组成，每个块由一个或多个线程组成。调用内核函数时需要指定执行配置参数 gridDim 和 blockDim，gridDim 是一个三维块数组，blockDim 是一个三维线程数组。他们的类型都是 dim3，是包含三个元素 x, y 和 z 的整数向量类型，分别指定了每个维度上的块个数和线程个数。使用少于 3 个维度时可以将未使用的维度大小设置为 1。网格中的所有块都具有相同的维度和大小。一旦网格启动，网格和块的尺寸将保持不变，直到整个网格完成执行。\n当前 CUDA 系统中，每个块的总大小限制为 1024 个线程。只要线程总数不超过 1024，这些线程就可以以任何方式分布在三个维度上。\n1 function_name\u0026lt;\u0026lt;\u0026lt;gridDim, blockDim\u0026gt;\u0026gt;\u0026gt;(...); 一个例子如下，dimBlock和dimGrid是由程序员定义的主机代码变量。\n1 2 3 dim3 dimGrid(32, 1, 1); dim3 dimBlock(128, 1, 1); vecAddKernel\u0026lt;\u0026lt;\u0026lt;dimGrid, dimBlock\u0026gt;\u0026gt;\u0026gt;(...); 下图展示了 gridDim(2,2,1) 和 blockDim (4,2,2) 情况下线程组织的情况。\nA Multidimensional Example of CUDA Grid Organization\n3.2 Mapping threads to multidimensional data 选择 1D、2D 或 3D 的线程组织通常基于数据的性质。例如图像是一个二维像素数组。使用由 2D 块组成的 2D 网格可以方便地处理图像中的像素。下图展示了处理大小为 62*76 1F1F 的图片 P 的一种组织方式。假设使用 16*16 大小的块，那么在 y 方向上需要 4 个块，在 x 方向上需要 5 个块。横纵坐标的计算方式为\n1 2 row coordinate = blockIdx.y * blockDim.y + threadIdx.y col coordinate = blockIdx.x * blockDim.x + threadIdx.x 我们将按维度的降序 (z, y, x) 表示多维数据。这种顺序与 gridDim 和 blockDim 维度中数据维度的顺序相反！！！\n实际上，由于现代计算机中使用二维存储空间，C 语言中的所有多维数组都是线性化的。虽然可以使用如 Pin_d[j][i] 这样的多维数组语法访问多维数组的元素，但编译器将这些访问转换为指向数组开始元素的基指针，以及从这些多维索引计算出的一维偏移量。 至少有两种方法可以对二维数组进行线性化。将同一行/列的所有元素放置到连续的位置。然后将行/列一个接一个地放入内存空间中。这种排列称为行/列主序布局 (row/column-major layout). CUDA C 使用行主序布局。\nRow-major Layout for a 2D C Array\n下面内核代码将每个颜色像素转换为对应的灰度像素。我们计算坐标为 (row, col) 的像素对应的 1D 索引 row * width + col. 这个 1D 索引 grayOffset 就是 Pout 的像素索引，因为输出灰度图像中的每个像素都是 1字节 (unsigned char)。每个彩色像素用三个元素(r, g, b)存储，每个元素为1字节。因此 rgbOffset 给出了 Pin 数组中颜色像素的起始位置。从 Pin 数组的三个连续字节位置读取每个通道对应的值，执行灰度像素值的计算，并使用 grayOffset 将该值写入 Pout 数组。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // we have 3 channels corresponding to RGB // The input image is encoded as unsigned characters [0, 255] __global__ void colorToGreyscaleConversion(unsigned char * Pout, unsigned char * Pin, int width, int height) { int Col = threadIdx.x + blockIdx.x * blockDim.x; int Row = threadIdx.y + blockIdx.y * blockDim.y; if (Col \u0026lt; width \u0026amp;\u0026amp; Row \u0026lt; height) { // get 1D coordinate for the grayscale image int greyOffset = Row*width + Col; // one can think of the RGB image having // CHANNEL times columns than the grayscale image int rgbOffset = greyOffset*CHANNELS; unsigned char r = Pin[rgbOffset + 0]; // red value for pixel unsigned char g = Pin[rgbOffset + 1]; // green value for pixel unsigned char b = Pin[rgbOffset + 2]; // blue value for pixel // perform the rescaling and store it // We multiply by floating point constants Pout[grayOffset] = 0.21f*r + 0.71f*g + 0.07f*b; } } 3.3 Image blur: a more complex kernel 图像模糊函数将输出图像像素的值计算为相邻像素 (包括输入图像中像素) 的加权和。简便起见，我们使用相邻像素的平均值来计算结果，对应的代码如下。与 colorToGrayscaleConversion 中使用的策略类似，对每个输出像素使用 1 个线程来计算。col和 row 表示输入像素 patch 的中心像素位置。嵌套的 for 循环遍历 patch 中的所有像素。if 语句的 curRow \u0026lt; 0 和 curCol \u0026lt; 0 条件用于跳过执行超出图像范围的部分。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 __global__ void blurKernel(unsigned char *in, unsigned char *out, int width, int height) { int Col = threadIdx.x + blockIdx.x * blockDim.x; int Row = threadIdx.y + blockIdx.y * blockDim.y; if (Col \u0026lt; width \u0026amp;\u0026amp; Row \u0026lt; height) { int pixVal = 0; int pixels = 0; // Get the average of the surrounding BLUR_SIZE x BLUR_SIZE box for (int blurRow = -BLUR_SIZE; blurRow \u0026lt; BLUR_SIZE + 1; blurRow++) { for (int blurCol = -BLUR_SIZE; blurCol \u0026lt; BLUR_SIZE + 1; blurCol++) { int curRow = Row + blurRow; int curCol = Col + blurCol; // If the pixel is within the image, add its value to the sum if(curRow \u0026gt; -1 \u0026amp;\u0026amp; curRow \u0026lt; height \u0026amp;\u0026amp; curCol \u0026gt; -1 \u0026amp;\u0026amp; curCol \u0026lt; width) { pixVal += in[curRow*width + curCol]; pixels++; // Keep track of the number of pixels in the avg } } } // Write our new pixel value out out[Row*width + Col] = (unsigned char)(pixVal / pixels); } } 3.4 Matrix multiplication 矩阵乘法是 Basic Linear Algebra Subprograms (BLAS) 的重要组成部分。\nLevel 1 形如 $y = \\alpha x + y$ 的向量运算。 Level 2 形如 $y = \\alpha Ax + \\beta y$ 的矩阵-向量运算。 Level 3 形如 $y = \\alpha AB + \\beta C$ 的矩阵-矩阵运算。 为了用 CUDA 实现矩阵乘法，我们可以采取与 colorToGrayscaleConversion 相同的方法将网格中的线程映射到输出矩阵 P 的元素，即每个线程负责计算 P 中的一个元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Assuming square matrices of size Width x Width __global__ void MatrixMulKernel(float* M, float* N, float* P, int Width) { // Calculate the row index of the P element and M int Row = blockIdx.y*blockDim.y+threadIdx.y; // Calculate the column index of P and N int Col = blockIdx.x*blockDim.x+threadIdx.x; if ((Row \u0026gt;= Width) || (Col \u0026gt;= Width)) return; float Pvalue = 0; // each thread computes one element of the block sub-matrix for (int k = 0; k \u0026lt; Width; ++k) Pvalue += M[Row*Width+k]*N[k*Width+Col]; P[Row*Width+Col] = Pvalue; } Matrix Multiplication by Tiling P\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch3/","summary":"Personal notebook 3 of Programming Massively Parallel","title":"PMPP Learning-Chapter 3 Multidimensional Grids and Data"},{"content":"2 Heterogeneous Data Parallel Computing 数据并行 (Data Parallel) 是指在数据集的不同部分上执行的计算工作可以彼此独立地完成，从而可以并行执行的现象。\n2.1 Data Parallel 在图像处理中，将彩色像素转换为灰度只需要该像素的数据。模糊图像将每个像素的颜色与附近像素的颜色平均，只需要像素的小邻域的数据。即使是一个看似全局的操作，比如找到图像中所有像素的平均亮度，也可以分解成许多可以独立执行的较小的计算。这种对不同数据块的独立计算是数据并行性的基础。 为了将彩色图像转换为灰度图像，我们通过以下加权和公式计算每个像素的亮度值L. 这些逐像素计算都不依赖于彼此，都可以独立执行。显然，彩色图到灰度图的转换具有大量的数据并行性。 $L=0.21r+0.72g+0.07b$\nTask Parallelism vs. Data Parallelism 数据并行并不是并行编程中使用的唯一类型的并行。任务并行 (Task Parallelism) 在并行编程中也得到了广泛的应用。任务并行性通常通过应用程序的任务分解来暴露。例如，一个简单的应用程序可能需要做一个向量加法和一个矩阵-向量乘法。每个都是一个任务。如果两个任务可以独立完成，则存在任务并行性。I/O和数据传输也是常见的任务。 Data Parallelsim in Image2Grayscale Conversion\n2.2 CUDA C Program Structure CUDA C 用最少的新语法和库函数扩展了流行的 ANSI C 语言。CUDA C 程序的结构反映了计算机中主机 (CPU) 和一个或多个设备 (GPU) 的共存。每个 CUDA C 源文件可以同时包含主机 (host) 代码和设备 (device) 代码。 CUDA程序的执行流程如下图所示。执行从主机代码 (CPU 串行代码) 开始，当调用内核函数 (kernel function) 时，会在设备上启动大量线程1来执行内核。由内核调用启动的所有线程统称为网格 (grid)。这些线程是 CUDA 并行执行的主要载体。\nExecution of a CUDA Program\n2.3 A vector addition kernel 使用向量加法来展示 CUDA C 程序结构。下面展示了一个简单的传统 C 程序，它由一个主函数和一个向量加法函数组成。\n当需要区分主机和设备数据时，我们都会在主机使用的变量名后面加上 “_h”，而在设备使用的变量名后面加上 “_d”.\n1 2 3 4 5 6 7 8 9 10 11 12 13 // Compute vector sum h_C = h_A+h_B void vecAdd(float* h_A, float* h_B, float* h_C, int n) { for (int i = 0; i \u0026lt; n; i++) h_C[i] = h_A[i] + h_B[i]; } int main() { // Memory allocation for h_A, h_B, and h_C // I/O to read h_A and h_B, N elements each // … vecAdd(h_A, h_B, h_C, N); } 并行执行向量加法的一种直接方法是修改 vecAdd 函数并将其计算移到设备上。修改后的结构如下所示。\nStructure of the Modified VecAdd\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include \u0026lt;cuda_runtime.h\u0026gt; // … void vecAdd(float* A, float* B, float* C, int n) { int size = n* sizeof(float); float *d_A *d_B, *d_C; /* … 1. // Allocate device memory for A, B, and C // copy A and B to device memory 2. // Kernel launch code – to have the device // to perform the actual vector addition 3. // copy C from the device memory // Free device vectors */ } 2.4 Device Global Memory and Data Transfer 在当前的CUDA系统中，设备通常是带有自己的 DRAM 的硬件卡，称为 (设备)全局内存 (device global memory). 对于向量加法内核，在调用内核之前，程序员需要在设备全局内存中分配空间，并将数据从主机内存传输到设备全局内存中分配的空间。这对应于 1. 部分。类似地，在设备执行之后，程序员需要将结果数据从设备全局内存传输回主机内存，并释放设备全局内存中不再需要的已分配空间。这对应于 3. 部分。 cudaMalloc 函数可以从主机代码中调用，为对象分配一块设备全局内存。第一个参数是指针变量的地址，该变量将被设置为指向分配的对象。指针变量的地址应强制转换为 void**，这样可以允许 cudaMalloc 函数将分配内存的地址写入所提供的指针变量中，而不考虑其类型2。\n1 cudaError_t cudaMalloc(void** devPtr, size_t size); devPtr：指向指向设备内存的指针的指针。 size：要分配的内存大小（以字节为单位）。 cudaFree 函数通过释放设备内存并将其返回到可用内存池来管理设备内存资源。它只需要 A_d 的值来识别要释放的内存区域，而不需要改变 A_d 指针本身的地址。\n在主机代码中对设备全局内存指针进行解引用引用可能导致异常或其他类型的运行错误。\ncudaMemcpy 函数是 CUDA 中用于在主机内存和设备内存之间传输数据的核心函数。它允许将数据从主机内存复制到设备内存，或从设备内存复制到主机内存。\n1 cudaError_t cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind); dst：目标内存地址，可以是主机内存地址或设备内存地址。 src： 源内存地址，可以是主机内存地址或设备内存地址。 count： 要复制的数据大小（以字节为单位）。 kind： 复制方向，可以使用以下枚举值： cudaMemcpyHostToDevice：主机内存-\u0026gt;设备内存。 cudaMemcpyDeviceToHost：设备内存-\u0026gt;主机内存。 cudaMemcpyDeviceToDevice：设备内存-\u0026gt;设备内存。 cudaMemcpyHostToHost：主机内存-\u0026gt;主机内存 了解完这些后，可以更新代码的框架如下\nChecking and Handling in CUDA CUDA API 函数返回一个 cudaError_t 类型的标志，指示当它们处理请求时是否发生错误。 在 CUDA 运行时库的头文件 cuda_runtime.h 中，cudaError_t 被定义为一个 int 类型的别名\n1 typedef int cudaError_t; 一个例子如下\n1 2 3 4 5 6 7 8 // ... float *d_a; cudaError_t err = cudaMalloc(\u0026amp;d_a, 1024 * sizeof(float)); if (err != cudaSuccess) { printf(\u0026#34;cudaMalloc failed: %s\\n\u0026#34;, cudaGetErrorString(err)); return 1; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 void vecAdd(float* A, float* B, float* C, int n) { int size = n* sizeof(float); float *d_A *d_B, *d_C; cudaMalloc((void **) %d_A, size); cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice); cudaMalloc((void **) %d_B, size); cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice); cudaMalloc((void **) %d_C, size); // Kernel invocation code - to be shown later // ... cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost); // Free device memory for A, B, C cudaFree(d_A); cudaFree(d_B); cudaFree(d_C); } 2.5 Kernel functions and threading 内核函数指所有线程在并行阶段执行的代码，网格中的所有线程执行相同的内核代码。。当程序的主机代码调用内核时，CUDA runtime 系统启动一个线程网格，这些线程被组织成一个两级层次结构。每个网格都被组织为线程块 (thread block, 简称为块) 数组。网格的所有块都是相同的大小。在调用内核时，每个线程块中的线程总数由主机代码指定。 同一个内核可以在主机代码的不同部分用不同数量的线程调用。对于给定的线程网格，一个块中的线程数可以在名为 blockDim 的内置变量中获得，它是一个具有三个无符号整数字段 (x, y, z) 的结构体。 下图给出了一个示例，其中每个块由256个线程组成。每个线程都用一个箭头表示，标有线程在块中的索引号的方框。由于数据是一维向量，因此每个线程块被组织为一维线程数组。blockDim.x 的值表示每个块中的线程总数。threadaIdx 变量表示每个线程在块中的坐标。全局索引 i 的计算公式为 i = blockIdx.x * blockDim.x + threadIdx.x\n许多编程语言都有内置变量。这些变量具有特殊的含义和目的。这些变量的值通常由运行时系统预先初始化，并且在程序中通常是只读的。\nHierarchical Organization in CUDA\n向量加法的核函数定义如下。网格中的每个线程对应于原始循环的一次迭代，这被称为循环并行 (loop parallel)，意为原始顺序代码的迭代由线程并行执行。addVecKernel 中有一个 if (i \u0026lt; n) 语句，因为并非所有的向量长度都可以表示为块大小的倍数。\n1 2 3 4 5 6 __global__ void vecAddKernel(float* A, float* B, float* C, int n) { int i = blockDim.x * blockIdx.x + threadIdx.x; if(i \u0026lt; n) C[i] = A[i] + B[i]; } CUDA C 使用了三个可以在函数声明中使用的限定字。下表展示了这些关键词的意义。\n__host__ 就是在主机上执行的传统 C 函数，只能从另一个主机函数调用。 __global__ 表示被声明的函数是 CUDA C 内核函数。内核函数在设备上执行，并且可以从主机上调用。 __device__ 函数在 CUDA 设备上执行，只能从内核函数或其他设备函数调用。 可以在函数声明中同时使用 __host__ 和 __device__. 编译系统会为同一个函数生成两个版本的目标代码。\nQualifier Keyword Callable From Executed on Executed by __host__ (default) Host Host Caller host thread __global__ Host/Device Device New grid of device thread __device__ Device Device Caller device thread 2.6 Calling kernel functions 实现内核函数之后，剩下的步骤是从主机代码调用该函数来启动网格。当主机代码调用内核时，它通过执行配置参数 (execution configuration parameters) 设置网格和线程块大小配置参数在在传统的C函数参数之前由 \u0026lt;\u0026lt;\u0026lt;...\u0026gt;\u0026gt;\u0026gt; 之间给出。第一个配置参数给出网格中的块数量。第二个参数指定每个块中的线程数。\n1 2 3 4 5 6 7 int vectAdd(float* A, float* B, float* C, int n) { // d_A, d_B, d_C allocations and copies omitted // ... // Run ceil(n/256) (or by (n + 256 - 1) / 256) blocks of 256 threads each vecAddKernel\u0026lt;\u0026lt;\u0026lt;ceil(n/256.0), 256\u0026gt;\u0026gt;\u0026gt;(d_A, d_B, d_C, n); } 下面展示了 vecAdd 函数中的最终主机代码。所有的线程块操作向量的不同部分。它们可以按任意顺序执行。\n实际上，分配设备内存、从主机到设备的输入数据传输、从设备到主机的输出数据传输以及释放设备内存的开销可能会使生成的代码比原始顺序代码慢，这是因为内核完成的计算量相对于处理或传输的数据量来说很小。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void vecAdd(float* A, float* B, float* C, int n) { int size = n * sizeof(float); float *d_A *d_B, *d_C; cudaMalloc(\u0026amp;d_A, size); cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice); cudaMalloc(\u0026amp;d_B, size); cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice); cudaMalloc(\u0026amp;d_C, size); vecAddKernel\u0026lt;\u0026lt;\u0026lt;ceil(n/256.0), 256\u0026gt;\u0026gt;\u0026gt;(d_A, d_B, d_C, n); cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost); // Free device memory for A, B, C cudaFree(d_A); cudaFree(d_B); cudaFree(d_C); } 2.7 Compilation NVCC (NVIDIA C Compiler) 处理一个C处理一个CUDA C程序，使用 CUDA 关键字来分离主机代码和设备代码。\n主机代码是就是普通的ANSI C代码，使用 C/C++ 编译器进行编译，并作为传统的 CPU 进程运行。 设备代码及其相关辅助函数和数据结构的CUDA关键字，由NVCC编译成称为 PTX (Parallel Thread Execution) 文件的虚拟二进制文件, 由 NVCC runtime 组件进一步编译成目标文件，并在支持 cuda 的 GPU 设备上执行。 Overview of the Compilation Process of a CUDA C Program\n线程由程序的代码、正在执行的代码中的位置以及它的变量和数据结构的值组成。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\ncudaMalloc 与 C 语言 malloc 函数的格式不同。前者接受两个参数，指针变量其地址作为第一个参数给出。后者只接受一个参数来指定分配对象的大小，返回一个指向分配对象的指针。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch2/","summary":"Personal notebook 2 of Programming Massively Parallel","title":"PMPP Learning-Chapter 2 Heterogeneous Data Parallel"},{"content":"1 Introduction 基于单个中央处理器 (Central Processor Unit, CPU) 的微处理器外部看起来是按顺序执行指令，例如英特尔和 AMD 的 x86 处理器，随着时钟频率和硬件资源的快速增长，在20世纪80年代和90年代推动了计算机应用程序的性能快速提高和成本降低。可以给桌面应用提供 GFLOPS 级别的浮点运算，给数据中心提供 TFLOPS 级别的浮点运算。然而，由于能源消耗和散热问题，这种趋势从2003年开始放缓。这些问题限制了时钟频率的增加和保持按顺序步骤执行指令的同时在单个 CPU 上每个时钟周期内可以执行的行动。 之后几乎所有的微处理器供应商都转向了在每个芯片上使用多个物理 CPU (称为处理器核心) 来提高处理能力。在这个模型中，传统的CPU可以看作是一个单核CPU。这样就要求必须有多个指令序列并且可以同时在这些处理器核心上执行 (无论是来自相同的应用程序还是来自不同的应用程序)。为了使一个特定的应用程序受益于多个处理器核心，它的工作必须分成多个指令序列，这些指令序列可以同时在这些处理器核心上执行。这种从单个CPU按顺序执行指令到多个内核并行执行多个指令序列的转变造就了并行计算的需求。\n1.1 Heterogeneous parallel computing 半导体行业确定了设计微处理器的两条主要路线\nMulticore Trajectory: 寻求在转变到多个核时保持顺序程序的执行速度。 Many-thread Trajectory: 更多地关注并行应用程序的执行吞吐量。 自2003年以来，多线程处理器尤其是 GPU，一直在浮点计算性能上表现优异。多核和多线程之间在峰值性能上的如此大的差距促使许多应用程序开发人员将其软件的计算密集型部分转移到gpu上执行。\n64-bit double-precision 32-bit single-precision Tesla A100 GPU 9.7 TFLOPS 156 TFLOPS Intel 24-core Processor 0.33 TLOPS 0.66 TLOPS CPU 的设计为面向延迟的 (latency-oriented) 设计。针对顺序代码性能进行了优化。计算单元和操作数传输逻辑的设计是为了最小化计算的有效延迟，代价是增加芯片面积和单位功率的使用。采用复杂的分支预测逻辑和执行控制逻辑来减少条件分支指令的延迟使得每个线程的执行延迟降低。然而，低延迟计算单元、复杂的操作数传递逻辑、大缓存存储器和控制逻辑消耗了芯片面积和功率，否则可以用来提供更多的算术执行单元和内存访问通道。 GPU 的设计是面向吞吐量 (throught-put oriented)的设计。寻求在有限的芯片面积和功耗预算下最大化浮点计算和内存访问吞吐量。许多图形应用程序的速度受到数据从内存系统传输到处理器的速率的限制，必须能够将大量数据加载和存储到 DRAM 中的图形帧缓冲区。 游戏应用程序普遍接受的宽松内存模型(各种系统软件，应用程序和I/O设备期望其内存访问工作的方式)也使 GPU 更容易支持访问内存的大规模并行性。通用处理器必须满足遗留操作系统、应用程序和I/O设备的要求，这些要求对支持并行内存访问提出了更多挑战，从而使提高内存访问的吞吐量 (通常称为内存带宽 memory bandwidth) 变得更加困难。 就功耗和芯片面积而言，减少延迟比增加吞吐量要昂贵得多1。因此，GPU 的主流解决方案是针对大量线程的执行吞吐量进行优化，而不是减少单个线程的延迟。这种设计方法允许分级存储层次和计算具有较长的延迟，从而节省了芯片面积和功耗。\nCPU and GPU Design Philosophies\n1.2 Why More Speed or Parallelism 基于人工神经网络的深度学习是通过大幅提高计算吞吐量而实现的新应用。虽然自 20 世纪 70 年代以来，神经网络得到了积极的关注，但由于需要太多的标记数据和太多的计算来训练这些网络，它们在实际应用中一直效果不佳。互联网的兴起提供了大量有标签的图片，而 GPU 的兴起则带来了计算吞吐量的激增。因此，自2012年以来，基于神经网络的应用在计算机视觉和自然语言处理方面得到了快速的采用。这种采用彻底改变了计算机视觉和自然语言处理应用，并引发了自动驾驶汽车和家庭辅助设备的快速发展。\n1.3 Speeding up real applications 并行计算系统相对于串行计算系统所能实现的加速的一个重要因素是可以并行化的应用程序部分，另一个重要因素是从内存访问数据和向内存写入数据的速度有多快。下图展示了顺序和并行应用程序部分的覆盖率。顺序部分和传统的(单核)CPU覆盖部分相互重叠。以前的GPGPU技术对数据并行部分的覆盖非常有限，因为它仅限于可以表示为绘制像素的计算。障碍是指难以扩展单核cpu以覆盖更多数据并行部分的功率限制。\nCoverage of Application Portions\n1.4 Challenges in parallel programming 设计具有与顺序算法相同的算法(计算)复杂度的并行算法可能具有挑战性。 许多应用程序的执行速度受到内存访问延迟和/或吞吐量的限制。 与顺序程序相比，并行程序的执行速度通常对输入数据特征更为敏感。 有些应用程序可以并行化，而不需要跨不同线程的协作 (embarrassingly parallel)。其他应用程序需要使用同步操作 (synchronization operations) 使得线程能相互协作。 例如，可以通过将计算单元的数量翻倍来使吞吐量翻倍，但代价是芯片面积和功耗翻倍。然而，将算术延迟减少一半可能需要电流翻倍，代价是使用的芯片面积增加一倍以上，功耗变为四倍。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/blogs/courselearning/pmpp/pmpp-ch1/","summary":"Personal notebook 1 of Programming Massively Parallel","title":"PMPP Learning-Chapter 1 Introduction"},{"content":"Pattern Match and Rewriting 下面代码中 MyModule 包含一个带有两个高级算子 relax.opmultiply 和 relax.op.add 的 relax 函数。我们的目标是找到这两个算子，并将其替换为对 relax.ewise_fma 算子的调用。\n1 2 3 4 5 6 7 8 9 10 @tvm.script.ir_module class MyModule: @R.function def main(x: R.Tensor((3, 4), \u0026#34;float32\u0026#34;), y: R.Tensor((3, 4), \u0026#34;float32\u0026#34;)): # type: ignore with R.dataflow(): cls = MyModule lv0 = relax.op.multiply(x, y) gv0 = relax.op.add(lv0, y) R.output(gv0) return gv0 每个 IRModule 都包含一组函数，函数体由一组称为抽象语法树（AST）的数据结构组成。 {% fold info @Abstract Syntax Tree %} 抽象语法树（Abstract Syntax Tree，AST）是一种广泛用于编程语言处理的树状数据结构。它是一种对源代码语法结构的抽象表示，去掉了编程语言的具体语法细节，但保留了代码的结构和语义信息。 AST 是一棵树状结构，其节点表示源代码中的语法结构。例如，变量声明、操作符、函数调用、控制结构（如条件语句、循环）等。每个节点包含与相应语法结构相关的信息，如操作符的类型、变量的名称、常量的值等。\n1 a = b + 1 这个代码可以转换为如下形式的 AST：\n1 2 3 4 5 Assignment ├── Identifier (a) └── BinaryOperation ├── Identifier (b) └── Constant (1) {% endfold %} 每个函数都由一个 relax.expr.Function 节点表示。\n1 2 relax_func = MyModule[\u0026#34;main\u0026#34;] type(relax_func) # \u0026lt;class \u0026#39;tvm.relax.expr.Function\u0026#39;\u0026gt; 该函数包含一系列参数\n1 print(relax_func.params) # [x, y] 该函数包含一个返回值表达式，和函数中的一组 binding blocks.\n1 2 func_body = relax_func.body print(type(func_body)) # \u0026lt;class \u0026#39;tvm.relax.expr.SeqExpr\u0026#39;\u0026gt; 函数主体 SeqExpr 包含一系列 binding.\n1 2 3 4 5 6 7 8 9 print(relax_func.body.blocks) \u0026#39;\u0026#39;\u0026#39; [x: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) y: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) with R.dataflow(): lv0: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) = R.multiply(x, y) gv0: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) = R.add(lv0, y) R.output(gv0)] \u0026#39;\u0026#39;\u0026#39; 在 DataflowBlock 中,我们可以访问各个 binding ,包括 value 和 var.\n1 2 3 4 5 6 dataflow_block = func_body.blocks[0] print(type(dataflow_block)) # \u0026lt;class \u0026#39;tvm.relax.expr.DataflowBlock\u0026#39;\u0026gt; binding = dataflow_block.bindings[0] print(type(binding)) # \u0026lt;class \u0026#39;tvm.relax.expr.VarBinding\u0026#39;\u0026gt; print(binding.var) # LHS of binding: lv0 print(binding.value) # # LHS of binding: R.multiply(x, y) Relax Function Data Structure\n改写程序可以通过递归遍历 MyModule 的 AST ，并生成转换后的 AST 来实现。但是我们可以使用额外的工具支持来简化流程。下面的代码遵循一种称为 visitor pattern 的设计模式，允许我们访问每个 AST 节点并将它们重写为转换后的版本。主要目的是将形如 a * b + c 的表达式转换为 ewise_fma(a, b, c) 的形式。\nEwiseFMARewriter 继承自 relax.PyExprMutator，这是 TVM 中的一个基类，用于遍历和修改表达式树中的节点。visit_call_ 方法被重载来处理 relax.Call 节点，被重载来处理 relax.Call 节点。\n如果当前节点不是加法操作，直接返回该节点，表示对该节点不进行任何修改。如果加法的第一个操作数不是乘法操作，或者第一个操作数的绑定值不是一个 relax.Call 节点，直接返回该加法节点。如果匹配成功，构造一个新的 ewise_fma 操作节点，将乘法的两个操作数和加法的第二个操作数作为参数传入。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 @relax.expr_functor.mutator class EwiseFMARewriter(relax.PyExprMutator): def visit_call_(self, op: relax.Call): # Reloaded call = self.visit_expr_post_order(op) add_op = tvm.ir.Op.get(\u0026#34;relax.add\u0026#34;) multiply_op = tvm.ir.Op.get(\u0026#34;relax.multiply\u0026#34;) ewise_fma_op = tvm.ir.Op.get(\u0026#34;relax.ewise_fma\u0026#34;) if call.op != add_op: return call value = self.lookup_binding(call.args[0]) if not isinstance(value, relax.Call) or value.op != multiply_op: return call fma_call = relax.Call( ewise_fma_op, [value.args[0], value.args[1], call.args[1]], None, None ) return fma_call updated_fn = EwiseFMARewriter().visit_expr(MyModule[\u0026#34;main\u0026#34;]) updated_fn.show() #----------------------------- @R.function def main(x: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;), y: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;): with R.dataflow(): lv0: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) = R.multiply(x, y) gv0: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) = R.ewise_fma(x, y, y) R.output(gv0) return gv0 使用 remove_all_unused 来删除代码中没有用到的 DataflowBlocks 和 VarBindings.\n1 2 3 4 5 6 7 8 9 relax.analysis.remove_all_unused(updated_fn).show() #------------------------------------------- @R.function def main(x: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;), y: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;): with R.dataflow(): gv0: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;) = R.ewise_fma(x, y, y) R.output(gv0) return gv0 Fuse Linear and ReLU 下面在端到端模型上进行计算图的改写。采用的还是之前使用的 FashionMNIST MLP 模型。为了简化过程，直接使用高级运算符构建模型。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import pickle as pkl mlp_params = pkl.load(open(\u0026#34;fasionmnist_mlp_params.pkl\u0026#34;, \u0026#34;rb\u0026#34;)) def create_model(): bb = relax.BlockBuilder() x = relax.Var(\u0026#34;x\u0026#34;, relax.TensorStructInfo((1, 784), \u0026#34;float32\u0026#34;)) w0 = relax.const(mlp_params[\u0026#34;w0\u0026#34;], \u0026#34;float32\u0026#34;) b0 = relax.const(mlp_params[\u0026#34;b0\u0026#34;], \u0026#34;float32\u0026#34;) w1 = relax.const(mlp_params[\u0026#34;w1\u0026#34;], \u0026#34;float32\u0026#34;) b1 = relax.const(mlp_params[\u0026#34;b1\u0026#34;], \u0026#34;float32\u0026#34;) with bb.function(\u0026#34;main\u0026#34;, [x]): with bb.dataflow(): lv0 = bb.emit(relax.op.matmul(x, relax.op.permute_dims(w0))) lv1 = bb.emit(relax.op.add(lv0, b0)) lv2 = bb.emit(relax.op.nn.relu(lv1)) lv3 = bb.emit(relax.op.matmul(lv2, relax.op.permute_dims(w1))) lv4 = bb.emit(relax.op.add(lv3, b1)) gv = bb.emit_output(lv4) bb.emit_func_output(gv) return bb.get() MLPModel = create_model() MLPModel.show() #------------------------------- @I.ir_module class Module: @R.function def main(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][0], axes=None) lv1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.matmul(x, lv, out_dtype=\u0026#34;void\u0026#34;) lv2: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.add(lv1, metadata[\u0026#34;relax.expr.Constant\u0026#34;][1]) lv3: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.nn.relu(lv2) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][2], axes=None) lv5: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.matmul(lv3, lv4, out_dtype=\u0026#34;void\u0026#34;) lv6: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.add(lv5, metadata[\u0026#34;relax.expr.Constant\u0026#34;][3]) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = lv6 R.output(gv) return gv 我们的目标是对 matmul 和 add 进行算子融合。具体实现步骤与 FMA 相似：\n识别 matmul 和 add 算子。 生成另一个调用 matmul 和 add 算子的子函数。 将 matmul 和 add 替换为融合后的子函数。 下面代码定义了一个名为 DenseAddFusor 的类，用于在 TVM 的 Relax 框架中将特定的矩阵乘法和加法操作模式融合成一个高效的原语函数。\ntransform 方法遍历模块中的每个函数。如果函数已经被标记为 primitive（即已经被融合过），则跳过。对每个函数应用 visit_expr 以进行模式匹配和潜在的融合操作，然后删除未使用的变量，并更新函数。最后，返回更新后的 IRModule。 visit_call_ 方法用于访问 relax.Call 节点（表示操作符调用）。它首先递归处理子表达式，然后尝试匹配特定模式。match_call 是一个内部函数，用于检查某个节点是否是特定操作符的调用。如果当前节点不是 add 操作，或者 add 操作的第一个参数不是 matmul（矩阵乘法）操作，则直接返回当前节点，不进行修改。如果匹配成功，则提取 matmul 的两个操作数 x 和 w 以及 add 的第二个操作数 b，准备进行融合。 通过 relax.BlockBuilder定义一个名为 fused_dense_addX新的融合函数，其中 X 是一个递增的计数器。该函数接收 x、w、b 作为参数，首先进行矩阵乘法，然后将结果与 b 相加，最终输出结果。 给新生成的融合函数添加一个属性 Primitive，标记为已经融合的原语函数。通过 builder_ 更新全局模块，将融合函数添加到模块中 (GlobalVar 用于指代存储在 IRModule 中的全局函数)。返回一个新的 relax.Call 节点，该节点调用生成的融合函数，并传递原始的输入参数 x、w、b。 VisitExpr TVM 中的 VisitExpr 流程是一种递归遍历 IR 节点的机制,它是实现各种 IR 转换和优化的基础。具体流程如下:\n首先创建一个 ExprVisitor 或 ExprMutator 的子类实例,这个子类会实现各种具体的访问逻辑。 调用 visit_expr 方法,传入根 IR 节点。这个方法会触发整个遍历过程的启动。 visit_expr 方法会首先调用 visit_expr_post_order 方法,这个方法会以深度优先的方式遍历所有子节点。 对于每个子节点,visit_expr_post_order 会根据节点的具体类型,调用相应的 visit_XXX_ 方法。这些 visit_XXX_ 方法是由访问器子类实现的,包含了具体的访问逻辑。 在 visit_XXX_ 方法中,如果遇到子节点,会递归调用 visit_expr_post_order 方法继续遍历。 当遍历完整个 IR 树后,visit_expr 方法会返回最终的结果,即经过转换和修改的 IR 节点。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 @relax.expr_functor.mutator class DenseAddFusor(relax.PyExprMutator): def __init__(self, mod: IRModule) -\u0026gt; None: super().__init__(mod) self.mod_ = mod # cache pre-defined ops self.add_op = tvm.ir.Op.get(\u0026#34;relax.add\u0026#34;) self.dense_op = tvm.ir.Op.get(\u0026#34;relax.matmul\u0026#34;) self.counter = 0 def transform(self) -\u0026gt; IRModule: for global_var, func in self.mod_.functions_items(): if not isinstance(func, relax.Function): continue # avoid already fused primitive function if \u0026#34;Primitive\u0026#34; in func.attrs.keys() and func.attrs[\u0026#34;primitive\u0026#34;] != 0: continue updated_fn = self.visit_expr(func) updated_fn = relax.analysis.remove_all_unused(updated_fn) self.builder_.update_func(global_var, updated_fn) return self.builder_.get() def visit_call_(self, op: relax.Call): call = self.visit_expr_post_order(op) def match_call(node, op): if not isinstance(node, relax.Call): return False return node.op == op # pattern match dense =\u0026gt; add if not match_call(call, self.add_op): return call value = self.lookup_binding(call.args[0]) if value is None: return call if not match_call(value, self.dense_op): return call x = value.args[0] w = value.args[1] b = call.args[1] # construct a new fused primitive function param_x = relax.Var(\u0026#34;x\u0026#34;, relax.TensorStructInfo(x.struct_info.shape, x.struct_info.dtype)) param_w = relax.Var(\u0026#34;w\u0026#34;, relax.TensorStructInfo(w.struct_info.shape, w.struct_info.dtype)) param_b = relax.Var(\u0026#34;b\u0026#34;, relax.TensorStructInfo(b.struct_info.shape, b.struct_info.dtype)) bb = relax.BlockBuilder() fn_name = \u0026#34;fused_dense_add%d\u0026#34; % (self.counter) self.counter += 1 with bb.function(fn_name, [param_x, param_w, param_b]): with bb.dataflow(): lv0 = bb.emit(relax.op.matmul(param_x, param_w)) gv0 = bb.emit_output(relax.op.add(lv0, param_b)) bb.emit_func_output(gv0) # add primitive attribute to the fused functions fused_fn = bb.get()[fn_name].with_attr(\u0026#34;Primitive\u0026#34;, 1) global_var = self.builder_.add_func(fused_fn, fn_name) # construct call into the fused function return relax.Call(global_var, [x, w, b], None, None) @tvm.ir.transform.module_pass(opt_level=2, name=\u0026#34;DenseAddFuse\u0026#34;) class FuseDenseAddPass: \u0026#39;\u0026#39;\u0026#39;The wrapper for the LowerTensorIR pass.\u0026#39;\u0026#39;\u0026#39; def transform_module(self, mod, ctx): return DenseAddFusor(mod).transform() MLPFused = FuseDenseAddPass()(MLPModel) MLPFused.show() 融合后的 MLPFused 对应的 TensorIR 如下\nTVM 框架中使用 module_pass 来管理各种优化操作。这种机制允许将不同的优化操作（如图优化、代码生成、算子融合等）组织成一个流水线（pipeline），按顺序对模块进行处理。将 DenseAddFusor 封装为一个 module_pass，使得它能够轻松集成到 TVM 的 Pass 流水线中，与其他 Pass 一起工作，从而保证优化过程的整体性和一致性。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 @I.ir_module class Module: @R.function def fused_dense_add0(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), w: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;), b: R.Tensor((128,), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;): R.func_attr({\u0026#34;Primitive\u0026#34;: 1}) with R.dataflow(): lv: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.matmul(x, w, out_dtype=\u0026#34;void\u0026#34;) gv: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.add(lv, b) R.output(gv) return gv @R.function def fused_dense_add1(x: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;), w: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;), b: R.Tensor((10,), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): R.func_attr({\u0026#34;Primitive\u0026#34;: 1}) with R.dataflow(): lv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.matmul(x, w, out_dtype=\u0026#34;void\u0026#34;) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.add(lv, b) R.output(gv) return gv @R.function def main(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][0], axes=None) lv2: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = cls.fused_dense_add0(x, lv, metadata[\u0026#34;relax.expr.Constant\u0026#34;][1]) lv3: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.nn.relu(lv2) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][2], axes=None) lv6: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = cls.fused_dense_add1(lv3, lv4, metadata[\u0026#34;relax.expr.Constant\u0026#34;][3]) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = lv6 R.output(gv) return gv 上面的例子中，我们创建了两个前缀为 fuse_matmul_add 的子函数。 这些子函数包含有融合后算子的计算信息。 这种重写的替代方法是简单地为融合算子创建一个单独的原语算子（如ewise_fma）。 但是，当我们尝试融合更多算子时，可能存在指数级数量的组合。 将融合操作分组在一起的子函数为后续的 pass 保留了原始信息，进而便于分析，无需为每个融合 pattern 引入专用的高级算子。\nMap to TensorIR Calls 为了进一步进行底层优化和代码生成，我们需要将这些高级原语运算转换为相应的 TensorIR 函数。下面代码主要功能是将 Relax 表达式树中的高层次算子（ matmul、add、relu）转换为对应的 TensorIR 表示，从而使得这些算子能够映射到底层的张量操作（tensor operations）。这种转换使得编译器可以生成更接近硬件的高效代码，并为后续的代码优化和生成做好准备。\n调用 transform 方法会遍历 mod_ 中的所有函数: 对于每个函数,首先调用 visit_expr 方法,这会触发 VisitExpr 流程 visit_expr 方法会调用 visit_expr_post_order方法进行深度优先遍历 在遍历过程中对于每个 relax.Call 节点,会调用 visit_call_ 方法 visit_call_ 方法会检查 op_map 字典,如果当前操作在字典中,则调用对应的转换函数( map_dense, map_add, map_relu) 这些转换函数会使用 bb.call_te 方法,将 Relax IR 操作转换为 TensorIR 操作 在 transform 方法的最后,会调用 builder_.get() 方法,返回转换后的新 IR 模块。 最后 LowerToTensorIRPass 类将 LowerToTensorIR 转换器包装成一个可注册到 TVM 优化 pipeline 的 pass. module_pass 的 opt_level 参数决定了优化 pass 在优化 pipeline 中的执行顺序。 TVM 的优化 pipeline 是由多个 module_pass 组成的,每个 module_pass 都有一个 opt_level 属性来指定它的优化级别。\n当 TVM 进行优化时,它会按照 opt_level 从低到高的顺序依次应用各个 module_pass. opt_level=0 的 pass 会首先被执行。这些 pass 通常会执行一些基础的、必要的转换,为后续的优化奠定基础。 随后会执行 opt_level=1 的 pass,这些 pass 可能会执行一些更复杂的优化,比如循环优化、内存访问优化等。依此类推,opt_level 越高的 pass 会在优化 pipeline 的后期执行,它们执行的优化通常也越复杂和深入。\n通过合理地设置 opt_level,开发者可以控制各个优化 pass 的执行顺序,从而构建出针对性强、性能优秀的优化 pipeline 。这种灵活的优化管理机制是 TVM 的一大特点。\n对于 LowerToTensorIRPass,它的 opt_level 被设置为 0, 说明它是一个基础的 pass, 主要用于将高级的 Relax IR 操作转换为底层的 TensorIR 操作。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 @relax.expr_functor.mutator class LowerToTensorIR(relax.PyExprMutator): def __init__(self, mod: IRModule, op_map: dict) -\u0026gt; None: super().__init__(mod) self.mod_ = mod self.op_map = { tvm.ir.Op.get(k): v for k, v in op_map.items() } def visit_call_(self, op: relax.Call): call = self.visit_expr_post_order(op) if call.op in self.op_map: return self.op_map[call.op](self.builder_, call) return call def transform(self) -\u0026gt; IRModule: for global_val, func in self.mod_.functions_items(): if not isinstance(func, relax.Function): continue updated_fn = self.visit_expr(func) self.builder_.update_func(global_val, updated_fn) return self.builder_.get() def map_dense(bb, call): x, w = call.args return bb.call_te(topi.nn.matmul, x, w) def map_add(bb, call): a, b = call.args return bb.call_te(topi.add, a, b) def map_relu(bb, call): return bb.call_te(topi.nn.relu, call.args[0]) op_map = { \u0026#34;relax.matmul\u0026#34;: map_dense, \u0026#34;relax.add\u0026#34;: map_add, \u0026#34;relax.nn.relu\u0026#34;: map_relu } @tvm.ir.transform.module_pass(opt_level=0, name=\u0026#34;LowerToTensorIR\u0026#34;) class LowerToTensorIRPass: \u0026#39;\u0026#39;\u0026#39;The wrapper for the LowerTensorIR pass.\u0026#39;\u0026#39;\u0026#39; def transform_module(self, mod, ctx): return LowerToTensorIR(mod, op_map).transform() MLPModelTIR = LowerToTensorIRPass()(MLPFused) MLPModelTIR.show() 融合后的 TensorIR 如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @I.ir_module class Module: @T.prim_func(private=True) def add(lv: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), b: T.Buffer((T.int64(128),), \u0026#34;float32\u0026#34;), T_add: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for ax0, ax1 in T.grid(T.int64(1), T.int64(128)): with T.block(\u0026#34;T_add\u0026#34;): v_ax0, v_ax1 = T.axis.remap(\u0026#34;SS\u0026#34;, [ax0, ax1]) T.reads(lv[v_ax0, v_ax1], b[v_ax1]) T.writes(T_add[v_ax0, v_ax1]) T_add[v_ax0, v_ax1] = lv[v_ax0, v_ax1] + b[v_ax1] @T.prim_func(private=True) def add1(lv: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;), b: T.Buffer((T.int64(10),), \u0026#34;float32\u0026#34;), T_add: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for ax0, ax1 in T.grid(T.int64(1), T.int64(10)): with T.block(\u0026#34;T_add\u0026#34;): v_ax0, v_ax1 = T.axis.remap(\u0026#34;SS\u0026#34;, [ax0, ax1]) T.reads(lv[v_ax0, v_ax1], b[v_ax1]) T.writes(T_add[v_ax0, v_ax1]) T_add[v_ax0, v_ax1] = lv[v_ax0, v_ax1] + b[v_ax1] @T.prim_func(private=True) def matmul(x: T.Buffer((T.int64(1), T.int64(784)), \u0026#34;float32\u0026#34;), w: T.Buffer((T.int64(784), T.int64(128)), \u0026#34;float32\u0026#34;), T_matmul_NN: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;layout_free_buffers\u0026#34;: [1], \u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1, k in T.grid(T.int64(1), T.int64(128), T.int64(784)): with T.block(\u0026#34;T_matmul_NN\u0026#34;): v_i0, v_i1, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, k]) T.reads(x[v_i0, v_k], w[v_k, v_i1]) T.writes(T_matmul_NN[v_i0, v_i1]) with T.init(): T_matmul_NN[v_i0, v_i1] = T.float32(0.0) T_matmul_NN[v_i0, v_i1] = T_matmul_NN[v_i0, v_i1] + x[v_i0, v_k] * w[v_k, v_i1] @T.prim_func(private=True) def matmul1(x: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), w: T.Buffer((T.int64(128), T.int64(10)), \u0026#34;float32\u0026#34;), T_matmul_NN: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;layout_free_buffers\u0026#34;: [1], \u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1, k in T.grid(T.int64(1), T.int64(10), T.int64(128)): with T.block(\u0026#34;T_matmul_NN\u0026#34;): v_i0, v_i1, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, k]) T.reads(x[v_i0, v_k], w[v_k, v_i1]) T.writes(T_matmul_NN[v_i0, v_i1]) with T.init(): T_matmul_NN[v_i0, v_i1] = T.float32(0.0) T_matmul_NN[v_i0, v_i1] = T_matmul_NN[v_i0, v_i1] + x[v_i0, v_k] * w[v_k, v_i1] @T.prim_func(private=True) def relu(lv2: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1 in T.grid(T.int64(1), T.int64(128)): with T.block(\u0026#34;compute\u0026#34;): v_i0, v_i1 = T.axis.remap(\u0026#34;SS\u0026#34;, [i0, i1]) T.reads(lv2[v_i0, v_i1]) T.writes(compute[v_i0, v_i1]) compute[v_i0, v_i1] = T.max(lv2[v_i0, v_i1], T.float32(0.0)) @R.function def fused_dense_add0(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), w: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;), b: R.Tensor((128,), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;): R.func_attr({\u0026#34;Primitive\u0026#34;: 1}) cls = Module with R.dataflow(): lv = R.call_tir(cls.matmul, (x, w), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) gv = R.call_tir(cls.add, (lv, b), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) R.output(gv) return gv @R.function def fused_dense_add1(x: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;), w: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;), b: R.Tensor((10,), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): R.func_attr({\u0026#34;Primitive\u0026#34;: 1}) cls = Module with R.dataflow(): lv = R.call_tir(cls.matmul1, (x, w), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) gv = R.call_tir(cls.add1, (lv, b), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(gv) return gv @R.function def main(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][0], axes=None) lv2: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = cls.fused_dense_add0(x, lv, metadata[\u0026#34;relax.expr.Constant\u0026#34;][1]) lv3 = R.call_tir(cls.relu, (lv2,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][2], axes=None) lv6: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = cls.fused_dense_add1(lv3, lv4, metadata[\u0026#34;relax.expr.Constant\u0026#34;][3]) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = lv6 R.output(gv) return gv 在上面的 IRModule 中 fused_matmul_add0 和 fused_matmul_add1 仍然是 relax 函数，它们调用相应的 TensorIR matmul 和 add 函数。 我们可以将它们变成一个单一的 TensorIR 函数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 MLPModelFinal = relax.transform.FuseTIR()(MLPModelTIR) MLPModelFinal.show() #----------------------- @I.ir_module class Module: @T.prim_func(private=True) def fused_dense_add0(x: T.Buffer((T.int64(1), T.int64(784)), \u0026#34;float32\u0026#34;), w: T.Buffer((T.int64(784), T.int64(128)), \u0026#34;float32\u0026#34;), b: T.Buffer((T.int64(128),), \u0026#34;float32\u0026#34;), T_add_intermediate: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): T_matmul_NN_intermediate = T.alloc_buffer((T.int64(1), T.int64(128))) for i0, i1, k in T.grid(T.int64(1), T.int64(128), T.int64(784)): with T.block(\u0026#34;T_matmul_NN\u0026#34;): v_i0, v_i1, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, k]) T.reads(x[v_i0, v_k], w[v_k, v_i1]) T.writes(T_matmul_NN_intermediate[v_i0, v_i1]) with T.init(): T_matmul_NN_intermediate[v_i0, v_i1] = T.float32(0.0) T_matmul_NN_intermediate[v_i0, v_i1] = T_matmul_NN_intermediate[v_i0, v_i1] + x[v_i0, v_k] * w[v_k, v_i1] for ax0, ax1 in T.grid(T.int64(1), T.int64(128)): with T.block(\u0026#34;T_add\u0026#34;): v_ax0, v_ax1 = T.axis.remap(\u0026#34;SS\u0026#34;, [ax0, ax1]) T.reads(T_matmul_NN_intermediate[v_ax0, v_ax1], b[v_ax1]) T.writes(T_add_intermediate[v_ax0, v_ax1]) T_add_intermediate[v_ax0, v_ax1] = T_matmul_NN_intermediate[v_ax0, v_ax1] + b[v_ax1] @T.prim_func(private=True) def fused_dense_add1(x: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), w: T.Buffer((T.int64(128), T.int64(10)), \u0026#34;float32\u0026#34;), b: T.Buffer((T.int64(10),), \u0026#34;float32\u0026#34;), T_add_intermediate: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): T_matmul_NN_intermediate = T.alloc_buffer((T.int64(1), T.int64(10))) for i0, i1, k in T.grid(T.int64(1), T.int64(10), T.int64(128)): with T.block(\u0026#34;T_matmul_NN\u0026#34;): v_i0, v_i1, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, k]) T.reads(x[v_i0, v_k], w[v_k, v_i1]) T.writes(T_matmul_NN_intermediate[v_i0, v_i1]) with T.init(): T_matmul_NN_intermediate[v_i0, v_i1] = T.float32(0.0) T_matmul_NN_intermediate[v_i0, v_i1] = T_matmul_NN_intermediate[v_i0, v_i1] + x[v_i0, v_k] * w[v_k, v_i1] for ax0, ax1 in T.grid(T.int64(1), T.int64(10)): with T.block(\u0026#34;T_add\u0026#34;): v_ax0, v_ax1 = T.axis.remap(\u0026#34;SS\u0026#34;, [ax0, ax1]) T.reads(T_matmul_NN_intermediate[v_ax0, v_ax1], b[v_ax1]) T.writes(T_add_intermediate[v_ax0, v_ax1]) T_add_intermediate[v_ax0, v_ax1] = T_matmul_NN_intermediate[v_ax0, v_ax1] + b[v_ax1] @T.prim_func(private=True) def relu(lv2: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1 in T.grid(T.int64(1), T.int64(128)): with T.block(\u0026#34;compute\u0026#34;): v_i0, v_i1 = T.axis.remap(\u0026#34;SS\u0026#34;, [i0, i1]) T.reads(lv2[v_i0, v_i1]) T.writes(compute[v_i0, v_i1]) compute[v_i0, v_i1] = T.max(lv2[v_i0, v_i1], T.float32(0.0)) @R.function def main(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][0], axes=None) lv2 = R.call_tir(cls.fused_dense_add0, (x, lv, metadata[\u0026#34;relax.expr.Constant\u0026#34;][1]), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv3 = R.call_tir(cls.relu, (lv2,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(metadata[\u0026#34;relax.expr.Constant\u0026#34;][2], axes=None) gv = R.call_tir(cls.fused_dense_add1, (lv3, lv4, metadata[\u0026#34;relax.expr.Constant\u0026#34;][3]), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(gv) return gv ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch8/","summary":"Personal notebook 7.","title":"TVM Learning (10)-Computational Graph Optimization"},{"content":"Key Elements of Specialized Code 下面用 low-level numpy 写的 python 代码展示了一系列在专用硬件后端可能使用到的操作。\n1 2 3 4 5 6 7 8 def accel_fill_zero(C): C[:] = 0 def accel_tmm_add(C, A, B): C[:] += A @ B.T def accel_dma_copy(reg, dram): reg[:] = dram[:] 我们假设基础的运算单元可以进行 16x16的矩阵乘法 (accel_tmm_add)，接收2个寄存器里的 RHS 输入和表示累加中间结果的 LHS 输入，数据拷贝使用的是专用函数 (accel_dma_copy).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # The basis unit of computation is a 16*16*16 matrix multiplication def lnumpy_tmm(A: np.ndarray, B: np.ndarray, C: np.ndarray): # a special accumulator memory C_accumulator = np.empty((16, 16), dtype=\u0026#34;float32\u0026#34;) A_reg = np.empty((16, 16), dtype=\u0026#34;float32\u0026#34;) B_reg = np.empty((16, 16), dtype=\u0026#34;float32\u0026#34;) for i in range(64): for j in range(64): accel_fill_zero(C_accumulator) for k in range(64): accel_dma_copy(A_reg[:], A[i*16 : (i+1)*16, k*16 : (k+1)*16]) accel_dma_copy(B_reg[:], B[j*16 : (j+1)*16, k*16 : (k+1)*16]) accel_tmm_add(C_accumulator, A_reg, B_reg) accel_dma_copy(C[i*16 : (i+1)*16, j*16 : (j+1)*16], C_accumulator) A Block with Tensorized Computation 专用加速器代码的结构并非以标量计算为单位。迄今为止，我们运行的大多数 TensorIR 代码都包含一个 block，用于计算输出张量中的单个元素。许多专用加速器在张量区域内进行计算。TensorIR中的 block 可以帮助我们将这些相关计算分组。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 @tvm.script.ir_module class MatmulBlockModule: @T.prim_func def main(A: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], C: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;]) -\u0026gt; None: T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i0, j0, k0 in T.grid(64, 64, 64): with T.block(\u0026#34;tmm-16x16\u0026#34;): vi0, vj0, vk0 = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, j0, k0]) with T.init(): for i1, j1 in T.grid(16, 16): with T.block(\u0026#34;tmm_init\u0026#34;): vi1, vj1 = T.axis.remap(\u0026#34;SS\u0026#34;, [i1, j1]) C[vi0 * 16 + vi1, vj0 * 16 + vj1] = T.float32(0) for i1, j1, k1 in T.grid(16, 16, 16): with T.block(\u0026#34;tmm\u0026#34;): vi1, vj1, vk1 = T.axis.remap(\u0026#34;SSR\u0026#34;, [i1, j1, k1]) C[vi0 * 16 + vi1, vj0 * 16 + vj1] += A[vi0 * 16 + vi1, vk0 * 16 + vk1] * B[vj0 * 16 + vj1, vk0 * 16 + vk1] 调用 MatmulBlockModule.show() 后显示的 TensorIR如下\n1 2 T.reads(C[vi0 * 16 + vi1, vj0 * 16 + vj1], A[vi0 * 16 + vi1, vk0 * 16 + vk1], B[vj0 * 16 + vj1, vk0 * 16 + vk1]) T.writes(C[vi0 * 16 + vi1, vj0 * 16 + vj1]) 该代码从 A 和 B 的 16x16 区域读取数据，并写入 C 的 16x16 区域。在这种情况下，块的内容包含子区域计算的具体实现的进一步细节。我们称这种区块为张量区块，因为它们包含跨越张量子区域的计算。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, j0, k0 in T.grid(64, 64, 64): with T.block(\u0026#34;tmm-16x16\u0026#34;): vi0, vj0, vk0 = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, j0, k0]) T.reads(A[vi0 * 16:vi0 * 16 + 16, vk0 * 16:vk0 * 16 + 16], B[vj0 * 16:vj0 * 16 + 16, vk0 * 16:vk0 * 16 + 16]) T.writes(C[vi0 * 16:vi0 * 16 + 16, vj0 * 16:vj0 * 16 + 16]) with T.init(): for i1, j1 in T.grid(16, 16): with T.block(\u0026#34;tmm_init\u0026#34;): vi1, vj1 = T.axis.remap(\u0026#34;SS\u0026#34;, [i1, j1]) T.reads() T.writes(C[vi0 * 16 + vi1, vj0 * 16 + vj1]) C[vi0 * 16 + vi1, vj0 * 16 + vj1] = T.float32(0.0) for i1, j1, k1 in T.grid(16, 16, 16): with T.block(\u0026#34;tmm\u0026#34;): vi1, vj1, vk1 = T.axis.remap(\u0026#34;SSR\u0026#34;, [i1, j1, k1]) T.reads(C[vi0 * 16 + vi1, vj0 * 16 + vj1], A[vi0 * 16 + vi1, vk0 * 16 + vk1], B[vj0 * 16 + vj1, vk0 * 16 + vk1]) T.writes(C[vi0 * 16 + vi1, vj0 * 16 + vj1]) C[vi0 * 16 + vi1, vj0 * 16 + vj1] = C[vi0 * 16 + vi1, vj0 * 16 + vj1] + A[vi0 * 16 + vi1, vk0 * 16 + vk1] * B[vj0 * 16 + vj1, vk0 * 16 + vk1] Transforming Loops Around Tensorized Block 我们可以对张量计算块的循环进行变换，这些循环变换可以重新组织计算该块的迭代方式，得到不同的张量程序。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 sch = tvm.tir.Schedule(MatmulBlockModule) block_mm = sch.get_block(\u0026#34;tmm-16x16\u0026#34;) i, j, k = sch.get_loops(block_mm) i0, i1 = sch.split(i, [None, 4]) sch.reorder(i0, j, i1, k) sch.mod.show() #------------------------------------ @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0_0, j0, i0_1, k0 in T.grid(16, 64, 4, 64): with T.block(\u0026#34;tmm-16x16\u0026#34;): vi0 = T.axis.spatial(64, i0_0 * 4 + i0_1) vj0, vk0 = T.axis.remap(\u0026#34;SR\u0026#34;, [j0, k0]) T.reads(A[vi0 * 16:vi0 * 16 + 16, vk0 * 16:vk0 * 16 + 16], B[vj0 * 16:vj0 * 16 + 16, vk0 * 16:vk0 * 16 + 16]) T.writes(C[vi0 * 16:vi0 * 16 + 16, vj0 * 16:vj0 * 16 + 16]) with T.init(): for i1, j1 in T.grid(16, 16): with T.block(\u0026#34;tmm_init\u0026#34;): vi1, vj1 = T.axis.remap(\u0026#34;SS\u0026#34;, [i1, j1]) T.reads() T.writes(C[vi0 * 16 + vi1, vj0 * 16 + vj1]) C[vi0 * 16 + vi1, vj0 * 16 + vj1] = T.float32(0.0) for i1, j1, k1 in T.grid(16, 16, 16): with T.block(\u0026#34;tmm\u0026#34;): vi1, vj1, vk1 = T.axis.remap(\u0026#34;SSR\u0026#34;, [i1, j1, k1]) T.reads(C[vi0 * 16 + vi1, vj0 * 16 + vj1], A[vi0 * 16 + vi1, vk0 * 16 + vk1], B[vj0 * 16 + vj1, vk0 * 16 + vk1]) T.writes(C[vi0 * 16 + vi1, vj0 * 16 + vj1]) C[vi0 * 16 + vi1, vj0 * 16 + vj1] = C[vi0 * 16 + vi1, vj0 * 16 + vj1] + A[vi0 * 16 + vi1, vk0 * 16 + vk1] * B[vj0 * 16 + vj1, vk0 * 16 + vk1] Blockization \u0026ndash; Creating Tensorized Blocks TensorIR 提供了一种变换原语 blockize 来将循环的子区域组合在一起以形成张量化的计算 block. 例如我们可以将下面2个的 1024x1024 矩阵乘法分解成很多个 16x16 的矩阵乘法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 @tvm.script.ir_module class MatmulModule: @T.prim_func def main( A: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], C: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], ) -\u0026gt; None: T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i, j, k in T.grid(1024, 1024, 1024): with T.block(\u0026#34;matmul\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) with T.init(): C[vi, vj] = T.float32(0) C[vi, vj] += A[vi, vk] * B[vj, vk] sch = tvm.tir.Schedule(MatmulModule) i, j, k = sch.get_loops(\u0026#34;matmul\u0026#34;) i, ii = sch.split(i, factors=[None, 16]) j, ji = sch.split(j, factors=[None, 16]) k, ki = sch.split(k, factors=[None, 16]) sch.reorder(i, j, k, ii, ji, ki) sch.mod.show() #------------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i_0, j_0, k_0, i_1, j_1, k_1 in T.grid(64, 64, 64, 16, 16, 16): with T.block(\u0026#34;matmul\u0026#34;): vi = T.axis.spatial(1024, i_0 * 16 + i_1) vj = T.axis.spatial(1024, j_0 * 16 + j_1) vk = T.axis.reduce(1024, k_0 * 16 + k_1) T.reads(A[vi, vk], B[vj, vk]) T.writes(C[vi, vj]) with T.init(): C[vi, vj] = T.float32(0.0) C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk] blockize 是用来将一个或多个块(block)或一个特定循环的子树合并成一个新的块。如果 target 是一个循环的根节点,则会将该循环下的所有块合并成一个新块，如果 target 是一个块的列表,则会将这些块合并成一个新块。然后将新块返回\n参数说明 :\ntarget: 需要被合并的块或循环的根节点。可以是 LoopRV 类型(表示一个循环)或 List[BlockRV] 类型(表示多个块)。 preserve_unit_iters: 一个布尔值,表示是否保留块绑定中的单元迭代器。 限制条件 :\nblockize 要求给定的循环下只有一个块,且该块的绑定必须能够被该循环的子空间整除。 调用 blockize 后的 TensorIR 如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 block_mm = sch.blockize(ii) sch.mod.show() #------------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i_0, j_0, k_0 in T.grid(64, 64, 64): with T.block(\u0026#34;matmul_o\u0026#34;): vi_o, vj_o, vk_o = T.axis.remap(\u0026#34;SSR\u0026#34;, [i_0, j_0, k_0]) T.reads(A[vi_o * 16:vi_o * 16 + 16, vk_o * 16:vk_o * 16 + 16], B[vj_o * 16:vj_o * 16 + 16, vk_o * 16:vk_o * 16 + 16]) T.writes(C[vi_o * 16:vi_o * 16 + 16, vj_o * 16:vj_o * 16 + 16]) with T.init(): for i_1, j_1 in T.grid(16, 16): with T.block(\u0026#34;matmul_init\u0026#34;): vi_i_init, vj_i_init = T.axis.remap(\u0026#34;SS\u0026#34;, [i_1, j_1]) T.reads() T.writes(C[vi_o * 16 + vi_i_init, vj_o * 16 + vj_i_init]) C[vi_o * 16 + vi_i_init, vj_o * 16 + vj_i_init] = T.float32(0.0) for i_1, j_1, k_1 in T.grid(16, 16, 16): with T.block(\u0026#34;matmul\u0026#34;): vi_i, vj_i, vk_i = T.axis.remap(\u0026#34;SSR\u0026#34;, [i_1, j_1, k_1]) T.reads(C[vi_o * 16 + vi_i, vj_o * 16 + vj_i], A[vi_o * 16 + vi_i, vk_o * 16 + vk_i], B[vj_o * 16 + vj_i, vk_o * 16 + vk_i]) T.writes(C[vi_o * 16 + vi_i, vj_o * 16 + vj_i]) C[vi_o * 16 + vi_i, vj_o * 16 + vj_i] = C[vi_o * 16 + vi_i, vj_o * 16 + vj_i] + A[vi_o * 16 + vi_i, vk_o * 16 + vk_i] * B[vj_o * 16 + vj_i, vk_o * 16 + vk_i] Transforming TensorIR to Introduce Special Memory Scope 正如在 low-level NumPy 代码中提到的，底层 TensorIR 的一个关键要素是加速过程中使用的特殊内存范围。我们可以使用 cache_read 和 write 来创建中间内存阶段。\nstorage_scope 在这里指的是内存存储范围或存储层次。常见的存储范围包括:\nglobal: 表示数据存储在全局内存中。这是最高层次的内存范围。 shared: 表示数据存储在GPU的共享内存中。 local: 表示数据存储在CPU或GPU的寄存器中。这是最底层的内存范围。 global.A_reg 表示数据将被缓存到一个名为 A_reg 的全局内存缓存中。\nStorage Scope\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 A_reg = sch.cache_read(block_mm, 0, storage_scope=\u0026#34;global.A_reg\u0026#34;) B_reg = sch.cache_read(block_mm, 1, storage_scope=\u0026#34;global.B_reg\u0026#34;) sch.compute_at(A_reg, k) sch.compute_at(B_reg, k) write_back_block = sch.cache_write(block_mm, 0, storage_scope=\u0026#34;global.accumulator\u0026#34;) sch.reverse_compute_at(write_back_block, j) sch.mod.show() #----------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): A_global_A_reg = T.alloc_buffer((1024, 1024), scope=\u0026#34;global.A_reg\u0026#34;) B_global_B_reg = T.alloc_buffer((1024, 1024), scope=\u0026#34;global.B_reg\u0026#34;) C_global_accumulator = T.alloc_buffer((1024, 1024), scope=\u0026#34;global.accumulator\u0026#34;) for i_0, j_0 in T.grid(64, 64): for k_0 in range(64): for ax0, ax1 in T.grid(16, 16): with T.block(\u0026#34;A_global.A_reg\u0026#34;): v0 = T.axis.spatial(1024, i_0 * 16 + ax0) v1 = T.axis.spatial(1024, k_0 * 16 + ax1) T.reads(A[v0, v1]) T.writes(A_global_A_reg[v0, v1]) A_global_A_reg[v0, v1] = A[v0, v1] for ax0, ax1 in T.grid(16, 16): with T.block(\u0026#34;B_global.B_reg\u0026#34;): v0 = T.axis.spatial(1024, j_0 * 16 + ax0) v1 = T.axis.spatial(1024, k_0 * 16 + ax1) T.reads(B[v0, v1]) T.writes(B_global_B_reg[v0, v1]) B_global_B_reg[v0, v1] = B[v0, v1] with T.block(\u0026#34;matmul_o\u0026#34;): vi_o, vj_o, vk_o = T.axis.remap(\u0026#34;SSR\u0026#34;, [i_0, j_0, k_0]) T.reads(A_global_A_reg[vi_o * 16:vi_o * 16 + 16, vk_o * 16:vk_o * 16 + 16], B_global_B_reg[vj_o * 16:vj_o * 16 + 16, vk_o * 16:vk_o * 16 + 16]) T.writes(C_global_accumulator[vi_o * 16:vi_o * 16 + 16, vj_o * 16:vj_o * 16 + 16]) with T.init(): for i_1, j_1 in T.grid(16, 16): with T.block(\u0026#34;matmul_init\u0026#34;): vi_i_init, vj_i_init = T.axis.remap(\u0026#34;SS\u0026#34;, [i_1, j_1]) T.reads() T.writes(C_global_accumulator[vi_o * 16 + vi_i_init, vj_o * 16 + vj_i_init]) C_global_accumulator[vi_o * 16 + vi_i_init, vj_o * 16 + vj_i_init] = T.float32(0.0) for i_1, j_1, k_1 in T.grid(16, 16, 16): with T.block(\u0026#34;matmul\u0026#34;): vi_i, vj_i, vk_i = T.axis.remap(\u0026#34;SSR\u0026#34;, [i_1, j_1, k_1]) T.reads(C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i], A_global_A_reg[vi_o * 16 + vi_i, vk_o * 16 + vk_i], B_global_B_reg[vj_o * 16 + vj_i, vk_o * 16 + vk_i]) T.writes(C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i]) C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i] = C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i] + A_global_A_reg[vi_o * 16 + vi_i, vk_o * 16 + vk_i] * B_global_B_reg[vj_o * 16 + vj_i, vk_o * 16 + vk_i] for ax0, ax1 in T.grid(16, 16): with T.block(\u0026#34;C_global.accumulator\u0026#34;): v0 = T.axis.spatial(1024, i_0 * 16 + ax0) v1 = T.axis.spatial(1024, j_0 * 16 + ax1) T.reads(C_global_accumulator[v0, v1]) T.writes(C[v0, v1]) C[v0, v1] = C_global_accumulator[v0, v1] Tensorization 现在我们已经创建了一组映射到 TensorIR 中相应计算阶段的块。剩下的步骤是映射部分张量块，以使用映射到硬件加速指令的特定实现。这一映射过程称为张量化。为了实现张量化，我们首先注册一个 TensorIntrin，其中包含计算和实现的描述。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 @T.prim_func def tmm16_desc(a: T.handle, b: T.handle, c: T.handle) -\u0026gt; None: A = T.match_buffer(a, (16, 16), \u0026#34;float32\u0026#34;, offset_factor=16, scope=\u0026#34;global.A_reg\u0026#34;) B = T.match_buffer(b, (16, 16), \u0026#34;float32\u0026#34;, offset_factor=16, scope=\u0026#34;global.B_reg\u0026#34;) C = T.match_buffer(c, (16, 16), \u0026#34;float32\u0026#34;, offset_factor=16, scope=\u0026#34;global.accumulator\u0026#34;) with T.block(\u0026#34;root\u0026#34;): T.reads(C[0:16, 0:16], A[0:16, 0:16], B[0:16, 0:16]) T.writes(C[0:16, 0:16]) for i, j, k in T.grid(16, 16, 16): with T.block(\u0026#34;\u0026#34;): vii, vjj, vkk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) C[vii, vjj] = C[vii, vjj] + A[vii, vkk] * B[vjj, vkk] @T.prim_func def tmm16_impl(a: T.handle, b: T.handle, c: T.handle) -\u0026gt; None: A = T.match_buffer(a, (16, 16), \u0026#34;float32\u0026#34;, offset_factor=16, scope=\u0026#34;global.A_reg\u0026#34;) B = T.match_buffer(b, (16, 16), \u0026#34;float32\u0026#34;, offset_factor=16, scope=\u0026#34;global.B_reg\u0026#34;) C = T.match_buffer(c, (16, 16), \u0026#34;float32\u0026#34;, offset_factor=16, scope=\u0026#34;global.accumulator\u0026#34;) sa = T.int32(16)#T.var(\u0026#34;int32\u0026#34;) sb = T.int32(16)#T.var(\u0026#34;int32\u0026#34;) sc = T.int32(16)#T.var(\u0026#34;int32\u0026#34;) with T.block(\u0026#34;root\u0026#34;): T.reads(C[0:16, 0:16], A[0:16, 0:16], B[0:16, 0:16]) T.writes(C[0:16, 0:16]) T.evaluate( T.call_extern(\u0026#34;float32\u0026#34;, \u0026#34;tmm16\u0026#34;, C.access_ptr(\u0026#34;w\u0026#34;), A.access_ptr(\u0026#34;r\u0026#34;), B.access_ptr(\u0026#34;r\u0026#34;), sa, sb, sc) ) tvm.tir.TensorIntrin.register(\u0026#34;tmm16\u0026#34;, tmm16_desc, tmm16_impl) 首先我们用 decompose_reduction 将 C_global_accumulator 的初始化和更新部分分开成 T.block(\u0026quot;matmul_init\u0026quot;) 和 T.block(\u0026quot;matmul_o_update\u0026quot;)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 sch.decompose_reduction(block_mm, k) sch.mod.show() #--------------------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): A_global_A_reg = T.alloc_buffer((1024, 1024), scope=\u0026#34;global.A_reg\u0026#34;) B_global_B_reg = T.alloc_buffer((1024, 1024), scope=\u0026#34;global.B_reg\u0026#34;) C_global_accumulator = T.alloc_buffer((1024, 1024), scope=\u0026#34;global.accumulator\u0026#34;) for i_0, j_0 in T.grid(64, 64): with T.block(\u0026#34;matmul_o_init\u0026#34;): vi_o, vj_o = T.axis.remap(\u0026#34;SS\u0026#34;, [i_0, j_0]) T.reads() T.writes(C_global_accumulator[vi_o * 16:vi_o * 16 + 16, vj_o * 16:vj_o * 16 + 16]) for i_1, j_1 in T.grid(16, 16): with T.block(\u0026#34;matmul_init\u0026#34;): vi_i_init, vj_i_init = T.axis.remap(\u0026#34;SS\u0026#34;, [i_1, j_1]) T.reads() T.writes(C_global_accumulator[vi_o * 16 + vi_i_init, vj_o * 16 + vj_i_init]) C_global_accumulator[vi_o * 16 + vi_i_init, vj_o * 16 + vj_i_init] = T.float32(0.0) for k_0 in range(64): for ax0, ax1 in T.grid(16, 16): with T.block(\u0026#34;A_global.A_reg\u0026#34;): v0 = T.axis.spatial(1024, i_0 * 16 + ax0) v1 = T.axis.spatial(1024, k_0 * 16 + ax1) T.reads(A[v0, v1]) T.writes(A_global_A_reg[v0, v1]) A_global_A_reg[v0, v1] = A[v0, v1] for ax0, ax1 in T.grid(16, 16): with T.block(\u0026#34;B_global.B_reg\u0026#34;): v0 = T.axis.spatial(1024, j_0 * 16 + ax0) v1 = T.axis.spatial(1024, k_0 * 16 + ax1) T.reads(B[v0, v1]) T.writes(B_global_B_reg[v0, v1]) B_global_B_reg[v0, v1] = B[v0, v1] with T.block(\u0026#34;matmul_o_update\u0026#34;): vi_o, vj_o, vk_o = T.axis.remap(\u0026#34;SSR\u0026#34;, [i_0, j_0, k_0]) T.reads(C_global_accumulator[vi_o * 16:vi_o * 16 + 16, vj_o * 16:vj_o * 16 + 16], A_global_A_reg[vi_o * 16:vi_o * 16 + 16, vk_o * 16:vk_o * 16 + 16], B_global_B_reg[vj_o * 16:vj_o * 16 + 16, vk_o * 16:vk_o * 16 + 16]) T.writes(C_global_accumulator[vi_o * 16:vi_o * 16 + 16, vj_o * 16:vj_o * 16 + 16]) for i_1, j_1, k_1 in T.grid(16, 16, 16): with T.block(\u0026#34;matmul\u0026#34;): vi_i, vj_i, vk_i = T.axis.remap(\u0026#34;SSR\u0026#34;, [i_1, j_1, k_1]) T.reads(C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i], A_global_A_reg[vi_o * 16 + vi_i, vk_o * 16 + vk_i], B_global_B_reg[vj_o * 16 + vj_i, vk_o * 16 + vk_i]) T.writes(C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i]) C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i] = C_global_accumulator[vi_o * 16 + vi_i, vj_o * 16 + vj_i] + A_global_A_reg[vi_o * 16 + vi_i, vk_o * 16 + vk_i] * B_global_B_reg[vj_o * 16 + vj_i, vk_o * 16 + vk_i] for ax0, ax1 in T.grid(16, 16): with T.block(\u0026#34;C_global.accumulator\u0026#34;): v0 = T.axis.spatial(1024, i_0 * 16 + ax0) v1 = T.axis.spatial(1024, j_0 * 16 + ax1) T.reads(C_global_accumulator[v0, v1]) T.writes(C[v0, v1]) C[v0, v1] = C_global_accumulator[v0, v1] 然后我们调用 tensorize，将 block_mm（对应于 matmul_o_update block ）映射到 tmm16_impl. 这里我们使用 T.call_extern 来调用环境中的外部函数。 下游编译步骤可以轻松地将实现映射到实现操作的指令。或者我们可以将 tmm16 映射到实现这种张量化计算的微内核。 以下代码显示了如何通过外部 C++ 代码执行此操作。\n具体实现步骤如下:\n定义 C++ 风格的 tmm16 函数: 这个函数实现了一个 16x16 矩阵乘法的计算逻辑。它接受三个输入张量 aa、bb 和 cc，以及对应的步长 stride_a、stride_b 和 stride_c。函数使用三重循环执行矩阵乘法的计算,将结果累加到 cc 张量中。 使用 TVM 的 clang 模块将 C++ 代码编译为 LLVM IR 代码: 首先创建一个临时目录 temp 用于存储生成的 LLVM IR 文件。然后调用 clang.create_llvm() 函数,传入 C++ 代码字符串 cc_code。create_llvm() 函数会将 C++ 代码编译为 LLVM IR 代码,并保存到 ll_path 指定的文件中。最后返回生成的 LLVM IR 代码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def tmm_kernel(): cc_code = \u0026#39;\u0026#39;\u0026#39; extern \u0026#34;C\u0026#34; int tmm16(float *cc, float *aa, float *bb, int stride_a, int stride_b, int stride_c) { for (int i = 0; i \u0026lt; 16; i++) { for (int j = 0; i \u0026lt; 16; j++) { for (int k = 0; k \u0026lt; 16; k++) { cc[i * stride_c + j] += aa[i * stride_a + k] * bb[j * stride_b + k]; } } } return 0; } \u0026#39;\u0026#39;\u0026#39; from tvm.contrib import utils, clang temp = utils.tempdir() ll_path = temp.relpath(\u0026#34;temp.ll\u0026#34;) # Create LLVM ir from c source code ll_code = clang.create_llvm(cc_code, output=ll_path) return ll_code 调用 sch.tensorize(block_mm, \u0026quot;tmm16\u0026quot;)报错，原因未知。\n1 2 3 4 5 发生异常: TVMError TVMError: invalid unordered_map\u0026lt;K, T\u0026gt; key File \u0026#34;C:\\Users\\17725\\Desktop\\Machine Learning Compilation\\chapter7.py\u0026#34;, line 186, in \u0026lt;module\u0026gt; sch.tensorize(block_mm, \u0026#34;tmm16\u0026#34;) tvm._ffi.base.TVMError: TVMError: invalid unordered_map\u0026lt;K, T\u0026gt; key ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch7/","summary":"Personal notebook 7.","title":"TVM Learning (9)-GPU and Hardware Acceleration, Part 2"},{"content":"GPU Architecture 典型的 GPU 包含一系列流多处理器 (Stream Multi-processor, SM)，每个多处理器都有许多内核 (core). GPU 具有高度并行性，可以同时执行多项任务。\nGPU Architecture\n要对 GPU 进行编程，我们需要创建一组线程块 (thread blocks)，每个 thread 映射到单个核心，而 block 映射到流式多处理器 (SM)。\nGPU Programming\n我们以两个长度为1024的向量加法 C=A+B为例，我们先把外循环 split 成两部分\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 @tvm.script.ir_module class MyModuleVecAdd: @T.prim_func def main(A: T.Buffer[(1024, ), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, ), \u0026#34;float32\u0026#34;], C: T.Buffer[(1024, ), \u0026#34;float32\u0026#34;]) -\u0026gt; None: T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i in T.grid(1024): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.remap(\u0026#34;S\u0026#34;, [i]) C[vi] = A[vi] + B[vi] sch = tvm.tir.Schedule(MyModuleVecAdd) block_C = sch.get_block(\u0026#34;C\u0026#34;) i, = sch.get_loops(block=block_C) i0, i1 = sch.split(i, [None, 128]) sch.mod.show() 得到的 TensorIR 如下\n1 2 3 4 5 6 7 8 9 10 11 12 @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024,), \u0026#34;float32\u0026#34;), B: T.Buffer((1024,), \u0026#34;float32\u0026#34;), C: T.Buffer((1024,), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i_0, i_1 in T.grid(8, 128): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(1024, i_0 * 128 + i_1) T.reads(A[vi], B[vi]) T.writes(C[vi]) C[vi] = A[vi] + B[vi] Build and Run the TensorIR Function on GPU 一个CUDA程序的计算被组织成三层次：网格（Grid）、线程块（Block）和线程（Thread）。网格是一个二维的数组，包含多个线程块。每个线程块也是一个二维的数组，包含多个线程。每个线程执行相同的代码，但是在执行时可以使用不同的数据。每个线程由两个索引进行表示 threadIdx.x和 blockIdx.x. 在实际应用中，有多维线程索引，但这里我们为了简化问题，将它们固定为一维表示。\nGPU Thread Block\nsch.bind(i0, \u0026quot;blockIdx.x\u0026quot;) 将 i0 循环绑定到 GPU 的 block 索引，以便将计算分发到不同的 GPU block 上。 sch.bind(i1, \u0026quot;threadIdx.x\u0026quot;) 将 i1 循环绑定到 GPU 的 thread 索引，以便将计算分发到每个 block 内的不同的 GPU thread 上。 可以看到循环变量变成了 T.thead_binding\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 sch.bind(i0, \u0026#34;blockIdx.x\u0026#34;) sch.bind(i1, \u0026#34;threadIdx.x\u0026#34;) sch.mod.show() #-------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024,), \u0026#34;float32\u0026#34;), B: T.Buffer((1024,), \u0026#34;float32\u0026#34;), C: T.Buffer((1024,), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i_0 in T.thread_binding(8, thread=\u0026#34;blockIdx.x\u0026#34;): for i_1 in T.thread_binding(128, thread=\u0026#34;threadIdx.x\u0026#34;): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(1024, i_0 * 128 + i_1) T.reads(A[vi], B[vi]) T.writes(C[vi]) C[vi] = A[vi] + B[vi] 然后我们可以在GPU上构建并测试程序的正确性\n1 2 3 4 5 6 7 8 9 10 rt_mod = tvm.build(sch.mod, target=\u0026#34;cuda\u0026#34;) A_np = np.random.uniform(size=(1024,)).astype(\u0026#34;float32\u0026#34;) B_np = np.random.uniform(size=(1024,)).astype(\u0026#34;float32\u0026#34;) A_nd = tvm.nd.array(A_np, tvm.cuda(0)) B_nd = tvm.nd.array(B_np, tvm.cuda(0)) C_nd = tvm.nd.array(np.zeros((1024,), dtype=\u0026#34;float32\u0026#34;), tvm.cuda(0)) rt_mod[\u0026#34;main\u0026#34;](A_nd, B_nd, C_nd) np.testing.assert_allclose(C_nd.numpy(), A_np + B_np) Window Sum Example 滑动窗口求和可以被视为权重为 [1,1,1]的卷积，对输入进行滑动并将三个相邻值相加。\nWindow Sum\n跟上一节一样我们将循环split后把外循环和内循环分别bind到block和thread上\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @tvm.script.ir_module class MyModuleWindowSum: @T.prim_func def main(A: T.Buffer[(1027, ), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, ), \u0026#34;float32\u0026#34;]) -\u0026gt; None: T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i in T.grid(1024): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.remap(\u0026#34;S\u0026#34;, [i]) B[vi] = A[vi] + A[vi + 1] + A[vi + 2] sch = tvm.tir.Schedule(MyModuleWindowSum) nthread = 128 block_C = sch.get_block(\u0026#34;C\u0026#34;) i, = sch.get_loops(block=block_C) i0, i1 = sch.split(i, [None, nthread]) sch.bind(i0, \u0026#34;blockIdx.x\u0026#34;) sch.bind(i1, \u0026#34;threadIdx.x\u0026#34;) 对应的TensorIR如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1027,), \u0026#34;float32\u0026#34;), B: T.Buffer((1024,), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i_0 in T.thread_binding(8, thread=\u0026#34;blockIdx.x\u0026#34;): for i_1 in T.thread_binding(128, thread=\u0026#34;threadIdx.x\u0026#34;): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(1024, i_0 * 128 + i_1) T.reads(A[vi:vi + 3]) T.writes(B[vi]) B[vi] = A[vi] + A[vi + 1] + A[vi + 2] Cache in Shared Memory 我们可以看到在窗口滑动的过程中有一部分数据是重复的。每个 block 包含所有线程都可以在块内访问的共享内存 (shared memory)，为了避免重复从 global memory 加载，我们可以把部分数据缓存到共享内存上\nB[vi] = A[vi] + A[vi + 1] + A[vi + 2] 这一行代码会重复读取 A 缓冲区中的数据。 sch.cache_read(block_C, read_buffer_index=0, storage_scope=\u0026quot;shared\u0026quot;) 创建了一个名为 A_shared 的共享内存缓存，用于存储 A 缓冲区中的一部分数据。 block_C 指示缓存与 C block 相关联。 read_buffer_index=0 指示缓存 A 缓冲区，因为 A 是 C block 中的第一个读取缓冲区。 storage_scope=\u0026quot;shared\u0026quot; 指示缓存使用共享内存。 sch.compute_at(A_shared, i1) 将 A_shared 的计算位置设置为 i1 循环，这意味着 A_shared 将在每个 thread 中被计算。 1 2 3 4 5 6 7 8 9 10 sch = tvm.tir.Schedule(MyModuleWindowSum) nthread = 128 block_C = sch.get_block(\u0026#34;C\u0026#34;) i, = sch.get_loops(block=block_C) i0, i1 = sch.split(i, [None, nthread]) sch.bind(i0, \u0026#34;blockIdx.x\u0026#34;) sch.bind(i1, \u0026#34;threadIdx.x\u0026#34;) A_shared = sch.cache_read(block_C, read_buffer_index=0, storage_scope=\u0026#34;shared\u0026#34;) sch.compute_at(A_shared, i1) sch.mod.show() 变换后的TensorIR如下，主要进行了\n共享内存分配： 在每个 GPU block 的共享内存中分配了一个大小为 (1027,) 的缓冲区 A_shared。\nA_shared = T.alloc_buffer((1027,), scope=\u0026#34;shared\u0026#34;) 添加了一个新的 block A_shared，循环遍历每个 thread并将 A 缓冲区中的数据缓存到 A_shared 中：\nfor i_0 in T.thread_binding(8, thread=\u0026#34;blockIdx.x\u0026#34;): for i_1 in T.thread_binding(128, thread=\u0026#34;threadIdx.x\u0026#34;): for ax0 in range(130): with T.block(\u0026#34;A_shared\u0026#34;): v0 = T.axis.spatial(1027, i_0 * 128 + ax0) T.reads(A[v0]) T.writes(A_shared[v0]) A_shared[v0] = A[v0] 码更新了 C block 中的计算，使其从 A_shared 中读取数据：\nwith T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(1024, i_0 * 128 + i_1) T.reads(A_shared[vi:vi + 3]) T.writes(B[vi]) B[vi] = A_shared[vi] + A_shared[vi + 1] + A_shared[vi + 2] rane(130) 的出现是因为需要将 A 缓冲区中的数据缓存到共享内存 A_shared 中。每个 GPU block 处理的数据范围是 128 个元素，对应于 i1 循环的范围。由于窗口求和操作需要访问 A 缓冲区中当前元素的三个相邻元素，因此每个 thread 需要访问 128 + 2 = 130 个元素。为了确保每个 thread 都能访问到所需的数据，需要将 A 缓冲区中 130 个元素缓存到 A_shared 中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1027,), \u0026#34;float32\u0026#34;), B: T.Buffer((1024,), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): A_shared = T.alloc_buffer((1027,), scope=\u0026#34;shared\u0026#34;) for i_0 in T.thread_binding(8, thread=\u0026#34;blockIdx.x\u0026#34;): for i_1 in T.thread_binding(128, thread=\u0026#34;threadIdx.x\u0026#34;): for ax0 in range(130): with T.block(\u0026#34;A_shared\u0026#34;): v0 = T.axis.spatial(1027, i_0 * 128 + ax0) T.reads(A[v0]) T.writes(A_shared[v0]) A_shared[v0] = A[v0] with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(1024, i_0 * 128 + i_1) T.reads(A_shared[vi:vi + 3]) T.writes(B[vi]) B[vi] = A_shared[vi] + A_shared[vi + 1] + A_shared[vi + 2] Get CUDA Source 我们可以检查相应的底层代码（CUDA ）\n1 2 rt_mod = tvm.build(sch.mod, target=\u0026#34;cuda\u0026#34;) print(rt_mod.imported_modules[0].get_source()) 生成的代码包含两部分：\n在主机 (CPU) 上的调用 GPU 程序的部分； 相应计算的 CUDA 内核。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #if (((__CUDACC_VER_MAJOR__ == 11) \u0026amp;\u0026amp; (__CUDACC_VER_MINOR__ \u0026gt;= 4)) || \\ (__CUDACC_VER_MAJOR__ \u0026gt; 11)) #define TVM_ENABLE_L2_PREFETCH 1 #else #define TVM_ENABLE_L2_PREFETCH 0 #endif #ifdef _WIN32 using uint = unsigned int; using uchar = unsigned char; using ushort = unsigned short; using int64_t = long long; using uint64_t = unsigned long long; #else #define uint unsigned int #define uchar unsigned char #define ushort unsigned short #define int64_t long long #define uint64_t unsigned long long #endif extern \u0026#34;C\u0026#34; __global__ void __launch_bounds__(128) main_kernel(float* __restrict__ A, float* __restrict__ B); extern \u0026#34;C\u0026#34; __global__ void __launch_bounds__(128) main_kernel(float* __restrict__ A, float* __restrict__ B) { __shared__ float A_shared[130]; for (int ax0 = 0; ax0 \u0026lt; 130; ++ax0) { A_shared[ax0] = A[((((int)blockIdx.x) * 128) + ax0)]; } __syncthreads(); B[((((int)blockIdx.x) * 128) + ((int)threadIdx.x))] = ((A_shared[((int)threadIdx.x)] + A_shared[(((int)threadIdx.x) + 1)]) + A_shared[(((int)threadIdx.x) + 2)]); } Matrix Multiplication 下面我们对原始的 1024*1024的矩阵乘法进行优化\n1 2 3 4 5 6 7 8 9 10 11 12 13 @tvm.script.ir_module class MyModuleMatmul: @T.prim_func def main(A: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], C: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;]) -\u0026gt; None: T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i, j, k in T.grid(1024, 1024, 1024): with T.block(\u0026#34;C\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) with T.init(): C[vi, vj] = 0.0 C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vk, vj] Local Blocking 下面的blocking 函数使用了一种称为 局部阻塞 的优化策略，将矩阵乘法的计算分解成更小的块，并使用共享内存缓存来提高性能。\nLocal Blocking\n将三个循环 i、j 和 k 分别拆分成多个循环，例如将 i 拆分成 i0、i1 和 i2，分别对应于 block 索引、thread 索引和局部循环索引。 k1表示矩阵计算被拆分成多少个小块，k0决定了每个线程需要进行多少次累加操作。调整循环的顺序，以便在每个 thread 中计算 k0 循环的所有迭代，从而利用共享内存缓存。 使用 cache_write 函数创建一个名为 C_local 的共享内存缓存，用于存储 C 矩阵的中间结果。 使用 reverse_compute_at 函数将 C_local 的计算位置设置为 j1 循环，以便在每个 thread 中计算 C_local 的所有迭代，从而利用共享内存缓存。 将 i0 和 j0 绑定到 GPU 的 blockIdx.y 和 blockIdx.x 线程索引，将 i1 和 j1 绑定到 GPU 的 threadIdx.y 和 threadIdx.x 线程索引。 使用 unroll 函数展开 k1 循环，以便在每个 thread 中展开计算，从而提高性能。 使用 decompose_reduction 函数分解 k0 循环，以便在每个 thread 中计算 k0 循环的所有迭代，从而利用共享内存缓存。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def blocking(sch: tvm.tir.Schedule, tile_local_y, tile_local_x, tile_block_y, tile_block_x, tile_k): block_C = sch.get_block(\u0026#34;C\u0026#34;) C_local = sch.cache_write(block_C, 0, \u0026#34;local\u0026#34;) i, j, k = sch.get_loops(block=block_C) i0, i1, i2 = sch.split(loop=i, factors=[None, tile_block_y, tile_local_y]) j0, j1, j2 = sch.split(loop=j, factors=[None, tile_block_x, tile_local_x]) k0, k1 = sch.split(loop=k, factors=[None, tile_k]) sch.unroll(k1) sch.reorder(i0, j0, i1, j1, k0, k1, i2, j2) sch.reverse_compute_at(C_local, j1) sch.bind(i0, \u0026#34;blockIdx.y\u0026#34;) sch.bind(j0, \u0026#34;blockIdx.x\u0026#34;) sch.bind(i1, \u0026#34;threadIdx.y\u0026#34;) sch.bind(j1, \u0026#34;threadIdx.x\u0026#34;) sch.decompose_reduction(block_C, k0) return sch 进行 Local Blocking 后的TensorIR如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 sch = tvm.tir.Schedule(MyModuleMatmul) sch = blocking(sch, 8, 8, 8, 8, 4) sch.mod.show() #--------------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), B: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;), C: T.Buffer((1024, 1024), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): C_local = T.alloc_buffer((1024, 1024), scope=\u0026#34;local\u0026#34;) for i_0 in T.thread_binding(16, thread=\u0026#34;blockIdx.y\u0026#34;): for j_0 in T.thread_binding(16, thread=\u0026#34;blockIdx.x\u0026#34;): for i_1 in T.thread_binding(8, thread=\u0026#34;threadIdx.y\u0026#34;): for j_1 in T.thread_binding(8, thread=\u0026#34;threadIdx.x\u0026#34;): for i_2_init, j_2_init in T.grid(8, 8): with T.block(\u0026#34;C_init\u0026#34;): vi = T.axis.spatial(1024, i_0 * 64 + i_1 * 8 + i_2_init) vj = T.axis.spatial(1024, j_0 * 64 + j_1 * 8 + j_2_init) T.reads() T.writes(C_local[vi, vj]) C_local[vi, vj] = T.float32(0.0) for k_0 in range(256): for k_1 in T.unroll(4): for i_2, j_2 in T.grid(8, 8): with T.block(\u0026#34;C_update\u0026#34;): vi = T.axis.spatial(1024, i_0 * 64 + i_1 * 8 + i_2) vj = T.axis.spatial(1024, j_0 * 64 + j_1 * 8 + j_2) vk = T.axis.reduce(1024, k_0 * 4 + k_1) T.reads(C_local[vi, vj], A[vi, vk], B[vk, vj]) T.writes(C_local[vi, vj]) C_local[vi, vj] = C_local[vi, vj] + A[vi, vk] * B[vk, vj] for ax0, ax1 in T.grid(8, 8): with T.block(\u0026#34;C_local\u0026#34;): v0 = T.axis.spatial(1024, i_0 * 64 + i_1 * 8 + ax0) v1 = T.axis.spatial(1024, j_0 * 64 + j_1 * 8 + ax1) T.reads(C_local[v0, v1]) T.writes(C[v0, v1]) C[v0, v1] = C_local[v0, v1] Shared Memory Blocking 上面的方法没有考虑相邻 thread 位于同一个 block 中，我们可以将它们需要的数据加载到 shared memory 中。\nShared Memory Blocking\ncache_read_and_coop_fetch 函数负责将 A 和 B 矩阵中的数据加载到共享内存中。首先使用 cache_read 创建一个共享内存缓存，用于存储 A 或 B 矩阵的数据。然后使用 compute_at 将缓存的计算位置设置为 k0 循环，在每个线程中计算缓存的所有迭代。最后使用 split 和 vectorize 函数对 k0 循环进行向量化，提高加载数据的效率。\n1 2 3 4 5 6 7 8 9 def cache_read_and_coop_fetch(sch: tvm.tir.Schedule, block, nthread, read_idx, read_loc): read_cache = sch.cache_read(block=block, read_buffer_index=read_idx, storage_scope=\u0026#34;shared\u0026#34;) sch.compute_at(block=read_cache, loop=read_loc) # vertorized cooperative fetch inner0, inner1 = sch.get_loops(block=read_cache)[-2:] inner = sch.fuse(inner0, inner1) _, tx, vec = sch.split(loop=inner, factors=[None, nthread, 4]) sch.vectorize(vec) sch.bind(tx, \u0026#34;threadIdx.x\u0026#34;) 其余的操作和 Local Blocking 一致\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def blocking_with_shared(sch: tvm.tir.Schedule, tile_local_y, tile_local_x, tile_block_y, tile_block_x, tile_k): block_C = sch.get_block(\u0026#34;C\u0026#34;) C_local = sch.cache_write(block_C, 0, \u0026#34;local\u0026#34;) i, j, k = sch.get_loops(block=block_C) i0, i1, i2 = sch.split(loop=i, factors=[None, tile_block_y, tile_local_y]) j0, j1, j2 = sch.split(loop=j, factors=[None, tile_block_x, tile_local_x]) k0, k1 = sch.split(loop=k, factors=[None, tile_k]) sch.reorder(i0, j0, i1, j1, k0, k1, i2, j2) sch.reverse_compute_at(C_local, j1) sch.bind(i0, \u0026#34;blockIdx.y\u0026#34;) sch.bind(j0, \u0026#34;blockIdx.x\u0026#34;) tx = sch.fuse(i1, j1) sch.bind(tx, \u0026#34;threadIdx.x\u0026#34;) nthread = tile_block_y * tile_block_x cache_read_and_coop_fetch(sch, block_C, nthread, 0, k0) cache_read_and_coop_fetch(sch, block_C, nthread, 1, k0) sch.decompose_reduction(block_C, k0) return sch ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch6/","summary":"Personal notebook 6.","title":"TVM Learning (8)-GPU and Hardware Acceleration, Part 1"},{"content":"Model Preparation 我们采用Pytorch框架先定一个模型，该模型接受一批图像为输入，然后对它们依次作用卷积层，激活层，池化层和全连接层，得到分类结果。并从训练好的模型里加载权重，输入图像来自FashionMNIST数据集，shape为(1, 28, 28)，我们设置batch size=4.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # Load the weight map from file. weight_map = pkl.load(open(\u0026#34;fasionmnist_mlp_assignment_params.pkl\u0026#34;, \u0026#34;rb\u0026#34;)) class_names = [\u0026#39;T-shirt/top\u0026#39;, \u0026#39;Trouser\u0026#39;, \u0026#39;Pullover\u0026#39;, \u0026#39;Dress\u0026#39;, \u0026#39;Coat\u0026#39;, \u0026#39;Sandal\u0026#39;, \u0026#39;Shirt\u0026#39;, \u0026#39;Sneaker\u0026#39;, \u0026#39;Bag\u0026#39;, \u0026#39;Ankle boot\u0026#39;] def pytorch_model(): list = [] list.append(nn.Conv2d(in_channels=1, out_channels=32, kernel_size=(3, 3), bias=True)) list.append(nn.ReLU()) list.append(nn.MaxPool2d(kernel_size=(2, 2))) list.append(nn.Flatten()) list.append(nn.Linear(in_features=5408, out_features=100, bias=True)) list.append(nn.ReLU()) list.append(nn.Linear(in_features=100, out_features=10, bias=True)) list.append(nn.Softmax(dim=1)) model = nn.Sequential(*list).cuda() name_map = { \u0026#34;0.weight\u0026#34;: \u0026#34;conv2d_weight\u0026#34;, \u0026#34;0.bias\u0026#34;: \u0026#34;conv2d_bias\u0026#34;, \u0026#34;4.weight\u0026#34;: \u0026#34;linear0_weight\u0026#34;, \u0026#34;4.bias\u0026#34;: \u0026#34;linear0_bias\u0026#34;, \u0026#34;6.weight\u0026#34;: \u0026#34;linear1_weight\u0026#34;, \u0026#34;6.bias\u0026#34;: \u0026#34;linear1_bias\u0026#34;, } for name, param in model.named_parameters(): param.data = torch.from_numpy(weight_map[name_map[name]]).cuda() return model Ingest Model From Pytorch 之前我们都是手写T.prim_func来实现神经网络的每一层，这样很容易出错并且不易于调试。TVM提供了 relax.BlockBuilder类可以从头开始一步步构造端到端模型，其中有一个名为 emit_te的API，它可以将一个张量表达式的算子描述转变成一个对应TensorIR函数的 call_tir操作。\n在下面的代码中，为了构建一个执行单个ReLU算子的Relax函数，在 emit_te_example中我们首先定义了一个 BlockBuilder实例 bb。同样定义了一个 128x128大小的张量变量 x，它将作为ReLU操作的输入（同时也是Relax函数的输入）。\n在这之后，我们用 with bb.function(name, [*input]) API构建一个以 x为输入的Relax函数 main。然后我们构建一个dataflow block。在这个dataflow block里，我们首先用 emit_te生成一个调用ReLU算子的 call_tir。 emit_te会在IRModule中生成一个名字为 relu的TensorIR函数，然后在dataflow block中生成 call_tir(relu, (x,), (128, 128), dtype=\u0026quot;float32\u0026quot;)操作。call_tir之后是函数返回。在这一构造之后，BlockBuilder实例 bb包含构建完的IRModule，可以通过 bb.get()得到。\nemit_te 的作用是将一个 TVM 张量表达式（TE）函数转换为 Relax 中的调用节点（Call Node）。它允许你在 Relax 中使用 TE 函数来进行计算，并生成相应的 TVM Script 代码。该函数首先将 Relax 表达式的参数转换为 TE 张量。然后，它调用 TE 函数，并将转换后的 TE 张量作为参数传递给它。TE 函数执行计算并返回一个 TE 张量或 TE 张量列表。该函数将返回的 TE 张量转换为 Relax 中的 Call Node. 最后，它使用 self.emit 方法将调用节点添加到 Relax BlockBuilder 中，并返回一个新的 Relax 变量，该变量绑定到 Call Node.\n函数参数：\nfunc: 一个可调用对象，它代表一个 TE 函数，该函数接受 Relax 张量作为参数，并返回一个 TE 张量或 TE 张量列表。 *args: func输入的位置参数 (relax Tensor)。 **kwargs: func输入的的关键字参数 (relax Tensor)。 name_hint: 可选参数，用于指定生成的 PrimFunc 的名称。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def relu(A): B = te.compute(shape=(128, 128), fcompute=lambda i, j: te.max(A[i, j], 0), name=\u0026#34;B\u0026#34;) return B def emit_te_example(): # relax.BlockBuilder can construct e2e models # step by step in an IRModule that starts empty. bb =relax.BlockBuilder() # relax.DynTensorType is the type assigned to tensors with a known dtype and unknown shape. x = relax.Var(\u0026#34;x\u0026#34;, relax.TensorStructInfo((128, 128), \u0026#34;float32\u0026#34;)) with bb.function(\u0026#34;main\u0026#34;, [x]): # construct a Relax function main with x as input with bb.dataflow(): # Emit a call node according to the te function # which should return a te tensor or a list of te tensors. lv0 = bb.emit_te(relu, x) gv = bb.emit_output(lv0) # mark the dataflow output bb.emit_func_output(gv) # mark the function output return bb.get() # return the constructed IRModule 可以看到通过BlockBuilder生成的IRModule包含了ReLU的TensorIR实现和一个含有调用ReLU实现的 call_tir的Relax函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @I.ir_module class Module: @T.prim_func(private=True) def relu(x: T.Buffer((T.int64(128), T.int64(128)), \u0026#34;float32\u0026#34;), B: T.Buffer((T.int64(128), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i, j in T.grid(T.int64(128), T.int64(128)): with T.block(\u0026#34;B\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(x[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = T.max(x[v_i, v_j], T.float32(0.0)) @R.function def main(x: R.Tensor((128, 128), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((128, 128), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv = R.call_tir(cls.relu, (x,), out_sinfo=R.Tensor((128, 128), dtype=\u0026#34;float32\u0026#34;)) gv: R.Tensor((128, 128), dtype=\u0026#34;float32\u0026#34;) = lv R.output(gv) return gv Construct IRModule Equals to Pytorch 我们可以用 BlockBuilder和 emit_te来创建一个和之前定义的PyTorch模型等价的IRModule。首先我们要实现这些算子的张量表达式运算函数。\n在加上bias的时候要和reduction操作分开进行，即不能在一个te.compute里面进行 te.sum+bias[...]的操作，否则会报错\n1 2 3 4 TVMError Traceback (most recent call last): File \u0026#34;D:\\Work\\tvm\\tvm0.18\\tvm\\src\\te\\operation\\compute_op.cc\u0026#34;, line 566 InternalError: Check failed: (0 == level_) is false: Reductions are only allowed at the top level of compute. Please create another tensor for further composition. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def my_conv2d(X, K, B): # No padding, stride = 1 N, CI, H, W = X.shape CO, _, KH, KW = K.shape k = te.reduce_axis((0, CI), name=\u0026#34;k\u0026#34;) r = te.reduce_axis((0, KH), name=\u0026#34;r\u0026#34;) s = te.reduce_axis((0, KW), name=\u0026#34;s\u0026#34;) OH = (H - KH) + 1 OW = (W - KW) + 1 conv2d_te = te.compute(shape=(N, CO, OH, OW), fcompute=lambda n, co, oh, ow: te.sum( X[n, k, oh + r, ow + s] * K[co, k, r, s], axis=[k, r, s]), name=\u0026#34;conv2d\u0026#34;) out = te.compute(shape=(N, CO, OH, OW), fcompute=lambda n, co, oh, ow: conv2d_te[n, co, oh, ow] + B[0, co, 0, 0]) return out def my_relu(X): return te.compute(shape=X.shape, fcompute=lambda *i: te.max(X(*i), 0)) def my_maxpool2d(X, S): N, C, H, W = X.shape i = te.reduce_axis((0, S), name=\u0026#34;i\u0026#34;) j = te.reduce_axis((0, S), name=\u0026#34;j\u0026#34;) maxpool2d_te = te.compute(shape=(N, C, H//2, W//2), fcompute=lambda n, co, oh, ow: te.max( X[n, co, oh*S+i, ow*S+j], axis=[i, j]), name=\u0026#34;maxpool2d\u0026#34;) return maxpool2d_te def my_flatten(X): N, C, H, W = X.shape flatten_te = te.compute(shape=(N, C*H*W), fcompute=lambda n, i: X[n, i//(H*W), i//(W)%(H), i%(W)]) return flatten_te def my_linear(X, W, B=None): FO, FI = W.shape N, _ = X.shape fi = te.reduce_axis((0, FI), name=\u0026#34;FI\u0026#34;) linear_te = te.compute(shape=(N, FO), fcompute=lambda i, j: te.sum( X[i, fi] * W[j, fi], axis=fi)) if B is not None: out = te.compute(shape=(N, FO), fcompute=lambda i, j: B[0, j] + linear_te[i, j]) else: out = linear_te return out def my_softmax(X): N, C = X.shape c = te.reduce_axis((0, C), name=\u0026#34;c\u0026#34;) max_val = te.compute(shape=(N, ), fcompute=lambda i: te.max(X[i, c], axis=c)) exp_te = te.compute(shape=(N, C), fcompute=lambda i, j: te.exp(X[i, j] - max_val[i])) sum_exp_te = te.compute(shape=(N, ), fcompute=lambda i: te.sum(exp_te[i, c], axis=c)) softmax_te = te.compute(shape=(N, C), fcompute=lambda i, j: exp_te[i, j] / sum_exp_te[i]) return softmax_te 然后我们就可以利用 BlockBuilder构建IRModule\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def create_model_via_emit_te(): batch_size = 4 input_shape = (batch_size, 1, 28, 28) # BCHW bb = relax.BlockBuilder() x = relax.Var(\u0026#34;x\u0026#34;, relax.TensorStructInfo(input_shape, \u0026#34;float32\u0026#34;)) conv2d_weight = relax.const(weight_map[\u0026#34;conv2d_weight\u0026#34;], \u0026#34;float32\u0026#34;) conv2d_bias = relax.const(weight_map[\u0026#34;conv2d_bias\u0026#34;].reshape(1, 32, 1, 1), \u0026#34;float32\u0026#34;) linear0_weight = relax.const(weight_map[\u0026#34;linear0_weight\u0026#34;], \u0026#34;float32\u0026#34;) linear0_bias = relax.const(weight_map[\u0026#34;linear0_bias\u0026#34;].reshape(1, 100), \u0026#34;float32\u0026#34;) linear1_weight = relax.const(weight_map[\u0026#34;linear1_weight\u0026#34;], \u0026#34;float32\u0026#34;) linear1_bias = relax.const(weight_map[\u0026#34;linear1_bias\u0026#34;].reshape(1, 10), \u0026#34;float32\u0026#34;) # Build the model using BlockBuilder with bb.function(\u0026#34;main\u0026#34;, [x]): with bb.dataflow(): gv_conv = bb.emit_te(my_conv2d, x, conv2d_weight, conv2d_bias) gv_relu1 = bb.emit_te(my_relu, gv_conv) gv_pool = bb.emit_te(my_maxpool2d, gv_relu1, 2) gv_flatten = bb.emit_te(my_flatten, gv_pool) gv_dense1 = bb.emit_te(my_linear, gv_flatten, linear0_weight, linear0_bias) gv_relu2 = bb.emit_te(my_relu, gv_dense1) gv_dense2 = bb.emit_te(my_linear, gv_relu2, linear1_weight, linear1_bias) gv_softmax = bb.emit_te(my_softmax, gv_dense2) out = bb.emit_output(gv_softmax) bb.emit_func_output(out) return bb.get() 得到的IRModule的TensorIR如下\n1 2 3 4 5 mod = create_model_via_emit_te() exec = relax.build(mod, \u0026#34;llvm\u0026#34;) dev = tvm.cpu() vm = relax.VirtualMachine(exec, dev) print(mod.script()) mod.script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 @I.ir_module class Module: @T.prim_func(private=True) def my_conv2d(x: T.Buffer((T.int64(4), T.int64(1), T.int64(28), T.int64(28)), \u0026#34;float32\u0026#34;), B: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), \u0026#34;float32\u0026#34;), C: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(32), T.int64(26), T.int64(26)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): conv2d = T.alloc_buffer((T.int64(4), T.int64(32), T.int64(26), T.int64(26))) for n, co, oh, ow, k, r, s in T.grid(T.int64(4), T.int64(32), T.int64(26), T.int64(26), T.int64(1), T.int64(3), T.int64(3)): with T.block(\u0026#34;conv2d\u0026#34;): v_n, v_co, v_oh, v_ow, v_k, v_r, v_s = T.axis.remap(\u0026#34;SSSSRRR\u0026#34;, [n, co, oh, ow, k, r, s]) T.reads(x[v_n, v_k, v_oh + v_r, v_ow + v_s], B[v_co, v_k, v_r, v_s]) T.writes(conv2d[v_n, v_co, v_oh, v_ow]) with T.init(): conv2d[v_n, v_co, v_oh, v_ow] = T.float32(0.0) conv2d[v_n, v_co, v_oh, v_ow] = conv2d[v_n, v_co, v_oh, v_ow] + x[v_n, v_k, v_oh + v_r, v_ow + v_s] * B[v_co, v_k, v_r, v_s] for n, co, oh, ow in T.grid(T.int64(4), T.int64(32), T.int64(26), T.int64(26)): with T.block(\u0026#34;compute\u0026#34;): v_n, v_co, v_oh, v_ow = T.axis.remap(\u0026#34;SSSS\u0026#34;, [n, co, oh, ow]) T.reads(conv2d[v_n, v_co, v_oh, v_ow], C[T.int64(0), v_co, T.int64(0), T.int64(0)]) T.writes(compute[v_n, v_co, v_oh, v_ow]) compute[v_n, v_co, v_oh, v_ow] = conv2d[v_n, v_co, v_oh, v_ow] + C[T.int64(0), v_co, T.int64(0), T.int64(0)] @T.prim_func(private=True) def my_flatten(lv2: T.Buffer((T.int64(4), T.int64(32), T.int64(13), T.int64(13)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(5408)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for n, i in T.grid(T.int64(4), T.int64(5408)): with T.block(\u0026#34;compute\u0026#34;): v_n, v_i = T.axis.remap(\u0026#34;SS\u0026#34;, [n, i]) T.reads(lv2[v_n, v_i // T.int64(169), v_i % T.int64(169) // T.int64(13), v_i % T.int64(13)]) T.writes(compute[v_n, v_i]) compute[v_n, v_i] = lv2[v_n, v_i // T.int64(169), v_i % T.int64(169) // T.int64(13), v_i % T.int64(13)] @T.prim_func(private=True) def my_linear(lv3: T.Buffer((T.int64(4), T.int64(5408)), \u0026#34;float32\u0026#34;), B: T.Buffer((T.int64(100), T.int64(5408)), \u0026#34;float32\u0026#34;), C: T.Buffer((T.int64(1), T.int64(100)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(100)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): compute_1 = T.alloc_buffer((T.int64(4), T.int64(100))) for i, j, FI in T.grid(T.int64(4), T.int64(100), T.int64(5408)): with T.block(\u0026#34;compute\u0026#34;): v_i, v_j, v_FI = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, FI]) T.reads(lv3[v_i, v_FI], B[v_j, v_FI]) T.writes(compute_1[v_i, v_j]) with T.init(): compute_1[v_i, v_j] = T.float32(0.0) compute_1[v_i, v_j] = compute_1[v_i, v_j] + lv3[v_i, v_FI] * B[v_j, v_FI] for i, j in T.grid(T.int64(4), T.int64(100)): with T.block(\u0026#34;compute_1\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(C[T.int64(0), v_j], compute_1[v_i, v_j]) T.writes(compute[v_i, v_j]) compute[v_i, v_j] = C[T.int64(0), v_j] + compute_1[v_i, v_j] @T.prim_func(private=True) def my_linear1(lv5: T.Buffer((T.int64(4), T.int64(100)), \u0026#34;float32\u0026#34;), B: T.Buffer((T.int64(10), T.int64(100)), \u0026#34;float32\u0026#34;), C: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(10)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): compute_1 = T.alloc_buffer((T.int64(4), T.int64(10))) for i, j, FI in T.grid(T.int64(4), T.int64(10), T.int64(100)): with T.block(\u0026#34;compute\u0026#34;): v_i, v_j, v_FI = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, FI]) T.reads(lv5[v_i, v_FI], B[v_j, v_FI]) T.writes(compute_1[v_i, v_j]) with T.init(): compute_1[v_i, v_j] = T.float32(0.0) compute_1[v_i, v_j] = compute_1[v_i, v_j] + lv5[v_i, v_FI] * B[v_j, v_FI] for i, j in T.grid(T.int64(4), T.int64(10)): with T.block(\u0026#34;compute_1\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(C[T.int64(0), v_j], compute_1[v_i, v_j]) T.writes(compute[v_i, v_j]) compute[v_i, v_j] = C[T.int64(0), v_j] + compute_1[v_i, v_j] @T.prim_func(private=True) def my_maxpool2d(lv1: T.Buffer((T.int64(4), T.int64(32), T.int64(26), T.int64(26)), \u0026#34;float32\u0026#34;), maxpool2d: T.Buffer((T.int64(4), T.int64(32), T.int64(13), T.int64(13)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for n, co, oh, ow, i, j in T.grid(T.int64(4), T.int64(32), T.int64(13), T.int64(13), T.int64(2), T.int64(2)): with T.block(\u0026#34;maxpool2d\u0026#34;): v_n, v_co, v_oh, v_ow, v_i, v_j = T.axis.remap(\u0026#34;SSSSRR\u0026#34;, [n, co, oh, ow, i, j]) T.reads(lv1[v_n, v_co, v_oh * T.int64(2) + v_i, v_ow * T.int64(2) + v_j]) T.writes(maxpool2d[v_n, v_co, v_oh, v_ow]) with T.init(): maxpool2d[v_n, v_co, v_oh, v_ow] = T.float32(-340282346638528859811704183484516925440.0) maxpool2d[v_n, v_co, v_oh, v_ow] = T.max(maxpool2d[v_n, v_co, v_oh, v_ow], lv1[v_n, v_co, v_oh * T.int64(2) + v_i, v_ow * T.int64(2) + v_j]) @T.prim_func(private=True) def my_relu(lv: T.Buffer((T.int64(4), T.int64(32), T.int64(26), T.int64(26)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(32), T.int64(26), T.int64(26)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1, i2, i3 in T.grid(T.int64(4), T.int64(32), T.int64(26), T.int64(26)): with T.block(\u0026#34;compute\u0026#34;): v_i0, v_i1, v_i2, v_i3 = T.axis.remap(\u0026#34;SSSS\u0026#34;, [i0, i1, i2, i3]) T.reads(lv[v_i0, v_i1, v_i2, v_i3]) T.writes(compute[v_i0, v_i1, v_i2, v_i3]) compute[v_i0, v_i1, v_i2, v_i3] = T.max(lv[v_i0, v_i1, v_i2, v_i3], T.float32(0.0)) @T.prim_func(private=True) def my_relu1(lv4: T.Buffer((T.int64(4), T.int64(100)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(100)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1 in T.grid(T.int64(4), T.int64(100)): with T.block(\u0026#34;compute\u0026#34;): v_i0, v_i1 = T.axis.remap(\u0026#34;SS\u0026#34;, [i0, i1]) T.reads(lv4[v_i0, v_i1]) T.writes(compute[v_i0, v_i1]) compute[v_i0, v_i1] = T.max(lv4[v_i0, v_i1], T.float32(0.0)) @T.prim_func(private=True) def my_softmax(lv6: T.Buffer((T.int64(4), T.int64(10)), \u0026#34;float32\u0026#34;), compute: T.Buffer((T.int64(4), T.int64(10)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): compute_1 = T.alloc_buffer((T.int64(4),)) compute_2 = T.alloc_buffer((T.int64(4), T.int64(10))) compute_3 = T.alloc_buffer((T.int64(4),)) for i, c in T.grid(T.int64(4), T.int64(10)): with T.block(\u0026#34;compute\u0026#34;): v_i, v_c = T.axis.remap(\u0026#34;SR\u0026#34;, [i, c]) T.reads(lv6[v_i, v_c]) T.writes(compute_1[v_i]) with T.init(): compute_1[v_i] = T.float32(-340282346638528859811704183484516925440.0) compute_1[v_i] = T.max(compute_1[v_i], lv6[v_i, v_c]) for i, j in T.grid(T.int64(4), T.int64(10)): with T.block(\u0026#34;compute_1\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(lv6[v_i, v_j], compute_1[v_i]) T.writes(compute_2[v_i, v_j]) compute_2[v_i, v_j] = T.exp(lv6[v_i, v_j] - compute_1[v_i]) for i, c in T.grid(T.int64(4), T.int64(10)): with T.block(\u0026#34;compute_2\u0026#34;): v_i, v_c = T.axis.remap(\u0026#34;SR\u0026#34;, [i, c]) T.reads(compute_2[v_i, v_c]) T.writes(compute_3[v_i]) with T.init(): compute_3[v_i] = T.float32(0.0) compute_3[v_i] = compute_3[v_i] + compute_2[v_i, v_c] for i, j in T.grid(T.int64(4), T.int64(10)): with T.block(\u0026#34;compute_3\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(compute_2[v_i, v_j], compute_3[v_i]) T.writes(compute[v_i, v_j]) compute[v_i, v_j] = compute_2[v_i, v_j] / compute_3[v_i] @R.function def main(x: R.Tensor((4, 1, 28, 28), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((4, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv = R.call_tir(cls.my_conv2d, (x, metadata[\u0026#34;relax.expr.Constant\u0026#34;][0], metadata[\u0026#34;relax.expr.Constant\u0026#34;][1]), out_sinfo=R.Tensor((4, 32, 26, 26), dtype=\u0026#34;float32\u0026#34;)) lv1 = R.call_tir(cls.my_relu, (lv,), out_sinfo=R.Tensor((4, 32, 26, 26), dtype=\u0026#34;float32\u0026#34;)) lv2 = R.call_tir(cls.my_maxpool2d, (lv1,), out_sinfo=R.Tensor((4, 32, 13, 13), dtype=\u0026#34;float32\u0026#34;)) lv3 = R.call_tir(cls.my_flatten, (lv2,), out_sinfo=R.Tensor((4, 5408), dtype=\u0026#34;float32\u0026#34;)) lv4 = R.call_tir(cls.my_linear, (lv3, metadata[\u0026#34;relax.expr.Constant\u0026#34;][2], metadata[\u0026#34;relax.expr.Constant\u0026#34;][3]), out_sinfo=R.Tensor((4, 100), dtype=\u0026#34;float32\u0026#34;)) lv5 = R.call_tir(cls.my_relu1, (lv4,), out_sinfo=R.Tensor((4, 100), dtype=\u0026#34;float32\u0026#34;)) lv6 = R.call_tir(cls.my_linear1, (lv5, metadata[\u0026#34;relax.expr.Constant\u0026#34;][4], metadata[\u0026#34;relax.expr.Constant\u0026#34;][5]), out_sinfo=R.Tensor((4, 10), dtype=\u0026#34;float32\u0026#34;)) lv7 = R.call_tir(cls.my_softmax, (lv6,), out_sinfo=R.Tensor((4, 10), dtype=\u0026#34;float32\u0026#34;)) gv: R.Tensor((4, 10), dtype=\u0026#34;float32\u0026#34;) = lv7 R.output(gv) return gv 我们可以与Pytorch模型的执行结果进行比较来验证正确性。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def build_mod(mod): exec = relax.vm.build(mod, \u0026#34;llvm\u0026#34;) dev = tvm.cpu() vm = relax.VirtualMachine(exec, dev) return vm def check_equivalence(mod, torch_model, test_loader): torch_model.eval() with torch.no_grad(): rt_mod = build_mod(mod) for data, label in test_loader: data, label = data.cpu(), label.cpu() output_from_pytorch = torch_model(data).numpy() output_from_relax = rt_mod[\u0026#34;main\u0026#34;](tvm.nd.array(data, tvm.cpu())).numpy() tvm.testing.assert_allclose(output_from_pytorch, output_from_relax, rtol=1e-4) test_data = torchvision.datasets.FashionMNIST( \u0026#34;./data\u0026#34;, download=True, train=False, transform=transforms.Compose([transforms.ToTensor()]) ) test_loader = torch.utils.data.DataLoader(test_data, batch_size=batch_size, shuffle=False) mod = create_model_via_emit_te() torch_model = pytorch_model() check_equivalence(mod, torch_model, test_loader) ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch5/","summary":"Personal notebook 5.","title":"TVM Learning (6)-Exercise of End to End Model Execution"},{"content":"Transform a Primitive Tensor Function 之前已经讲过如何通过 tir.Schedule对T.prim_func进行变换，仍以矩阵乘法为例\n1 2 3 4 5 6 7 8 9 10 11 12 13 @tvm.script.ir_module class MyModule: @T.prim_func def main(A: T.Buffer((128, 128), \u0026#34;float32\u0026#34;), # type: ignore B: T.Buffer((128, 128), \u0026#34;float32\u0026#34;), # type: ignore C: T.Buffer((128, 128), \u0026#34;float32\u0026#34;)): # type: ignore T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i, j, k in T.grid(128, 128, 128): with T.block(\u0026#34;C\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) with T.init(): C[vi, vj] = 0.0 C[vi, vj] += A[vi, vk] * B[vk, vj] 对其进行 split, reorder和 decompose_reduction变换得到的TensorIR如下。\n通过以上变换后，矩阵乘法的执行时间减少是由于：\n循环拆分 (sch.split) ： 将 j循环拆分成了两个循环：j_0和 j_1，其中 j_1的因子为4（内层循环）。 提高数据的局部性，因为较小的数据块会在更短的时间内被频繁访问，从而更好地利用缓存。 循环重排 (sch.reorder) ： 将循环的顺序调整为 i, j_0, k, j_1，意味着外层循环先遍历 i和 j_0，内层循环再遍历 k和 j_1。 优先考虑了数据在寄存器或缓存中的重用，尤其是在内层循环操作期间 A矩阵中的元素。 分解归约 (sch.decompose_reduction) ： 将对 k的归约操作分解为初始化阶段和更新阶段，有助于将计算的两个阶段（即设置初始值和实际归约）分开。 提高并行化的机会，并且允许更好地利用向量化指令或其他硬件优化。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def schedule_mm(sch: tvm.tir.Schedule, jfactor=4): block_C = sch.get_block(\u0026#34;C\u0026#34;, \u0026#34;main\u0026#34;) i, j, k = sch.get_loops(block=block_C) j_0, j_1 = sch.split(loop=j, factors=[None, jfactor]) sch.reorder(i, j_0, k, j_1) sch.decompose_reduction(block_C, k) return sch sch = tvm.tir.Schedule(MyModule) sch = schedule_mm(sch) sch.mod.show() #----------------------------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((128, 128), \u0026#34;float32\u0026#34;), B: T.Buffer((128, 128), \u0026#34;float32\u0026#34;), C: T.Buffer((128, 128), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i, j_0 in T.grid(128, 32): for j_1_init in range(4): with T.block(\u0026#34;C_init\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j_0 * 4 + j_1_init) T.reads() T.writes(C[vi, vj]) C[vi, vj] = T.float32(0.0) for k, j_1 in T.grid(128, 4): with T.block(\u0026#34;C_update\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j_0 * 4 + j_1) vk = T.axis.reduce(128, k) T.reads(C[vi, vj], A[vi, vk], B[vk, vj]) T.writes(C[vi, vj]) C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vk, vj] 我们可以比较变换前后的计算用时\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 a_np = np.random.rand(128, 128).astype(dtype) b_np = np.random.rand(128, 128).astype(dtype) c_mm = a_np @ b_np a_nd = tvm.nd.array(a_np) b_nd = tvm.nd.array(b_np) c_nd = tvm.nd.empty((128, 128), dtype=\u0026#34;float32\u0026#34;) # Before transformation lib = tvm.build(MyModule, target= \u0026#34;llvm\u0026#34;) f_timer_before = lib.time_evaluator(\u0026#34;main\u0026#34;, tvm.cpu()) print(\u0026#34;Time cost of MyModule: %.3f ms\u0026#34; % (f_timer_before(a_nd, b_nd, c_nd).mean * 1000)) #Time cost of MyModule: 1.365 ms # After transformation lib = tvm.build(sch.mod, target=\u0026#34;llvm\u0026#34;) f_timer_after = lib.time_evaluator(\u0026#34;main\u0026#34;, tvm.cpu()) print(\u0026#34;Time cost of MyModule=\u0026gt;schedule_mm: %.3f ms\u0026#34; % (f_timer_after(a_nd, b_nd, c_nd).mean * 1000)) # Time cost of MyModule=\u0026gt;schedule_mm: 1.041 ms Transformation Trace 除了 sch.mod字段，tir.Schedule还提供了一个跟踪字段 sch.trace，用于显示变换IRModule的步骤。\n1 2 3 4 5 6 7 8 print(sch.trace) #------------------------------------------- def apply_trace(sch: tir.Schedule) -\u0026gt; None: b0 = sch.get_block(name=\u0026#34;C\u0026#34;, func_name=\u0026#34;main\u0026#34;) l1, l2, l3 = sch.get_loops(block=b0) l4, l5 = sch.split(loop=l2, factors=[None, 4], preserve_unit_iters=True, disable_predication=False) sch.reorder(l1, l4, l3, l5) b6 = sch.decompose_reduction(block=b0, loop=l3) Stochastic Schedule Transformation 在之前的变换中，我们都是指定这些函数的输入参数。实际情况下，我们需要引入随机性，根据不同变换的输入参数得出的执行时间来选择性能最好的一个。\nsample_perfect_tile函数可以计算任务中的特定循环采样最优的切分策略。\n输入参数：\nloop：要切分的循环。 n：要切分成几份。 max_innermost_factor：允许在最内层循环中采样的最大切分大小。此参数有助于控制平铺的粒度。 decision：一个可选的整数列表，表示预先确定的切分决策。如果提供，函数将使用此决策而不是采样。 下面函数 stochastic_schedule_mm和 schedule_mm唯一的区别是指定 j_factors采用的是随机的策略。\n1 2 3 4 5 6 7 8 def stochastic_schedule_mm(sch: tvm.tir.Schedule): block_C = sch.get_block(\u0026#34;C\u0026#34;, \u0026#34;main\u0026#34;) i, j, k = sch.get_loops(block=block_C) j_factors = sch.sample_perfect_tile(loop=j, n=2) # tvm.tir.expr.Var j_0, j_1 = sch.split(loop=j, factors=j_factors) sch.reorder(i, j_0, k, j_1) sch.decompose_reduction(block_C, k) return sch 可以发现，它是对原来的确定性变换的泛化版本，只是多了两个元素：\n来自 sample_perfect_tile 的随机变量，以及我们在示例中没有涉及的其他采样操作。 根据随机变量采取行动的 schedule操作。 j_factors 中的元素不是整数。相它们是符号变量，指的是正在采样的随机变量。我们可以将这些变量传递给转换 API，以指定factors. 调用 stochastic_schedule_mm后的trace如下\n1 2 3 4 5 6 7 8 9 10 11 12 sch = tvm.tir.Schedule(MyModule) sch = stochastic_schedule_mm(sch) print(sch.trace) #------------------------------------------------------ def apply_trace(sch: tir.Schedule) -\u0026gt; None: b0 = sch.get_block(name=\u0026#34;C\u0026#34;, func_name=\u0026#34;main\u0026#34;) l1, l2, l3 = sch.get_loops(block=b0) v4, v5 = sch.sample_perfect_tile(loop=l2, n=2, max_innermost_factor=16, decision=[64, 2]) l6, l7 = sch.split(loop=l2, factors=[v4, v5], preserve_unit_iters=True, disable_predication=False) sch.reorder(l1, l6, l3, l7) b8 = sch.decompose_reduction(block=b0, loop=l3) Search Over Stochastic Transformations stochastic_schedule_mm实际上会根据每个采样步骤的实际决定，创建一个程序的搜索空间。\nTransformation Search Space\n我们需要一种搜索算法能找到性能最好的变换。下面的函数使用最直接的搜索算法\u0026ndash;随机搜索。它尝试重复运行 stochastic_schedule_mm，得到一个转换后的IR module，运行benchmark，然后将性能最好的IR module记录下来。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def random_search(mod: tvm.IRModule, num_trails=5): best_result = None best_sch = False for i in range(num_trails): sch = stochastic_schedule_mm(tvm.tir.Schedule(mod)) lib = tvm.build(sch.mod, target=\u0026#34;llvm\u0026#34;) f_timer_after = lib.time_evaluator(\u0026#34;main\u0026#34;, tvm.cpu()) result = f_timer_after(a_nd, b_nd, c_nd).mean print(\u0026#34;=====Attempt %d, time-cost: %.3f ms====\u0026#34; % (i, result * 1000)) print(sch.trace) # book keep the best result so far if best_result is None or result \u0026lt; best_result: best_result = result best_sch = sch return best_sch 实际情况下会使用更高级的算法。还需要提供额外的工具，例如在远程设备上进行基准测试等。TVM 的 meta_schedule API 提供了这些功能。\nmeta_schedule是一个命名空间，用于支持在可能的变换空间中进行搜索。\n跨多个进程的并行基准测试。 使用 cost model，避免每次都进行基准测试。 在 trace 上进行进化搜索，而不是每次都随机取样。 tune_tir API 仍使用随机变换来指定好程序的搜索空间并在搜索空间内找到优化的方案。\n1 2 3 4 5 6 7 8 9 10 11 12 database = ms.tune_tir( mod=MyModule, target=\u0026#34;llvm --num-cores=1\u0026#34;, max_trials_global=64, num_trials_per_iter=64, space=ms.space_generator.ScheduleFn(stochastic_schedule_mm), work_dir=\u0026#34;./tune_tmp\u0026#34;, task_name=\u0026#34;main\u0026#34; ) sch_tuned = ms.tir_integration.compile_tir(database, MyModule, target=\u0026#34;llvm --num-cores=1\u0026#34;) print(sch_tuned.trace) clang error on Windows 不知道为何Windows上运行clang会出错\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 LocalRunner: An exception occurred Traceback (most recent call last): File \u0026#34;D:\\Work\\Anaconda\\envs\\tvm-build\\lib\\site-packages\\tvm-0.18.dev0-py3.9-win-amd64.egg\\tvm\\exec\\popen_worker.py\u0026#34;, line 87, in main result = fn(*args, **kwargs) File \u0026#34;D:\\Work\\Anaconda\\envs\\tvm-build\\lib\\site-packages\\tvm-0.18.dev0-py3.9-win-amd64.egg\\tvm\\meta_schedule\\runner\\local_runner.py\u0026#34;, line 148, in _worker_func rt_mod = tvm.runtime.load_module(artifact_path) File \u0026#34;D:\\Work\\Anaconda\\envs\\tvm-build\\lib\\site-packages\\tvm-0.18.dev0-py3.9-win-amd64.egg\\tvm\\runtime\\module.py\u0026#34;, line 696, in load_module _cc.create_shared(path + \u0026#34;.so\u0026#34;, files) File \u0026#34;D:\\Work\\Anaconda\\envs\\tvm-build\\lib\\site-packages\\tvm-0.18.dev0-py3.9-win-amd64.egg\\tvm\\contrib\\cc.py\u0026#34;, line 96, in create_shared _windows_compile(output, objects, options, cwd, ccache_env) File \u0026#34;D:\\Work\\Anaconda\\envs\\tvm-build\\lib\\site-packages\\tvm-0.18.dev0-py3.9-win-amd64.egg\\tvm\\contrib\\cc.py\u0026#34;, line 415, in _windows_compile raise RuntimeError(msg) RuntimeError: Compilation error: clang -O2 -shared -o C:\\Users\\17725\\AppData\\Local\\Temp\\tmp96lbzaxg\\tvm_tmp_mod.tar.so C:\\Users\\17725\\AppData\\Local\\Temp\\tmp96lbzaxg\\tvm_tmp_mod\\lib0.o ld.lld: error: undefined symbol: _fltused \u0026gt;\u0026gt;\u0026gt; referenced by C:\\Users\\17725\\AppData\\Local\\Temp\\tmp96lbzaxg\\tvm_tmp_mod\\lib0.o clang: error: linker command failed with exit code 1 (use -v to see invocation) ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch4/","summary":"Personal notebook 4.","title":"TVM Learning (5)-Automatic Program Optimization"},{"content":"E2E Model Integration 我们以下图中的 MLP 网络为例，这是一个两层全连接网络，并且省略了最后的 Softmax 层。\nMLP Model\n利用高级Numpy的实现如下\n1 2 3 4 5 def numpy_mlp(data, w0, b0, w1, b1): lv0 = data @ w0.T + b0 lv1 = np.maximum(lv0, 0) lv2 = lv1 @ w1.T + b1 return lv2 为了方便说明底层计算过程，用 Low-level Numpy 进行重写后如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def lnumpy_linear0(X: np.ndarray, W: np.ndarray, B: np.ndarray, Z: np.ndarray): Y = np.empty((1, 128), dtype=\u0026#34;float32\u0026#34;) for i in range(1): for j in range(128): for k in range(784): if k == 0: Y[i, j] = 0 Y[i, j] = Y[i, j] + X[i, k] * W[j, k] for i in range(1): for j in range(128): Z[i, j] = Y[i, j] + B[j] def lnumpy_relu0(X: np.ndarray, Y: np.ndarray): for i in range(1): for j in range(128): Y[i, j] = np.maximum(X[i, j], 0) def lnumpy_linear1(X: np.ndarray, W: np.ndarray, B: np.ndarray, Z: np.ndarray): Y = np.empty((1, 10), dtype=\u0026#34;float32\u0026#34;) for i in range(1): for j in range(10): for k in range(128): if k == 0: Y[i, j] = 0 Y[i, j] = Y[i, j] + X[i, k] * W[j, k] for i in range(1): for j in range(10): Z[i, j] = Y[i, j] + B[j] def lnumpy_mlp(data, w0, b0, w1, b1): lv0 = np.empty((1, 128), dtype=\u0026#34;float32\u0026#34;) lnumpy_linear0(data, w0, b0, lv0) lv1 = np.empty((1, 128), dtype=\u0026#34;float32\u0026#34;) lnumpy_relu0(lv0, lv1) out = np.empty((1, 10), dtype=\u0026#34;float32\u0026#34;) lnumpy_linear1(lv1, w1, b1, out) return out Constructing an E2E IRModule in TVMScript 同样可以用 TVMScript 构建这个网络的 IRModule，只不过这次除了要用 Primitive Tensor Function (@T.prim_function) 还要用 Relax Function (@R.function) 来抽象神经网络的计算过程。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 @tvm.script.ir_module class MyModule: @T.prim_func def relu0(X: T.Buffer((1, 128), \u0026#34;float32\u0026#34;), Y: T.Buffer((1, 128), \u0026#34;float32\u0026#34;)): # function attr dict T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;relu0\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i, j in T.grid(1, 128): with T.block(\u0026#34;Y\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) Y[vi, vj] = T.max(X[vi, vj], T.float32(0)) @T.prim_func def linear0(X: T.Buffer((1, 784), \u0026#34;float32\u0026#34;), W: T.Buffer((128, 784), \u0026#34;float32\u0026#34;), B: T.Buffer((128,), \u0026#34;float32\u0026#34;), Z: T.Buffer((1, 128), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;linear0\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) Y = T.alloc_buffer((1, 128), \u0026#34;float32\u0026#34;) for i, j, k in T.grid(1, 128, 784): with T.block(\u0026#34;Y\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) with T.init(): Y[vi, vj] = T.float32(0) Y[vi, vj] = Y[vi, vj] + X[vi, vk] * W[vj, vk] for i, j in T.grid(1, 128): with T.block(\u0026#34;Z\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) Z[vi, vj] = Y[vi, vj] + B[vj] @T.prim_func def linear1(X: T.Buffer((1, 128), \u0026#34;float32\u0026#34;), W: T.Buffer((10, 128), \u0026#34;float32\u0026#34;), B: T.Buffer((10,), \u0026#34;float32\u0026#34;), Z: T.Buffer((1, 10), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;linear1\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) Y = T.alloc_buffer((1, 10), \u0026#34;float32\u0026#34;) for i, j, k in T.grid(1, 10, 128): with T.block(\u0026#34;Y\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) with T.init(): Y[vi, vj] = T.float32(0) Y[vi, vj] = Y[vi, vj] + X[vi, vk] * W[vj, vk] for i, j in T.grid(1, 10): with T.block(\u0026#34;Z\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) Z[vi, vj] = Y[vi, vj] + B[vj] @R.function def main(x: R.Tensor((1, 784), \u0026#34;float32\u0026#34;), w0: R.Tensor((128, 784), \u0026#34;float32\u0026#34;), b0: R.Tensor((128,), \u0026#34;float32\u0026#34;), w1: R.Tensor((10, 128), \u0026#34;float32\u0026#34;), b1: R.Tensor((10,), \u0026#34;float32\u0026#34;)): with R.dataflow(): cls = MyModule lv0 = R.call_tir(cls.linear0, (x, w0, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv1 = R.call_tir(cls.relu0, (lv0,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) out = R.call_tir(cls.linear1, (lv1, w1, b1), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(out) return out Computational Graph View 该网络的计算图如下，计算图通常具有以下性质：\n框的每个输入边对应于操作的输入； 每个出边对应于操作的输出； 可以任意调整操作的顺序，只要保证边的拓扑排序（Topological Order）没有改变。 Topological Order 拓扑排序是针对有向无环图 (DAG) 的一种排序算法，它将图中的节点排成一个线性序列，满足以下条件：\n对于图中的任意一条边 (u, v)，节点 u 在排序中都出现在节点 v 之前。 Example DAG\n进行拓扑排序较常用的方法：\n从 DAG 图中选择一个 没有前驱（即入度为0）的顶点并输出。 从图中删除该顶点和所有以它为起点的有向边。 重复 1 和 2 直到当前的 DAG 图为空或 当前图中不存在无前驱的顶点为止 。后一种情况说明有向图中必然存在环。 Topological Sort Algorithm\nComputational Graph View\nR.call_tir R.call_tir 正如名字一样调用一个 T.prim_func 并返回计算结果。它的行为用Numpy表示如下，先根据 shape和 dtype开辟输出数据的内存空间，然后调用函数，最后返回输出结果。R.call_tir函数的输入是这种形式的原因是 T.prim_func函数的输入需要我们先为输出结果开辟内存，称为 目标传递 (destination passing) 。\n1 2 3 4 def lnumpy_call_tir(prim_func, inputs, shape, dtype): res = np.empty(shape, dtype=dtype) prim_func(*inputs, res) return res 为了让程序执行具有计算图的性质，我们采用这种方式进行调用\n1 2 3 4 5 def lnumpy_mlp_with_call_tir(data, w0, b0, w1, b1): lv0 = lnumpy_call_tir(lnumpy_linear0, (data, w0, b0), (1, 128), dtype=\u0026#34;float32\u0026#34;) lv1 = lnumpy_call_tir(lnumpy_relu0, (lv0, ), (1, 128), dtype=\u0026#34;float32\u0026#34;) out = lnumpy_call_tir(lnumpy_linear1, (lv1, w1, b1), (1, 10), dtype=\u0026#34;float32\u0026#34;) return out Dataflow Block 理想情况下，计算图中的操作应为 side-effect free，即一个函数只从其输入中读取并通过其输出返回结果，不会改变程序的其他部分（例如递增全局计数器）。如果要引入包含 side-effect 的操作，就需要定义多个dataflow block，在他们之外或者之间进行操作。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @R.function def main(x: Tensor((1, 784), \u0026#34;float32\u0026#34;), w0: Tensor((128, 784), \u0026#34;float32\u0026#34;), b0: Tensor((128,), \u0026#34;float32\u0026#34;), w1: Tensor((10, 128), \u0026#34;float32\u0026#34;), b1: Tensor((10,), \u0026#34;float32\u0026#34;)): with R.dataflow(): lv0 = R.call_tir(cls.linear0, (x, w0, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) gv0 = R.call_tir(cls.relu0, (lv0,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) R.output(gv0) gv1 = R.alloc_tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) # side-effect operation with R.dataflow(): out = R.call_tir(cls.linear1, (gv0, gv1, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) R.output(out) return out Build and Run the Model 该网络对应的TensorIR如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 @I.ir_module class Module: @T.prim_func def linear0( X: T.Buffer((1, 784), \u0026#34;float32\u0026#34;), W: T.Buffer((128, 784), \u0026#34;float32\u0026#34;), B: T.Buffer((128,), \u0026#34;float32\u0026#34;), Z: T.Buffer((1, 128), \u0026#34;float32\u0026#34;), ): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;linear0\u0026#34;, \u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): Y = T.alloc_buffer((1, 128)) for i, j, k in T.grid(1, 128, 784): with T.block(\u0026#34;Y\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) T.reads(X[vi, vk], W[vj, vk]) T.writes(Y[vi, vj]) with T.init(): Y[vi, vj] = T.float32(0) Y[vi, vj] = Y[vi, vj] + X[vi, vk] * W[vj, vk] for i, j in T.grid(1, 128): with T.block(\u0026#34;Z\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(Y[vi, vj], B[vj]) T.writes(Z[vi, vj]) Z[vi, vj] = Y[vi, vj] + B[vj] @T.prim_func def linear1( X: T.Buffer((1, 128), \u0026#34;float32\u0026#34;), W: T.Buffer((10, 128), \u0026#34;float32\u0026#34;), B: T.Buffer((10,), \u0026#34;float32\u0026#34;), Z: T.Buffer((1, 10), \u0026#34;float32\u0026#34;), ): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;linear1\u0026#34;, \u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): Y = T.alloc_buffer((1, 10)) for i, j, k in T.grid(1, 10, 128): with T.block(\u0026#34;Y\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) T.reads(X[vi, vk], W[vj, vk]) T.writes(Y[vi, vj]) with T.init(): Y[vi, vj] = T.float32(0) Y[vi, vj] = Y[vi, vj] + X[vi, vk] * W[vj, vk] for i, j in T.grid(1, 10): with T.block(\u0026#34;Z\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(Y[vi, vj], B[vj]) T.writes(Z[vi, vj]) Z[vi, vj] = Y[vi, vj] + B[vj] @T.prim_func def relu0(X: T.Buffer((1, 128), \u0026#34;float32\u0026#34;), Y: T.Buffer((1, 128), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;relu0\u0026#34;, \u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i, j in T.grid(1, 128): with T.block(\u0026#34;Y\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(X[vi, vj]) T.writes(Y[vi, vj]) Y[vi, vj] = T.max(X[vi, vj], T.float32(0)) @R.function def main( x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), w0: R.Tensor((128, 784), dtype=\u0026#34;float32\u0026#34;), b0: R.Tensor((128,), dtype=\u0026#34;float32\u0026#34;), w1: R.Tensor((10, 128), dtype=\u0026#34;float32\u0026#34;), b1: R.Tensor((10,), dtype=\u0026#34;float32\u0026#34;), ) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv0 = R.call_tir(cls.linear0, (x, w0, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv1 = R.call_tir(cls.relu0, (lv0,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) out = R.call_tir(cls.linear1, (lv1, w1, b1), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(out) return out 我们可以通过下面方式来构造 virtual machine. relax.build返回一个 tvm.relax.Executable对象，然后就可以在指定的硬件上创建virtual machine 来执行计算图。\n1 2 3 4 5 6 7 8 ex = relax.build(MyModule, target=\u0026#34;llvm\u0026#34;) vm = relax.VirtualMachine(ex, tvm.cpu()) nd_res = vm[\u0026#34;main\u0026#34;](data_nd, nd_params[\u0026#34;w0\u0026#34;], nd_params[\u0026#34;b0\u0026#34;], nd_params[\u0026#34;w1\u0026#34;], nd_params[\u0026#34;b1\u0026#34;]) Integrate Existing Libraries in the Environment 除了用 T.prim_func构造RelaxIR，我们也可以从现有的深度学习库的函数来构造。\n这是通过 R.call_dps_packed来完成的，它用于调用一个目标传递风格 (Destination-Passing Style) 的打包函数 (Packed Function)，并返回输出结果。\n目标传递风格 (Destination-Passing Style): 目标传递风格是一种函数调用方式，其中函数的输出参数作为函数参数传递给函数。 打包函数 (Packed Function): 打包函数是一种函数，其输入参数和输出参数都被打包成一个结构体。 纯函数 (Pure Function): 纯函数是指不产生副作用的函数，即函数的执行结果只依赖于输入参数，并且不会修改任何全局状态。\n示例：\n1 R.call_dps_packed(\u0026#34;env.linear\u0026#34;, (x, w0, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) 函数参数：\nfunc: 可以是字符串或表达式，表示目标传递风格的函数。如果 func 是字符串，它将被转换为 ExternFunc 对象。 args: 表达式，表示输入参数。如果 args 是单个表达式，它将被包装成一个 RxTuple 对象。 out_sinfo: 可以是 TensorStructInfo 对象或 TensorStructInfo 对象列表，表示 call_dps_packed 函数输出的结构信息。每个 TensorStructInfo 对象表示一个返回的张量的结构信息。 函数返回值：\nret: Call 对象，表示 call_dps_packed 操作符的调用节点。 Registering Runtime Function 为了能够执行调用外部函数的代码，我们需要注册相应的函数。下面这段代码注册了两个自定义函数，分别用于实现线性层和 ReLU 激活函数。\n@tvm.register_func(\u0026quot;env.linear\u0026quot;, override=True): 使用 @tvm.register_func 装饰器将 torch_linear 函数注册为名为 \u0026quot;env.linear\u0026quot; 的 TVM 函数。 override=True 表示如果已经存在同名函数，则覆盖它。 torch_linear(x: tvm.nd.NDArray, w: tvm.nd.NDArray, b: tvm.nd.NDArray, out: tvm.nd.NDArray): 该函数接受四个参数： x: 输入张量。 w: 权重张量。 b: 偏置张量。 out: 输出张量。 函数内部： 使用 torch.from_dlpack 将 TVM 的 NDArray 对象转换为 PyTorch 的 Tensor 对象。 使用 PyTorch 的 torch.mm 函数进行矩阵乘法，将 x 和 w 的转置相乘，并将结果写入 out。 使用 PyTorch 的 torch.add 函数将 b 加到 out 上。 @tvm.register_func(\u0026quot;env.relu\u0026quot;, override=True): 使用 @tvm.register_func 装饰器将 lnumpy_relu 函数注册为名为 \u0026quot;env.relu\u0026quot; 的 TVM 函数。 override=True 表示如果已经存在同名函数，则覆盖它。 lnumpy_relu(x: tvm.nd.NDArray, out: tvm.nd.NDArray): 该函数接受两个参数： x: 输入张量。 out: 输出张量。 函数内部： 使用 torch.from_dlpack 将 TVM 的 NDArray 对象转换为 PyTorch 的 Tensor 对象。 使用 PyTorch 的 torch.maximum 函数计算 x 和 0 之间的最大值，并将结果写入 out。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @tvm.register_func(\u0026#34;env.linear\u0026#34;, override=True) def torch_linear(x: tvm.nd.NDArray, w: tvm.nd.NDArray, b: tvm.nd.NDArray, out: tvm.nd.NDArray): x_torch = torch.from_dlpack(x) w_torch = torch.from_dlpack(w) b_torch = torch.from_dlpack(b) out_torch = torch.from_dlpack(out) torch.mm(x_torch, w_torch.T, out=out_torch) torch.add(out_torch, b_torch, out=out_torch) @tvm.register_func(\u0026#34;env.relu\u0026#34;, override=True) def lnumpy_relu(x: tvm.nd.NDArray, out: tvm.nd.NDArray): x_torch = torch.from_dlpack(x) out_torch = torch.from_dlpack(out) torch.maximum(x_torch, torch.Tensor([0.0]), out=out_torch) 然后我们就可以创建IRModule并通过上一节所说方法去 build and run.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @tvm.script.ir_module class MyModuleWithExternCall: @R.function def main(x: R.Tensor((1, 784), \u0026#34;float32\u0026#34;), w0: R.Tensor((128, 784), \u0026#34;float32\u0026#34;), b0: R.Tensor((128,), \u0026#34;float32\u0026#34;), w1: R.Tensor((10, 128), \u0026#34;float32\u0026#34;), b1: R.Tensor((10,), \u0026#34;float32\u0026#34;)): # block 0 with R.dataflow(): lv0 = R.call_dps_packed(\u0026#34;env.linear\u0026#34;, (x, w0, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv1 = R.call_dps_packed(\u0026#34;env.relu\u0026#34;, (lv0,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) out = R.call_dps_packed(\u0026#34;env.linear\u0026#34;, (lv1, w1, b1), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(out) return out ex = relax.build(MyModuleWithExternCall, target=\u0026#34;llvm\u0026#34;) vm = relax.VirtualMachine(ex, tvm.cpu()) Mixing TensorIR Code and Libraries 我们可以混合使用T.prim_func和 注册的 runtime 函数来创建 RelaxIR. 以下代码展示了一个例子，其中 linear0 仍在 TensorIR 中实现，而其他函数则被重定向到库函数中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 @tvm.script.ir_module class MyModuleMixture: @T.prim_func def linear0(X: T.Buffer((1, 784), \u0026#34;float32\u0026#34;), W: T.Buffer((128, 784), \u0026#34;float32\u0026#34;), B: T.Buffer((128,), \u0026#34;float32\u0026#34;), Z: T.Buffer((1, 128), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;linear0\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) Y = T.alloc_buffer((1, 128), \u0026#34;float32\u0026#34;) for i, j, k in T.grid(1, 128, 784): with T.block(\u0026#34;Y\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) with T.init(): Y[vi, vj] = T.float32(0) Y[vi, vj] = Y[vi, vj] + X[vi, vk] * W[vj, vk] for i, j in T.grid(1, 128): with T.block(\u0026#34;Z\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) Z[vi, vj] = Y[vi, vj] + B[vj] @R.function def main(x: R.Tensor((1, 784), \u0026#34;float32\u0026#34;), w0: R.Tensor((128, 784), \u0026#34;float32\u0026#34;), b0: R.Tensor((128,), \u0026#34;float32\u0026#34;), w1: R.Tensor((10, 128), \u0026#34;float32\u0026#34;), b1: R.Tensor((10,), \u0026#34;float32\u0026#34;)): with R.dataflow(): cls = MyModuleMixture lv0 = R.call_tir(cls.linear0, (x, w0, b0), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv1 = R.call_dps_packed(\u0026#34;env.relu\u0026#34;, (lv0,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) out = R.call_dps_packed(\u0026#34;env.linear\u0026#34;, (lv1, w1, b1), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(out) return out Bind Parameters to IRModule 之前都是通过显示传递参数给 vm[\u0026quot;main\u0026quot;]函数来调用，我们也可以将参数当作常熟与IRModule进行绑定。\nmetadata[\u0026quot;relax.expr.Constant\u0026quot;]对应的是存储常量的隐式字典（虽然没有显示在脚本中，但仍是 IRModule 的一部分）。构建了转换后的 IRModule，现在只需输入数据就可以调用函数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 MyModuleWithParams = relax.transform.BindParams(\u0026#34;main\u0026#34;, nd_params)(MyModuleMixture) MyModuleWithParams.show() #------------------------------------- @I.ir_module class Module: @T.prim_func def linear0(X: T.Buffer((1, 784), \u0026#34;float32\u0026#34;), W: T.Buffer((128, 784), \u0026#34;float32\u0026#34;), B: T.Buffer((128,), \u0026#34;float32\u0026#34;), Z: T.Buffer((1, 128), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): Y = T.alloc_buffer((1, 128)) for i, j, k in T.grid(1, 128, 784): with T.block(\u0026#34;Y\u0026#34;): vi, vj, vk = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) T.reads(X[vi, vk], W[vj, vk]) T.writes(Y[vi, vj]) with T.init(): Y[vi, vj] = T.float32(0.0) Y[vi, vj] = Y[vi, vj] + X[vi, vk] * W[vj, vk] for i, j in T.grid(1, 128): with T.block(\u0026#34;Z\u0026#34;): vi, vj = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(Y[vi, vj], B[vj]) T.writes(Z[vi, vj]) Z[vi, vj] = Y[vi, vj] + B[vj] @R.function def main(x: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv0 = R.call_tir(cls.linear0, (x, metadata[\u0026#34;relax.expr.Constant\u0026#34;][0], metadata[\u0026#34;relax.expr.Constant\u0026#34;][1]), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv1 = R.call_dps_packed(\u0026#34;env.relu\u0026#34;, (lv0,), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) out = R.call_dps_packed(\u0026#34;env.linear\u0026#34;, (lv1, metadata[\u0026#34;relax.expr.Constant\u0026#34;][2], metadata[\u0026#34;relax.expr.Constant\u0026#34;][3]), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) R.output(out) return out ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch3/","summary":"Personal notebook 3.","title":"TVM Learning (4)-End to End Model Execution"},{"content":"LoopRV \u0026amp; BlockRV Object Schedule要操作的对象主要就是LoopRV和BlockRV，对应于我们TVMScript中的循环变量和计算块部分。下面代码为在 TVM 中注册 LoopRV 的自定义对象类型的过程，并通过 FFI（Foreign Function Interface）机制将 C++ 中的函数暴露给 Python.\n注册过程解析：\n定义类: 首先，定义一个名为 LoopRV 的类，它继承自 tvm.Object 类。这个类表示一个与循环相关的随机变量。 使用 @_register_object 装饰器: LoopRV 类使用 @_register_object(\u0026quot;tir.LoopRV\u0026quot;) 装饰器进行注册。这个装饰器会调用 register_object 函数，将 LoopRV 类注册到 TVM 的对象系统中，并使用类型键 \u0026ldquo;tir.LoopRV\u0026rdquo; 来标识它。 FFI 初始化: tvm._ffi._init_api(\u0026quot;tir.schedule\u0026quot;, __name__) 这行代码使用 _init_api 函数初始化 FFI，将 C++ 中的 \u0026ldquo;tir.schedule\u0026rdquo; 模块的函数暴露给 Python。 _init_api 和 _init_api_prefix 函数: _init_api 函数用于初始化 FFI，它会调用 _init_api_prefix 函数来处理具体的函数注册过程。 函数注册: _init_api_prefix 函数会遍历所有 C++ 中的全局函数，找到以 \u0026ldquo;tir.schedule\u0026rdquo; 开头的函数，并将其注册到 Python 中。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @_register_object(\u0026#34;tir.LoopRV\u0026#34;) class LoopRV(Object): \u0026#34;\u0026#34;\u0026#34;A random variable that refers to a loop\u0026#34;\u0026#34;\u0026#34; def __init__(self) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;Construct a new LoopRV.\u0026#34;\u0026#34;\u0026#34; self.__init_handle_by_constructor__( _ffi_api.LoopRV # type: ignore # pylint: disable=no-member ) \u0026#34;\u0026#34;\u0026#34;FFI APIs for tvm.tir.schedule\u0026#34;\u0026#34;\u0026#34; import tvm._ffi tvm._ffi._init_api(\u0026#34;tir.schedule\u0026#34;, __name__) # pylint: disable=protected-access _register_object 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def register_object(type_key=None): def register(cls): \u0026#34;\u0026#34;\u0026#34;internal register function\u0026#34;\u0026#34;\u0026#34; if hasattr(cls, \u0026#34;_type_index\u0026#34;): tindex = cls._type_index else: tidx = ctypes.c_uint() if not _RUNTIME_ONLY: check_call(_LIB.TVMObjectTypeKey2Index(c_str(object_name), ctypes.byref(tidx))) else: # directly skip unknown objects during runtime. ret = _LIB.TVMObjectTypeKey2Index(c_str(object_name), ctypes.byref(tidx)) if ret != 0: return cls tindex = tidx.value _register_object(tindex, cls) return cls if isinstance(type_key, str): return register return register(type_key) 装饰器功能:\n注册对象类型: 装饰器 register_object 的主要作用是将一个类注册到 TVM 的对象系统中，以便 TVM 能够识别和使用该类。 类型键: 装饰器接受一个可选参数 type_key，用于指定该对象的类型键。类型键是一个字符串，用于唯一标识该对象类型。如果 type_key 未指定，则使用类的名称作为类型键。 内部注册函数: 装饰器内部定义了一个名为 register 的函数，该函数负责实际的注册操作。 注册过程: 获取类型索引: register 函数首先获取该类型的索引，如果该类型已经注册，则直接获取已有的索引；否则，调用 TVM 的 C API 函数 TVMObjectTypeKey2Index 获取新的索引。 注册对象: register 函数使用 _register_object 函数将类型索引和类对象注册到 TVM 的对象系统中。 BlockRV类的定义同理。\n1 2 3 4 5 6 7 8 9 @_register_object(\u0026#34;tir.BlockRV\u0026#34;) class BlockRV(Object): \u0026#34;\u0026#34;\u0026#34;A random variable that refers to a block\u0026#34;\u0026#34;\u0026#34; def __init__(self) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;Construct a new BlockRV.\u0026#34;\u0026#34;\u0026#34; self.__init_handle_by_constructor__( _ffi_api.BlockRV # type: ignore # pylint: disable=no-member ) Schedule Primitive Schedule是一组改变了计算的顺序，但保留了计算的语义的变换。它的构造函数需要一个 IRModule实例作为参数。我们以下面的矩阵的 element-wise乘法为例来介绍以下可能的变换。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import tvm from tvm import te import numpy as np # Declare some variables for use later n = te.var(\u0026#34;n\u0026#34;) m = te.var(\u0026#34;m\u0026#34;) # Declare a matrix element-wise multiply A = te.placeholder((m, n), name=\u0026#34;A\u0026#34;) B = te.placeholder((m, n), name=\u0026#34;B\u0026#34;) C = te.compute((m, n), lambda i, j: A[i, j] * B[i, j], name=\u0026#34;C\u0026#34;) print(type(A)) s = te.create_schedule([C.op]) # lower 将计算从定义转换成可以调用的IRModule tvm.lower(s, [A, B, C], simple_mode=True).show() tvm.lower tvm.lower 函数是 TVM 中用于将计算图（Compute Graph）降低（lower）到更低级别的表示形式，例如 Relay IR 或 TensorIR ，该函数会返回一个IRModule.\n参数解释:\ninp: 输入参数，可以是以下三种类型之一：tvm.te.schedule.Schedule 对象：表示计算图的调度信息。\ntvm.tir.PrimFunc 对象：表示 TensorIR 的主函数。\nIRModule 对象：表示一个包含多个函数的模块。\nargs: 可选参数，表示输入张量的列表，仅在 inp 是 tvm.te.schedule.Schedule 对象时使用。\nname: 可选参数，表示生成的函数的名称，默认为 \u0026ldquo;main\u0026rdquo;。\nbinds: 可选参数，表示一个字典，用于指定输入张量的绑定，仅在 inp 是 tvm.te.schedule.Schedule 对象时使用。\nsimple_mode: 可选参数，表示是否使用简化的模式，默认为 False。\n上述代码生成的TensorIR如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # from tvm.script import ir as I # from tvm.script import tir as T @I.ir_module class Module: @T.prim_func def main(A: T.handle, B: T.handle, C: T.handle): T.func_attr({\u0026#34;from_legacy_te_schedule\u0026#34;: T.bool(True), \u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A_1 = T.match_buffer(A, (m, n), strides=(\u0026#34;stride\u0026#34;, \u0026#34;stride\u0026#34;), buffer_type=\u0026#34;auto\u0026#34;) B_1 = T.match_buffer(B, (m, n), strides=(\u0026#34;stride\u0026#34;, \u0026#34;stride\u0026#34;), buffer_type=\u0026#34;auto\u0026#34;) C_1 = T.match_buffer(C, (m, n), strides=(\u0026#34;stride\u0026#34;, \u0026#34;stride\u0026#34;), buffer_type=\u0026#34;auto\u0026#34;) for i, j in T.grid(m, n): C_2 = T.Buffer((C_1.strides[0] * m,), data=C_1.data, buffer_type=\u0026#34;auto\u0026#34;) A_2 = T.Buffer((A_1.strides[0] * m,), data=A_1.data, buffer_type=\u0026#34;auto\u0026#34;) B_2 = T.Buffer((B_1.strides[0] * m,), data=B_1.data, buffer_type=\u0026#34;auto\u0026#34;) C_2[i * C_1.strides[0] + j * C_1.strides[1]] = A_2[i * A_1.strides[0] + j * A_1.strides[1]] * B_2[i * B_1.strides[0] + j * B_1.strides[1]] Merge Fuse fuse 方法用于将一组连续的循环合并成一个循环。合并后的循环将包含所有原始循环的迭代空间。\n限制条件:\n循环不能包含任何注解或线程绑定，例如 @T.pragma 或 @T.thread_binding 循环必须是连续的，也就是说，每个循环的父循环必须是前一个循环。 循环的起始值必须为 0 每个循环的域不能依赖于其他要合并的循环。 参数:\nloops: 一个循环列表，表示要合并的循环。 preserve_unit_iters: 一个布尔值，表示是否保留单位迭代的循环。默认值为 True，表示保留单位迭代的循环。 返回值:\nfused_loop: 一个新的循环对象，表示合并后的循环。 以 B[i, j]=A[i, j]*2为例，fuse 前对应的TensorIR\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 A = te.placeholder((m, n), name=\u0026#34;A\u0026#34;) B = te.compute((m, n), lambda i, j: A[i, j] * 2, name=\u0026#34;B\u0026#34;) func = te.create_prim_func([A, B]) func = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) ir_module = IRModule({\u0026#34;main\u0026#34;: func}) ir_module.show() #----------TensorIR Before Fuse-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) B = T.match_buffer(var_B, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i, j in T.grid(m, n): with T.block(\u0026#34;B\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) fuse 后对应的TensorIR如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 sch = tvm.tir.Schedule(ir_module) block_B = sch.get_block(\u0026#34;B\u0026#34;) i, j= sch.get_loops(block_B) sch.fuse(i, j) sch.mod.show() #----------TensorIR After Fuse-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) B = T.match_buffer(var_B, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i_j_fused in range(m * n): with T.block(\u0026#34;B\u0026#34;): v_i = T.axis.spatial(m, i_j_fused % (n * m) // n) v_j = T.axis.spatial(n, i_j_fused % n) T.reads(A[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) Split split 方法将一个循环拆分成多个连续的循环，每个循环的迭代次数由 factors 参数指定。\n限制条件:\n要拆分的循环不能有任何注解 (annotation) 或线程绑定 (thread binding). 要拆分的循环必须从 0 开始迭代。 在 factors 列表中，最多只能有一个元素为 None，表示该元素的迭代次数将自动推断。 参数:\nloop: 要拆分的循环对象。 factors: 一个列表，表示拆分后的每个循环的迭代次数。列表中的元素可以是整数、表达式或 None。如果列表中包含 None，则该元素的迭代次数将自动推断。 preserve_unit_iters: 一个布尔值，表示是否保留单位迭代器。如果设置为 True，则会保留单位迭代器，否则会将单位迭代器合并到其他循环中。 disable_predication: 一个布尔值，表示是否禁用谓词 (predicate). 如果设置为 True，则不会创建谓词来保护循环。 以 B[i]=A[i]*2为例，split前对应的TensorIR\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 A = te.placeholder((m, ), name=\u0026#34;A\u0026#34;) B = te.compute((m, ), lambda i: A[i] * 2, name=\u0026#34;B\u0026#34;) s = te.create_schedule(B.op) func = te.create_prim_func([A, B]) func = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) ir_module = IRModule({\u0026#34;main\u0026#34;: func}) ir_module.show() #----------TensorIR Before Split-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m = T.int32() A = T.match_buffer(var_A, (m,)) B = T.match_buffer(var_B, (m,)) # with T.block(\u0026#34;root\u0026#34;): for i in range(m): with T.block(\u0026#34;B\u0026#34;): v_i = T.axis.spatial(m, i) T.reads(A[v_i]) T.writes(B[v_i]) B[v_i] = A[v_i] * T.float32(2.0) split 后对应的TensorIR如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 sch = tvm.tir.Schedule(ir_module) block_b = sch.get_block(\u0026#34;B\u0026#34;) i, = sch.get_loops(block_b) sch.split(i, factors=[None, 32]) sch.mod.show() #----------TensorIR After Split-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m = T.int32() A = T.match_buffer(var_A, (m,)) B = T.match_buffer(var_B, (m,)) # with T.block(\u0026#34;root\u0026#34;): for i_0, i_1 in T.grid((m + 31) // 32, 32): with T.block(\u0026#34;B\u0026#34;): v_i = T.axis.spatial(m, i_0 * 32 + i_1) T.where(i_0 * 32 + i_1 \u0026lt; m) T.reads(A[v_i]) T.writes(B[v_i]) B[v_i] = A[v_i] * T.float32(2.0) Loop Partition loop_partition 方法用于将一个循环分割成多个连续的循环\n限制条件:\n循环不能有注解或线程绑定。 factors 列表中最多只能有一个元素为 None 不支持循环的值未知的情况。 参数:\nloop: 要分割的循环。 factors: 分割因子列表。 preserve_unit_iters: 是否保留单位迭代的循环，默认值为 True。 仍以 B[i, j]=A[i, j]*2为例，loop_partition前对应的TensorIR\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 m = 128 n = 128 A = te.placeholder((m, n), name=\u0026#34;A\u0026#34;) B = te.compute((m, n), lambda i, j: A[i, j] * 2, name=\u0026#34;B\u0026#34;) func = te.create_prim_func([A, B]) func = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) ir_module = IRModule({\u0026#34;main\u0026#34;: func}) ir_module.show() #----------TensorIR Before Loop Partition-------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((128,), \u0026#34;float32\u0026#34;), B: T.Buffer((128,), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i in range(128): with T.block(\u0026#34;B\u0026#34;): v_i = T.axis.spatial(128, i) T.reads(A[v_i]) T.writes(B[v_i]) B[v_i] = A[v_i] * T.float32(2.0) 我们指定 factors=[2,64]，相当于把整个循环在2和64处分成3份，loop_partition后对应的TensorIR如下。在使用 loop_partition 后，会创建多个嵌套的块，例如 root、B_i_common 以及每个分割后的循环对应的块，前两个块中会执行一个空的 T.reads 和 T.writes 操作。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 sch = tvm.tir.Schedule(ir_module) block_B = sch.get_block(\u0026#34;B\u0026#34;) [i] = sch.get_loops(block_B) # return a list of LoopRV sch.loop_partition(i, [2, 64]) sch.mod.show() #----------TensorIR After Loop Partition-------------- @I.ir_module class Module: @T.prim_func def main(A: T.Buffer((128,), \u0026#34;float32\u0026#34;), B: T.Buffer((128,), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) with T.block(\u0026#34;root\u0026#34;): T.reads() T.writes() with T.block(\u0026#34;B_i_common\u0026#34;): T.reads() T.writes() with T.block(\u0026#34;B_i0_partition\u0026#34;): T.reads() T.writes() for i0 in range(2): with T.block(\u0026#34;B_i0\u0026#34;): v_i = T.axis.spatial(2, i0) T.reads(A[0:2]) T.writes(B[0:2]) B[v_i] = A[v_i] * T.float32(2.0) with T.block(\u0026#34;B_i1_partition\u0026#34;): T.reads() T.writes() for i1 in range(2, 66): with T.block(\u0026#34;B_i1\u0026#34;): v_i = T.axis.spatial((2, 66), i1) T.reads(A[2:66]) T.writes(B[2:66]) B[v_i] = A[v_i] * T.float32(2.0) with T.block(\u0026#34;B_i2_partition\u0026#34;): T.reads() T.writes() for i2 in range(66, 128): with T.block(\u0026#34;B_i2\u0026#34;): v_i = T.axis.spatial((66, 128), i2) T.reads(A[66:128]) T.writes(B[66:128]) B[v_i] = A[v_i] * T.float32(2.0) Reorder reorder 方法用于重新排列循环的执行顺序。\n限制条件:\n所有循环必须属于同一个循环链，这意味着它们可以按照祖先-后代关系排序，并且它们之间只有单分支循环（即没有 if 语句）。 外层循环的范围不能依赖于内层循环。 每个循环嵌套下的块绑定必须是仿射的，并且块变量必须都为数据并行或归约。 ordered_loops 中不能包含重复的循环。 参数:\nordered_loops: 一个或多个循环列表，表示新的循环执行顺序。 reorder_block_iter_var 方法的功能与reorder相同，只不过它接收的参数为\nblock: 待进行变换的BlockRV对象 new_order: 整数列表，代表该block新的迭代顺序 前面章节已给出很多例子，这里不再赘述。\nParallel parallel方法将一个循环 loopRV 标记为并行执行，即循环的迭代可以同时在多个线程或处理器上执行，从而提高计算效率。\n限制条件:\n为了确保并行化操作的正确性和有效性，该函数需要满足以下条件：\n循环所在的块必须具有阶段流水线属性。这意味着该块中的计算可以被分解成多个阶段，每个阶段可以独立执行。 循环下的所有块必须是完整块或归约块，并且具有仿射绑定。 对于循环下的每个块，循环只能包含在数据并行块迭代的绑定中。 参数:\nloop: 要并行化的循环。 以下面的矩阵的 element-wise乘法为例，parallel前对应的TensorIR为\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 A = te.placeholder((m, n), name=\u0026#34;A\u0026#34;) B = te.placeholder((m, n), name=\u0026#34;B\u0026#34;) C = te.compute((m, n), lambda i, j: A[i, j] * B[i, j], name=\u0026#34;C\u0026#34;) func = te.create_prim_func([A, B, C]) func = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) ir_module = IRModule({\u0026#34;main\u0026#34;: func}) ir_module.show() #----------TensorIR Before Parallel-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) B = T.match_buffer(var_B, (m, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i, j in T.grid(m, n): with T.block(\u0026#34;C\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j], B[v_i, v_j]) T.writes(C[v_i, v_j]) C[v_i, v_j] = A[v_i, v_j] * B[v_i, v_j] 对外循环进行parallel，可以看到 T.parallel取代了之前的 T.grid，它会将所有迭代分配到多个线程或处理器上同时执行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 sch = tvm.tir.Schedule(ir_module) block_c = sch.get_block(\u0026#34;C\u0026#34;) i, j = sch.get_loops(block_c) sch.parallel(i) sch.mod.show() #----------TensorIR After Parallel-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) B = T.match_buffer(var_B, (m, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i, j in T.grid(m, n): with T.block(\u0026#34;C\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j], B[v_i, v_j]) T.writes(C[v_i, v_j]) C[v_i, v_j] = A[v_i, v_j] * B[v_i, v_j] Vectorize vectorize方法将一个循环 loop 标记为向量化执行，这意味着循环的迭代可以被分组为向量，然后在单个指令中执行，从而提高计算效率。\n限制条件:\n循环所在的块必须具有阶段流水线属性，即该块中的计算可以被分解成多个阶段，每个阶段可以独立执行。 循环下的所有块必须是完整块或归约块，并且具有仿射绑定。 对于循环下的每个块，循环只能包含在数据并行块迭代的绑定中。 参数:\nloop: 要向量化的循环。 仍以 B[i, j]=A[i, j]*2为例，loop_partition前对应的TensorIR与 Loop Partition 中的相同。\nVectorize 是一种重要的优化技术，它利用现代处理器中的 SIMD (Single Instruction, Multiple Data)指令，将多个数据同时进行计算，从而提升计算效率。SIMD 指令使用向量寄存器来存储和操作多个数据。向量寄存器的长度通常是 128 位或 256 位，可以存储多个数据。例如，一个 SIMD 指令可以同时对 4 个浮点数进行加法运算。将循环向量化意味着将循环的迭代分组为向量，然后使用 SIMD 指令对这些向量进行操作。T.vectorized 在 TVM 中用来标记一个循环已经被向量化了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 sch = tvm.tir.Schedule(ir_module) block_b = sch.get_block(\u0026#34;B\u0026#34;) i, j = sch.get_loops(block_b) sch.vectorize(j) sch.mod.show() #----------TensorIR After Vectorize-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) B = T.match_buffer(var_B, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i in range(m): for j in T.vectorized(n): with T.block(\u0026#34;B\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) Unroll unroll 函数接收一个 LoopRV (循环表示变量) 作为输入，作用是将一个循环展开。它本质上是将循环体复制多次，并将循环计数器替换为具体的数值。有以下几个优点\n减少循环控制指令的执行次数，从而提高效率。 将循环体中的数据访问集中在一起，从而提高数据局部性，进而提高缓存命中率。 增加指令级并行性，从而提高程序执行速度。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 sch = tvm.tir.Schedule(ir_module) block_b = sch.get_block(\u0026#34;B\u0026#34;) i, j = sch.get_loops(block_b) sch.unroll(i) sch.mod.show() #----------TensorIR After Vectorize-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) B = T.match_buffer(var_B, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i in T.unroll(m): for j in range(n): with T.block(\u0026#34;B\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) (Reverse) Compute at compute_at方法的作用是将一个生产者块（producer block）移动到一个特定循环（loop）的内部，并重新生成由该生产者块引起的循环，以确保生产者块生成的缓冲区区域能够覆盖其消费者块在该循环下所使用的区域。reverse_compute_at则是移动消费者块（consumer block）\n生产者块（producer block）： 生成数据（通常是缓冲区）的代码块。 消费者块（consumer block）： 使用生产者块生成的数据的代码块。 限制条件：\nblock 和 loop 必须在同一个作用域内。 不能将 block移动到它自身所在的循环的祖先循环中。 作用域块必须具有阶段-流水线属性。 作用域块的子树必须满足紧凑数据流条件，即子树中的所有块必须是完整块或归约块。 块不是作用域块的输出块，即块写入的缓冲区在作用域块下分配。 块的所有消费者都在给定的循环下。 我们以 C[i,j]=A[i,j] * 2 + 1为例，compute_at前对应的TesnsorIR如下\nWarning\n我们在创建 prim_func时的输入只使用了 A, C，否则B就不会是作为中间变量的 T.alloc_buffer，调用 compute_at会因为违反第五条报错。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 A = te.placeholder((m, n), name=\u0026#34;A\u0026#34;) B = te.compute((m, n), lambda i, j: A[i, j] * 2, name=\u0026#34;B\u0026#34;) C = te.compute((m, n), lambda i, j: B[i, j] + 1, name=\u0026#34;C\u0026#34;) func = te.create_prim_func([A, C]) fuc = func.with_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;}) ir_module = IRModule({\u0026#34;main\u0026#34;: func}) ir_module.show() #----------TensorIR Before Compute_at-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): B = T.alloc_buffer((m, n)) for i, j in T.grid(m, n): with T.block(\u0026#34;B\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) for i, j in T.grid(m, n): with T.block(\u0026#34;C\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(B[v_i, v_j]) T.writes(C[v_i, v_j]) C[v_i, v_j] = B[v_i, v_j] + T.float32(1.0) 在调用 compute_at之后块B的计算被移动到块C的循环i之下，相当于调用 reverse_compute_at将块C的计算移动到块B的循环i之下，对应的TesnorIR如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 sch = tvm.tir.Schedule(ir_module) block = sch.get_block(\u0026#34;B\u0026#34;) loop, _ = sch.get_loops(sch.get_block(\u0026#34;C\u0026#34;)) sch.compute_at(block, loop, preserve_unit_loops=False) \u0026#39;\u0026#39;\u0026#39; same way block = sch.get_block(\u0026#34;C\u0026#34;) loop, _ = sch.get_loops(sch.get_block(\u0026#34;B\u0026#34;)) sch.reverse_compute_at(block, loop, preserve_unit_loops=False) \u0026#39;\u0026#39;\u0026#39; sch.mod.show() #----------TensorIR After Compute_at-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): B = T.alloc_buffer((m, n)) for i in range(m): for ax0 in range(n): with T.block(\u0026#34;B\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, ax0]) T.reads(A[v_i, v_j]) T.writes(B[v_i, v_j]) B[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) for j in range(n): with T.block(\u0026#34;C\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(B[v_i, v_j]) T.writes(C[v_i, v_j]) C[v_i, v_j] = B[v_i, v_j] + T.float32(1.0) (Reverse) Compute Inline compute_inline 方法用于将一个块（block）内联到其消费者（consumer）中。简单来说就是将一个块的计算逻辑直接嵌入到使用它结果的块中，从而消除中间块，简化计算流程。reverse_compute_inline则是用于将一个块（block）内联到其生产者（producer）中。\n限制条件：\n要内联的块必须是一个完整的非根块（root 块），并且它必须只产生一个缓冲区。 要内联的块不能是其作用域内的唯一叶节点。 要内联的块的代码体必须是一个缓冲区存储语句，例如 A[i, j, k, ...] = ...。该语句的左侧索引必须是不同的原子变量，并且语句中不能包含其他变量。 以上一节的 C[i,j]=A[i,j] * 2 + 1为例，对应的TensorIR已给出。在执行Compute_inline之后块B的计算逻辑直接嵌入到块C中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 sch = tvm.tir.Schedule(ir_module) block = sch.get_block(\u0026#34;B\u0026#34;) # same: sch.reverse_compute_inline(sch.get_block(\u0026#34;C\u0026#34;)) sch.compute_inline(block) sch.mod.show() #----------TensorIR After Compute_inline-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, n = T.int32(), T.int32() A = T.match_buffer(var_A, (m, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i, j in T.grid(m, n): with T.block(\u0026#34;C\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i, j]) T.reads(A[v_i, v_j]) T.writes(C[v_i, v_j]) C[v_i, v_j] = A[v_i, v_j] * T.float32(2.0) + T.float32(1.0) Decompose Reduction decompose_reduction 函数用于将一个归约块（reduction block）分解成两个独立的块初始化块（init block）和更新块（update block）\nNote\n初始化块（init block）： 从归约块的初始化语句（init statement）转换而来。 更新块（update block）： 原始的归约块，但去掉了初始化语句。 限制条件：\n要分解的块必须是一个归约块。 指定的循环必须是归约块的祖先循环。 指定的循环不能低于与归约块变量相关的所有循环。 以矩阵乘法 C = A @ B为例，decompose_reduction前的TensorIR为\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 l = te.var(\u0026#34;l\u0026#34;) A = te.placeholder((m, l), name=\u0026#34;A\u0026#34;) B = te.placeholder((l, n), name=\u0026#34;B\u0026#34;) k = te.reduce_axis((0, l), name=\u0026#34;l\u0026#34;) C = te.compute((m, n), lambda i, j: te.sum(A[i, k] * B[k, j], axis=k), name=\u0026#34;C\u0026#34;) #----------TensorIR Before Decompose Reduction-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, l = T.int32(), T.int32() A = T.match_buffer(var_A, (m, l)) n = T.int32() B = T.match_buffer(var_B, (l, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i, j, l_1 in T.grid(m, n, l): with T.block(\u0026#34;C\u0026#34;): v_i, v_j, v_l = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, l_1]) T.reads(A[v_i, v_l], B[v_l, v_j]) T.writes(C[v_i, v_j]) with T.init(): C[v_i, v_j] = T.float32(0.0) C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_l] * B[v_l, v_j] 调用 decompose_reduction 方法后将块 C 分解成一个初始化块和一个更新块，并将初始化块插入到 i 循环之前，对应的TensorIR如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 sch = tvm.tir.Schedule(ir_module) block_c = sch.get_block(\u0026#34;C\u0026#34;) i, j, k = sch.get_loops(block_c) sch.decompose_reduction(block_c, i) sch.mod.show() #----------TensorIR After Decompose Reduction-------------- @I.ir_module class Module: @T.prim_func def main(var_A: T.handle, var_B: T.handle, var_C: T.handle): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) m, l = T.int32(), T.int32() A = T.match_buffer(var_A, (m, l)) n = T.int32() B = T.match_buffer(var_B, (l, n)) C = T.match_buffer(var_C, (m, n)) # with T.block(\u0026#34;root\u0026#34;): for i_init, j_init in T.grid(m, n): with T.block(\u0026#34;C_init\u0026#34;): v_i, v_j = T.axis.remap(\u0026#34;SS\u0026#34;, [i_init, j_init]) T.reads() T.writes(C[v_i, v_j]) C[v_i, v_j] = T.float32(0.0) for i, j, l_1 in T.grid(m, n, l): with T.block(\u0026#34;C_update\u0026#34;): v_i, v_j, v_l = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, l_1]) T.reads(C[v_i, v_j], A[v_i, v_l], B[v_l, v_j]) T.writes(C[v_i, v_j]) ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tcm-ch10/","summary":"Personal notebook 3.","title":"TVM Learning (3)-Schedule Analysis"},{"content":"Primitive Tensor Function 机器学习编译的过程可以被看作张量函数之间的变换。一个典型的机器学习模型的执行包含许多步将输入张量之间转化为最终预测的计算步骤，其中的每一步都被称为元张量函数 (Primitive Tensor Function) Primitive Tensor Function\n通常来说，一个典型的元张量函数实现的抽象包含了以下成分：存储数据的多维数组，驱动张量计算的循环嵌套以及计算部分本身的语句。下图以上一篇中的向量加法为例子进行了分解。 Tensor Function Elements\n我们称这类抽象为张量程序抽象(Tensor Program Abstraction). 张量程序抽象的一个重要性质是，他们能够被一系列有效的程序变换所改变。例如，我们能够通过一组变换操作（如循环拆分、并行和向量化）将下图左侧的一个初始循环程序变换为右侧的程序。 Tensor Function Transforms\nLearning one Tensor Program Abstraction \u0026ndash; TensorIR 我们对于神经网络的一个基本的 Linear+ReLU 层可以用以下的数学公式表示\n$Y_{ij} = \\sum_k A_{ik} B_{kj}$ $C_{ij} = \\mathbb{ReLU}(Y_{ij}) = \\mathbb{max}(Y_{ij}, 0)$ 其Numpy实现如下，下面的代码直接调用了Numpy的高级API，看起来非常简洁。\n1 2 3 4 5 dtype = \u0026#34;float32\u0026#34; a_np = np.random.rand(128, 128).astype(dtype) b_np = np.random.rand(128, 128).astype(dtype) # a @ b is equivalent to np.matmul(a, b) c_mm_relu = np.maximum(a_np @ b_np, 0) 我们可以将上述程序改写成Low-level Numpy，意味着对于复杂的计算我们使用循环进行表示，并且写出开辟数组空间的过程。\n1 2 3 4 5 6 7 8 9 10 11 def lnumpy_mm_relu(A: np.ndarray, B: np.ndarray, C: np.ndarray): Y = np.empty((128, 128), dtype=\u0026#34;float32\u0026#34;) for i in range(128): for j in range(128): for k in range(128): if k == 0: Y[i, j] = 0 Y[i, j] = Y[i, j] + A[i, k] * B[k, j] for i in range(128): for j in range(128): C[i, j] = max(Y[i, j], 0) 该函数执行以下操作：\n矩阵乘法： 将两个矩阵 A 和 B 相乘，并将结果存储在 Y 中。 ReLU 激活： 将 ReLU 激活函数应用于 Y 的元素，并将结果存储在 C 中。 可以用以下代码来检查上述实现的正确性：\n1 2 3 c_np = np.empty((128, 128), dtype=dtype) lnumpy_mm_relu(a_np, b_np, c_np) np.testing.assert_allclose(c_mm_relu, c_np, rtol=1e-5) 示例 numpy 代码包含了实际过程中实现这些计算时可能会用到的所有元素，用Numpy函数内部工作机制 (Under the Hood) 实现了MM-ReLU。\n开辟多维数组空间。 循环遍历数组的维度。 计算在循环内执行。 我们也可以用上一节的TensorIR来实现，TVMScript 是嵌入在 Python AST 中的领域特定语言的 Dialect, 它本质上是 Python 的一个子集，但添加了一些特定于 TVM 的扩展，例如用于描述计算图的特殊语法和语义。\nDialect 通常指一种语言的变体或子集，它与原始语言共享大部分语法和语义，但也有一些独特的特征。 抽象语法树 (AST) 是源代码的树状表示形式。它将代码的结构以一种层次化的方式呈现，每个节点代表代码中的一个语法元素，例如变量、运算符、函数调用等。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @tvm.script.ir_module class MyModule: @T.prim_func def mm_relu(A: T.Buffer[(128, 128), \u0026#34;float32\u0026#34;], B: T.Buffer[(128, 128), \u0026#34;float32\u0026#34;], C: T.Buffer[(128, 128), \u0026#34;float32\u0026#34;]): T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;mm_relu\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) Y = T.alloc_buffer((128, 128), dtype=\u0026#34;float32\u0026#34;) for i, j, k in T.grid(128, 128, 128): with T.block(\u0026#34;Y\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j) vk = T.axis.reduce(128, k) with T.init(): Y[vi, vj] = T.float32(0) Y[vi, vj] = Y[vi, vj] + A[vi, vk] * B[vk, vj] for i, j in T.grid(128, 128): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j) C[vi, vj] = T.max(Y[vi, vj], T.float32(0)) 上述 TensorIR 程序的一个示例实例涵盖了大部分内容，包括\n参数和中间临时内存中的缓冲区声明。 For 循环迭代。 Block 和 Block Axis属性。 Transformation TVM 的 tvm.tir.Schedule 提供了一系列用于调度和优化计算图的变换函数。这些函数允许用户灵活地调整计算顺序、内存访问模式和并行化策略，以提高模型的性能。\n我们可以用以下函数获得计算块和其对应的循环\n1 2 block_Y = sch.get_block(\u0026#34;Y\u0026#34;, func_name=\u0026#34;mm_relu\u0026#34;) i, j, k = sch.get_loops(block_Y) 我们可以使用 split函数将一个循环拆成多个循环，用 reorder函数交换循环的顺序，用 reverse_compute_at 函数移动计算块所在的循环，用 decompose_reduction函数将初始化和归约操作分开。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 j0, j1 = sch.split(j, factors=[None, 4]) sch.reorder(j0, k, j1) block_C = sch.get_block(\u0026#34;C\u0026#34;, \u0026#34;mm_relu\u0026#34;) sch.reverse_compute_at(block_C, j0) block_Y = sch.get_block(\u0026#34;Y\u0026#34;, \u0026#34;mm_relu\u0026#34;) sch.decompose_reduction(block_Y, k) sch.mod.show() # Output @tvm.script.ir_module class Module: @T.prim_func def mm_relu(A: T.Buffer[(128, 128), \u0026#34;float32\u0026#34;], B: T.Buffer[(128, 128), \u0026#34;float32\u0026#34;], C: T.Buffer[(128, 128), \u0026#34;float32\u0026#34;]) -\u0026gt; None: # function attr dict T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;mm_relu\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) # body # with T.block(\u0026#34;root\u0026#34;) Y = T.alloc_buffer([128, 128], dtype=\u0026#34;float32\u0026#34;) for i, j_0 in T.grid(128, 32): for j_1_init in T.serial(4): with T.block(\u0026#34;Y_init\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j_0 * 4 + j_1_init) T.reads() T.writes(Y[vi, vj]) Y[vi, vj] = T.float32(0) for k, j_1 in T.grid(128, 4): with T.block(\u0026#34;Y_update\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j_0 * 4 + j_1) vk = T.axis.reduce(128, k) T.reads(Y[vi, vj], A[vi, vk], B[vk, vj]) T.writes(Y[vi, vj]) Y[vi, vj] = Y[vi, vj] + A[vi, vk] * B[vk, vj] for ax0 in T.serial(4): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(128, i) vj = T.axis.spatial(128, j_0 * 4 + ax0) T.reads(Y[vi, vj]) T.writes(C[vi, vj]) C[vi, vj] = T.max(Y[vi, vj], T.float32(0)) 对应的 Low-level Numpy 函数如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def lnumpy_mm_relu_v3(A: np.ndarray, B: np.ndarray, C: np.ndarray): Y = np.empty((128, 128), dtype=\u0026#34;float32\u0026#34;) for i in range(128): for j0 in range(32): # Y_init for j1 in range(4): j = j0 * 4 + j1 Y[i, j] = 0 # Y_update for k in range(128): for j1 in range(4): j = j0 * 4 + j1 Y[i, j] = Y[i, j] + A[i, k] * B[k, j] # C for j1 in range(4): j = j0 * 4 + j1 C[i, j] = max(Y[i, j], 0) Why Do Loop Influence the Exec Time CPU Architecture CPU 带有多级缓存，需要先将数据提取到缓存中，然后 CPU 才能访问它。而且访问已经在缓存中的数据要快得多。CPU 采用的一种策略是获取彼此更接近的数据。 当我们读取内存中的一个元素时，它会尝试将附近的元素（Cache Line）获取到缓存中，当读取下一个元素时它已经在缓存中。 因此，具有连续内存访问的代码通常比随机访问内存不同部分的代码更快。\nLoop Order j1 这一迭代产生了对 B 元素的连续访问。具体来说，它意味着在 j1=0 和 j1=1 时我们读取的值彼此相邻。这可以让我们拥有更好的缓存访问行为。此外，我们使 C 的计算更接近 Y，从而实现更好的缓存行为。\nWays to Create and Interact with TensorIR Create TensorIR via TVMScript 创建 TensorIR 函数的第一种方法是直接在 TVMScript 中编写函数，它也是一种在变换过程中检查张量函数的有用方法。我们可以打印出 TVMScript，进行一些手动编辑，然后将其反馈给 MLC 流程以调试和尝试可能的（手动）变换，然后将变换后的程序重新应用到 MLC 流程中。\nGenerate TensorIR code using Tensor Expression 张量表达式 (TE) 是一种特定领域的语言，它通过 API 之类的表达式描述一系列计算。MM-ReLU 可以通过以下程序完成\n1 2 3 4 5 6 from tvm import te A = te.placeholder((128, 128), \u0026#34;float32\u0026#34;, name=\u0026#34;A\u0026#34;) B = te.placeholder((128, 128), \u0026#34;float32\u0026#34;, name=\u0026#34;B\u0026#34;) k = te.reduce_axis((0, 128), \u0026#34;k\u0026#34;) Y = te.compute((128, 128), lambda i, j: te.sum(A[i, k] * B[k, j], axis=k), name=\u0026#34;Y\u0026#34;) C = te.compute((128, 128), lambda i, j: te.max(Y[i, j], 0), name=\u0026#34;C\u0026#34;) ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch2/","summary":"Personal notebook 2.","title":"TVM Learning (2)-Tensor Program Abstraction Case"},{"content":"My notebook of MLC: https://mlc.ai/summer22-zh\nConstructing Tensor Program by TVMScript 在机器学习编译 (Machine Learning Compilation) 中，Tensor Program 指的是一种表示机器学习模型计算过程的程序，它以张量 (Tensor) 为基本数据单元，并使用张量操作来描述模型的计算步骤。\nVector-Add Example 下面这段代码使用 TVM 的 script 模块定义了一个名为 MyModule 的模块，其中包含一个名为 main 的计算函数。\n该函数实现了简单的向量加法 (vector add) 操作, 两个输入向量 A 和 B 相加，并将结果存储到输出向量 C 中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import tvm from tvm.ir.module import IRModule from tvm.script import tir as T import numpy as np @tvm.script.ir_module class MyModule: @T.prim_func def main(A: T.Buffer[128, \u0026#34;float32\u0026#34;], B: T.Buffer[128, \u0026#34;float32\u0026#34;], C: T.Buffer[128, \u0026#34;float32\u0026#34;]): # extra annotations for the function T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) for i in range(128): with T.block(\u0026#34;C\u0026#34;): # declare a data parallel iterator on spatial domain vi = T.axis.spatial(128, i) C[vi] = A[vi] + B[vi] 1. 模块定义:\n1 2 3 @tvm.script.ir_module class MyModule: # ... @tvm.script.ir_module: 用于将 MyModule 类定义为一个 TVM 的 IRModule 对象。IRModule 是 TVM 中用于表示计算图 (Computation Graph) 的标准数据结构。 class MyModule:: 定义一个名为 MyModule 的类，该类将包含计算函数。 Decorator 在 Python 中，装饰器 (Decorator) 是一种特殊的函数，它可以用来修改其他函数的行为，而无需直接修改被装饰的函数代码。\n1 2 3 4 5 6 7 8 9 10 11 12 def decorator_function(func): def wrapper(*args, **kwargs): # 在调用被装饰的函数之前执行的操作 result = func(*args, **kwargs) # 在调用被装饰的函数之后执行的操作 return result return wrapper @decorator_function def my_function(x, y): # 被装饰的函数 return x + y decorator_function: 装饰器函数，它接收被装饰的函数作为参数，并返回一个包装函数。 wrapper: 包装函数，它在调用被装饰的函数之前和之后执行一些操作。 @decorator_function: 装饰器语法，将 decorator_function 应用到 my_function 上。 装饰器的工作原理:\n当 Python 遇到 @decorator_function 语法时，它会将 my_function 作为参数传递给 decorator_function。 decorator_function 执行，并返回一个包装函数 wrapper。 wrapper 函数将替换 my_function 的原始定义。 当调用 my_function 时，实际上是在调用 wrapper 函数。 2. 计算函数定义:\n1 2 3 4 5 @T.prim_func def main(A: T.Buffer[128, \u0026#34;float32\u0026#34;], B: T.Buffer[128, \u0026#34;float32\u0026#34;], C: T.Buffer[128, \u0026#34;float32\u0026#34;]): # ... @T.prim_func: 这是一个装饰器，用于将 main 函数定义为一个 TVM 的 prim_func 对象。prim_func 是 TVM 中用于表示底层计算函数的标准数据结构。 def main(...): 定义一个名为 main 的函数，该函数接受三个参数： A: 一个长度为 128 的 float32 类型 Buffer，表示第一个输入向量。 B: 一个长度为 128 的 float32 类型 Buffer，表示第二个输入向量。 C: 一个长度为 128 的 float32 类型 Buffer，用于存储计算结果。 3. 函数属性:\n1 T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) T.func_attr({\u0026quot;global_symbol\u0026quot;: \u0026quot;main\u0026quot;, \u0026quot;tir.noalias\u0026quot;: True})： 设置函数的属性。 global_symbol: 设置函数的全局符号名称为 main。 tir.noalias: 设置函数的别名属性为 True，表示函数不会修改输入缓冲区。 4. 计算循环:\n1 2 3 for i inrange(128): with T.block(\u0026#34;C\u0026#34;): # ... T.block 将计算图分解成多个独立的计算块，每个块对应一个特定的计算任务，可以包含多个迭代器，这些迭代器共同定义了计算块的计算范围。\nfor i in range(128): 定义一个循环，迭代 128 次，用于处理每个向量元素。 with T.block(\u0026quot;C\u0026quot;): 定义一个名为 C 的计算块，该块包含循环的计算逻辑。 5. 迭代器定义:\n1 vi = T.axis.spatial(128, i) vi = T.axis.spatial(128, i): 定义一个名为 vi 的空间迭代器，它遍历 128 个元素，每个元素的索引由 i 确定。 一般来说，空间迭代器的访问顺序对最后结果不产生影响。\n6. 计算操作:\n1 C[vi] = A[vi] + B[vi] C[vi] = A[vi] + B[vi]： 将 A 和 B 中对应元素相加，并将结果存储到 C 中。 我们可以通过 MyModule.show() 来显示构建的IRModule.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @tvm.script.ir_module class Module: @T.prim_func def main(A: T.Buffer[128, \u0026#34;float32\u0026#34;], B: T.Buffer[128, \u0026#34;float32\u0026#34;], C: T.Buffer[128, \u0026#34;float32\u0026#34;]) -\u0026gt; None: # function attr dict T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) # body # with T.block(\u0026#34;root\u0026#34;) for i in T.serial(128): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(128, i) T.reads(A[vi], B[vi]) T.writes(C[vi]) C[vi] = A[vi] + B[vi] Build and Run 我们可以通过 tvm.build函数将一个IRModule转变成可以运行的函数，通过定义的函数名可以获取想要的函数。然后我们可以定义三个 NDArray 数组来调用函数。\n1 2 3 4 5 6 rt_mod = tvm.build(MyModule, target=\u0026#34;llvm\u0026#34;) func = rt_mod[\u0026#34;main\u0026#34;] a = tvm.nd.array(np.arange(128, dtype=\u0026#34;float32\u0026#34;)) b = tvm.nd.array(np.ones(128, dtype=\u0026#34;float32\u0026#34;)) c = tvm.nd.empty((128,), dtype=\u0026#34;float32\u0026#34;) func(a, b, c) tvm.build 函数的参数:\nfunc: 要编译的计算图，可以是 tvm.script.ir_module 对象、tvm.relay.Function 对象或其他支持的计算图类型。 target: 目标平台，例如，llvm -mcpu=core-avx2、cuda、opencl 等。 name: 编译后的模块名称。 Transform the Tensor Program 在 TVM 中，tvm.tir.Schedule 是一个用于对计算图进行手动优化的工具。它允许对计算图中的循环、块和操作进行重排序、融合、并行化等操作，以提高计算效率。\n下面这段代码做了以下优化：\n循环切分: 将循环 i 切分成三个循环，可以更好地利用内存局部性，例如，将 i_1 和 i_2 的大小设置为 4，可以将数据加载到缓存中，减少内存访问次数。 循环重排序: 按照 i_0、i_2 和 i_1 这个顺序执行。 并行化: 将 i_0 并行化，可以利用多核 CPU 或 GPU 的计算能力，提高计算速度 1 2 3 4 5 6 7 8 9 10 11 sch = tvm.tir.Schedule(MyModule) # Get block by its name block_c = sch.get_block(\u0026#34;C\u0026#34;) # Get loops surronding the block (i,) = sch.get_loops(block_c) # Tile the loop nesting. i_0, i_1, i_2 = sch.split(i, factors=[None, 4, 4]) # Reorder the loop. sch.reorder(i_0, i_2, i_1) sch.parallel(i_0) sch.mod.show() 优化后的计算图如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @tvm.script.ir_module class Module: @T.prim_func def main(A: T.Buffer[128, \u0026#34;float32\u0026#34;], B: T.Buffer[128, \u0026#34;float32\u0026#34;], C: T.Buffer[128, \u0026#34;float32\u0026#34;]) -\u0026gt; None: # function attr dict T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) # body # with T.block(\u0026#34;root\u0026#34;) for i_0 in T.parallel(8): for i_2, i_1 in T.grid(4, 4): with T.block(\u0026#34;C\u0026#34;): vi = T.axis.spatial(128, i_0 * 16 + i_1 * 4 + i_2) T.reads(A[vi], B[vi]) T.writes(C[vi]) C[vi] = A[vi] + B[vi] Constructing Tensor Program by Tensor Expression Tensor Expression 指的是一种用于描述张量计算的数学表达式。\nConstruct Vector-Add by TE 我们可以通过以下方式来创建和 上一节 一样的IRModule.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # namespace for tensor expression utility from tvm import te # declare the computation using the expression API A = te.placeholder((128, ), name=\u0026#34;A\u0026#34;) B = te.placeholder((128, ), name=\u0026#34;B\u0026#34;) C = te.compute((128,), lambda i: A[i] + B[i], name=\u0026#34;C\u0026#34;) # create a function with the specified list of arguments. func = te.create_prim_func([A, B, C]) # mark that the function name is main func = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) ir_mod_from_te = IRModule({\u0026#34;main\u0026#34;: func}) ir_mod_from_te.show() 定义张量:\nA = te.placeholder((128,), name=\u0026#34;A\u0026#34;) B = te.placeholder((128,), name=\u0026#34;B\u0026#34;) 这两行代码定义了两个名为 A 和 B 的张量，它们都是一维张量，大小为 128。te.placeholder 函数用于创建占位符张量，它代表输入数据。\n定义计算:\nC = te.compute((128,), lambda i: A[i] + B[i], name=\u0026#34;C\u0026#34;) 这行代码定义了一个名为 C 的张量，它表示 A 和 B 的元素相加的结果。te.compute 函数用于定义张量计算，它接受两个参数：\n第一个参数 shape是张量的形状，这里为 (128,)。 第二个参 fcompute数是一个 lambda 函数，它定义了每个元素的计算方式，这里为 A[i] + B[i]，表示 C 的第 i 个元素等于 A 的第 i 个元素加上 B 的第 i 个元素。 创建 PrimFunc:\nfunc = te.create_prim_func([A, B, C]) 这行代码使用 te.create_prim_func 函数创建了一个 PrimFunc 对象，它代表一个 TVM 的基本计算函数。te.create_prim_func 函数接受一个参数，即函数的输入参数列表，这里为 [A, B, C]\n设置函数名称:\nfunc = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) 这行代码将函数的名称设置为 main，with_attr 函数用于设置函数的属性。\n创建 IRModule:\nir_mod_from_te = IRModule({\u0026#34;main\u0026#34;: func}) 这行代码创建了一个 IRModule 对象，它包含了 func 函数，并将该函数存储在 IRModule 的 main 字段中。\nTransforming a matrix multiplication program 下面代码展示了两个 $1024 \\times 1024$ 矩阵相乘的IRModule创建流程。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 M = 1024 K = 1024 N = 1024 # The default tensor type in tvm dtype = \u0026#34;float32\u0026#34; target = \u0026#34;llvm\u0026#34; dev = tvm.device(target, 0) # Algorithm k = te.reduce_axis((0, K), \u0026#34;k\u0026#34;) A = te.placeholder((M, K), name=\u0026#34;A\u0026#34;) B = te.placeholder((K, N), name=\u0026#34;B\u0026#34;) C = te.compute((M, N), lambda m, n: te.sum(A[m, k] * B[k, n], axis=k), name=\u0026#34;C\u0026#34;) # Default schedule func = te.create_prim_func([A, B, C]) func = func.with_attr(\u0026#34;global_symbol\u0026#34;, \u0026#34;main\u0026#34;) ir_module = IRModule({\u0026#34;main\u0026#34;: func}) ir_module.show() func = tvm.build(ir_module, target=\u0026#34;llvm\u0026#34;) # The module for CPU backends. a = tvm.nd.array(np.random.rand(M, K).astype(dtype), dev) b = tvm.nd.array(np.random.rand(K, N).astype(dtype), dev) c = tvm.nd.array(np.zeros((M, N), dtype=dtype), dev) func(a, b, c) # Create evaluation function evaluator = func.time_evaluator(func.entry_name, dev, number=1) print(\u0026#34;Baseline: %f\u0026#34; % evaluator(a, b, c).mean) time_evaluator 是 IRModule 用于评估计算图执行时间的方法。它可以帮助测量不同硬件平台上不同计算图的性能，并进行优化。\ntime evaluator 1 IRModule.time_evaluator(func, args, number=1, repeat=1, min_repeat_ms=0, f_type=0) 参数解释:\nfunc: 要评估的计算图函数。 args: 计算图函数的输入参数，可以是张量或其他数据结构。 number: 每次运行计算图的次数，默认值为 1。 repeat: 重复运行计算图的次数，默认值为 1。 min_repeat_ms: 最小运行时间，单位为毫秒。如果计算图运行时间小于 min_repeat_ms，则会继续运行直到达到 min_repeat_ms。默认值为 0。 f_type: 运行模式，可以是 0（默认值）、1 或 2。 0：正常运行模式。 1：仅执行编译，不运行计算图。 2：仅执行运行，不编译计算图。 func.time_evaluator 的返回值:\nfunc.time_evaluator 返回一个函数，该函数可以用来执行评估并返回一个包含性能指标的字典。\n性能指标:\nmean: 平均运行时间，单位为毫秒。 median: 中位数运行时间，单位为毫秒。 min: 最小运行时间，单位为毫秒。 max: 最大运行时间，单位为毫秒。 std: 标准差，单位为毫秒。 代码的大部分流程相同，我们来看计算部分。\n定义约简轴 (Reduce axis):\nk = te.reduce_axis((0, K), \u0026#34;k\u0026#34;) 这行代码定义了一个名为 k 的约简轴，表示在矩阵乘法操作中进行求和的维度，范围为 (0, K)\n定义输入矩阵 (Placeholders):\nA = te.placeholder((M, K), name=\u0026#34;A\u0026#34;)\rB = te.placeholder((K, N), name=\u0026#34;B\u0026#34;) 这两行代码定义了两个名为 A 和 B 的输入矩阵，它们分别代表矩阵乘法的两个输入矩阵。A 的形状为 (M, K)，B 的形状为 (K, N)\n定义输出矩阵 (Compute):\nC = te.compute((M, N), lambda m, n: te.sum(A[m, k] * B[k, n], axis=k), name=\u0026#34;C\u0026#34;) 这行代码定义了一个名为 C 的输出矩阵，它表示矩阵乘法的结果。C 的形状为 (M, N)，采用 te.sum计算结果。\nte.sum 1 te.sum(expr, axis=None, keepdims=False, where=None) 参数解释:\nexpr: 要进行求和的表达式，可以是张量、标量或其他表达式。 axis: 要进行求和的轴，可以是整数、元组或列表。如果 axis 为 None，则对所有轴进行求和。 keepdims: 布尔值，表示是否保留求和后的维度。如果为 True，则保留求和后的维度，并将其大小设置为 1。如果为 False，则删除求和后的维度。 where: 布尔值张量，表示要进行求和的元素。如果 where 为 None，则对所有元素进行求和。 创建的IRModule如下所示。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @tvm.script.ir_module class Module: @T.prim_func def main(A: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], C: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;]) -\u0026gt; None: # function attr dict T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) # body # with T.block(\u0026#34;root\u0026#34;) for i0, i1, i2 in T.grid(1024, 1024, 1024): with T.block(\u0026#34;C\u0026#34;): m, n, k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, i2]) T.reads(A[m, k], B[k, n]) T.writes(C[m, n]) with T.init(): C[m, n] = T.float32(0) C[m, n] = C[m, n] + A[m, k] * B[k, n] 我们可以将循环拆分成外层循环和内层循环可以提高数据局部性。内层循环访问的数据更接近，可以有效利用缓存。下面代码的 block_size 参数控制了内层循环的大小，选择合适的块大小可以最大程度地利用缓存。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 sch = tvm.tir.Schedule(ir_module) block_c = sch.get_block(\u0026#34;C\u0026#34;) # Get loops surronding the block (y, x, k) = sch.get_loops(block_c) block_size = 32 yo, yi = sch.split(y, [None, block_size]) xo, xi = sch.split(x, [None, block_size]) sch.reorder(yo, xo, k, yi, xi) sch.mod.show() func = tvm.build(sch.mod, target=\u0026#34;llvm\u0026#34;) # The module for CPU backends. c = tvm.nd.array(np.zeros((M, N), dtype=dtype), dev) func(a, b, c) evaluator = func.time_evaluator(func.entry_name, dev, number=1) print(\u0026#34;after transformation: %f\u0026#34; % evaluator(a, b, c).mean) 创建的IRModule如下所示。实际中我们会测试很多不同 block_size对应的执行时间来选择最合适的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @tvm.script.ir_module class Module: @T.prim_func def main(A: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], B: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;], C: T.Buffer[(1024, 1024), \u0026#34;float32\u0026#34;]) -\u0026gt; None: # function attr dict T.func_attr({\u0026#34;global_symbol\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;tir.noalias\u0026#34;: True}) # body # with T.block(\u0026#34;root\u0026#34;) for i0_0, i1_0, i2, i0_1, i1_1 in T.grid(32, 32, 1024, 32, 32): with T.block(\u0026#34;C\u0026#34;): m = T.axis.spatial(1024, i0_0 * 32 + i0_1) n = T.axis.spatial(1024, i1_0 * 32 + i1_1) k = T.axis.reduce(1024, i2) T.reads(A[m, k], B[k, n]) T.writes(C[m, n]) with T.init(): C[m, n] = T.float32(0) C[m, n] = C[m, n] + A[m, k] * B[k, n] ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch1/","summary":"Personal notebook 1.","title":"TVM Learning (1)-Tensor Program Abstraction in Action"},{"content":"IRModule: The key concept in TVM Unity IRModule 是张量函数的集合，代表我们需要在模型中执行的计算子集。例如，在 MLC-LLM 中，它可以是一个 Transformer 模块。 机器学习编译框架中的 IRModule 就像深度学习框架中的张量，是一切的基础。在整个编译流程中，模型将以 IRModule 的形式导入，然后以 IRModule 到 IRModule 的方式进行转换和优化，然后我们就可以在任何支持的平台上将 IRModule 转化为可运行的模块。IRModule 可以用 python 方式访问，例如，我们可以用 python AST 的形式显示它，以便检查、调整和调试。unity 的主要设计目标之一是实现单一抽象，将所有主要元素封装在同一模块中。这样，我们就能在此基础上进行有机的增量转换。\nTVM Unity.png\nTVMScript 是 IRModule 的 python AST 格式，用于在整套转换过程中检查 IRModules 并与之交互。与 IRModule 的交互都可以使用 TVMScript 在 python 中进行。用户将 TVMScript 解析为 IRModule 内部结构，使用 python API 操作 IRModule，并将 IRModule 打印为 TVMScript 格式。\nTVMScript Examples 用 Pytorch 框架实现矩阵乘法一般调用 torch.matmul 或者使用 @ 算子。\n1 2 3 4 5 6 7 8 9 10 import torch a = torch.randn((3, 4)) b = torch.randn((4, 5)) print(torch.matmul(a, b)) \u0026#39;\u0026#39;\u0026#39; tensor([[ 2.5387, 2.2756, -2.2032, 2.5928, -3.6539], [ 2.0151, 0.0628, -0.8041, -1.6947, 0.2884], [-0.8118, -0.0453, 0.0742, -1.2028, 1.3722]]) \u0026#39;\u0026#39;\u0026#39; 在 Relax 中可以用 IRModule 实现相同的功能。\n1 2 3 4 5 6 7 8 9 10 11 from tvm.script import ir as I from tvm.script import relax as R @I.ir_module class Module: @R.function def main(A: R.Tensor((3, 4), dtype=\u0026#34;float32\u0026#34;), B: R.Tensor((4, 5), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((3, 5), dtype=\u0026#34;float32\u0026#34;): with R.dataflow(): lv: R.Tensor((3, 5), dtype=\u0026#34;float32\u0026#34;) = R.matmul(A, B, out_dtype=\u0026#34;void\u0026#34;) R.output(lv) return lv 通过上述 TVMScript 创建的 IRModule 是一个完全图级别的抽象，只包含一个 R.function (Relax 函数： IRModule 中计算图的表示形式) 上述示例包含 Relax 函数中的两个重要概念：高级 Relax 算子和数据流块。\nRelax 函数包含高级 Relax 算子 R.matmul，它描述计算图中的节点，不包含其底层实现的信息。一个高级 Relax 算子可以映射到不同的底层实现，TVM Unity 的编译流程会生成性能良好的实现。 R.dataflow() 是数据流块的一个重要作用域注解。具体来说，在数据流块内，所有操作都必须是 side-effect free. 而在数据流块之外，操作可能包含副作用。 A more complex TVMScript example: 2-layer MLP 下面我们以一个更复杂的两层 MLP 为例，模型结构如下。\n2-layer MLP\n其对应的 Pytoch 实现如下\n1 2 3 4 5 6 7 8 9 10 11 class MLP(torch.nn.Module): def __init__(self, *args, **kwargs) -\u0026gt; None: super(MLP, self).__init__(*args, **kwargs) self.linear1 = torch.nn.Linear(784, 128) self.linear2 = torch.nn.Linear(128, 10) def forward(self, x): x = self.linear1(x) x = torch.nn.functional.relu(x) x = self.linear2(x) return x 对应的 IRModule 的 TVMScript 表示如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @I.ir_module class Module: @R.function def main(inp_0: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), weight1: R.Tensor((128, 784), dtype=\u0026#34;float32\u0026#34;), bias1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;), weight2: R.Tensor((10, 128), dtype=\u0026#34;float32\u0026#34;), bias2: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(weight1, axes=None) lv_1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.matmul(inp_0, lv, out_dtype=\u0026#34;void\u0026#34;) lv1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.add(lv_1, bias1) lv2: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.nn.relu(lv1) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(weight2, axes=None) lv3: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.matmul(lv2, lv4, out_dtype=\u0026#34;void\u0026#34;) lv4_1: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.add(lv3, bias2) R.output(lv4_1) return lv4_1 上述 Relax 函数只包含高级 Relax 算子。在 pytorch 中，torch.nn.Linear 计算 $y = xW^T + b$ 在 relax 中，转置由 permute_dims 实现，其次是 矩阵乘法和加法分别由 R.matmul 和 R.add 实现。\nCompilation Flow in TVM Unity 将模型导入 IRModule. 对于静态模型，我们可以使用 pytorch dynamo 将 pytorch 程序跟踪为 fx 图，然后转换为 IRModule。然而，LLM 通常是动态的，因为序列长度和 kv cache 长度都是可变的。在这种情况下，我们需要直接在 IRModule 中建立模型。第一步可以抽象为 LLM -\u0026gt; IRModule 转换。 优化模型。与传统编译器一样，我们可以在 IRModule 上应用 pass (IRModule 到 IRModule 的变换，改变计算但保留了原始 IRModule 的语义)。在这一步中，我们的目标是加速模型计算。在消费类设备上以适当速度运行 LLM 的大多数关键技术，如量化、算子融合和张量函数调度，都是在这一步实现的。 在设备上部署 IRModule。对于每个 IRM 模块，我们都能将其转化为可运行模块，并在 tvm 运行时支持的任何平台上运行。IRModule 上的每个函数都将成为环境中的本地可运行函数。 以下是 2 层 MLP 模型的编译流程\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from tvm import relax import tvm from tvm.ir.module import IRModule mod = MLPModule def optimize_and_deploy(mod: IRModule): # step 2. Optimization # Use default graph optimization pipeline mod = relax.pipeline.get_pipeline()(mod) # Use default tensor function scheduling with tvm.target.Target(\u0026#34;cuda\u0026#34;): mod = tvm.tir.transform.DefaultGPUSchedule()(mod) # Step 3. Deploy to GPU ex = relax.build(mod, \u0026#34;cuda\u0026#34;) vm = relax.VirtualMachine(ex, tvm.cuda()) # test correctness import numpy as np input_np = np.random.rand(1, 784).astype(\u0026#34;float32\u0026#34;) weight1_np = np.random.rand(128, 784).astype(\u0026#34;float32\u0026#34;) bias1_np = np.random.rand(1, 128).astype(\u0026#34;float32\u0026#34;) weight2_np = np.random.rand(10, 128).astype(\u0026#34;float32\u0026#34;) bias2_np = np.random.rand(1, 10).astype(\u0026#34;float32\u0026#34;) tvm_nd_arrays = [tvm.nd.array(np_array, device=tvm.cuda()) for np_array in [input_np, weight1_np, bias1_np, weight2_np, bias2_np]] # call into the runnable function converted from IRModule nd_res = vm[\u0026#34;main\u0026#34;](*tvm_nd_arrays) numpy_res = (input_np @ weight1_np.T + bias1_np) @ weight2_np.T + bias2_np np.testing.assert_allclose(numpy_res, nd_res.numpy(), rtol=1e-5) optimize_and_deploy(mod) Build IRModule in Pytorch Style 构建 IRModule 最直接的方法是手动编写 TVMScript。这种方法适用于小型模型，但 LLM 的 IRModule 非常庞大和复杂，手工编写并不现实。TVM Unity 提供了另一个类 nn.Module，可以像 pytorch 模块一样轻松构建 IRModule. 用 Pytorch 手动编写的一个 Linear 层如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 class TorchLinear(torch.nn.Module): def __init__(self, in_features, out_features, bias=True): super().__init__() self.in_features = in_features self.out_features = out_features self.weight = torch.nn.Parameter(torch.randn(out_features, in_features)) if bias: self.bias = torch.nn.Parameter(torch.randn(out_features)) else: bias = None def forward(self, x): return x @ self.weight.T + self.bias 在 Relax 中的实现如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from tvm.relax.testing import nn class RelaxLinear(nn.Module): def __init__(self, in_features, out_features, dtype: str, bias=True) -\u0026gt; None: super(RelaxLinear, self).__init__() self.in_features = in_features self.out_features = out_features self.weight = nn.Parameter((out_features, in_features), dtype, name=\u0026#34;linear_weight\u0026#34;) if bias: self.bias = nn.Parameter((1, out_features), dtype, name=\u0026#34;linear_bias\u0026#34;) else: self.bias = None def forward(self, x: relax.Expr) -\u0026gt; relax.Var: return nn.emit(relax.op.linear(x, self.weight, self.bias)) 与 Pytorch 的结构非常相似，只是前向函数实际上并不执行计算。它使用作为输入传递的占位符跟踪算子的计算图。 nn.emit(relax.op.linear(input, self.weight, self.bias)) 表示在构建的 IRModule 中添加高级 linear 算子。 通过堆叠 1 个线性层、1 个 relu 层和 1 个线性层，就可以构建例子中的 MLP.\n1 2 3 4 5 6 7 8 9 10 11 class RelaxMLP(nn.Module): def __init__(self, in_features, hidden_dims, out_features, dtype=\u0026#34;float32\u0026#34;) -\u0026gt; None: super(RelaxMLP, self).__init__() self.linear1 = RelaxLinear(in_features, hidden_dims, dtype) self.lienar2 = RelaxLinear(hidden_dims, out_features, dtype) def forward(self, x: relax.Expr) -\u0026gt; relax.Var: hidden = self.linear1(x) hidden = nn.emit(relax.op.nn.relu(hidden)) out = self.lienar2(hidden) return out 直接调用 nn.Module 的前向函数就可以代替原先在 with bb.dataflow(): 下的操作，将 nn.Module 构建成 IRModule 的步骤如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def build_relax(mod: nn.Module): # relax.BlockBuilder can construct end-to-end models step by step in an IRModule that starts empty bb = relax.BlockBuilder() # relax nn.Module model = mod(784, 128, 10) # create a function called \u0026#34;main\u0026#34; in the IRModule with bb.function(\u0026#34;main\u0026#34;): # define input placeholder to the relax nn.Module input = nn.Placeholder((1, 784), dtype=\u0026#34;float32\u0026#34;, name=\u0026#34;input\u0026#34;) # build dataflow block with bb.dataflow(): # call forward function logits = model(input) # The params of the constructed IRModule params = [input] + model.parameters() # return value of the dataflow block gv = bb.emit_output(logits) # return value and params of the Relax function bb.emit_func_output(gv, params) return bb.get() build_relax(RelaxMLP).show() #------------------------------ @I.ir_module class Module: @R.function def main(input: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), linear_weight: R.Tensor((128, 784), dtype=\u0026#34;float32\u0026#34;), linear_bias: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;), linear_weight_1: R.Tensor((10, 128), dtype=\u0026#34;float32\u0026#34;), linear_bias_1: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(linear_weight, axes=None) lv1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.matmul(input, lv, out_dtype=\u0026#34;void\u0026#34;) lv2: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.add(lv1, linear_bias) lv3: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.nn.relu(lv2) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(linear_weight_1, axes=None) lv5: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.matmul(lv3, lv4, out_dtype=\u0026#34;void\u0026#34;) lv6: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.add(lv5, linear_bias_1) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = lv6 R.output(gv) return gv Custom Operator Support 在某些情况下，我们要表示的模型包含一些自定义运算符，而这些运算符没有被提供的 Relax 运算符覆盖（如 LLaMA 中的 Rotary Embedding），或者我们要进行底层优化以加速单个内核。下面介绍如何在 IRModule 中编写自定义算子。\nTensorIR: Low-level tensor function TVM Unity 在 IRModule TensorIR 中提供了底层张量函数的表示方法，用户可以在其中定义自定义操作符并执行细粒度调度。 下面对比了一个矩阵乘法生成的 TVMScript TensorIR 代码和 low-level Pytorch 代码。@T.prim_func装饰器表示下面的函数是一个原始的张量函数，包含运算符实现的底层细节。\nDestination Passing T.prim_func 采用 destination-passing 约定，即在函数外部明确分配输入和输出空间，并将其作为参数传入。destination-passing 约定可以对内存分配进行精细调度，例如合并两个实时间隔不相交的变量的内存分配，这是在内存有限的设备上运行大型模型的关键。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from tvm.script import tir as T @T.prim_func def matmul(rxplaceholder: T.Buffer((T.int64(1), T.int64(784)), \u0026#34;float32\u0026#34;), rxplaceholder_1: T.Buffer((T.int64(784), T.int64(128)), \u0026#34;float32\u0026#34;), matmul: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: True}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1, k in T.grid(T.int64(1), T.int64(128), T.int64(784)): with T.block(\u0026#34;matmul\u0026#34;): v_i0, v_i1, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, k]) T.reads(rxplaceholder[v_i0, v_k], rxplaceholder_1[v_k, v_i1]) T.writes(matmul[v_i0, v_i1]) with T.init(): matmul[v_i0, v_i1] = T.float32(0) matmul[v_i0, v_i1] = matmul[v_i0, v_i1] + rxplaceholder[v_i0, v_k] * rxplaceholder_1[v_k, v_i1] def torch_matmul(X: torch.Tensor, W: torch.Tensor): Y = torch.zeros(1, 128, dtype=\u0026#34;float32\u0026#34;) for i in range(1): for j in range(128): for k in range(784): Y[i, j] = Y[i, j] + X[i, k] * W[k, j] return Y Interaction between Relax function and TensorIR 为了支持 T.prim_func（底层部分）和 R.function（高层部分）之间的交互，TVM 引入了 call_tir, Relax 中的一个特殊运算符，用于描述计算图中的节点及其张量函数的实现。 torch_call_tir 是一个参考实现，用来说明 call_tir 的含义。实际上，可以有不同的底层方法来优化执行。例如，我们可能会选择提前分配所有输出内存，然后再运行执行。\n1 2 3 4 def torch_call_tir(prim_func, inputs, out_sinfo): res = torch.zeros(*out_sinfo.shape, dtype=out_sinfo.dtype) prim_func(*inputs, res) return res 下面是 2 层 MLP 的 IRModule，我们使用 call_tir 和张量原语函数 matmul 来替换 Relax 运算符 R.matmul\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 @I.ir_module class Module: @T.prim_func def tir_matmul(rxplaceholder: T.Buffer((T.int64(1), T.int64(784)), \u0026#34;float32\u0026#34;), rxplaceholder_1: T.Buffer((T.int64(784), T.int64(128)), \u0026#34;float32\u0026#34;), matmul: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: True}) # with T.block(\u0026#34;root\u0026#34;): for i0, i1, k in T.grid(T.int64(1), T.int64(128), T.int64(784)): with T.block(\u0026#34;matmul\u0026#34;): v_i0, v_i1, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i0, i1, k]) T.reads(rxplaceholder[v_i0, v_k], rxplaceholder_1[v_k, v_i1]) T.writes(matmul[v_i0, v_i1]) with T.init(): matmul[v_i0, v_i1] = T.float32(0) matmul[v_i0, v_i1] = matmul[v_i0, v_i1] + rxplaceholder[v_i0, v_k] * rxplaceholder_1[v_k, v_i1] @R.function def main(inp_0: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), weight1: R.Tensor((128, 784), dtype=\u0026#34;float32\u0026#34;), bias1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;), weight2: R.Tensor((10, 128), dtype=\u0026#34;float32\u0026#34;), bias2: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv: R.Tensor((784, 128), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(weight1, axes=None) lv1 = R.call_tir(cls.tir_matmul, [inp_0, lv], out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv2: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.add(lv1, bias1) lv3: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.nn.relu(lv2) lv4: R.Tensor((128, 10), dtype=\u0026#34;float32\u0026#34;) = R.permute_dims(weight2, axes=None) lv5: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.matmul(lv3, lv4, out_dtype=\u0026#34;float32\u0026#34;) lv6: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = R.add(lv5, bias2) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = lv6 R.output(gv) return gv Implement Custom TensorIR Function nn.Module 不仅支持高级 Relax 运算符，还支持自定义 TensorIR 函数。 要构建 TensorIR 函数并在 Relax 图中调用它，我们需要使用 nn.emit_te(f_te_expr,*args)。\nf_te_expr 是一个返回张量表达式（Tensor Expression，TE）的函数，是描述张量计算的 DSL. args 是 f_te_expr 的参数。 创建 TE 表达式的方法如下\n1 te.compute(out_shape, f_compute) 它描述如下的计算模式 itertools.product 在 Python 的 itertools 模块中，product 函数用于生成可迭代对象的笛卡尔积。\nproduct 函数接受一个或多个可迭代对象作为参数，并返回一个迭代器，该迭代器生成所有可能的组合，其中每个组合包含来自每个输入可迭代对象的单个元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import itertools letters = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;] numbers = [1, 2, 3] for item in itertools.product(letters, numbers): print(item) # output： # (\u0026#39;a\u0026#39;, 1) # (\u0026#39;a\u0026#39;, 2) # (\u0026#39;a\u0026#39;, 3) # (\u0026#39;b\u0026#39;, 1) # (\u0026#39;b\u0026#39;, 2) # (\u0026#39;b\u0026#39;, 3) product 函数还支持重复元素，可以使用 repeat 参数指定每个可迭代对象需要重复的次数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 letters = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;] for item in itertools.product(letters, repeat=3): print(item) # output： # (\u0026#39;a\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;a\u0026#39;) # (\u0026#39;a\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;) # (\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;a\u0026#39;) # (\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;) # (\u0026#39;b\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;a\u0026#39;) # (\u0026#39;b\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;) # (\u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;a\u0026#39;) # (\u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;) product 应用场景\n组合生成: 生成所有可能的组合，例如密码生成、彩票号码生成等。 多维数组遍历: 遍历多维数组的所有元素。 测试用例生成: 生成测试用例，覆盖所有可能的输入组合。 1 2 3 4 from itertools import product for indices in product(range(s) for s in out_shape): out_tensor[*indices] = f_compute(*indices) 用 emit_te 实现 Linear 层来构建 IRModule 的代码如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 from tvm import te class RelaxLinearWithEmitTE(nn.Module): def __init__(self, in_features, out_features, dtype=\u0026#34;float32\u0026#34;, bias=True) -\u0026gt; None: super(RelaxLinearWithEmitTE, self).__init__() self.in_features = in_features self.out_features = out_features self.weight = nn.Parameter((out_features, in_features), dtype, name=\u0026#34;linear_weight\u0026#34;) if bias: self.bias = nn.Parameter((1, out_features), dtype, name=\u0026#34;linear_bias\u0026#34;) else: self.bias = None def forward(self, x: relax.Expr) -\u0026gt; relax.Var: def my_linear(x, w, b=None): out_sinfo = x.shape[:-1] + [self.out_features,] k = te.reduce_axis((0, self.out_features), name=\u0026#34;k\u0026#34;) out = te.compute(out_sinfo, fcompute=lambda i, j: te.sum(x[i, k] * w[j, k], axis=k), name=\u0026#34;matmul\u0026#34;) if b is not None: return out else: return te.compute(out_sinfo, fcompute=lambda i, j: out[i, j] + b[0, j], name=\u0026#34;add_bias\u0026#34;) return nn.emit_te(my_linear, x, self.weight, self.bias) class RelaxMLPwithEmitTE(nn.Module): def __init__(self, in_features, hidden_num, out_features, dtype=\u0026#34;float32\u0026#34;): self.linear1 = RelaxLinearWithEmitTE(in_features, hidden_num, dtype=dtype) self.linear2 = RelaxLinearWithEmitTE(hidden_num, out_features, dtype=dtype) def forward(self, input: relax.Expr) -\u0026gt; relax.Var: hidden = self.linear1(input) hidden = nn.emit(relax.op.nn.relu(hidden)) out = self.linear2(hidden) return out build_relax(RelaxMLPwithEmitTE).show() #---------------------------------------------------- @I.ir_module class Module: @T.prim_func(private=True) def my_linear(input: T.Buffer((T.int64(1), T.int64(784)), \u0026#34;float32\u0026#34;), linear_weight: T.Buffer((T.int64(128), T.int64(784)), \u0026#34;float32\u0026#34;), linear_bias: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), matmul: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i, j, k in T.grid(T.int64(1), T.int64(128), T.int64(128)): with T.block(\u0026#34;matmul\u0026#34;): v_i, v_j, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) T.reads(input[v_i, v_k], linear_weight[v_j, v_k]) T.writes(matmul[v_i, v_j]) with T.init(): matmul[v_i, v_j] = T.float32(0.0) matmul[v_i, v_j] = matmul[v_i, v_j] + input[v_i, v_k] * linear_weight[v_j, v_k] @T.prim_func(private=True) def my_linear1(lv1: T.Buffer((T.int64(1), T.int64(128)), \u0026#34;float32\u0026#34;), linear_weight: T.Buffer((T.int64(10), T.int64(128)), \u0026#34;float32\u0026#34;), linear_bias: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;), matmul: T.Buffer((T.int64(1), T.int64(10)), \u0026#34;float32\u0026#34;)): T.func_attr({\u0026#34;tir.noalias\u0026#34;: T.bool(True)}) # with T.block(\u0026#34;root\u0026#34;): for i, j, k in T.grid(T.int64(1), T.int64(10), T.int64(10)): with T.block(\u0026#34;matmul\u0026#34;): v_i, v_j, v_k = T.axis.remap(\u0026#34;SSR\u0026#34;, [i, j, k]) T.reads(lv1[v_i, v_k], linear_weight[v_j, v_k]) T.writes(matmul[v_i, v_j]) with T.init(): matmul[v_i, v_j] = T.float32(0.0) matmul[v_i, v_j] = matmul[v_i, v_j] + lv1[v_i, v_k] * linear_weight[v_j, v_k] @R.function def main(input: R.Tensor((1, 784), dtype=\u0026#34;float32\u0026#34;), linear_weight: R.Tensor((128, 784), dtype=\u0026#34;float32\u0026#34;), linear_bias: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;), linear_weight_1: R.Tensor((10, 128), dtype=\u0026#34;float32\u0026#34;), linear_bias_1: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) -\u0026gt; R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;): cls = Module with R.dataflow(): lv = R.call_tir(cls.my_linear, (input, linear_weight, linear_bias), out_sinfo=R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;)) lv1: R.Tensor((1, 128), dtype=\u0026#34;float32\u0026#34;) = R.nn.relu(lv) lv2 = R.call_tir(cls.my_linear1, (lv1, linear_weight_1, linear_bias_1), out_sinfo=R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;)) gv: R.Tensor((1, 10), dtype=\u0026#34;float32\u0026#34;) = lv2 R.output(gv) return gv ","permalink":"http://localhost:1313/blogs/courselearning/tvm/tvm-ch9/","summary":"Add Model Architeture in MLC LLM","title":"TVM Learning (11)-Add Model Architeture in MLC LLM"},{"content":"Hello, I am WITHER.\n🔬 Research Interests Training and Inference Acceleration LLM Reasoning High Performance Computing 🧑‍🎓 Education 2019.09 - 2023.06: Bachelor of Communication Engineering, China University of Geoscience, Wuhan, China. 2023.09 - Now: Shanghai Jiao Tong University, Shanghai, China. 💻 Work Experience 2024.06 - Present: Full-time Intern, Shanghai AI Laboratory, Shanghai, China. Research on inference acceleration and graph optimization of Large Language Models. Research on knowlege injection and reasoning of Large Language Models. 🎉 Achievements 📰 Publications 🤪 Hobbies 🧙 Animations, Comics and Games ","permalink":"http://localhost:1313/about_me/","summary":"\u003cp\u003eHello, I am WITHER.\u003c/p\u003e\n\u003ch2 id=\"-research-interests\"\u003e🔬 Research Interests\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eTraining and Inference Acceleration\u003c/li\u003e\n\u003cli\u003eLLM Reasoning\u003c/li\u003e\n\u003cli\u003eHigh Performance Computing\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-education\"\u003e🧑‍🎓 Education\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e2019.09 - 2023.06\u003c/strong\u003e: Bachelor of Communication Engineering, China University of Geoscience, Wuhan, China.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2023.09 - Now\u003c/strong\u003e: Shanghai Jiao Tong University, Shanghai, China.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-work-experience\"\u003e💻 Work Experience\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e2024.06 - Present\u003c/strong\u003e: Full-time Intern, Shanghai AI Laboratory, Shanghai, China.\n\u003cul\u003e\n\u003cli\u003eResearch on inference acceleration and graph optimization of Large Language Models.\u003c/li\u003e\n\u003cli\u003eResearch on knowlege injection and reasoning of Large Language Models.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-achievements\"\u003e🎉 Achievements\u003c/h2\u003e\n\u003ch2 id=\"-publications\"\u003e📰 Publications\u003c/h2\u003e\n\u003ch2 id=\"-hobbies\"\u003e🤪 Hobbies\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e🧙 Animations, Comics and Games\u003c/li\u003e\n\u003c/ul\u003e","title":"About Me"},{"content":"Basic Transformer Block 符号含义表示如下\nSymbol Description Symbol Description a 注意力头数 n 并行度大小 b batchsize s 序列长度 h 隐藏层维度 v 词汇表大小 L tranformer layer 层数数 基本 transformer block 结构如下，输入是形状为 (b, s, h) 的三维张量，其中 b 为 batchsize. 每个变压器层由一个具有注意头的自注意块组成，随后是一个具有两层的 MLP，第一层将隐藏维度增加到 4h，然第二层将其减少到 h. 每个变压器层的输入和输出具有相同的形状.\nBasic Transformer Architecture Self-attention Block\nModel Parameters QKVO Linear 的权重形状均为 h*h, 偏置形状均为 h*1；MLP 两个 Linear 的权重形分别为 h*4h 和 4h*h，偏置形状分别为 4h*1 和 h*1. 因此每个模型的参数量为 (12hh+13h)L，占用大小还要 x2.\nNote\n在传统的 LLM 中最后还需要经过 logits layer，将隐藏层维度 h 转换成词汇表大小 v，参数量还要加上 hv.\nFLOPs Calculation 对于浮点数计算量 (FLOPs)，只考虑占主要部分的通用矩阵乘法 (GEMMs). 对于 Attention 部分，QKV Linear 的计算量为 6bshh，attention matrix (Q@K.T) 的计算量为 2bssh, attention@V 的计算量为 2bssh, O Linear 的计算量为 2bshh. MLP 的两个线性层的每一个计算量都为 8shh. 相加后得到正向传播中总计算量为 (24bshh + 4bssh)L bytes.\nNote\n在传统的 LLM 中最后还需要经过 logits layer，将隐藏层维度 h 转换成词汇表大小 v，其计算量为 2bshv.\n反向传播因为要计算输入和权重的梯度，其计算量为正向传播的两倍，因此整个模型的计算量为 72BLshh(1+s/(6h)).\nActivation Memory 激活的定义为在前向传播中产生并且需要在反向传播中进行梯度计算的张量，即不包括模型参数和优化器状态。并且不考虑相对非常小的激活。例如 LayerNorm 层的输入还需要张量每个通道的均值和方差 (大小均为 bs)，由于 h 大小通常超过 1k，因此只考虑输入张量所占激活的大小 bsh，忽略掉 2bs. 假设数据格式为 fp16/bf16，即每个数据占用 2 bytes 的存储空间，需要特殊处理的是 dropout 层的 mak，每个元素均为 unsigned int，只占用 1 byte.\nAttention 部分激活占用如下 (共计 11bsh + 5bssa)\nQKV Linear: 三个线性层需要的输入相同，占用 2bsh bytes. Q@K.T: 需要存储 Q 和 K，占用 4bsh bytes. Softmax: 需要存储大小为 2bssa bytes 的输入 Softmax droppot: 需要存储一个大小为 bssa bytes 的 mask. attention@V: 需要存储 dropout 的输出和 V，分别占用 2bssa 和 2bsh bytes. O Linear: 需要存储注意力的输出，占用 2bsh bytes. O dropout 需要存储一个大小为 bsh bytes 的 mask; MLP (共计 18bsh): 第一层和第二层的输入分别占用 2bsh 和 8bsh bytes. GeLU 层需要第二层的输入用于反向传播，占用大小为 8bsh bytes. dropout 需要一个大小为 bsh bytes 的 mask.\nLayerNorm (共计 4bsh): 需要存储该层的输入，占用 2bsh bytes. 一共有两个 LayerNorm.\n加起来就可以得到每个 transformer block 需要激活大小为 bsh(34+5sa/h) bytes.\nTensor Parallelsim Megatron 张量并行 的思想是将输入进行连续的两个矩阵乘法的第一个按列切分成 t 份，第二个按行切分成 t 份. 在 Transformer block 中体现为利用多头注意力本身的并行性将 Attention 计算中的 QKV 按列进行切分，O Linear 的权重按行进行切分；MLP 中第一个线性层的权重按列进行切分，第二个权重按行进行切分。\n在这种并行方式下，前向传播和反向传播均需要进行 2 次 All-Reduce 通信，由于每次 All-Reduce 通信可以看作 Reduce-Scatter + All-Gather, 因此每次每个设备的通信量为 8αbsh bytes，其中 α=(n-1)/n.\n对于激活，2*LayerNorm, QKV Linear 的输入, O dropout mask，MLP 第一层的输入和 MLP dropout 不会被切分，因此每个设备每个 block 要占用的激活为 bsh(10+24/n+5as/(hn))\n2D Tensor Parallelsim\n2D张量并行将激活第一个矩阵的列切分成 m*n 份，第二个权重 (权重形状为 he) 的行被切分成 m 份，列被切分成 n 份。以下图为例，Rank0-Rank2为通信组 x，Rank0-Rank1为 通信组 y. 第一个矩阵经过一次通信组 y 的 AllGather 后与本设备第二个矩阵进行矩阵乘积，得到的部分和经过一次通信组 x 间的ReduceScatter，计算出正确结果。第一次 AllGather 通信每个设备通信的大小为 bsh(n-1)/(mn). 第二次 ReduceScatter 通信每个设备通信的大小为 bse(m-1)/n.\nMegatron Sequence Parallelsim Megatron 张量并行中 LayerNorm 以及 O Linear 和 MLP 之后的 dropouts 在每个设备中都有一个副本。这些模块不需要大量的计算，但需要占用 10bsh bytes 大小的激活内存。Megatron-SP 沿着序列维度划分这些模块来减少激活内存，但需要配合 TP 一起使用，本质上是将 TP 中的 All-Reduce 拆成了在 TP 前进行 All-Gather 和在 TP 后进行 Reduce-Scatter. 但除去第一个 LayerNorm 外的每一个模块的激活都得到了切分。Megatron-SP 这里选择每个设备存储自己的部分并在反向传播中插入一次额外的 All-Gather 通信。因此通信量为 10bsh, 每个设备每个 block 需要占用的激活为 bsh/n*(34+5as/h)\nTransformer layer with Megatron-SP\nPipeline Parallelsim 流水线张量并行仅仅将 L 个 Transformer block 平均分到 p 个设备上，并没有划分激活所要占用的内存。在考虑 1F1B 策略下 batchsize 进一步被划分成 p 个 micro batch. 第一个 stage 必须存储 p 个 micro batch 的激活。每个 stage 包含 L/p 层，所以无论流水线并行大小 p 如何，第一个 stage 必须存储 p × L/p = L 层的激活值。在 Megatron-LM 中的 interleaving schedule 需要存储 L(1 + (p−1)/(pm)) 层的激活，其中 m 是 interleaving 的数量。\nNote\n在使用 output-tensor-deallocation 优化 (输出传到下一个 stage 后就释放) 的情况下，可以为为每个设备节省 bshr 内存，其中 r 是每个设备正在运行的 micro batch 的数量，在第一个 stage r=p 时达到峰值。\nDeepseed-Ulysses Sequence Parallel DS-SP 也是利用多头注意力的并行性，首先将输入按序列维度切分到每个设备上，每个设备占有的输入形状为 b*(s/n)*h. 在计算 Attention 之前对 QKV 进行 All-to-All 通信变成按隐藏层维度切分 ((a 要能整除 n))，通信量为 6αbsh/n bytes. 计算完 score@v 之后再进行一次 All-to-All 通信，通信量为 2αbsh/n bytes，总计通信量为 8αbsh/n bytes. 激活占用上 Attention 中 Softmax 及其 dropout mask 和 attention 没有被切分，激活占用量为 bsh(34/n+5sa/h). 因此，它不适合 GQA 和 MQA 情况, GQA 的并行度被限制在了组数，MQA 则完全没法使用。而且由于张量并行也需要在 a 维度上进行划分，SP-Ulysses 和 TP 是冲突的。\nRing-Attention Sequence Parallel Ring-SP 实际上为环状的 FlashAttention，将输入沿着序列维度切分到每个设备上，在 Attention 计算过程中每个设备向相邻设备通信 KV 并更新自己的 Softmax 矩阵，通信量为 4bsh bytes. 激活占用和 DS-SP 一样为 bsh(34/n+5sa/h).\nUnified Sequence Parallel USP 将 SP 进程组分割成两个正交的进程组：SP-Ring 进程组和 SP-Ulysses 进程组。可以将其视为一个 2D mesh ，每一列上运行 SP-Ring，每一行上运行 SP-Ulysses. 具体方法为 QKV 的切分 和 All-to-All 和 DS-Ulysses 相同，然后采用 Ring-Attention 的方式进行计算。如果遇到使用 casual mask 的情况需要加上 balance load 策略，把序列长度分为 2*(ring_degree) 大小，按照 0-\u0026gt;1-\u0026gt;\u0026hellip;-\u0026gt;(ring_degree-1)-\u0026gt;(ring_degree-1)-\u0026gt;\u0026hellip;-\u0026gt;0 的顺序进行分配。USP 消除了 SP-ulysses的头数限制。并且 USP可以通过调整 SP-Ulysses 进程组数目来更好的适应不同带宽的网络结构，可以让 All-to-All 操作在高带宽中运行，而异步 P2P 通信在低带宽部分运行。\nComparsion of Different Parallelsim in Training Communication (FWD+BWD)\rSplit Dim\rMemory\rParam\rCost\rAct\rCost\rP/G\rOS\rAct\rDS-SP\rAllReduce\r12O(h²)\r8*All2All\r(8/N)O(bsh)\ra/s\rP+G\r6P\rA/N\rRing-SP\rAllReduce\r12O(h²)\rP2P\r4O(bsh)\rL/L\rP+G\r6P\rA/N\rDP\rAllReduce\r12O(h²)\r0\r0\rb/b\rP+G\r6P\rA/N\rZeRO1\rAllGather + ReduceScatter\r12O(h²)\r0\r0\ra/s\rP+G\r6P/N A/N\rUSP + ZeRO1\rAllGather + ReduceScatter\r12O(h²)\rP2P + 8*All2All\r≤ 4O(bsh)\ra/s\rP+G\r6P/N\rA/N\rUSP + ZeRO2\rAllGather + ReduceScatter\r12O(h²)\rP2P + 8*All2All\r≤ 4O(bsh)\ra/s\rP+(G/N)\r6P/N\rA/N\rUSP + ZeRO3\r2*AllGather + ReduceScatter\r18O(h²)\rP2P + 8*All2All\r≤ 4O(bsh)\ra/s\r(P+G)/N\r6P/N\rA/N\rTP\r0\r0\r4*AllReduce\r8O(bsh)\ra/h\r(P+G)/N\r6P/N\rαA\rMegatron-SP\r0\r0\r6*AllGather + 4*ReduceScatter\r10O(bsh)\ra/h\r(P+G)/N\r6P/N\rA/N\rAnalysis All2All 通信使得 DS-SP 的通信开销大于 DP. 使用 Ring-SP 时，尽管异步的 P2P 通信是可以重叠的，理想的性能也是只与 DP 相同。因此只有当批 batchsize 不足以进行切分时才考虑使用 SP. Megatron-SP 通信量高于 DS-SP 和 Ring-SP. SP-Ring 对于 KV 的通信可以与计算重叠。Megatron-SP 的通信量不会随着并行度的增加而减少，而 DS-SP 可以做到。 DS-SP 和 Ring-SP 具有较低的激活通信成本，但需要同步梯度和参数。不过参数通信量相对于激活通信量较小，可以通过计算进行重叠。GQA/MQA 也可以降低它俩的通信成本，而 Megatron-SP 不受影响。 相同配置下使用 USP+Zero3 来代替 Megatron-SP 并不会增加可训练序列的长度。但与 Megatron-SP 相比，USP 能在通过提高并行度来增加可以训练的序列长度。 Megatron-SP 并行维度受限于注意力头数目。USP 可以通过提高 Ring-SP 的并行度来扩展，以在大规模配置下训练更大模型。 Sora Inference Modeling Analysis Process 我们需要准备模型的输入：\n隐空间采样的噪声 z，形状与想生成的视频时常和分辨率相关。生成 1s 的视频为 25.5 frames，经过 VAE Encoder 后输出的通道数为 4，帧数会被压缩到 num_frame*5//17，分辨率的长宽分别被压缩到原来的 1/8. 因此 z 的形状应该为 (B, 4, num_frame*5//17, img_size[0]//8, img_size[1]//8). 输入的 prompt 会经过 DeepFloyd/t5-v1_1-xxl 编码，该编码器最大的 token 数为 300，编码维度为 4096，文本长度不足时会填充到 300. 因此编码后的 prompt 的形状为 (B, 1, 300, 4096). 当前去噪的时间步 t，形状为 (B, ) 生成视频的 fps，形状为 (1, ) 还需要准备相关的模型配置，包括 mesh 形状，sub_mesh 的形状，并行策略以及 stage_ids. 如果需要将模型的 transformer block 切分成多段，则需要配置 sub_mesh 和 stage_ids.\nmesh_shape: (num_x, num_y) submesh_shape: [(num_x, num_y, loc_x, loc_y), ] stage_ids: [(submesh0_start, submesh0_end), ] strategy: 并行策略 然后初始化模型，Sora 的整体结构如下 我们初始化一个 Pipeline(包含整个流程的函数)，它会有一个或多个 Stage 用于保存模型的不同层，与 stage_ids 中对应。我们将模型分解成 Embedding_blocks(PatchEmbed3D, TimestepEmbedder, SizeEmbedder, Captionembedder, t_block), STDiT3_blocks 和 T2IFinalLayer. 将这个分解函数作为 Pipeline 的 sharding_func.\nOpen-Sora\nInit Pipeline 我们需要根据配置以及 PipePatch 并行度和 SP 并行度初始化 Pipeline. 这其中会根据 stage_ids 分配每个 Stage 保存模型的哪些层以及对应的 submesh 大小。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def construct_stages(self, submeshes: List[Tuple], stages_ids: List[Tuple]): # construct layers for each stage first_part, module_list, last_part = self.parse_func(self.model) modules = list() num = len(stages_ids) for idx in range(num): submesh = submeshes[idx] stage_id = stages_ids[idx] # get stage layers from user config stage ids in module list layers = list(module_list[stage_id[0]: stage_id[1] + 1]) if idx == 0 and first_part is not None: # concat module first part(if exists) bef module list to stage_0 layers = first_part + layers if idx == num - 1 and last_part is not None: # concat module last part(if exists) aft module list to last stage layers.extend(last_part) modules.append(layers) # deepcopy module for xla device tracing use stage_module = [copy.deepcopy(layer) for layer in layers] self.stages.append( Stage(idx, stage_module, submesh, self, )) return modules Write Sharding Function 要根据选择的不同的并行策略对每个 Stage 的模型权重，输入，输出进行切分。这里同样我们单独处理 Embedding_blocks, STDiT3_blocks 和 T2IFinalLayer. 让 stage0 包括对 Embedding_blocks 的处理，stage(N-1) 包括对 T2IFinalLayer 的处理。需要注意的是 DS-ulysses 我们需要对 Q@K.T 的结果 和 S@V 的结果也进行切分 SPMD 才会插入正确的 All2All，因此这部分只能放在网络的 forward 里面进行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def shard_sora_one_stage(modules, shard_strategy, mesh): total_len = len(modules) # first 5 modules are embedding layers for i in range(0, 5): shard_sora_embedding(modules[i], shard_strategy, mesh) for i in range(5, total_len - 2): shard_sora_block(modules[i][0], shard_strategy, mesh) # shard spatial shard_sora_block(modules[i][1], shard_strategy, mesh) # shard temporal shard_sora_final(modules[-1], shard_strategy, mesh) def shard_sora_first_stage(modules, shard_strategy, mesh): for i in range(0, 5): shard_sora_embedding(modules[i], shard_strategy, mesh) for i in range(5, len(modules)): shard_sora_block(modules[i][0], shard_strategy, mesh) # shard spatial shard_sora_block(modules[i][1], shard_strategy, mesh) # shard temporal def shard_sora_stage(modules, shard_strategy, mesh): for module in modules: shard_sora_block(module[0], shard_strategy, mesh) # shard spatial shard_sora_block(module[1], shard_strategy, mesh) # shard temporal def shard_sora_last_stage(modules, shard_strategy, mesh): total_len = len(modules) for i in range(0, total_len - 2): shard_sora_block(modules[i][0], shard_strategy, mesh) # shard spatial shard_sora_block(modules[i][1], shard_strategy, mesh) # shard temporal # skip norm layer mark sharding shard_sora_final(modules[total_len - 1], shard_strategy, mesh) Construct Pipeline 然后为了处理多 stage 的情况，我们需要保存每个 stage 的输入和输出的形状。这一步相当于放到 cuda 上重走一遍整个模型的 forward，记录下每一层输入和输出的形状，保存为 json 一遍。实际上对于每个固定生成大小的视频进行一次就行，下次直接读取这个文件。因为现在都采用 xformers.ops.memory_efficient_attention，需要输入张量在 cuda 上，我们需要手动在模型的 forward 函数中写一个 navie 的 attention 计算流程好让 torch_xla 能对张量进行跟踪。\nTrace mhlo Graph 根据上一步得到的每个 Stage 的输入形状，创建输入张量，放入 xla_device 上，执行 forward. 最后导出输出的 mhlo 计算图。这里需要注意第一个 stage 包含多个非连续的模块，因此需要单独处理，最后一个 stage 最后一层的输入与其他 block 不同，因此也要单独处理。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def trace_stage_mhlo_graph(self, check_res=False): \u0026#34;\u0026#34;\u0026#34; trace stage nn modules to mhlo graph \u0026#34;\u0026#34;\u0026#34; # (NOTE): construct xla mesh before trace tensors generate, # i.e., before any xla device call to avoid xla computation client construct xla_mesh = None if self.shard_func is not None: xla_mesh = self._construct_stage_xla_mesh() # create mesh from submesh info # Create xla device trace tensors, move module to xla device if self.stage_id == 0: self.trace_tensors = self._generate_trace_tensors() else: z = self.parent_pipeline.stages[self.stage_id -1].outputs y = self.parent_pipeline.stages[0].y_embedded.to(\u0026#39;cpu\u0026#39;).to(xm.xla_device()) t_mlp = self.parent_pipeline.stages[0].t_mlp.to(\u0026#39;cpu\u0026#39;).to(xm.xla_device()) self.trace_tensors = [z, y, t_mlp] for module in self.modules: if isinstance(module, tuple): for mod in module: mod.to(\u0026#39;cpu\u0026#39;).to(xm.xla_device()) # first load to cpu else: module.to(\u0026#39;cpu\u0026#39;).to(xm.xla_device()) # get pipeline exec mode assert self.parent_pipeline is not None exec_mode = self.parent_pipeline.exec_mode # load lora cofifg lora_config = self.parent_pipeline.lora_config print(\u0026#34;Enter trace mhlo graph for stage: \u0026#34;, self.stage_id) # Trigger shard func to mark sharding the model if self.shard_func is not None: self.shard_func(self.modules, self.shard_strategy, xla_mesh) if exec_mode == EXEC_MODE.INFER: # set stage name \u0026amp; dump file path self._set_stage_name_dump_file( exec_mode, \u0026#34;fw\u0026#34;) num_sampling_steps = 30 num_timesteps = 1000 timesteps = [(1.0 - i / num_sampling_steps) * num_timesteps for i in range(num_sampling_steps)] # FIXME: 原先是为每个stage单独生成trace_tensor, 现在要把上一个的结果传给下一个 stage #for i in range(30): start = sum(self.parent_pipeline.pipeline_patches_height_list[:self.stage_id - 1]) if self.stage_id != 0 else 0 end = start + self.parent_pipeline.pipeline_patches_height_list[self.stage_id] if self.stage_id == 0: outputs = self._forward([self.trace_tensors[0][...,start:end,:]] + self.trace_tensors[1:], xla_mesh) # outputs is a list else: outputs = self._forward(self.trace_tensors, xla_mesh) if check_res: # check xla results compared to gpu results check_result_error(self.outputs, outputs) else: # use torch xla _get_xla_tensors_hlo interface # to eliminate redundant live tensors as ret values os.environ[\u0026#34;XLA_DUMP_POST_OPTIMIZATIONS\u0026#34;] = \u0026#34;true\u0026#34; torch_xla._XLAC._get_xla_tensors_hlo(outputs) Analyze mhlo Graph 接下来我们要遍历上一步得出的 mhlo 图。\nOpView 从根节点的 ir 开始遍历上一步导出的整个计算图。根据传入 ir 的类型定义调用对应的 visit 函数读取其属性进行操作。主要通过 rsqrt 的位置来划分一个 Transformer block 中第几个 dot 和 dot_general 对应的是什么操作。对于 Sora 来说划分情况如下。这里需要注意的是 mhlo 图记录的是拓扑排序的顺序，不是程序顺序执行的顺序，因此第一个 block 会掺杂着 Embedding_blocks 的一些 dot 操作。因此我们从第二个 block 的第一个 rsqrt 位置开始统计。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def collect_rms_ops(self): rms_collector = RMSCollector() rms_collector.visit(self.root_op) self.rms_locs = rms_collector.rms_locs # construct attention block \u0026amp; ffn block ranges # exclude the rsqrt in T2IFinalLayer att_rm_locs = self.rms_locs if len(self.rms_locs) % 2 == 0 else self.rms_locs[:-1] for i in range(8, len(att_rm_locs), 4): # a block has 4 rsqrt, start from 2nd block to avoid embedding self.spt_qkv_ranges.append((att_rm_locs[i+0], att_rm_locs[i+1])) self.spt_attn_ranges.append((att_rm_locs[i+2], att_rm_locs[i+3])) self.cro_attn_ranges.append((att_rm_locs[i+2], att_rm_locs[i+3])) for i in range(8, len(att_rm_locs), 4): # ORG: range(8, len(att_rm_locs), 4): start = self.rms_locs[i+3] if i+4 \u0026gt;= len(self.rms_locs): end = None else: end = self.rms_locs[i+4] self.ffn_ranges.append((start, end)) module operator RMSNorm(x) Self Attention dot(x, qkvLinear.weight) RMSNorm(q) RMSNorm(k) dot_general(q, k) dot_general(s, v) dot(attn, oLinear.weight) Cross Attention dot(x, qLinear.weight) dot(y, kvLinear.weight) dot_general(q, k) dot_general(s, v) dot(attn, oLinear.weight) RMSNorm(x) Feed Forward Network dot(x, upLinear.weight) dot(x, downLinear.weight) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def visit_dot(self, node): dot_lineno = _parse_loc_lineno(node) if self.block_cnt \u0026lt; len(self.spt_attn_ranges): spt_att_range = self.spt_attn_ranges[self.block_cnt] cro_att_range = self.cro_attn_ranges[self.block_cnt] spt_qkv_range = self.spt_qkv_ranges[self.block_cnt] ffn_range = self.ffn_ranges[self.block_cnt] # lie in RMS ops closed attention block if dot_lineno \u0026gt; spt_att_range[0] and dot_lineno \u0026lt; spt_att_range[1]: #import pdb;pdb.set_trace() self.att_block_dots.append(node) self.spt_dot_cnt += 1 elif dot_lineno \u0026gt; cro_att_range[0] and dot_lineno \u0026lt; cro_att_range[1]: self.att_block_dots.append(node) self.cro_att_dot_cnt += 1 # lie ffn block if dot_lineno \u0026gt; spt_qkv_range[0] and dot_lineno \u0026lt; spt_qkv_range[1]: self.spt_qkv_cnt += 1 self.ffn_block_dots.append(node) # pixart pass elif dot_lineno \u0026gt; ffn_range[0]: if ffn_range[1] is not None: if dot_lineno \u0026lt; ffn_range[1]: self.ffn_block_dots.append(node) self.ffn_dot_cnt += 1 else: if self.ffn_dot_cnt \u0026lt; 2: self.ffn_block_dots.append(node) self.ffn_dot_cnt += 1 # Traversal of one block if self.spt_qkv_cnt == 1 and self.spt_att_dot_cnt == 4 and \\ self.spt_dot_cnt == 4 and self.ffn_dot_cnt == 2: self.attention_blocks.append(self.att_block_dots) self.ffn_blocks.append(self.ffn_block_dots) self.block_cnt += 1 # reset each block level counters self.spt_qkv_cnt = 0 self.spt_att_dot_cnt = 0 self.spt_dot_cnt = 0 self.ffn_dot_cnt = 0 self.att_block_dots = [] self.ffn_block_dots = [] self.generic_visit(node) 保存好一个 Transformer block 中每个 dot 或 dotgeneral 对应的是什么操作后，我们便可以访问这个 ir. 这里需要注意只要两个相乘的矩阵有一个是二维张量 (比如线性层的权重)，mhlo 都会将另一个 reshape 成二维张量。dot 算子 (jaxlib.mlir.dialects._mhlo_ops_gen.DotOp) 两个操作数都是二维的张量，qkvLinear 对应的是第一个 dot 操作。左操作数的 shape 为 (BST,3C). 当两个相乘的矩阵都是 3 维及以上张量的时候就会生成 dot_general 该算子的两个相乘的矩阵都会被 reshape 成三维张量。Self-Attention 的第一个 dot_general 左操作数的 shape 为 (BTN_A,S,C). 这样我们就可以得到 BT=(BST)/S, N_A=(BTN_A)/(BT). 同样我们可以得到 OLinear, FFN 中 upLinear 和 downLinear 权重的形状. 以及 Cross-Attention 模块的对应信息。由于之前遍历是从第二个 block 开始的，因此总层数要 ＋1. 最后将得到的参数打包成一个字典返回。\nCommunication View 我们以同样的方式定义各种集合通信算子的 visit 函数用于评估该算子的通信量，遍历到对应的 ir 后调用它。\nAllReduce 将所有的数据通过规约操作集成到各个设备中。\nAllReduce\n在 Ring-AllReduce 的 ReduceScatter 步骤中，每个进程发送 M 个元素 N-1 次，总共为 M(N-1). 在 AllGather 步骤中，每个进程发送它计算的块的结果。这是额外的 M 个元素发送了 N-1 次。总的通信量加起来是 2M(N-1).\nRing-AllReduce\nAll-Gather 示意图如下，每个设备开始拥有初始的一部分数据，通信后每个设备都有一份完整的数据。总的通信量为 M(N-1).\nAllGather\nAll2All 示意图如下，每个设备把自己的第 i 块数据发送给第 i 个设备。\nAll2All\n基于 Bruck 算法的 All2All 流程如下\n局部循环移位 (Local Shift of Data-Blocks) 每个进程将其本地的数据块重新排列，进行初始的循环移位。对于进程 p 和数据块索引 i: R[i]=S[(p+i)%P]. 其中 S[i] 是进程本地初始的数据，R[i] 是移位后的数据。 全局通信 (Global Communication) 一共进行 log(P) 次通信。 每一步中每个进程将一部分数据发送给相邻的进程，并接收相邻进程发送的数据。若数据块索引 i 用 radix-2 表示的第 k 位为 1，则数据块会被发送到目标进程。 对于进程 p: 发送数据到进程 ((p + 2^k) % P)，接收来自进程 ((p - 2^k) % P) 的数据。 每次发送后，进程将接收到的数据更新到其本地数据中。 局部逆向移位 (Local Inverse Shift of Data-Blocks) 在完成所有全局通信之后，每个进程执行逆向移位，以恢复数据块的正确顺序。对于每个数据块索引 i: R[i]=R[(p−i+P)%P] 在进程是 2 次幂的情况下每个设备每次要通信 M*P/2大小的数据，总共为 MPlog(P)/2.\nExample of the Bruck Algorithm with 4 Processes\nTFLOPS View 计算量主要分成两种，element-wise 的操作计算量为元素个数。两个形状分别为 mxk 和 kxn 的矩阵相乘计算量为 2mkn. 被计入 element-wise 操作的算子有 add, subtract, multiply, divide, rsqrt, negate, exponential. 被计入矩阵乘法的算子有 dot, dot_general.\nPerformance Analysis 我们根据提取出的 Transformer block 的信息送入性能分析器进行分析. tx8 的配置如下\nParameter Value TILE_NUM 16 SRAM (MB) 3 NOC BW (GB/s) 128 DRAM BW (GB/s) 100 DRAM LATENCY (us) 0.1 GEMM (TFLOPS) 8 VECTOR (TOPS) 0.0625 HOP LATENCY (us) 0.01 根据提取出的信息构建的 STDiT 的 spt_blk, tmp_blk, cross_blk 的参数字典如下.\n1 2 3 4 5 6 7 spatial_config = {\u0026#34;B\u0026#34;: self.config[\u0026#34;B_spt\u0026#34;], \u0026#34;S_Q\u0026#34;: self.config[\u0026#34;S_Q_spt\u0026#34;], \u0026#34;S_KV\u0026#34;: self.config[\u0026#34;S_KV_spt\u0026#34;], \u0026#34;D_QKV\u0026#34;: self.config[\u0026#34;D_QKV\u0026#34;], \u0026#34;H_QKV\u0026#34;: self.config[\u0026#34;H_QKV\u0026#34;], \u0026#34;N_A\u0026#34;: self.config[\u0026#34;N_A\u0026#34;], \u0026#34;H_A\u0026#34;: self.config[\u0026#34;H_A\u0026#34;], \u0026#34;D_O\u0026#34;: self.config[\u0026#34;D_O_spt\u0026#34;], \u0026#34;H_O\u0026#34;: self.config[\u0026#34;H_O_spt\u0026#34;] } temporal_config = {\u0026#34;B\u0026#34;: self.config[\u0026#34;B_tmp\u0026#34;], \u0026#34;S_Q\u0026#34;: self.config[\u0026#34;S_Q_tmp\u0026#34;], \u0026#34;S_KV\u0026#34;: self.config[\u0026#34;S_KV_tmp\u0026#34;], \u0026#34;D_QKV\u0026#34;: self.config[\u0026#34;D_QKV\u0026#34;], \u0026#34;H_QKV\u0026#34;: self.config[\u0026#34;H_QKV\u0026#34;], \u0026#34;N_A\u0026#34;: self.config[\u0026#34;N_A\u0026#34;], \u0026#34;H_A\u0026#34;: self.config[\u0026#34;H_A\u0026#34;], \u0026#34;D_O\u0026#34;: self.config[\u0026#34;D_O_tmp\u0026#34;], \u0026#34;H_O\u0026#34;: self.config[\u0026#34;H_O_tmp\u0026#34;] } cross_config = {\u0026#34;B\u0026#34;: self.config[\u0026#34;B_cro\u0026#34;], \u0026#34;S_Q\u0026#34;: self.config[\u0026#34;S_Q_cro\u0026#34;], \u0026#34;S_KV\u0026#34;: self.config[\u0026#34;S_KV_cro\u0026#34;], \u0026#34;D_QKV\u0026#34;: self.config[\u0026#34;D_QKV\u0026#34;], \u0026#34;H_QKV\u0026#34;: self.config[\u0026#34;H_QKV\u0026#34;],\u0026#34;N_A\u0026#34;: self.config[\u0026#34;N_A\u0026#34;], \u0026#34;H_A\u0026#34;: self.config[\u0026#34;H_A\u0026#34;], \u0026#34;D_O\u0026#34;: self.config[\u0026#34;D_O_cro\u0026#34;], \u0026#34;H_O\u0026#34;: self.config[\u0026#34;H_O_cro\u0026#34;], \u0026#34;D_FU\u0026#34;: self.config[\u0026#34;D_FU\u0026#34;], \u0026#34;H_FU\u0026#34;: self.config[\u0026#34;H_FU\u0026#34;], \u0026#34;D_FD\u0026#34;: self.config[\u0026#34;D_FD\u0026#34;], \u0026#34;H_FD\u0026#34;: self.config[\u0026#34;H_FD\u0026#34;]} 根据这些参数再构建每个层的输入输出形状，计算类型和计算量，以 Gate_ResAdd 为例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 GB = 2**30 class Gate_ResAdd(): \u0026#39;\u0026#39;\u0026#39; Construct each op after MHSA on the config file \u0026#39;\u0026#39;\u0026#39; def __init__(self, config: dict, name: str) -\u0026gt; None: self.config = config self.name = name # {name:{type:\u0026#34;\u0026#34;, size:\u0026#34;\u0026#34;, ishape:[], wshape:[]/None, oshape:[]}} self.ops = {} self.construct_model() def construct_model(self): GB = 2**30 ResAdd_input_shape = [self.config[\u0026#39;B\u0026#39;], self.config[\u0026#39;S_Q\u0026#39;], self.config[\u0026#39;D_O\u0026#39;]] ResAdd_weight_shape = [1, self.config[\u0026#39;D_O\u0026#39;]] ResAdd_output_shape = ResAdd_input_shape ResAdd_compute = 2*ResAdd_input_shape[0]*ResAdd_input_shape[1]*ResAdd_input_shape[2]/GB self.ops[self.name+\u0026#34;_\u0026#34;+\u0026#34;ResAdd\u0026#34;] = {\u0026#34;name\u0026#34;:\u0026#34;ResAdd\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Vector\u0026#34;, \u0026#34;ishape\u0026#34;: ResAdd_input_shape, \u0026#34;wshape\u0026#34;: ResAdd_weight_shape, \u0026#34;oshape\u0026#34;: ResAdd_output_shape, \u0026#34;compute\u0026#34;: ResAdd_compute} 就像这样构建整个 Transformer block 的所有操作\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class STDIT2_block(): def __init__(self, config) -\u0026gt; None: self.config = config # {name:{type:\u0026#34;\u0026#34;, size:\u0026#34;\u0026#34;, ishape:[], wshape:[]/None, oshape:[]}} self.ops = {} self.construct_model() def construct_model(self): spatial_config = {\u0026#34;B\u0026#34;: self.config[\u0026#34;B_spt\u0026#34;], \u0026#34;S_Q\u0026#34;: self.config[\u0026#34;S_Q_spt\u0026#34;], \u0026#34;S_KV\u0026#34;: self.config[\u0026#34;S_KV_spt\u0026#34;], \u0026#34;D_QKV\u0026#34;: self.config[\u0026#34;D_QKV\u0026#34;], \u0026#34;H_QKV\u0026#34;: self.config[\u0026#34;H_QKV\u0026#34;], \u0026#34;N_A\u0026#34;: self.config[\u0026#34;N_A\u0026#34;], \u0026#34;H_A\u0026#34;: self.config[\u0026#34;H_A\u0026#34;], \u0026#34;D_O\u0026#34;: self.config[\u0026#34;D_O_spt\u0026#34;], \u0026#34;H_O\u0026#34;: self.config[\u0026#34;H_O_spt\u0026#34;] } temporal_config = {\u0026#34;B\u0026#34;: self.config[\u0026#34;B_tmp\u0026#34;], \u0026#34;S_Q\u0026#34;: self.config[\u0026#34;S_Q_tmp\u0026#34;], \u0026#34;S_KV\u0026#34;: self.config[\u0026#34;S_KV_tmp\u0026#34;], \u0026#34;D_QKV\u0026#34;: self.config[\u0026#34;D_QKV\u0026#34;], \u0026#34;H_QKV\u0026#34;: self.config[\u0026#34;H_QKV\u0026#34;], \u0026#34;N_A\u0026#34;: self.config[\u0026#34;N_A\u0026#34;], \u0026#34;H_A\u0026#34;: self.config[\u0026#34;H_A\u0026#34;], \u0026#34;D_O\u0026#34;: self.config[\u0026#34;D_O_tmp\u0026#34;], \u0026#34;H_O\u0026#34;: self.config[\u0026#34;H_O_tmp\u0026#34;] } cross_config = {\u0026#34;B\u0026#34;: self.config[\u0026#34;B_cro\u0026#34;], \u0026#34;S_Q\u0026#34;: self.config[\u0026#34;S_Q_cro\u0026#34;], \u0026#34;S_KV\u0026#34;: self.config[\u0026#34;S_KV_cro\u0026#34;], \u0026#34;D_QKV\u0026#34;: self.config[\u0026#34;D_QKV\u0026#34;], \u0026#34;H_QKV\u0026#34;: self.config[\u0026#34;H_QKV\u0026#34;],\u0026#34;N_A\u0026#34;: self.config[\u0026#34;N_A\u0026#34;], \u0026#34;H_A\u0026#34;: self.config[\u0026#34;H_A\u0026#34;], \u0026#34;D_O\u0026#34;: self.config[\u0026#34;D_O_cro\u0026#34;], \u0026#34;H_O\u0026#34;: self.config[\u0026#34;H_O_cro\u0026#34;], \u0026#34;D_FU\u0026#34;: self.config[\u0026#34;D_FU\u0026#34;], \u0026#34;H_FU\u0026#34;: self.config[\u0026#34;H_FU\u0026#34;], \u0026#34;D_FD\u0026#34;: self.config[\u0026#34;D_FD\u0026#34;], \u0026#34;H_FD\u0026#34;: self.config[\u0026#34;H_FD\u0026#34;]} self.spatial_modulate = Modulate(spatial_config, name=\u0026#34;spatial\u0026#34;) self.spatial_block = MHSA_block(spatial_config, name=\u0026#34;spatial\u0026#34;) self.spatial_gate_resadd = Gate_ResAdd(spatial_config, name=\u0026#34;spatial\u0026#34;) self.temporal_modulate = Modulate(temporal_config, name=\u0026#34;temporal\u0026#34;) self.temporal_block = MHSA_block(temporal_config, name=\u0026#34;temporal\u0026#34;) self.temporal_gate_resadd = Gate_ResAdd(temporal_config, name=\u0026#34;temporal\u0026#34;) self.cross_block = MHSA_block(cross_config, name=\u0026#34;cross\u0026#34;) self.cross_gate_resadd = Gate_ResAdd(cross_config, name=\u0026#34;cross\u0026#34;) self.mlp_modulate = Modulate(cross_config, name=\u0026#34;mlp\u0026#34;) self.ffn_block = FFN_block(cross_config) self.mlp_gate_resadd = Gate_ResAdd(cross_config, name=\u0026#34;mlp\u0026#34;) op_list = [self.spatial_modulate.ops, self.spatial_block.ops, self.spatial_gate_resadd.ops, self.temporal_modulate.ops, self.temporal_block.ops, self.temporal_gate_resadd.ops, self.cross_block.ops, self.cross_gate_resadd.ops, self.mlp_modulate.ops, self.ffn_block.ops, self.mlp_gate_resadd.ops] for op_dict in op_list: self.ops.update(op_dict) print(self.ops.keys()) 然后就可以将构建好的 ops 放入 mapper 进行分析。刚才那些操作会被分成 3 类 vector_mapper, gemm_auto_opt_mapper 和 flashatten_mapper. 我们根据操作的类型送入对应的 mapper 进行分析，具体如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def STDIT2_mapper(model, arch, QKV_fusion=True, preset=True, details=True): config = model.config Layers = config[\u0026#39;L\u0026#39;] spatial_config = {\u0026#39;B\u0026#39;: config[\u0026#39;B_spt\u0026#39;], \u0026#39;S_Q\u0026#39;: config[\u0026#39;S_Q_spt\u0026#39;], \u0026#39;S_KV\u0026#39;: config[\u0026#39;S_KV_spt\u0026#39;], \u0026#39;H_A\u0026#39;: config[\u0026#39;H_A\u0026#39;], \u0026#39;N_A\u0026#39;: config[\u0026#39;N_A\u0026#39;], \u0026#39;Q\u0026#39;: config[\u0026#39;Q\u0026#39;]} temporal_config = {\u0026#39;B\u0026#39;: config[\u0026#39;B_tmp\u0026#39;], \u0026#39;S_Q\u0026#39;: config[\u0026#39;S_Q_tmp\u0026#39;], \u0026#39;S_KV\u0026#39;: config[\u0026#39;S_KV_tmp\u0026#39;], \u0026#39;H_A\u0026#39;: config[\u0026#39;H_A\u0026#39;], \u0026#39;N_A\u0026#39;: config[\u0026#39;N_A\u0026#39;], \u0026#39;Q\u0026#39;: config[\u0026#39;Q\u0026#39;]} cross_config = {\u0026#39;B\u0026#39;: config[\u0026#39;B_cro\u0026#39;], \u0026#39;S_Q\u0026#39;: config[\u0026#39;S_Q_cro\u0026#39;], \u0026#39;S_KV\u0026#39;: config[\u0026#39;S_KV_cro\u0026#39;], \u0026#39;H_A\u0026#39;: config[\u0026#39;H_A\u0026#39;], \u0026#39;N_A\u0026#39;: config[\u0026#39;N_A\u0026#39;], \u0026#39;Q\u0026#39;: config[\u0026#39;Q\u0026#39;]} ops = model.ops mapping_result = {} \u0026#39;\u0026#39;\u0026#39;========================= == Spatial Branch Mapping == =========================\u0026#39;\u0026#39;\u0026#39; TmTn = [256, 32] if preset else None mapping_result[\u0026#39;spatial_Modulate\u0026#39;] = vector_mapper(ops[\u0026#39;spatial_Modulate\u0026#39;],arch,splits=None,details=details) mapping_result[\u0026#39;spatial_RMSNorm\u0026#39;]= vector_mapper(ops[\u0026#39;spatial_RMSNorm\u0026#39;],arch,splits=None,details=details) mapping_result[\u0026#39;spatial_Q_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;spatial_Q_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;spatial_K_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;spatial_K_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;spatial_V_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;spatial_V_proj\u0026#39;], arch, TmTn=TmTn, details=details) Tx_Ty = [256, 256] if preset else None mapping_result[\u0026#39;spatial_Flashatten\u0026#39;] = flashatten_mapper(spatial_config, arch, Tx_Ty=Tx_Ty, details=details, Head_fused=True) # FIXME mapping_result[\u0026#39;spatial_ResAdd\u0026#39;]=vector_mapper(ops[\u0026#39;spatial_ResAdd\u0026#39;],arch,splits=None,details=details) \u0026#39;\u0026#39;\u0026#39;========================== == Temporal Branch Mapping == ==========================\u0026#39;\u0026#39;\u0026#39; mapping_result[\u0026#39;temporal_Modulate\u0026#39;] = vector_mapper(ops[\u0026#39;temporal_Modulate\u0026#39;],arch,splits=None,details=details) # 切分 30 份也无法满足SRAM要求 mapping_result[\u0026#39;temporal_RMSNorm\u0026#39;]= vector_mapper(ops[\u0026#39;temporal_RMSNorm\u0026#39;],arch,splits=None,details=details) mapping_result[\u0026#39;temporal_Q_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;temporal_Q_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;temporal_K_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;temporal_K_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;temporal_V_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;temporal_V_proj\u0026#39;], arch, TmTn=TmTn, details=details) Tx_Ty = [256, 256] if preset else None mapping_result[\u0026#39;temporal_Flashatten\u0026#39;] = flashatten_mapper(temporal_config, arch, Tx_Ty=Tx_Ty, details=details, Head_fused=True) # FIXME mapping_result[\u0026#39;temporal_ResAdd\u0026#39;]=vector_mapper(ops[\u0026#39;temporal_ResAdd\u0026#39;],arch,splits=None,details=details) \u0026#39;\u0026#39;\u0026#39;==================================== == Cross Branch Mapping 2x per block == ====================================\u0026#39;\u0026#39;\u0026#39; #mapping_result[\u0026#39;spatial_RMSNorm\u0026#39;]= vector_mapper(ops[\u0026#39;spatial_RMSNorm\u0026#39;],arch,splits=None,details=details) mapping_result[\u0026#39;cross_Q_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;cross_Q_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;cross_Q_proj_2\u0026#39;] = mapping_result[\u0026#39;cross_Q_proj\u0026#39;] mapping_result[\u0026#39;cross_K_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;cross_K_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;cross_K_proj_2\u0026#39;] = mapping_result[\u0026#39;cross_K_proj\u0026#39;] mapping_result[\u0026#39;cross_V_proj\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;cross_V_proj\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;cross_V_proj_2\u0026#39;] = mapping_result[\u0026#39;cross_V_proj\u0026#39;] Tx_Ty = [256, 256] if preset else None mapping_result[\u0026#39;cross_Flashatten\u0026#39;] = flashatten_mapper(cross_config, arch, Tx_Ty=Tx_Ty, details=details, Head_fused=True) # FIXME mapping_result[\u0026#39;cross_Flashatten_2\u0026#39;] = mapping_result[\u0026#39;cross_Flashatten\u0026#39;] mapping_result[\u0026#39;cross_ResAdd\u0026#39;] = vector_mapper(ops[\u0026#39;cross_ResAdd\u0026#39;],arch,splits=None,details=details) # HACK: Gate_ResAdd *2 了, cross 无gate 这里无 _2 \u0026#39;\u0026#39;\u0026#39;==================================== == Feed Forward Network 2x per block == ====================================\u0026#39;\u0026#39;\u0026#39; mapping_result[\u0026#39;mlp_Modulate\u0026#39;] = vector_mapper(ops[\u0026#39;mlp_Modulate\u0026#39;],arch,splits=None,details=details) mapping_result[\u0026#39;mlp_Modulate_2\u0026#39;] = mapping_result[\u0026#39;mlp_Modulate\u0026#39;] mapping_result[\u0026#39;FFNup\u0026amp;SiLU\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;FFNup\u0026#39;],arch,TmTn=TmTn,fusion_op2=ops[\u0026#39;SiLU\u0026#39;],details=details) mapping_result[\u0026#39;FFNup\u0026amp;SiLU_2\u0026#39;] = mapping_result[\u0026#39;FFNup\u0026amp;SiLU\u0026#39;] # mapping_result[\u0026#39;FFNgate\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;FFNgate\u0026#39;], arch, TmTn=TmTn, details=details) # mapping_result[\u0026#39;Hadamard\u0026#39;] = vector_mapper(ops[\u0026#39;Hadamard\u0026#39;], arch, splits=None) TmTn = [4, 128] if preset else None mapping_result[\u0026#39;FFNdown\u0026#39;] = gemm_auto_opt_mapper(ops[\u0026#39;FFNdown\u0026#39;], arch, TmTn=TmTn, details=details) mapping_result[\u0026#39;FFNdown_2\u0026#39;] = mapping_result[\u0026#39;FFNdown\u0026#39;] mapping_result[\u0026#39;mlp_ResAdd\u0026#39;] = vector_mapper(ops[\u0026#39;mlp_ResAdd\u0026#39;], arch, splits=None, details=details) mapping_result[\u0026#39;mlp_ResAdd_2\u0026#39;] = mapping_result[\u0026#39;mlp_ResAdd\u0026#39;] mapper 会遍历所有可能的切分策略放入 tx8 执行并选择最好的那一个。对于 vector 类型的算子只会沿着 sequence 维度切分；对于 GEMM 算子则会沿着 m, k, n 维度都进行切分；对于 flash-attention 的切分则与原算法相同，外循环遍历 K, V 的每一块，内循环遍历 Q 的每一块。这样就可以得到每个 tx8 上最优的切分方式对应的通信用时，计算用时和利用率。再用之前统计出的每个 die 上通信量除以 die2die 带宽得到通信用时，由此得到总的推理用时。\n","permalink":"http://localhost:1313/blogs/comparsion-of-parallelsim-metods-in-vit/","summary":"Paper reading of","title":"Comparsion of Parallelsim Metods in ViT"},{"content":" luminolt\u0026#39;s Page Cryptography Learner Jonathan523\u0026#39;s Page 每一个不曾起舞的日子, 都是对生命的辜负 ","permalink":"http://localhost:1313/friends/","summary":"\u003cp\u003e\u003ca target=\"_blank\" href=https://luminolt.cn/ title=luminolt\u0026#39;s\u0026#32;Page class=\"friendurl\"\u003e\n  \u003cdiv class=\"frienddiv\"\u003e\n    \u003cdiv class=\"frienddivleft\"\u003e\n      \u003cimg class=\"myfriend\" src=https://luminolt.cn/author/chenghao-chen/avatar_hu15811225952467136947.jpg /\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"frienddivright\"\u003e\n      \u003cdiv class=\"friendname\"\u003eluminolt\u0026#39;s Page\u003c/div\u003e\n      \u003cdiv class=\"friendinfo\"\u003eCryptography Learner\u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/a\u003e\n\u003ca target=\"_blank\" href=https://www.cestlavie.moe/ title=Jonathan523\u0026#39;s\u0026#32;Page class=\"friendurl\"\u003e\n  \u003cdiv class=\"frienddiv\"\u003e\n    \u003cdiv class=\"frienddivleft\"\u003e\n      \u003cimg class=\"myfriend\" src=/imgs/people/Jonathan523.png /\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"frienddivright\"\u003e\n      \u003cdiv class=\"friendname\"\u003eJonathan523\u0026#39;s Page\u003c/div\u003e\n      \u003cdiv class=\"friendinfo\"\u003e每一个不曾起舞的日子, 都是对生命的辜负\u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/a\u003e\u003c/p\u003e","title":"Friends"}]